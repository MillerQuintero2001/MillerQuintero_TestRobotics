/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include "FreeRTOS.h"
#include "task.h"
#include <stm32f4xx.h>

#include <stdint.h>
#include <stdio.h>

#include "GPIOxDriver.h"

#define STACK_SIZE 200

/* Definici칩n de variables del sistema */
uint32_t SystemCoreClock = 16000000;

/* Prototipos de funciones */
void vTaskOne( void * pvParameters );
void vTaskTwo( void * pvParameters );

int main(void)
{

	/* Activamos la unidad de punto flotante (FPU) */
	SCB->CPACR    |= (0xF << 20);

	/* Activamos del contador de Ticks */
	DWT->CTRL    |= (1 << 0);

	/* Necesario para el SEGGER*/
	vInitPrioGroupValue();

	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
	/* Despues activamos el sistema */
	SEGGER_SYSVIEW_Start();

	BaseType_t xReturned;
	TaskHandle_t xHandleTask1 = NULL;
	TaskHandle_t xHandleTask2 = NULL;

    xReturned = xTaskCreate(
    				vTaskOne,       /* Function that implements the task. */
                    "Task-1",          /* Text name for the task. */
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-1",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask1 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);

    xReturned = xTaskCreate(
    				vTaskTwo,       /* Function that implements the task. */
                    "Task-2",          /* Text name for the task. */
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-2",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask2 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);

    vTaskStartScheduler();

    /* Loop forever */
	while(1){
		/* Si llegamos ac치, es que algo falla */

	}
}

/** Funci칩n que gobierna la tarea 1 */
void vTaskOne( void * pvParameters )
{


    while(1)
    {
        /* Task code goes here. */
    	printf("%s\n", (char*)pvParameters);
    	taskYIELD();
    }
}

/** Funci칩n que gobierna la tarea 2 */
void vTaskTwo( void * pvParameters )
{


    while(1)
    {
        /* Task code goes here. */
    	printf("%s\n", (char*)pvParameters);
    	taskYIELD();
    }
}
