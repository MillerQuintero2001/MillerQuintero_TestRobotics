
Ejemplo LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004938  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c04  08004c04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c04  08004c04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c04  08004c04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c04  08004c04  00014c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014458  2000000c  08004c18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014464  08004c18  00024464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bece  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b19  00000000  00000000  0002bf0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002da28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b3e  00000000  00000000  0002ed90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6f2  00000000  00000000  000408ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000636d6  00000000  00000000  0004bfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a20  00000000  00000000  000af6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ac0 	.word	0x08004ac0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08004ac0 	.word	0x08004ac0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012e90 	.word	0x20012e90

08000274 <main>:
void initSystem(void);
void vTask_Blink_Led( void * pvParameters );
void vTaskTwo( void * pvParameters );

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af02      	add	r7, sp, #8

	initSystem();
 800027a:	f000 f85d 	bl	8000338 <initSystem>

	/* Activamos la unidad de punto flotante (FPU) */
	SCB->CPACR    |= (0xF << 20);
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <main+0x9c>)
 8000280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000284:	4a22      	ldr	r2, [pc, #136]	; (8000310 <main+0x9c>)
 8000286:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800028a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Activamos del contador de Ticks */
	DWT->CTRL    |= (1 << 0);
 800028e:	4b21      	ldr	r3, [pc, #132]	; (8000314 <main+0xa0>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a20      	ldr	r2, [pc, #128]	; (8000314 <main+0xa0>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6013      	str	r3, [r2, #0]

	/* Necesario para el SEGGER*/
	vInitPrioGroupValue();
 800029a:	f002 fa15 	bl	80026c8 <vInitPrioGroupValue>

	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 800029e:	f002 fd97 	bl	8002dd0 <SEGGER_SYSVIEW_Conf>
	/* Despues activamos el sistema */
	SEGGER_SYSVIEW_Start();
 80002a2:	f003 fcc7 	bl	8003c34 <SEGGER_SYSVIEW_Start>

	BaseType_t xReturned;


    xReturned = xTaskCreate(
 80002a6:	4b1c      	ldr	r3, [pc, #112]	; (8000318 <main+0xa4>)
 80002a8:	9301      	str	r3, [sp, #4]
 80002aa:	2302      	movs	r3, #2
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	4b1b      	ldr	r3, [pc, #108]	; (800031c <main+0xa8>)
 80002b0:	22c8      	movs	r2, #200	; 0xc8
 80002b2:	491b      	ldr	r1, [pc, #108]	; (8000320 <main+0xac>)
 80002b4:	481b      	ldr	r0, [pc, #108]	; (8000324 <main+0xb0>)
 80002b6:	f000 fca7 	bl	8000c08 <xTaskCreate>
 80002ba:	60f8      	str	r0, [r7, #12]
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-1",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask1 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d00a      	beq.n	80002d8 <main+0x64>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002c6:	f383 8811 	msr	BASEPRI, r3
 80002ca:	f3bf 8f6f 	isb	sy
 80002ce:	f3bf 8f4f 	dsb	sy
 80002d2:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002d4:	bf00      	nop
 80002d6:	e7fe      	b.n	80002d6 <main+0x62>

    xReturned = xTaskCreate(
 80002d8:	4b13      	ldr	r3, [pc, #76]	; (8000328 <main+0xb4>)
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	2302      	movs	r3, #2
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <main+0xb8>)
 80002e2:	22c8      	movs	r2, #200	; 0xc8
 80002e4:	4912      	ldr	r1, [pc, #72]	; (8000330 <main+0xbc>)
 80002e6:	4813      	ldr	r0, [pc, #76]	; (8000334 <main+0xc0>)
 80002e8:	f000 fc8e 	bl	8000c08 <xTaskCreate>
 80002ec:	60f8      	str	r0, [r7, #12]
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-2",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask2 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d00a      	beq.n	800030a <main+0x96>
        __asm volatile
 80002f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002f8:	f383 8811 	msr	BASEPRI, r3
 80002fc:	f3bf 8f6f 	isb	sy
 8000300:	f3bf 8f4f 	dsb	sy
 8000304:	607b      	str	r3, [r7, #4]
    }
 8000306:	bf00      	nop
 8000308:	e7fe      	b.n	8000308 <main+0x94>

    vTaskStartScheduler();
 800030a:	f000 fe3d 	bl	8000f88 <vTaskStartScheduler>

    /* Loop forever */
	while(1){
 800030e:	e7fe      	b.n	800030e <main+0x9a>
 8000310:	e000ed00 	.word	0xe000ed00
 8000314:	e0001000 	.word	0xe0001000
 8000318:	20000040 	.word	0x20000040
 800031c:	08004ad8 	.word	0x08004ad8
 8000320:	08004af4 	.word	0x08004af4
 8000324:	08000395 	.word	0x08000395
 8000328:	20000044 	.word	0x20000044
 800032c:	08004b00 	.word	0x08004b00
 8000330:	08004b1c 	.word	0x08004b1c
 8000334:	080003e9 	.word	0x080003e9

08000338 <initSystem>:

	}
}

/** Función que inicia todo el sistema*/
void initSystem(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

	/* GPIO y Timer del Blinky Led de Estado PA5 */
	handlerBlinkyPin.pGPIOx								= GPIOA;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <initSystem+0x4c>)
 800033e:	4a12      	ldr	r2, [pc, #72]	; (8000388 <initSystem+0x50>)
 8000340:	601a      	str	r2, [r3, #0]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinNumber 		= PIN_5;
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <initSystem+0x4c>)
 8000344:	2205      	movs	r2, #5
 8000346:	711a      	strb	r2, [r3, #4]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_OUT;
 8000348:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <initSystem+0x4c>)
 800034a:	2201      	movs	r2, #1
 800034c:	715a      	strb	r2, [r3, #5]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinSpeed 		= GPIO_OSPEED_FAST;
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <initSystem+0x4c>)
 8000350:	2202      	movs	r2, #2
 8000352:	719a      	strb	r2, [r3, #6]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinOPType 		= GPIO_OTYPE_PUSHPULL;
 8000354:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <initSystem+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	721a      	strb	r2, [r3, #8]
	// Cargo la configuración
	GPIO_Config(&handlerBlinkyPin);
 800035a:	480a      	ldr	r0, [pc, #40]	; (8000384 <initSystem+0x4c>)
 800035c:	f004 f9d6 	bl	800470c <GPIO_Config>
	// Pongo estado en alto
	GPIO_WritePin(&handlerBlinkyPin, SET);
 8000360:	2101      	movs	r1, #1
 8000362:	4808      	ldr	r0, [pc, #32]	; (8000384 <initSystem+0x4c>)
 8000364:	f004 fafc 	bl	8004960 <GPIO_WritePin>

	/* GPIO y Timer del Blinky Led de Estado PA5 */
	handlerButton.pGPIOx								= GPIOC;
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <initSystem+0x54>)
 800036a:	4a09      	ldr	r2, [pc, #36]	; (8000390 <initSystem+0x58>)
 800036c:	601a      	str	r2, [r3, #0]
	handlerButton.GPIO_PinConfig.GPIO_PinNumber 		= PIN_13;
 800036e:	4b07      	ldr	r3, [pc, #28]	; (800038c <initSystem+0x54>)
 8000370:	220d      	movs	r2, #13
 8000372:	711a      	strb	r2, [r3, #4]
	handlerButton.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <initSystem+0x54>)
 8000376:	2200      	movs	r2, #0
 8000378:	715a      	strb	r2, [r3, #5]
	// Cargo la configuración
	GPIO_Config(&handlerButton);
 800037a:	4804      	ldr	r0, [pc, #16]	; (800038c <initSystem+0x54>)
 800037c:	f004 f9c6 	bl	800470c <GPIO_Config>
//	handlerBlinkyTimer.TIMx_Config.TIMx_speed				= BTIMER_SPEED_100us;
//	handlerBlinkyTimer.TIMx_Config.TIMx_period				= 2500;
//	handlerBlinkyTimer.TIMx_Config.TIMx_interruptEnable 	= BTIMER_INTERRUP_ENABLE;
//	BasicTimer_Config(&handlerBlinkyTimer);
//	// Fin del GPIO y Timer del LED de estado
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000028 	.word	0x20000028
 8000388:	40020000 	.word	0x40020000
 800038c:	20000034 	.word	0x20000034
 8000390:	40020800 	.word	0x40020800

08000394 <vTask_Blink_Led>:

/** Función que gobierna la tarea 1 */
void vTask_Blink_Led( void * pvParameters )
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af02      	add	r7, sp, #8
 800039a:	6078      	str	r0, [r7, #4]
	BaseType_t notify = {0};
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
	uint8_t change_state = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	72fb      	strb	r3, [r7, #11]


    while(1)
    {
        /* Task code goes here. */
    	if(notify == pdTRUE){
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d106      	bne.n	80003b8 <vTask_Blink_Led+0x24>
    		change_state = !change_state;
 80003aa:	7afb      	ldrb	r3, [r7, #11]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bf0c      	ite	eq
 80003b0:	2301      	moveq	r3, #1
 80003b2:	2300      	movne	r3, #0
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	72fb      	strb	r3, [r7, #11]
    	}

    	if(change_state){
 80003b8:	7afb      	ldrb	r3, [r7, #11]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d003      	beq.n	80003c6 <vTask_Blink_Led+0x32>
    		GPIOxTooglePin(&handlerBlinkyPin);
 80003be:	4809      	ldr	r0, [pc, #36]	; (80003e4 <vTask_Blink_Led+0x50>)
 80003c0:	f004 fb1d 	bl	80049fe <GPIOxTooglePin>
 80003c4:	e003      	b.n	80003ce <vTask_Blink_Led+0x3a>
    	}
    	else{
    		GPIO_WritePin(&handlerBlinkyPin, RESET);
 80003c6:	2100      	movs	r1, #0
 80003c8:	4806      	ldr	r0, [pc, #24]	; (80003e4 <vTask_Blink_Led+0x50>)
 80003ca:	f004 fac9 	bl	8004960 <GPIO_WritePin>
    	}
    	//printf("%s\n", (char*)pvParameters);
    	//taskYIELD();
    	notify = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(250));
 80003ce:	23fa      	movs	r3, #250	; 0xfa
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2300      	movs	r3, #0
 80003d4:	2200      	movs	r2, #0
 80003d6:	2100      	movs	r1, #0
 80003d8:	2000      	movs	r0, #0
 80003da:	f001 fb87 	bl	8001aec <xTaskGenericNotifyWait>
 80003de:	60f8      	str	r0, [r7, #12]
    	if(notify == pdTRUE){
 80003e0:	e7e0      	b.n	80003a4 <vTask_Blink_Led+0x10>
 80003e2:	bf00      	nop
 80003e4:	20000028 	.word	0x20000028

080003e8 <vTaskTwo>:
    }
}

/** Función que gobierna la tarea 2 */
void vTaskTwo( void * pvParameters )
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	6078      	str	r0, [r7, #4]

	uint8_t button_state = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_button_state = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	73fb      	strb	r3, [r7, #15]

    while(1)
    {
        /* Task code goes here. */
    	button_state = GPIO_ReadPin(&handlerButton);
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <vTaskTwo+0x44>)
 80003fa:	f004 fadc 	bl	80049b6 <GPIO_ReadPin>
 80003fe:	4603      	mov	r3, r0
 8000400:	73bb      	strb	r3, [r7, #14]

    	if(button_state){
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d00b      	beq.n	8000420 <vTaskTwo+0x38>
    		if(!prev_button_state){
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d108      	bne.n	8000420 <vTaskTwo+0x38>
    			// Notificación
    			xTaskNotify(xHandleTask1,0,eNoAction);
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <vTaskTwo+0x48>)
 8000410:	6818      	ldr	r0, [r3, #0]
 8000412:	2300      	movs	r3, #0
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2300      	movs	r3, #0
 8000418:	2200      	movs	r2, #0
 800041a:	2100      	movs	r1, #0
 800041c:	f001 fbee 	bl	8001bfc <xTaskGenericNotify>
    		}
    	}
    	prev_button_state = button_state;
 8000420:	7bbb      	ldrb	r3, [r7, #14]
 8000422:	73fb      	strb	r3, [r7, #15]
    	vTaskDelay(pdMS_TO_TICKS(10));
 8000424:	200a      	movs	r0, #10
 8000426:	f000 fd77 	bl	8000f18 <vTaskDelay>
    	button_state = GPIO_ReadPin(&handlerButton);
 800042a:	e7e5      	b.n	80003f8 <vTaskTwo+0x10>
 800042c:	20000034 	.word	0x20000034
 8000430:	20000040 	.word	0x20000040

08000434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000436:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000438:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800043c:	480c      	ldr	r0, [pc, #48]	; (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043e:	490d      	ldr	r1, [pc, #52]	; (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <LoopForever+0xe>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000454:	4c0a      	ldr	r4, [pc, #40]	; (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000462:	f004 fae3 	bl	8004a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000466:	f7ff ff05 	bl	8000274 <main>

0800046a <LoopForever>:

LoopForever:
    b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   r0, =_estack
 800046c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000478:	08004c0c 	.word	0x08004c0c
  ldr r2, =_sbss
 800047c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000480:	20014464 	.word	0x20014464

08000484 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC_IRQHandler>

08000486 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000486:	b480      	push	{r7}
 8000488:	b083      	sub	sp, #12
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f103 0208 	add.w	r2, r3, #8
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800049e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f103 0208 	add.w	r2, r3, #8
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f103 0208 	add.w	r2, r3, #8
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004f6:	d103      	bne.n	8000500 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	691b      	ldr	r3, [r3, #16]
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	e00c      	b.n	800051a <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3308      	adds	r3, #8
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	e002      	b.n	800050e <vListInsert+0x2e>
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	68ba      	ldr	r2, [r7, #8]
 8000516:	429a      	cmp	r2, r3
 8000518:	d2f6      	bcs.n	8000508 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	685a      	ldr	r2, [r3, #4]
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	683a      	ldr	r2, [r7, #0]
 8000534:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	1c5a      	adds	r2, r3, #1
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000552:	b480      	push	{r7}
 8000554:	b085      	sub	sp, #20
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	691b      	ldr	r3, [r3, #16]
 800055e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	6892      	ldr	r2, [r2, #8]
 8000568:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	6852      	ldr	r2, [r2, #4]
 8000572:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	429a      	cmp	r2, r3
 800057c:	d103      	bne.n	8000586 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	681b      	ldr	r3, [r3, #0]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
	...

080005a8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80005b2:	2301      	movs	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d10a      	bne.n	80005d6 <xQueueGenericReset+0x2e>
        __asm volatile
 80005c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c4:	f383 8811 	msr	BASEPRI, r3
 80005c8:	f3bf 8f6f 	isb	sy
 80005cc:	f3bf 8f4f 	dsb	sy
 80005d0:	60fb      	str	r3, [r7, #12]
    }
 80005d2:	bf00      	nop
 80005d4:	e7fe      	b.n	80005d4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d05d      	beq.n	8000698 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d059      	beq.n	8000698 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ec:	2100      	movs	r1, #0
 80005ee:	fba3 2302 	umull	r2, r3, r3, r2
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d000      	beq.n	80005f8 <xQueueGenericReset+0x50>
 80005f6:	2101      	movs	r1, #1
 80005f8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d14c      	bne.n	8000698 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80005fe:	f002 f8e1 	bl	80027c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800060a:	6939      	ldr	r1, [r7, #16]
 800060c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800060e:	fb01 f303 	mul.w	r3, r1, r3
 8000612:	441a      	add	r2, r3
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	2200      	movs	r2, #0
 800061c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800062e:	3b01      	subs	r3, #1
 8000630:	6939      	ldr	r1, [r7, #16]
 8000632:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000634:	fb01 f303 	mul.w	r3, r1, r3
 8000638:	441a      	add	r2, r3
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	22ff      	movs	r2, #255	; 0xff
 8000642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	22ff      	movs	r2, #255	; 0xff
 800064a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d114      	bne.n	800067e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d01a      	beq.n	8000692 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	3310      	adds	r3, #16
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f813 	bl	800168c <xTaskRemoveFromEventList>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d012      	beq.n	8000692 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <xQueueGenericReset+0x11c>)
 800066e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	f3bf 8f4f 	dsb	sy
 8000678:	f3bf 8f6f 	isb	sy
 800067c:	e009      	b.n	8000692 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	3310      	adds	r3, #16
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff feff 	bl	8000486 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	3324      	adds	r3, #36	; 0x24
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fefa 	bl	8000486 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000692:	f002 f8c7 	bl	8002824 <vPortExitCritical>
 8000696:	e001      	b.n	800069c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d10a      	bne.n	80006b8 <xQueueGenericReset+0x110>
        __asm volatile
 80006a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a6:	f383 8811 	msr	BASEPRI, r3
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	60bb      	str	r3, [r7, #8]
    }
 80006b4:	bf00      	nop
 80006b6:	e7fe      	b.n	80006b6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80006b8:	697b      	ldr	r3, [r7, #20]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed04 	.word	0xe000ed04

080006c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	4613      	mov	r3, r2
 80006d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d02e      	beq.n	800073e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80006e0:	2100      	movs	r1, #0
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	fba3 2302 	umull	r2, r3, r3, r2
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d000      	beq.n	80006f0 <xQueueGenericCreate+0x28>
 80006ee:	2101      	movs	r1, #1
 80006f0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d123      	bne.n	800073e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80006fe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000702:	d81c      	bhi.n	800073e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	fb02 f303 	mul.w	r3, r2, r3
 800070c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	3350      	adds	r3, #80	; 0x50
 8000712:	4618      	mov	r0, r3
 8000714:	f002 f982 	bl	8002a1c <pvPortMalloc>
 8000718:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d01c      	beq.n	800075a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	3350      	adds	r3, #80	; 0x50
 8000728:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800072a:	79fa      	ldrb	r2, [r7, #7]
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	4613      	mov	r3, r2
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	68b9      	ldr	r1, [r7, #8]
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f000 f814 	bl	8000764 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800073c:	e00d      	b.n	800075a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d10a      	bne.n	800075a <xQueueGenericCreate+0x92>
        __asm volatile
 8000744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000748:	f383 8811 	msr	BASEPRI, r3
 800074c:	f3bf 8f6f 	isb	sy
 8000750:	f3bf 8f4f 	dsb	sy
 8000754:	613b      	str	r3, [r7, #16]
    }
 8000756:	bf00      	nop
 8000758:	e7fe      	b.n	8000758 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800075a:	69fb      	ldr	r3, [r7, #28]
    }
 800075c:	4618      	mov	r0, r3
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d103      	bne.n	8000780 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	69ba      	ldr	r2, [r7, #24]
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e002      	b.n	8000786 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000792:	2101      	movs	r1, #1
 8000794:	69b8      	ldr	r0, [r7, #24]
 8000796:	f7ff ff07 	bl	80005a8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	78fa      	ldrb	r2, [r7, #3]
 800079e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	68f9      	ldr	r1, [r7, #12]
 80007a8:	2073      	movs	r0, #115	; 0x73
 80007aa:	f003 f93b 	bl	8003a24 <SEGGER_SYSVIEW_RecordU32x3>
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b08f      	sub	sp, #60	; 0x3c
 80007bc:	af02      	add	r7, sp, #8
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80007cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10a      	bne.n	80007e8 <xQueueReceive+0x30>
        __asm volatile
 80007d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d6:	f383 8811 	msr	BASEPRI, r3
 80007da:	f3bf 8f6f 	isb	sy
 80007de:	f3bf 8f4f 	dsb	sy
 80007e2:	623b      	str	r3, [r7, #32]
    }
 80007e4:	bf00      	nop
 80007e6:	e7fe      	b.n	80007e6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d103      	bne.n	80007f6 <xQueueReceive+0x3e>
 80007ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <xQueueReceive+0x42>
 80007f6:	2301      	movs	r3, #1
 80007f8:	e000      	b.n	80007fc <xQueueReceive+0x44>
 80007fa:	2300      	movs	r3, #0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10a      	bne.n	8000816 <xQueueReceive+0x5e>
        __asm volatile
 8000800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000804:	f383 8811 	msr	BASEPRI, r3
 8000808:	f3bf 8f6f 	isb	sy
 800080c:	f3bf 8f4f 	dsb	sy
 8000810:	61fb      	str	r3, [r7, #28]
    }
 8000812:	bf00      	nop
 8000814:	e7fe      	b.n	8000814 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000816:	f001 f94b 	bl	8001ab0 <xTaskGetSchedulerState>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <xQueueReceive+0x6e>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <xQueueReceive+0x72>
 8000826:	2301      	movs	r3, #1
 8000828:	e000      	b.n	800082c <xQueueReceive+0x74>
 800082a:	2300      	movs	r3, #0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d10a      	bne.n	8000846 <xQueueReceive+0x8e>
        __asm volatile
 8000830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000834:	f383 8811 	msr	BASEPRI, r3
 8000838:	f3bf 8f6f 	isb	sy
 800083c:	f3bf 8f4f 	dsb	sy
 8000840:	61bb      	str	r3, [r7, #24]
    }
 8000842:	bf00      	nop
 8000844:	e7fe      	b.n	8000844 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000846:	f001 ffbd 	bl	80027c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800084a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800084e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	2b00      	cmp	r3, #0
 8000854:	d02f      	beq.n	80008b6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800085a:	f000 f8bd 	bl	80009d8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800085e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fe0b 	bl	800447c <SEGGER_SYSVIEW_ShrinkId>
 8000866:	4604      	mov	r4, r0
 8000868:	2000      	movs	r0, #0
 800086a:	f003 fe07 	bl	800447c <SEGGER_SYSVIEW_ShrinkId>
 800086e:	4602      	mov	r2, r0
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2101      	movs	r1, #1
 8000874:	9100      	str	r1, [sp, #0]
 8000876:	4621      	mov	r1, r4
 8000878:	205c      	movs	r0, #92	; 0x5c
 800087a:	f003 f949 	bl	8003b10 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	1e5a      	subs	r2, r3, #1
 8000882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000884:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00f      	beq.n	80008ae <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000890:	3310      	adds	r3, #16
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fefa 	bl	800168c <xTaskRemoveFromEventList>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d007      	beq.n	80008ae <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800089e:	4b4d      	ldr	r3, [pc, #308]	; (80009d4 <xQueueReceive+0x21c>)
 80008a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	f3bf 8f4f 	dsb	sy
 80008aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80008ae:	f001 ffb9 	bl	8002824 <vPortExitCritical>
                return pdPASS;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e08a      	b.n	80009cc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d113      	bne.n	80008e4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80008bc:	f001 ffb2 	bl	8002824 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80008c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 fdda 	bl	800447c <SEGGER_SYSVIEW_ShrinkId>
 80008c8:	4604      	mov	r4, r0
 80008ca:	2000      	movs	r0, #0
 80008cc:	f003 fdd6 	bl	800447c <SEGGER_SYSVIEW_ShrinkId>
 80008d0:	4602      	mov	r2, r0
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2101      	movs	r1, #1
 80008d6:	9100      	str	r1, [sp, #0]
 80008d8:	4621      	mov	r1, r4
 80008da:	205c      	movs	r0, #92	; 0x5c
 80008dc:	f003 f918 	bl	8003b10 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80008e0:	2300      	movs	r3, #0
 80008e2:	e073      	b.n	80009cc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80008e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d106      	bne.n	80008f8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 ffa4 	bl	800183c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80008f8:	f001 ff94 	bl	8002824 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80008fc:	f000 fba6 	bl	800104c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000900:	f001 ff60 	bl	80027c4 <vPortEnterCritical>
 8000904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800090a:	b25b      	sxtb	r3, r3
 800090c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000910:	d103      	bne.n	800091a <xQueueReceive+0x162>
 8000912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000920:	b25b      	sxtb	r3, r3
 8000922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000926:	d103      	bne.n	8000930 <xQueueReceive+0x178>
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000930:	f001 ff78 	bl	8002824 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000934:	1d3a      	adds	r2, r7, #4
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f000 ff93 	bl	8001868 <xTaskCheckForTimeOut>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d124      	bne.n	8000992 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800094a:	f000 f8bd 	bl	8000ac8 <prvIsQueueEmpty>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d018      	beq.n	8000986 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000956:	3324      	adds	r3, #36	; 0x24
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fe29 	bl	80015b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000964:	f000 f85e 	bl	8000a24 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000968:	f000 fb7e 	bl	8001068 <xTaskResumeAll>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	f47f af69 	bne.w	8000846 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <xQueueReceive+0x21c>)
 8000976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	f3bf 8f4f 	dsb	sy
 8000980:	f3bf 8f6f 	isb	sy
 8000984:	e75f      	b.n	8000846 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000988:	f000 f84c 	bl	8000a24 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800098c:	f000 fb6c 	bl	8001068 <xTaskResumeAll>
 8000990:	e759      	b.n	8000846 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000994:	f000 f846 	bl	8000a24 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000998:	f000 fb66 	bl	8001068 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800099c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800099e:	f000 f893 	bl	8000ac8 <prvIsQueueEmpty>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f43f af4e 	beq.w	8000846 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80009aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 fd65 	bl	800447c <SEGGER_SYSVIEW_ShrinkId>
 80009b2:	4604      	mov	r4, r0
 80009b4:	2000      	movs	r0, #0
 80009b6:	f003 fd61 	bl	800447c <SEGGER_SYSVIEW_ShrinkId>
 80009ba:	4602      	mov	r2, r0
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2101      	movs	r1, #1
 80009c0:	9100      	str	r1, [sp, #0]
 80009c2:	4621      	mov	r1, r4
 80009c4:	205c      	movs	r0, #92	; 0x5c
 80009c6:	f003 f8a3 	bl	8003b10 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80009ca:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3734      	adds	r7, #52	; 0x34
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd90      	pop	{r4, r7, pc}
 80009d4:	e000ed04 	.word	0xe000ed04

080009d8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d018      	beq.n	8000a1c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68da      	ldr	r2, [r3, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	441a      	add	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d303      	bcc.n	8000a0c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	68d9      	ldr	r1, [r3, #12]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	461a      	mov	r2, r3
 8000a16:	6838      	ldr	r0, [r7, #0]
 8000a18:	f004 f83c 	bl	8004a94 <memcpy>
    }
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000a2c:	f001 feca 	bl	80027c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a36:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a38:	e011      	b.n	8000a5e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d012      	beq.n	8000a68 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3324      	adds	r3, #36	; 0x24
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fe20 	bl	800168c <xTaskRemoveFromEventList>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000a52:	f000 ff6f 	bl	8001934 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	dce9      	bgt.n	8000a3a <prvUnlockQueue+0x16>
 8000a66:	e000      	b.n	8000a6a <prvUnlockQueue+0x46>
                    break;
 8000a68:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	22ff      	movs	r2, #255	; 0xff
 8000a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000a72:	f001 fed7 	bl	8002824 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000a76:	f001 fea5 	bl	80027c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a80:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a82:	e011      	b.n	8000aa8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d012      	beq.n	8000ab2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3310      	adds	r3, #16
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fdfb 	bl	800168c <xTaskRemoveFromEventList>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000a9c:	f000 ff4a 	bl	8001934 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dce9      	bgt.n	8000a84 <prvUnlockQueue+0x60>
 8000ab0:	e000      	b.n	8000ab4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000ab2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	22ff      	movs	r2, #255	; 0xff
 8000ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000abc:	f001 feb2 	bl	8002824 <vPortExitCritical>
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ad0:	f001 fe78 	bl	80027c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000adc:	2301      	movs	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	e001      	b.n	8000ae6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000ae6:	f001 fe9d 	bl	8002824 <vPortExitCritical>

    return xReturn;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10a      	bne.n	8000b1e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b0c:	f383 8811 	msr	BASEPRI, r3
 8000b10:	f3bf 8f6f 	isb	sy
 8000b14:	f3bf 8f4f 	dsb	sy
 8000b18:	60fb      	str	r3, [r7, #12]
    }
 8000b1a:	bf00      	nop
 8000b1c:	e7fe      	b.n	8000b1c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d024      	beq.n	8000b6e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e01e      	b.n	8000b68 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	; (8000b9c <vQueueAddToRegistry+0xa8>)
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	4413      	add	r3, r2
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d105      	bne.n	8000b46 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <vQueueAddToRegistry+0xa8>)
 8000b40:	4413      	add	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
                    break;
 8000b44:	e013      	b.n	8000b6e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10a      	bne.n	8000b62 <vQueueAddToRegistry+0x6e>
 8000b4c:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <vQueueAddToRegistry+0xa8>)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d104      	bne.n	8000b62 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <vQueueAddToRegistry+0xa8>)
 8000b5e:	4413      	add	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	2b07      	cmp	r3, #7
 8000b6c:	d9dd      	bls.n	8000b2a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00f      	beq.n	8000b94 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 fc7a 	bl	800447c <SEGGER_SYSVIEW_ShrinkId>
 8000b88:	4601      	mov	r1, r0
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2071      	movs	r0, #113	; 0x71
 8000b90:	f002 feee 	bl	8003970 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000048 	.word	0x20000048

08000ba0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000bb0:	f001 fe08 	bl	80027c4 <vPortEnterCritical>
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bc0:	d103      	bne.n	8000bca <vQueueWaitForMessageRestricted+0x2a>
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd6:	d103      	bne.n	8000be0 <vQueueWaitForMessageRestricted+0x40>
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000be0:	f001 fe20 	bl	8002824 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d106      	bne.n	8000bfa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	3324      	adds	r3, #36	; 0x24
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	68b9      	ldr	r1, [r7, #8]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fd01 	bl	80015fc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff12 	bl	8000a24 <prvUnlockQueue>
    }
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af04      	add	r7, sp, #16
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	4613      	mov	r3, r2
 8000c16:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 fefd 	bl	8002a1c <pvPortMalloc>
 8000c22:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d013      	beq.n	8000c52 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000c2a:	2058      	movs	r0, #88	; 0x58
 8000c2c:	f001 fef6 	bl	8002a1c <pvPortMalloc>
 8000c30:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d008      	beq.n	8000c4a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000c38:	2258      	movs	r2, #88	; 0x58
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	69f8      	ldr	r0, [r7, #28]
 8000c3e:	f003 ff37 	bl	8004ab0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	631a      	str	r2, [r3, #48]	; 0x30
 8000c48:	e005      	b.n	8000c56 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f001 ffa0 	bl	8002b90 <vPortFree>
 8000c50:	e001      	b.n	8000c56 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d013      	beq.n	8000c84 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c5c:	88fa      	ldrh	r2, [r7, #6]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	9303      	str	r3, [sp, #12]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f000 f80e 	bl	8000c94 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000c78:	69f8      	ldr	r0, [r7, #28]
 8000c7a:	f000 f899 	bl	8000db0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
 8000c82:	e002      	b.n	8000c8a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c88:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
    }
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3720      	adds	r7, #32
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	461a      	mov	r2, r3
 8000cac:	21a5      	movs	r1, #165	; 0xa5
 8000cae:	f003 feff 	bl	8004ab0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	f023 0307 	bic.w	r3, r3, #7
 8000cca:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00a      	beq.n	8000cec <prvInitialiseNewTask+0x58>
        __asm volatile
 8000cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cda:	f383 8811 	msr	BASEPRI, r3
 8000cde:	f3bf 8f6f 	isb	sy
 8000ce2:	f3bf 8f4f 	dsb	sy
 8000ce6:	617b      	str	r3, [r7, #20]
    }
 8000ce8:	bf00      	nop
 8000cea:	e7fe      	b.n	8000cea <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d01e      	beq.n	8000d30 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	e012      	b.n	8000d1e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	7819      	ldrb	r1, [r3, #0]
 8000d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	4413      	add	r3, r2
 8000d06:	3334      	adds	r3, #52	; 0x34
 8000d08:	460a      	mov	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	4413      	add	r3, r2
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d006      	beq.n	8000d26 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	2b09      	cmp	r3, #9
 8000d22:	d9e9      	bls.n	8000cf8 <prvInitialiseNewTask+0x64>
 8000d24:	e000      	b.n	8000d28 <prvInitialiseNewTask+0x94>
            {
                break;
 8000d26:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d90a      	bls.n	8000d4c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8000d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3a:	f383 8811 	msr	BASEPRI, r3
 8000d3e:	f3bf 8f6f 	isb	sy
 8000d42:	f3bf 8f4f 	dsb	sy
 8000d46:	613b      	str	r3, [r7, #16]
    }
 8000d48:	bf00      	nop
 8000d4a:	e7fe      	b.n	8000d4a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d901      	bls.n	8000d56 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000d52:	2304      	movs	r3, #4
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d60:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d64:	3304      	adds	r3, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fbad 	bl	80004c6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6e:	3318      	adds	r3, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fba8 	bl	80004c6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d7a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7e:	f1c3 0205 	rsb	r2, r3, #5
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	69b8      	ldr	r0, [r7, #24]
 8000d92:	f001 fb6b 	bl	800246c <pxPortInitialiseStack>
 8000d96:	4602      	mov	r2, r0
 8000d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000da6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000db8:	f001 fd04 	bl	80027c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000dbc:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <prvAddNewTaskToReadyList+0x14c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a4e      	ldr	r2, [pc, #312]	; (8000efc <prvAddNewTaskToReadyList+0x14c>)
 8000dc4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000dc6:	4b4e      	ldr	r3, [pc, #312]	; (8000f00 <prvAddNewTaskToReadyList+0x150>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d109      	bne.n	8000de2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000dce:	4a4c      	ldr	r2, [pc, #304]	; (8000f00 <prvAddNewTaskToReadyList+0x150>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000dd4:	4b49      	ldr	r3, [pc, #292]	; (8000efc <prvAddNewTaskToReadyList+0x14c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d110      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ddc:	f000 fdce 	bl	800197c <prvInitialiseTaskLists>
 8000de0:	e00d      	b.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000de2:	4b48      	ldr	r3, [pc, #288]	; (8000f04 <prvAddNewTaskToReadyList+0x154>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d109      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000dea:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <prvAddNewTaskToReadyList+0x150>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d802      	bhi.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000df8:	4a41      	ldr	r2, [pc, #260]	; (8000f00 <prvAddNewTaskToReadyList+0x150>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000dfe:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <prvAddNewTaskToReadyList+0x158>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a40      	ldr	r2, [pc, #256]	; (8000f08 <prvAddNewTaskToReadyList+0x158>)
 8000e06:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000e08:	4b3f      	ldr	r3, [pc, #252]	; (8000f08 <prvAddNewTaskToReadyList+0x158>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d016      	beq.n	8000e44 <prvAddNewTaskToReadyList+0x94>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f003 fa69 	bl	80042f0 <SEGGER_SYSVIEW_OnTaskCreate>
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	461d      	mov	r5, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	461c      	mov	r4, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	1ae3      	subs	r3, r4, r3
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	462b      	mov	r3, r5
 8000e40:	f002 f868 	bl	8002f14 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 fad6 	bl	80043f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	2201      	movs	r2, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <prvAddNewTaskToReadyList+0x15c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <prvAddNewTaskToReadyList+0x15c>)
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e62:	492b      	ldr	r1, [pc, #172]	; (8000f10 <prvAddNewTaskToReadyList+0x160>)
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	3304      	adds	r3, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	3204      	adds	r2, #4
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	1d1a      	adds	r2, r3, #4
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <prvAddNewTaskToReadyList+0x160>)
 8000ea2:	441a      	add	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	615a      	str	r2, [r3, #20]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eac:	4918      	ldr	r1, [pc, #96]	; (8000f10 <prvAddNewTaskToReadyList+0x160>)
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1c59      	adds	r1, r3, #1
 8000ebc:	4814      	ldr	r0, [pc, #80]	; (8000f10 <prvAddNewTaskToReadyList+0x160>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4403      	add	r3, r0
 8000ec8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000eca:	f001 fcab 	bl	8002824 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <prvAddNewTaskToReadyList+0x154>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00e      	beq.n	8000ef4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <prvAddNewTaskToReadyList+0x150>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <prvAddNewTaskToReadyList+0x164>)
 8000ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	f3bf 8f4f 	dsb	sy
 8000ef0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bdb0      	pop	{r4, r5, r7, pc}
 8000efc:	20000160 	.word	0x20000160
 8000f00:	20000088 	.word	0x20000088
 8000f04:	2000016c 	.word	0x2000016c
 8000f08:	2000017c 	.word	0x2000017c
 8000f0c:	20000168 	.word	0x20000168
 8000f10:	2000008c 	.word	0x2000008c
 8000f14:	e000ed04 	.word	0xe000ed04

08000f18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d01b      	beq.n	8000f62 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <vTaskDelay+0x68>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00a      	beq.n	8000f48 <vTaskDelay+0x30>
        __asm volatile
 8000f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f36:	f383 8811 	msr	BASEPRI, r3
 8000f3a:	f3bf 8f6f 	isb	sy
 8000f3e:	f3bf 8f4f 	dsb	sy
 8000f42:	60bb      	str	r3, [r7, #8]
    }
 8000f44:	bf00      	nop
 8000f46:	e7fe      	b.n	8000f46 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000f48:	f000 f880 	bl	800104c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	2023      	movs	r0, #35	; 0x23
 8000f50:	f002 fcd2 	bl	80038f8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000f54:	2100      	movs	r1, #0
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 ff84 	bl	8001e64 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000f5c:	f000 f884 	bl	8001068 <xTaskResumeAll>
 8000f60:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d107      	bne.n	8000f78 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <vTaskDelay+0x6c>)
 8000f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	f3bf 8f4f 	dsb	sy
 8000f74:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000188 	.word	0x20000188
 8000f84:	e000ed04 	.word	0xe000ed04

08000f88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <vTaskStartScheduler+0xa4>)
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	2300      	movs	r3, #0
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	2282      	movs	r2, #130	; 0x82
 8000f9a:	4925      	ldr	r1, [pc, #148]	; (8001030 <vTaskStartScheduler+0xa8>)
 8000f9c:	4825      	ldr	r0, [pc, #148]	; (8001034 <vTaskStartScheduler+0xac>)
 8000f9e:	f7ff fe33 	bl	8000c08 <xTaskCreate>
 8000fa2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d102      	bne.n	8000fb0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000faa:	f000 ffdb 	bl	8001f64 <xTimerCreateTimerTask>
 8000fae:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d124      	bne.n	8001000 <vTaskStartScheduler+0x78>
        __asm volatile
 8000fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fba:	f383 8811 	msr	BASEPRI, r3
 8000fbe:	f3bf 8f6f 	isb	sy
 8000fc2:	f3bf 8f4f 	dsb	sy
 8000fc6:	60bb      	str	r3, [r7, #8]
    }
 8000fc8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <vTaskStartScheduler+0xb0>)
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <vTaskStartScheduler+0xb4>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <vTaskStartScheduler+0xb8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <vTaskStartScheduler+0xbc>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <vTaskStartScheduler+0xa4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d102      	bne.n	8000ff0 <vTaskStartScheduler+0x68>
 8000fea:	f003 f965 	bl	80042b8 <SEGGER_SYSVIEW_OnIdle>
 8000fee:	e004      	b.n	8000ffa <vTaskStartScheduler+0x72>
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <vTaskStartScheduler+0xbc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 f9bd 	bl	8004374 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000ffa:	f001 fac3 	bl	8002584 <xPortStartScheduler>
 8000ffe:	e00e      	b.n	800101e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001006:	d10a      	bne.n	800101e <vTaskStartScheduler+0x96>
        __asm volatile
 8001008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800100c:	f383 8811 	msr	BASEPRI, r3
 8001010:	f3bf 8f6f 	isb	sy
 8001014:	f3bf 8f4f 	dsb	sy
 8001018:	607b      	str	r3, [r7, #4]
    }
 800101a:	bf00      	nop
 800101c:	e7fe      	b.n	800101c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <vTaskStartScheduler+0xc0>)
 8001020:	681b      	ldr	r3, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000184 	.word	0x20000184
 8001030:	08004b24 	.word	0x08004b24
 8001034:	0800194d 	.word	0x0800194d
 8001038:	20000180 	.word	0x20000180
 800103c:	2000016c 	.word	0x2000016c
 8001040:	20000164 	.word	0x20000164
 8001044:	20000088 	.word	0x20000088
 8001048:	20000004 	.word	0x20000004

0800104c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <vTaskSuspendAll+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a03      	ldr	r2, [pc, #12]	; (8001064 <vTaskSuspendAll+0x18>)
 8001058:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	20000188 	.word	0x20000188

08001068 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001076:	4b73      	ldr	r3, [pc, #460]	; (8001244 <xTaskResumeAll+0x1dc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10a      	bne.n	8001094 <xTaskResumeAll+0x2c>
        __asm volatile
 800107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001082:	f383 8811 	msr	BASEPRI, r3
 8001086:	f3bf 8f6f 	isb	sy
 800108a:	f3bf 8f4f 	dsb	sy
 800108e:	607b      	str	r3, [r7, #4]
    }
 8001090:	bf00      	nop
 8001092:	e7fe      	b.n	8001092 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001094:	f001 fb96 	bl	80027c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001098:	4b6a      	ldr	r3, [pc, #424]	; (8001244 <xTaskResumeAll+0x1dc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	4a69      	ldr	r2, [pc, #420]	; (8001244 <xTaskResumeAll+0x1dc>)
 80010a0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010a2:	4b68      	ldr	r3, [pc, #416]	; (8001244 <xTaskResumeAll+0x1dc>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 80c4 	bne.w	8001234 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <xTaskResumeAll+0x1e0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80bf 	beq.w	8001234 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010b6:	e08e      	b.n	80011d6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010b8:	4b64      	ldr	r3, [pc, #400]	; (800124c <xTaskResumeAll+0x1e4>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	6a12      	ldr	r2, [r2, #32]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	69d2      	ldr	r2, [r2, #28]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3318      	adds	r3, #24
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d103      	bne.n	80010ee <xTaskResumeAll+0x86>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1e5a      	subs	r2, r3, #1
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	68d2      	ldr	r2, [r2, #12]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	6892      	ldr	r2, [r2, #8]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	3304      	adds	r3, #4
 8001120:	429a      	cmp	r2, r3
 8001122:	d103      	bne.n	800112c <xTaskResumeAll+0xc4>
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	1e5a      	subs	r2, r3, #1
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	4618      	mov	r0, r3
 8001140:	f003 f95a 	bl	80043f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	2201      	movs	r2, #1
 800114a:	409a      	lsls	r2, r3
 800114c:	4b40      	ldr	r3, [pc, #256]	; (8001250 <xTaskResumeAll+0x1e8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4313      	orrs	r3, r2
 8001152:	4a3f      	ldr	r2, [pc, #252]	; (8001250 <xTaskResumeAll+0x1e8>)
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800115a:	493e      	ldr	r1, [pc, #248]	; (8001254 <xTaskResumeAll+0x1ec>)
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	3204      	adds	r2, #4
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	1d1a      	adds	r2, r3, #4
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <xTaskResumeAll+0x1ec>)
 800119a:	441a      	add	r2, r3
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	615a      	str	r2, [r3, #20]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a4:	492b      	ldr	r1, [pc, #172]	; (8001254 <xTaskResumeAll+0x1ec>)
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	1c59      	adds	r1, r3, #1
 80011b4:	4827      	ldr	r0, [pc, #156]	; (8001254 <xTaskResumeAll+0x1ec>)
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4403      	add	r3, r0
 80011c0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <xTaskResumeAll+0x1f0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d302      	bcc.n	80011d6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <xTaskResumeAll+0x1f4>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <xTaskResumeAll+0x1e4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f47f af6c 	bne.w	80010b8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80011e6:	f000 fc47 	bl	8001a78 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <xTaskResumeAll+0x1f8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d010      	beq.n	8001218 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80011f6:	f000 f859 	bl	80012ac <xTaskIncrementTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <xTaskResumeAll+0x1f4>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3b01      	subs	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f1      	bne.n	80011f6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <xTaskResumeAll+0x1f8>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <xTaskResumeAll+0x1f4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d009      	beq.n	8001234 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <xTaskResumeAll+0x1fc>)
 8001226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001234:	f001 faf6 	bl	8002824 <vPortExitCritical>

    return xAlreadyYielded;
 8001238:	69bb      	ldr	r3, [r7, #24]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000188 	.word	0x20000188
 8001248:	20000160 	.word	0x20000160
 800124c:	20000120 	.word	0x20000120
 8001250:	20000168 	.word	0x20000168
 8001254:	2000008c 	.word	0x2000008c
 8001258:	20000088 	.word	0x20000088
 800125c:	20000174 	.word	0x20000174
 8001260:	20000170 	.word	0x20000170
 8001264:	e000ed04 	.word	0xe000ed04

08001268 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <xTaskGetTickCount+0x1c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000164 	.word	0x20000164

08001288 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800128e:	f001 fb85 	bl	800299c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <xTaskGetTickCountFromISR+0x20>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800129c:	683b      	ldr	r3, [r7, #0]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000164 	.word	0x20000164

080012ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012b6:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <xTaskIncrementTick+0x208>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f040 80f0 	bne.w	80014a0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80012c0:	4b7d      	ldr	r3, [pc, #500]	; (80014b8 <xTaskIncrementTick+0x20c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80012c8:	4a7b      	ldr	r2, [pc, #492]	; (80014b8 <xTaskIncrementTick+0x20c>)
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d120      	bne.n	8001316 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80012d4:	4b79      	ldr	r3, [pc, #484]	; (80014bc <xTaskIncrementTick+0x210>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00a      	beq.n	80012f4 <xTaskIncrementTick+0x48>
        __asm volatile
 80012de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012e2:	f383 8811 	msr	BASEPRI, r3
 80012e6:	f3bf 8f6f 	isb	sy
 80012ea:	f3bf 8f4f 	dsb	sy
 80012ee:	607b      	str	r3, [r7, #4]
    }
 80012f0:	bf00      	nop
 80012f2:	e7fe      	b.n	80012f2 <xTaskIncrementTick+0x46>
 80012f4:	4b71      	ldr	r3, [pc, #452]	; (80014bc <xTaskIncrementTick+0x210>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	4b71      	ldr	r3, [pc, #452]	; (80014c0 <xTaskIncrementTick+0x214>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6f      	ldr	r2, [pc, #444]	; (80014bc <xTaskIncrementTick+0x210>)
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4a6f      	ldr	r2, [pc, #444]	; (80014c0 <xTaskIncrementTick+0x214>)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b6e      	ldr	r3, [pc, #440]	; (80014c4 <xTaskIncrementTick+0x218>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	4a6d      	ldr	r2, [pc, #436]	; (80014c4 <xTaskIncrementTick+0x218>)
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	f000 fbb1 	bl	8001a78 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001316:	4b6c      	ldr	r3, [pc, #432]	; (80014c8 <xTaskIncrementTick+0x21c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6a3a      	ldr	r2, [r7, #32]
 800131c:	429a      	cmp	r2, r3
 800131e:	f0c0 80aa 	bcc.w	8001476 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001322:	4b66      	ldr	r3, [pc, #408]	; (80014bc <xTaskIncrementTick+0x210>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d104      	bne.n	8001336 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800132c:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <xTaskIncrementTick+0x21c>)
 800132e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001332:	601a      	str	r2, [r3, #0]
                    break;
 8001334:	e09f      	b.n	8001476 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001336:	4b61      	ldr	r3, [pc, #388]	; (80014bc <xTaskIncrementTick+0x210>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001346:	6a3a      	ldr	r2, [r7, #32]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	429a      	cmp	r2, r3
 800134c:	d203      	bcs.n	8001356 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800134e:	4a5e      	ldr	r2, [pc, #376]	; (80014c8 <xTaskIncrementTick+0x21c>)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001354:	e08f      	b.n	8001476 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	68d2      	ldr	r2, [r2, #12]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	6892      	ldr	r2, [r2, #8]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	3304      	adds	r3, #4
 8001378:	429a      	cmp	r2, r3
 800137a:	d103      	bne.n	8001384 <xTaskIncrementTick+0xd8>
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	1e5a      	subs	r2, r3, #1
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	2b00      	cmp	r3, #0
 800139a:	d01e      	beq.n	80013da <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	6a12      	ldr	r2, [r2, #32]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	69d2      	ldr	r2, [r2, #28]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	3318      	adds	r3, #24
 80013be:	429a      	cmp	r2, r3
 80013c0:	d103      	bne.n	80013ca <xTaskIncrementTick+0x11e>
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	6a1a      	ldr	r2, [r3, #32]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2200      	movs	r2, #0
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	1e5a      	subs	r2, r3, #1
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 f80b 	bl	80043f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	2201      	movs	r2, #1
 80013e8:	409a      	lsls	r2, r3
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <xTaskIncrementTick+0x220>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	4a36      	ldr	r2, [pc, #216]	; (80014cc <xTaskIncrementTick+0x220>)
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f8:	4935      	ldr	r1, [pc, #212]	; (80014d0 <xTaskIncrementTick+0x224>)
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	3304      	adds	r3, #4
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	3204      	adds	r2, #4
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1d1a      	adds	r2, r3, #4
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4a26      	ldr	r2, [pc, #152]	; (80014d0 <xTaskIncrementTick+0x224>)
 8001438:	441a      	add	r2, r3
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001442:	4923      	ldr	r1, [pc, #140]	; (80014d0 <xTaskIncrementTick+0x224>)
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	1c59      	adds	r1, r3, #1
 8001452:	481f      	ldr	r0, [pc, #124]	; (80014d0 <xTaskIncrementTick+0x224>)
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4403      	add	r3, r0
 800145e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <xTaskIncrementTick+0x228>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	429a      	cmp	r2, r3
 800146c:	f67f af59 	bls.w	8001322 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001470:	2301      	movs	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001474:	e755      	b.n	8001322 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <xTaskIncrementTick+0x228>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147c:	4914      	ldr	r1, [pc, #80]	; (80014d0 <xTaskIncrementTick+0x224>)
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d901      	bls.n	8001492 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800148e:	2301      	movs	r3, #1
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <xTaskIncrementTick+0x22c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800149a:	2301      	movs	r3, #1
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	e004      	b.n	80014aa <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <xTaskIncrementTick+0x230>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <xTaskIncrementTick+0x230>)
 80014a8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000188 	.word	0x20000188
 80014b8:	20000164 	.word	0x20000164
 80014bc:	20000118 	.word	0x20000118
 80014c0:	2000011c 	.word	0x2000011c
 80014c4:	20000178 	.word	0x20000178
 80014c8:	20000180 	.word	0x20000180
 80014cc:	20000168 	.word	0x20000168
 80014d0:	2000008c 	.word	0x2000008c
 80014d4:	20000088 	.word	0x20000088
 80014d8:	20000174 	.word	0x20000174
 80014dc:	20000170 	.word	0x20000170

080014e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <vTaskSwitchContext+0xbc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80014ee:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <vTaskSwitchContext+0xc0>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80014f4:	e04d      	b.n	8001592 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <vTaskSwitchContext+0xc0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <vTaskSwitchContext+0xc4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800150a:	7afb      	ldrb	r3, [r7, #11]
 800150c:	f1c3 031f 	rsb	r3, r3, #31
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	4925      	ldr	r1, [pc, #148]	; (80015a8 <vTaskSwitchContext+0xc8>)
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10a      	bne.n	800153c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800152a:	f383 8811 	msr	BASEPRI, r3
 800152e:	f3bf 8f6f 	isb	sy
 8001532:	f3bf 8f4f 	dsb	sy
 8001536:	607b      	str	r3, [r7, #4]
    }
 8001538:	bf00      	nop
 800153a:	e7fe      	b.n	800153a <vTaskSwitchContext+0x5a>
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <vTaskSwitchContext+0xc8>)
 8001548:	4413      	add	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	3308      	adds	r3, #8
 800155e:	429a      	cmp	r2, r3
 8001560:	d104      	bne.n	800156c <vTaskSwitchContext+0x8c>
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <vTaskSwitchContext+0xcc>)
 8001574:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <vTaskSwitchContext+0xcc>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <vTaskSwitchContext+0xd0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d102      	bne.n	8001588 <vTaskSwitchContext+0xa8>
 8001582:	f002 fe99 	bl	80042b8 <SEGGER_SYSVIEW_OnIdle>
}
 8001586:	e004      	b.n	8001592 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <vTaskSwitchContext+0xcc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fef1 	bl	8004374 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000188 	.word	0x20000188
 80015a0:	20000174 	.word	0x20000174
 80015a4:	20000168 	.word	0x20000168
 80015a8:	2000008c 	.word	0x2000008c
 80015ac:	20000088 	.word	0x20000088
 80015b0:	20000184 	.word	0x20000184

080015b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10a      	bne.n	80015da <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80015c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c8:	f383 8811 	msr	BASEPRI, r3
 80015cc:	f3bf 8f6f 	isb	sy
 80015d0:	f3bf 8f4f 	dsb	sy
 80015d4:	60fb      	str	r3, [r7, #12]
    }
 80015d6:	bf00      	nop
 80015d8:	e7fe      	b.n	80015d8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <vTaskPlaceOnEventList+0x44>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3318      	adds	r3, #24
 80015e0:	4619      	mov	r1, r3
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7fe ff7c 	bl	80004e0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80015e8:	2101      	movs	r1, #1
 80015ea:	6838      	ldr	r0, [r7, #0]
 80015ec:	f000 fc3a 	bl	8001e64 <prvAddCurrentTaskToDelayedList>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000088 	.word	0x20000088

080015fc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10a      	bne.n	8001624 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800160e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001612:	f383 8811 	msr	BASEPRI, r3
 8001616:	f3bf 8f6f 	isb	sy
 800161a:	f3bf 8f4f 	dsb	sy
 800161e:	613b      	str	r3, [r7, #16]
    }
 8001620:	bf00      	nop
 8001622:	e7fe      	b.n	8001622 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <vTaskPlaceOnEventListRestricted+0x8c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	61da      	str	r2, [r3, #28]
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	6892      	ldr	r2, [r2, #8]
 800163a:	621a      	str	r2, [r3, #32]
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <vTaskPlaceOnEventListRestricted+0x8c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	3218      	adds	r2, #24
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <vTaskPlaceOnEventListRestricted+0x8c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f103 0218 	add.w	r2, r3, #24
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001670:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001672:	2024      	movs	r0, #36	; 0x24
 8001674:	f002 f922 	bl	80038bc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f000 fbf2 	bl	8001e64 <prvAddCurrentTaskToDelayedList>
    }
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000088 	.word	0x20000088

0800168c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10a      	bne.n	80016b8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80016a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a6:	f383 8811 	msr	BASEPRI, r3
 80016aa:	f3bf 8f6f 	isb	sy
 80016ae:	f3bf 8f4f 	dsb	sy
 80016b2:	60fb      	str	r3, [r7, #12]
    }
 80016b4:	bf00      	nop
 80016b6:	e7fe      	b.n	80016b6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	6a3a      	ldr	r2, [r7, #32]
 80016c4:	6a12      	ldr	r2, [r2, #32]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	6a3a      	ldr	r2, [r7, #32]
 80016ce:	69d2      	ldr	r2, [r2, #28]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	3318      	adds	r3, #24
 80016da:	429a      	cmp	r2, r3
 80016dc:	d103      	bne.n	80016e6 <xTaskRemoveFromEventList+0x5a>
 80016de:	6a3b      	ldr	r3, [r7, #32]
 80016e0:	6a1a      	ldr	r2, [r3, #32]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	2200      	movs	r2, #0
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	1e5a      	subs	r2, r3, #1
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016f6:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <xTaskRemoveFromEventList+0x198>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d162      	bne.n	80017c4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	6a3a      	ldr	r2, [r7, #32]
 800170a:	68d2      	ldr	r2, [r2, #12]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	6a3a      	ldr	r2, [r7, #32]
 8001714:	6892      	ldr	r2, [r2, #8]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	3304      	adds	r3, #4
 8001720:	429a      	cmp	r2, r3
 8001722:	d103      	bne.n	800172c <xTaskRemoveFromEventList+0xa0>
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	1e5a      	subs	r2, r3, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	4618      	mov	r0, r3
 8001740:	f002 fe5a 	bl	80043f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	2201      	movs	r2, #1
 800174a:	409a      	lsls	r2, r3
 800174c:	4b36      	ldr	r3, [pc, #216]	; (8001828 <xTaskRemoveFromEventList+0x19c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4313      	orrs	r3, r2
 8001752:	4a35      	ldr	r2, [pc, #212]	; (8001828 <xTaskRemoveFromEventList+0x19c>)
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175a:	4934      	ldr	r1, [pc, #208]	; (800182c <xTaskRemoveFromEventList+0x1a0>)
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	3304      	adds	r3, #4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	6a3a      	ldr	r2, [r7, #32]
 8001780:	3204      	adds	r2, #4
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	1d1a      	adds	r2, r3, #4
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4a24      	ldr	r2, [pc, #144]	; (800182c <xTaskRemoveFromEventList+0x1a0>)
 800179a:	441a      	add	r2, r3
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a4:	4921      	ldr	r1, [pc, #132]	; (800182c <xTaskRemoveFromEventList+0x1a0>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	1c59      	adds	r1, r3, #1
 80017b4:	481d      	ldr	r0, [pc, #116]	; (800182c <xTaskRemoveFromEventList+0x1a0>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4403      	add	r3, r0
 80017c0:	6019      	str	r1, [r3, #0]
 80017c2:	e01b      	b.n	80017fc <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <xTaskRemoveFromEventList+0x1a4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	61da      	str	r2, [r3, #28]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	621a      	str	r2, [r3, #32]
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	3218      	adds	r2, #24
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f103 0218 	add.w	r2, r3, #24
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <xTaskRemoveFromEventList+0x1a4>)
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <xTaskRemoveFromEventList+0x1a4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <xTaskRemoveFromEventList+0x1a4>)
 80017fa:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <xTaskRemoveFromEventList+0x1a8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	429a      	cmp	r2, r3
 8001808:	d905      	bls.n	8001816 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800180a:	2301      	movs	r3, #1
 800180c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <xTaskRemoveFromEventList+0x1ac>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e001      	b.n	800181a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800181c:	4618      	mov	r0, r3
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000188 	.word	0x20000188
 8001828:	20000168 	.word	0x20000168
 800182c:	2000008c 	.word	0x2000008c
 8001830:	20000120 	.word	0x20000120
 8001834:	20000088 	.word	0x20000088
 8001838:	20000174 	.word	0x20000174

0800183c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <vTaskInternalSetTimeOutState+0x24>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <vTaskInternalSetTimeOutState+0x28>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	605a      	str	r2, [r3, #4]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	20000178 	.word	0x20000178
 8001864:	20000164 	.word	0x20000164

08001868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10a      	bne.n	800188e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187c:	f383 8811 	msr	BASEPRI, r3
 8001880:	f3bf 8f6f 	isb	sy
 8001884:	f3bf 8f4f 	dsb	sy
 8001888:	613b      	str	r3, [r7, #16]
    }
 800188a:	bf00      	nop
 800188c:	e7fe      	b.n	800188c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10a      	bne.n	80018aa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001898:	f383 8811 	msr	BASEPRI, r3
 800189c:	f3bf 8f6f 	isb	sy
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	60fb      	str	r3, [r7, #12]
    }
 80018a6:	bf00      	nop
 80018a8:	e7fe      	b.n	80018a8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80018aa:	f000 ff8b 	bl	80027c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <xTaskCheckForTimeOut+0xc4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c6:	d102      	bne.n	80018ce <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	e026      	b.n	800191c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <xTaskCheckForTimeOut+0xc8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d00a      	beq.n	80018f0 <xTaskCheckForTimeOut+0x88>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d305      	bcc.n	80018f0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e015      	b.n	800191c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d20b      	bcs.n	8001912 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	1ad2      	subs	r2, r2, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff98 	bl	800183c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	e004      	b.n	800191c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001918:	2301      	movs	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800191c:	f000 ff82 	bl	8002824 <vPortExitCritical>

    return xReturn;
 8001920:	69fb      	ldr	r3, [r7, #28]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000164 	.word	0x20000164
 8001930:	20000178 	.word	0x20000178

08001934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <vTaskMissedYield+0x14>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	20000174 	.word	0x20000174

0800194c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001954:	f000 f852 	bl	80019fc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <prvIdleTask+0x28>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d9f9      	bls.n	8001954 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <prvIdleTask+0x2c>)
 8001962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f3bf 8f4f 	dsb	sy
 800196c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001970:	e7f0      	b.n	8001954 <prvIdleTask+0x8>
 8001972:	bf00      	nop
 8001974:	2000008c 	.word	0x2000008c
 8001978:	e000ed04 	.word	0xe000ed04

0800197c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	e00c      	b.n	80019a2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <prvInitialiseTaskLists+0x60>)
 8001994:	4413      	add	r3, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fd75 	bl	8000486 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3301      	adds	r3, #1
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d9ef      	bls.n	8001988 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80019a8:	480d      	ldr	r0, [pc, #52]	; (80019e0 <prvInitialiseTaskLists+0x64>)
 80019aa:	f7fe fd6c 	bl	8000486 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80019ae:	480d      	ldr	r0, [pc, #52]	; (80019e4 <prvInitialiseTaskLists+0x68>)
 80019b0:	f7fe fd69 	bl	8000486 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80019b4:	480c      	ldr	r0, [pc, #48]	; (80019e8 <prvInitialiseTaskLists+0x6c>)
 80019b6:	f7fe fd66 	bl	8000486 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80019ba:	480c      	ldr	r0, [pc, #48]	; (80019ec <prvInitialiseTaskLists+0x70>)
 80019bc:	f7fe fd63 	bl	8000486 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80019c0:	480b      	ldr	r0, [pc, #44]	; (80019f0 <prvInitialiseTaskLists+0x74>)
 80019c2:	f7fe fd60 	bl	8000486 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <prvInitialiseTaskLists+0x78>)
 80019c8:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <prvInitialiseTaskLists+0x64>)
 80019ca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <prvInitialiseTaskLists+0x7c>)
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <prvInitialiseTaskLists+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000008c 	.word	0x2000008c
 80019e0:	200000f0 	.word	0x200000f0
 80019e4:	20000104 	.word	0x20000104
 80019e8:	20000120 	.word	0x20000120
 80019ec:	20000134 	.word	0x20000134
 80019f0:	2000014c 	.word	0x2000014c
 80019f4:	20000118 	.word	0x20000118
 80019f8:	2000011c 	.word	0x2000011c

080019fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a02:	e019      	b.n	8001a38 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001a04:	f000 fede 	bl	80027c4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <prvCheckTasksWaitingTermination+0x50>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3304      	adds	r3, #4
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd9c 	bl	8000552 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <prvCheckTasksWaitingTermination+0x54>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <prvCheckTasksWaitingTermination+0x54>)
 8001a22:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <prvCheckTasksWaitingTermination+0x58>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <prvCheckTasksWaitingTermination+0x58>)
 8001a2c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001a2e:	f000 fef9 	bl	8002824 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f810 	bl	8001a58 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <prvCheckTasksWaitingTermination+0x58>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e1      	bne.n	8001a04 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000134 	.word	0x20000134
 8001a50:	20000160 	.word	0x20000160
 8001a54:	20000148 	.word	0x20000148

08001a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 f893 	bl	8002b90 <vPortFree>
            vPortFree( pxTCB );
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f001 f890 	bl	8002b90 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <prvResetNextTaskUnblockTime+0x30>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d104      	bne.n	8001a90 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <prvResetNextTaskUnblockTime+0x34>)
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a8c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a8e:	e005      	b.n	8001a9c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <prvResetNextTaskUnblockTime+0x30>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <prvResetNextTaskUnblockTime+0x34>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000118 	.word	0x20000118
 8001aac:	20000180 	.word	0x20000180

08001ab0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <xTaskGetSchedulerState+0x34>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	e008      	b.n	8001ad6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <xTaskGetSchedulerState+0x38>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001acc:	2302      	movs	r3, #2
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	e001      	b.n	8001ad6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001ad6:	687b      	ldr	r3, [r7, #4]
    }
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	2000016c 	.word	0x2000016c
 8001ae8:	20000188 	.word	0x20000188

08001aec <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00a      	beq.n	8001b16 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b04:	f383 8811 	msr	BASEPRI, r3
 8001b08:	f3bf 8f6f 	isb	sy
 8001b0c:	f3bf 8f4f 	dsb	sy
 8001b10:	613b      	str	r3, [r7, #16]
    }
 8001b12:	bf00      	nop
 8001b14:	e7fe      	b.n	8001b14 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001b16:	f000 fe55 	bl	80027c4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001b1a:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <xTaskGenericNotifyWait+0x108>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	3354      	adds	r3, #84	; 0x54
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d022      	beq.n	8001b72 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <xTaskGenericNotifyWait+0x108>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	3214      	adds	r2, #20
 8001b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	43d2      	mvns	r2, r2
 8001b3c:	4011      	ands	r1, r2
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	3214      	adds	r2, #20
 8001b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <xTaskGenericNotifyWait+0x108>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3354      	adds	r3, #84	; 0x54
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	6a38      	ldr	r0, [r7, #32]
 8001b5e:	f000 f981 	bl	8001e64 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <xTaskGenericNotifyWait+0x10c>)
 8001b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f3bf 8f4f 	dsb	sy
 8001b6e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001b72:	f000 fe57 	bl	8002824 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001b76:	f000 fe25 	bl	80027c4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	2040      	movs	r0, #64	; 0x40
 8001b88:	f001 ffc2 	bl	8003b10 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <xTaskGenericNotifyWait+0x108>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	3214      	adds	r2, #20
 8001b9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <xTaskGenericNotifyWait+0x108>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4413      	add	r3, r2
 8001baa:	3354      	adds	r3, #84	; 0x54
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d002      	beq.n	8001bba <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e00e      	b.n	8001bd8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <xTaskGenericNotifyWait+0x108>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	3214      	adds	r2, #20
 8001bc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	43d2      	mvns	r2, r2
 8001bca:	4011      	ands	r1, r2
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	3214      	adds	r2, #20
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <xTaskGenericNotifyWait+0x108>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	3354      	adds	r3, #84	; 0x54
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001be6:	f000 fe1d 	bl	8002824 <vPortExitCritical>

        return xReturn;
 8001bea:	697b      	ldr	r3, [r7, #20]
    }
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000088 	.word	0x20000088
 8001bf8:	e000ed04 	.word	0xe000ed04

08001bfc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b090      	sub	sp, #64	; 0x40
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00a      	beq.n	8001c2a <xTaskGenericNotify+0x2e>
        __asm volatile
 8001c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c18:	f383 8811 	msr	BASEPRI, r3
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	623b      	str	r3, [r7, #32]
    }
 8001c26:	bf00      	nop
 8001c28:	e7fe      	b.n	8001c28 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10a      	bne.n	8001c46 <xTaskGenericNotify+0x4a>
        __asm volatile
 8001c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c34:	f383 8811 	msr	BASEPRI, r3
 8001c38:	f3bf 8f6f 	isb	sy
 8001c3c:	f3bf 8f4f 	dsb	sy
 8001c40:	61fb      	str	r3, [r7, #28]
    }
 8001c42:	bf00      	nop
 8001c44:	e7fe      	b.n	8001c44 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8001c4a:	f000 fdbb 	bl	80027c4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	3214      	adds	r2, #20
 8001c5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c60:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4413      	add	r3, r2
 8001c68:	3354      	adds	r3, #84	; 0x54
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	4413      	add	r3, r2
 8001c76:	3354      	adds	r3, #84	; 0x54
 8001c78:	2202      	movs	r2, #2
 8001c7a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d83b      	bhi.n	8001cfa <xTaskGenericNotify+0xfe>
 8001c82:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <xTaskGenericNotify+0x8c>)
 8001c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c88:	08001d19 	.word	0x08001d19
 8001c8c:	08001c9d 	.word	0x08001c9d
 8001c90:	08001cb9 	.word	0x08001cb9
 8001c94:	08001cd1 	.word	0x08001cd1
 8001c98:	08001cdf 	.word	0x08001cdf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	3214      	adds	r2, #20
 8001ca2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	ea42 0103 	orr.w	r1, r2, r3
 8001cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	3214      	adds	r2, #20
 8001cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001cb6:	e032      	b.n	8001d1e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	3214      	adds	r2, #20
 8001cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc2:	1c59      	adds	r1, r3, #1
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	3214      	adds	r2, #20
 8001cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001cce:	e026      	b.n	8001d1e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	3214      	adds	r2, #20
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001cdc:	e01f      	b.n	8001d1e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d006      	beq.n	8001cf4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	3214      	adds	r2, #20
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001cf2:	e014      	b.n	8001d1e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8001cf8:	e011      	b.n	8001d1e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001cfa:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <xTaskGenericNotify+0x254>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00c      	beq.n	8001d1c <xTaskGenericNotify+0x120>
        __asm volatile
 8001d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d06:	f383 8811 	msr	BASEPRI, r3
 8001d0a:	f3bf 8f6f 	isb	sy
 8001d0e:	f3bf 8f4f 	dsb	sy
 8001d12:	61bb      	str	r3, [r7, #24]
    }
 8001d14:	bf00      	nop
 8001d16:	e7fe      	b.n	8001d16 <xTaskGenericNotify+0x11a>
                    break;
 8001d18:	bf00      	nop
 8001d1a:	e000      	b.n	8001d1e <xTaskGenericNotify+0x122>

                    break;
 8001d1c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 fbab 	bl	800447c <SEGGER_SYSVIEW_ShrinkId>
 8001d26:	4601      	mov	r1, r0
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	203e      	movs	r0, #62	; 0x3e
 8001d34:	f001 feec 	bl	8003b10 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001d38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d17f      	bne.n	8001e40 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d4c:	68d2      	ldr	r2, [r2, #12]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d56:	6892      	ldr	r2, [r2, #8]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	3304      	adds	r3, #4
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d103      	bne.n	8001d6e <xTaskGenericNotify+0x172>
 8001d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 fb39 	bl	80043f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <xTaskGenericNotify+0x258>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	4a2f      	ldr	r2, [pc, #188]	; (8001e54 <xTaskGenericNotify+0x258>)
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9c:	492e      	ldr	r1, [pc, #184]	; (8001e58 <xTaskGenericNotify+0x25c>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	3304      	adds	r3, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dc2:	3204      	adds	r2, #4
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc8:	1d1a      	adds	r2, r3, #4
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <xTaskGenericNotify+0x25c>)
 8001ddc:	441a      	add	r2, r3
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	615a      	str	r2, [r3, #20]
 8001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de6:	491c      	ldr	r1, [pc, #112]	; (8001e58 <xTaskGenericNotify+0x25c>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1c59      	adds	r1, r3, #1
 8001df6:	4818      	ldr	r0, [pc, #96]	; (8001e58 <xTaskGenericNotify+0x25c>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4403      	add	r3, r0
 8001e02:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <xTaskGenericNotify+0x226>
        __asm volatile
 8001e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e10:	f383 8811 	msr	BASEPRI, r3
 8001e14:	f3bf 8f6f 	isb	sy
 8001e18:	f3bf 8f4f 	dsb	sy
 8001e1c:	617b      	str	r3, [r7, #20]
    }
 8001e1e:	bf00      	nop
 8001e20:	e7fe      	b.n	8001e20 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <xTaskGenericNotify+0x260>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d907      	bls.n	8001e40 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <xTaskGenericNotify+0x264>)
 8001e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f3bf 8f4f 	dsb	sy
 8001e3c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001e40:	f000 fcf0 	bl	8002824 <vPortExitCritical>

        return xReturn;
 8001e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001e46:	4618      	mov	r0, r3
 8001e48:	3738      	adds	r7, #56	; 0x38
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000164 	.word	0x20000164
 8001e54:	20000168 	.word	0x20000168
 8001e58:	2000008c 	.word	0x2000008c
 8001e5c:	20000088 	.word	0x20000088
 8001e60:	e000ed04 	.word	0xe000ed04

08001e64 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e74:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb69 	bl	8000552 <uxListRemove>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10b      	bne.n	8001e9e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001e86:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <prvAddCurrentTaskToDelayedList+0xec>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	; (8001f50 <prvAddCurrentTaskToDelayedList+0xec>)
 8001e9c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea4:	d124      	bne.n	8001ef0 <prvAddCurrentTaskToDelayedList+0x8c>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d021      	beq.n	8001ef0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	6892      	ldr	r2, [r2, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	3204      	adds	r2, #4
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	1d1a      	adds	r2, r3, #4
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001ee0:	615a      	str	r2, [r3, #20]
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001eee:	e026      	b.n	8001f3e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d209      	bcs.n	8001f1c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3304      	adds	r3, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4610      	mov	r0, r2
 8001f16:	f7fe fae3 	bl	80004e0 <vListInsert>
}
 8001f1a:	e010      	b.n	8001f3e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <prvAddCurrentTaskToDelayedList+0xf8>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3304      	adds	r3, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f7fe fad9 	bl	80004e0 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d202      	bcs.n	8001f3e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001f38:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6013      	str	r3, [r2, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000164 	.word	0x20000164
 8001f4c:	20000088 	.word	0x20000088
 8001f50:	20000168 	.word	0x20000168
 8001f54:	2000014c 	.word	0x2000014c
 8001f58:	2000011c 	.word	0x2000011c
 8001f5c:	20000118 	.word	0x20000118
 8001f60:	20000180 	.word	0x20000180

08001f64 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001f6e:	f000 fa47 	bl	8002400 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <xTimerCreateTimerTask+0x54>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <xTimerCreateTimerTask+0x58>)
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	2302      	movs	r3, #2
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2300      	movs	r3, #0
 8001f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f88:	490d      	ldr	r1, [pc, #52]	; (8001fc0 <xTimerCreateTimerTask+0x5c>)
 8001f8a:	480e      	ldr	r0, [pc, #56]	; (8001fc4 <xTimerCreateTimerTask+0x60>)
 8001f8c:	f7fe fe3c 	bl	8000c08 <xTaskCreate>
 8001f90:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9c:	f383 8811 	msr	BASEPRI, r3
 8001fa0:	f3bf 8f6f 	isb	sy
 8001fa4:	f3bf 8f4f 	dsb	sy
 8001fa8:	603b      	str	r3, [r7, #0]
    }
 8001faa:	bf00      	nop
 8001fac:	e7fe      	b.n	8001fac <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001fae:	687b      	ldr	r3, [r7, #4]
    }
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200001bc 	.word	0x200001bc
 8001fbc:	200001c0 	.word	0x200001c0
 8001fc0:	08004b2c 	.word	0x08004b2c
 8001fc4:	0800206d 	.word	0x0800206d

08001fc8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001fd4:	e008      	b.n	8001fe8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4413      	add	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	699a      	ldr	r2, [r3, #24]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	18d1      	adds	r1, r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f8dd 	bl	80021b4 <prvInsertTimerInActiveList>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ea      	bne.n	8001fd6 <prvReloadTimer+0xe>
        }
    }
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <prvProcessExpiredTimer+0x5c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3304      	adds	r3, #4
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fa94 	bl	8000552 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff ffc3 	bl	8001fc8 <prvReloadTimer>
 8002042:	e008      	b.n	8002056 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	4798      	blx	r3
    }
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200001b4 	.word	0x200001b4

0800206c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002074:	f107 0308 	add.w	r3, r7, #8
 8002078:	4618      	mov	r0, r3
 800207a:	f000 f857 	bl	800212c <prvGetNextExpireTime>
 800207e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4619      	mov	r1, r3
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f803 	bl	8002090 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800208a:	f000 f8d5 	bl	8002238 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800208e:	e7f1      	b.n	8002074 <prvTimerTask+0x8>

08002090 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800209a:	f7fe ffd7 	bl	800104c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800209e:	f107 0308 	add.w	r3, r7, #8
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f866 	bl	8002174 <prvSampleTimeNow>
 80020a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d130      	bne.n	8002112 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <prvProcessTimerOrBlockTask+0x3c>
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d806      	bhi.n	80020cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80020be:	f7fe ffd3 	bl	8001068 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80020c2:	68f9      	ldr	r1, [r7, #12]
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ffa1 	bl	800200c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80020ca:	e024      	b.n	8002116 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <prvProcessTimerOrBlockTask+0x90>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <prvProcessTimerOrBlockTask+0x50>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <prvProcessTimerOrBlockTask+0x52>
 80020e0:	2300      	movs	r3, #0
 80020e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <prvProcessTimerOrBlockTask+0x94>)
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe fd55 	bl	8000ba0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80020f6:	f7fe ffb7 	bl	8001068 <xTaskResumeAll>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <prvProcessTimerOrBlockTask+0x98>)
 8002102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	f3bf 8f6f 	isb	sy
    }
 8002110:	e001      	b.n	8002116 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002112:	f7fe ffa9 	bl	8001068 <xTaskResumeAll>
    }
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200001b8 	.word	0x200001b8
 8002124:	200001bc 	.word	0x200001bc
 8002128:	e000ed04 	.word	0xe000ed04

0800212c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <prvGetNextExpireTime+0x44>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <prvGetNextExpireTime+0x16>
 800213e:	2201      	movs	r2, #1
 8002140:	e000      	b.n	8002144 <prvGetNextExpireTime+0x18>
 8002142:	2200      	movs	r2, #0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <prvGetNextExpireTime+0x44>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	e001      	b.n	8002160 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002160:	68fb      	ldr	r3, [r7, #12]
    }
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	200001b4 	.word	0x200001b4

08002174 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800217c:	f7ff f874 	bl	8001268 <xTaskGetTickCount>
 8002180:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <prvSampleTimeNow+0x3c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d205      	bcs.n	8002198 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800218c:	f000 f912 	bl	80023b4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e002      	b.n	800219e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800219e:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <prvSampleTimeNow+0x3c>)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80021a4:	68fb      	ldr	r3, [r7, #12]
    }
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200001c4 	.word	0x200001c4

080021b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d812      	bhi.n	8002200 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	1ad2      	subs	r2, r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d302      	bcc.n	80021ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e01b      	b.n	8002226 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <prvInsertTimerInActiveList+0x7c>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	3304      	adds	r3, #4
 80021f6:	4619      	mov	r1, r3
 80021f8:	4610      	mov	r0, r2
 80021fa:	f7fe f971 	bl	80004e0 <vListInsert>
 80021fe:	e012      	b.n	8002226 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d206      	bcs.n	8002216 <prvInsertTimerInActiveList+0x62>
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d302      	bcc.n	8002216 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002210:	2301      	movs	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e007      	b.n	8002226 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <prvInsertTimerInActiveList+0x80>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3304      	adds	r3, #4
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f7fe f95d 	bl	80004e0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002226:	697b      	ldr	r3, [r7, #20]
    }
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200001b8 	.word	0x200001b8
 8002234:	200001b4 	.word	0x200001b4

08002238 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800223e:	e0a6      	b.n	800238e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f2c0 80a2 	blt.w	800238c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	3304      	adds	r3, #4
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f97a 	bl	8000552 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff87 	bl	8002174 <prvSampleTimeNow>
 8002266:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	3b01      	subs	r3, #1
 800226c:	2b08      	cmp	r3, #8
 800226e:	f200 808e 	bhi.w	800238e <prvProcessReceivedCommands+0x156>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <prvProcessReceivedCommands+0x40>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	0800229d 	.word	0x0800229d
 800227c:	0800229d 	.word	0x0800229d
 8002280:	08002305 	.word	0x08002305
 8002284:	08002319 	.word	0x08002319
 8002288:	08002363 	.word	0x08002363
 800228c:	0800229d 	.word	0x0800229d
 8002290:	0800229d 	.word	0x0800229d
 8002294:	08002305 	.word	0x08002305
 8002298:	08002319 	.word	0x08002319
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	18d1      	adds	r1, r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	69f8      	ldr	r0, [r7, #28]
 80022bc:	f7ff ff7a 	bl	80021b4 <prvInsertTimerInActiveList>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d063      	beq.n	800238e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d009      	beq.n	80022e8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	4413      	add	r3, r2
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4619      	mov	r1, r3
 80022e0:	69f8      	ldr	r0, [r7, #28]
 80022e2:	f7ff fe71 	bl	8001fc8 <prvReloadTimer>
 80022e6:	e008      	b.n	80022fa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	69f8      	ldr	r0, [r7, #28]
 8002300:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002302:	e044      	b.n	800238e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002316:	e03a      	b.n	800238e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	b2da      	uxtb	r2, r3
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8002338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233c:	f383 8811 	msr	BASEPRI, r3
 8002340:	f3bf 8f6f 	isb	sy
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	617b      	str	r3, [r7, #20]
    }
 800234a:	bf00      	nop
 800234c:	e7fe      	b.n	800234c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	18d1      	adds	r1, r2, r3
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	69f8      	ldr	r0, [r7, #28]
 800235c:	f7ff ff2a 	bl	80021b4 <prvInsertTimerInActiveList>
                        break;
 8002360:	e015      	b.n	800238e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002370:	69f8      	ldr	r0, [r7, #28]
 8002372:	f000 fc0d 	bl	8002b90 <vPortFree>
 8002376:	e00a      	b.n	800238e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800238a:	e000      	b.n	800238e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800238c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <prvProcessReceivedCommands+0x178>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f107 0108 	add.w	r1, r7, #8
 8002396:	2200      	movs	r2, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fa0d 	bl	80007b8 <xQueueReceive>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f47f af4d 	bne.w	8002240 <prvProcessReceivedCommands+0x8>
        }
    }
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200001bc 	.word	0x200001bc

080023b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80023ba:	e009      	b.n	80023d0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <prvSwitchTimerLists+0x44>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80023c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023ca:	6838      	ldr	r0, [r7, #0]
 80023cc:	f7ff fe1e 	bl	800200c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <prvSwitchTimerLists+0x44>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <prvSwitchTimerLists+0x44>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <prvSwitchTimerLists+0x48>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <prvSwitchTimerLists+0x44>)
 80023e6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <prvSwitchTimerLists+0x48>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6013      	str	r3, [r2, #0]
    }
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200001b4 	.word	0x200001b4
 80023fc:	200001b8 	.word	0x200001b8

08002400 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002404:	f000 f9de 	bl	80027c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <prvCheckForValidListAndQueue+0x54>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11d      	bne.n	800244c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002410:	4811      	ldr	r0, [pc, #68]	; (8002458 <prvCheckForValidListAndQueue+0x58>)
 8002412:	f7fe f838 	bl	8000486 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002416:	4811      	ldr	r0, [pc, #68]	; (800245c <prvCheckForValidListAndQueue+0x5c>)
 8002418:	f7fe f835 	bl	8000486 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <prvCheckForValidListAndQueue+0x60>)
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <prvCheckForValidListAndQueue+0x58>)
 8002420:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <prvCheckForValidListAndQueue+0x64>)
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <prvCheckForValidListAndQueue+0x5c>)
 8002426:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002428:	2200      	movs	r2, #0
 800242a:	210c      	movs	r1, #12
 800242c:	200a      	movs	r0, #10
 800242e:	f7fe f94b 	bl	80006c8 <xQueueGenericCreate>
 8002432:	4603      	mov	r3, r0
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <prvCheckForValidListAndQueue+0x54>)
 8002436:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <prvCheckForValidListAndQueue+0x54>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <prvCheckForValidListAndQueue+0x54>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4908      	ldr	r1, [pc, #32]	; (8002468 <prvCheckForValidListAndQueue+0x68>)
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fb54 	bl	8000af4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800244c:	f000 f9ea 	bl	8002824 <vPortExitCritical>
    }
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200001bc 	.word	0x200001bc
 8002458:	2000018c 	.word	0x2000018c
 800245c:	200001a0 	.word	0x200001a0
 8002460:	200001b4 	.word	0x200001b4
 8002464:	200001b8 	.word	0x200001b8
 8002468:	08004b34 	.word	0x08004b34

0800246c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3b04      	subs	r3, #4
 800247c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002484:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3b04      	subs	r3, #4
 800248a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f023 0201 	bic.w	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3b04      	subs	r3, #4
 800249a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800249c:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <pxPortInitialiseStack+0x64>)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3b14      	subs	r3, #20
 80024a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3b04      	subs	r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f06f 0202 	mvn.w	r2, #2
 80024ba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3b20      	subs	r3, #32
 80024c0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80024c2:	68fb      	ldr	r3, [r7, #12]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	080024d5 	.word	0x080024d5

080024d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <prvTaskExitError+0x54>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e6:	d00a      	beq.n	80024fe <prvTaskExitError+0x2a>
        __asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	60fb      	str	r3, [r7, #12]
    }
 80024fa:	bf00      	nop
 80024fc:	e7fe      	b.n	80024fc <prvTaskExitError+0x28>
        __asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	60bb      	str	r3, [r7, #8]
    }
 8002510:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002512:	bf00      	nop
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0fc      	beq.n	8002514 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	20000008 	.word	0x20000008
 800252c:	00000000 	.word	0x00000000

08002530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <pxCurrentTCBConst2>)
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	6808      	ldr	r0, [r1, #0]
 8002536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800253a:	f380 8809 	msr	PSP, r0
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f380 8811 	msr	BASEPRI, r0
 800254a:	4770      	bx	lr
 800254c:	f3af 8000 	nop.w

08002550 <pxCurrentTCBConst2>:
 8002550:	20000088 	.word	0x20000088
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop

08002558 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002558:	4808      	ldr	r0, [pc, #32]	; (800257c <prvPortStartFirstTask+0x24>)
 800255a:	6800      	ldr	r0, [r0, #0]
 800255c:	6800      	ldr	r0, [r0, #0]
 800255e:	f380 8808 	msr	MSP, r0
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	f380 8814 	msr	CONTROL, r0
 800256a:	b662      	cpsie	i
 800256c:	b661      	cpsie	f
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	f3bf 8f6f 	isb	sy
 8002576:	df00      	svc	0
 8002578:	bf00      	nop
 800257a:	0000      	.short	0x0000
 800257c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop

08002584 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800258a:	4b46      	ldr	r3, [pc, #280]	; (80026a4 <xPortStartScheduler+0x120>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a46      	ldr	r2, [pc, #280]	; (80026a8 <xPortStartScheduler+0x124>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d10a      	bne.n	80025aa <xPortStartScheduler+0x26>
        __asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	613b      	str	r3, [r7, #16]
    }
 80025a6:	bf00      	nop
 80025a8:	e7fe      	b.n	80025a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80025aa:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <xPortStartScheduler+0x120>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a3f      	ldr	r2, [pc, #252]	; (80026ac <xPortStartScheduler+0x128>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d10a      	bne.n	80025ca <xPortStartScheduler+0x46>
        __asm volatile
 80025b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b8:	f383 8811 	msr	BASEPRI, r3
 80025bc:	f3bf 8f6f 	isb	sy
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	60fb      	str	r3, [r7, #12]
    }
 80025c6:	bf00      	nop
 80025c8:	e7fe      	b.n	80025c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80025ca:	4b39      	ldr	r3, [pc, #228]	; (80026b0 <xPortStartScheduler+0x12c>)
 80025cc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	22ff      	movs	r2, #255	; 0xff
 80025da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <xPortStartScheduler+0x130>)
 80025f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80025f2:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <xPortStartScheduler+0x134>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025f8:	e009      	b.n	800260e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80025fa:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <xPortStartScheduler+0x134>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3b01      	subs	r3, #1
 8002600:	4a2d      	ldr	r2, [pc, #180]	; (80026b8 <xPortStartScheduler+0x134>)
 8002602:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b80      	cmp	r3, #128	; 0x80
 8002618:	d0ef      	beq.n	80025fa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800261a:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <xPortStartScheduler+0x134>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	d00a      	beq.n	800263c <xPortStartScheduler+0xb8>
        __asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	60bb      	str	r3, [r7, #8]
    }
 8002638:	bf00      	nop
 800263a:	e7fe      	b.n	800263a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <xPortStartScheduler+0x134>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <xPortStartScheduler+0x134>)
 8002644:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <xPortStartScheduler+0x134>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800264e:	4a1a      	ldr	r2, [pc, #104]	; (80026b8 <xPortStartScheduler+0x134>)
 8002650:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <xPortStartScheduler+0x138>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <xPortStartScheduler+0x138>)
 8002660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002664:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <xPortStartScheduler+0x138>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a14      	ldr	r2, [pc, #80]	; (80026bc <xPortStartScheduler+0x138>)
 800266c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002670:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002672:	f000 f963 	bl	800293c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <xPortStartScheduler+0x13c>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800267c:	f000 f982 	bl	8002984 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002680:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <xPortStartScheduler+0x140>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <xPortStartScheduler+0x140>)
 8002686:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800268a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800268c:	f7ff ff64 	bl	8002558 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002690:	f7fe ff26 	bl	80014e0 <vTaskSwitchContext>
    prvTaskExitError();
 8002694:	f7ff ff1e 	bl	80024d4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00
 80026a8:	410fc271 	.word	0x410fc271
 80026ac:	410fc270 	.word	0x410fc270
 80026b0:	e000e400 	.word	0xe000e400
 80026b4:	200001c8 	.word	0x200001c8
 80026b8:	200001cc 	.word	0x200001cc
 80026bc:	e000ed20 	.word	0xe000ed20
 80026c0:	20000008 	.word	0x20000008
 80026c4:	e000ef34 	.word	0xe000ef34

080026c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80026ce:	4b37      	ldr	r3, [pc, #220]	; (80027ac <vInitPrioGroupValue+0xe4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a37      	ldr	r2, [pc, #220]	; (80027b0 <vInitPrioGroupValue+0xe8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10a      	bne.n	80026ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	613b      	str	r3, [r7, #16]
    }
 80026ea:	bf00      	nop
 80026ec:	e7fe      	b.n	80026ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80026ee:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <vInitPrioGroupValue+0xe4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a30      	ldr	r2, [pc, #192]	; (80027b4 <vInitPrioGroupValue+0xec>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10a      	bne.n	800270e <vInitPrioGroupValue+0x46>
        __asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	60fb      	str	r3, [r7, #12]
    }
 800270a:	bf00      	nop
 800270c:	e7fe      	b.n	800270c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800270e:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <vInitPrioGroupValue+0xf0>)
 8002710:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	22ff      	movs	r2, #255	; 0xff
 800271e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <vInitPrioGroupValue+0xf4>)
 8002734:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <vInitPrioGroupValue+0xf8>)
 8002738:	2207      	movs	r2, #7
 800273a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800273c:	e009      	b.n	8002752 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <vInitPrioGroupValue+0xf8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3b01      	subs	r3, #1
 8002744:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <vInitPrioGroupValue+0xf8>)
 8002746:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b80      	cmp	r3, #128	; 0x80
 800275c:	d0ef      	beq.n	800273e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <vInitPrioGroupValue+0xf8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f1c3 0307 	rsb	r3, r3, #7
 8002766:	2b04      	cmp	r3, #4
 8002768:	d00a      	beq.n	8002780 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	60bb      	str	r3, [r7, #8]
    }
 800277c:	bf00      	nop
 800277e:	e7fe      	b.n	800277e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <vInitPrioGroupValue+0xf8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <vInitPrioGroupValue+0xf8>)
 8002788:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <vInitPrioGroupValue+0xf8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <vInitPrioGroupValue+0xf8>)
 8002794:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	410fc271 	.word	0x410fc271
 80027b4:	410fc270 	.word	0x410fc270
 80027b8:	e000e400 	.word	0xe000e400
 80027bc:	200001c8 	.word	0x200001c8
 80027c0:	200001cc 	.word	0x200001cc

080027c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
        __asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	607b      	str	r3, [r7, #4]
    }
 80027dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <vPortEnterCritical+0x58>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <vPortEnterCritical+0x58>)
 80027e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <vPortEnterCritical+0x58>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10f      	bne.n	8002810 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <vPortEnterCritical+0x5c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <vPortEnterCritical+0x4c>
        __asm volatile
 80027fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	603b      	str	r3, [r7, #0]
    }
 800280c:	bf00      	nop
 800280e:	e7fe      	b.n	800280e <vPortEnterCritical+0x4a>
    }
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	20000008 	.word	0x20000008
 8002820:	e000ed04 	.word	0xe000ed04

08002824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <vPortExitCritical+0x50>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <vPortExitCritical+0x24>
        __asm volatile
 8002832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002836:	f383 8811 	msr	BASEPRI, r3
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	607b      	str	r3, [r7, #4]
    }
 8002844:	bf00      	nop
 8002846:	e7fe      	b.n	8002846 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <vPortExitCritical+0x50>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3b01      	subs	r3, #1
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <vPortExitCritical+0x50>)
 8002850:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <vPortExitCritical+0x50>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <vPortExitCritical+0x42>
 800285a:	2300      	movs	r3, #0
 800285c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002864:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000008 	.word	0x20000008
	...

08002880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002880:	f3ef 8009 	mrs	r0, PSP
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <pxCurrentTCBConst>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	f01e 0f10 	tst.w	lr, #16
 8002890:	bf08      	it	eq
 8002892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800289a:	6010      	str	r0, [r2, #0]
 800289c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80028a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028a4:	f380 8811 	msr	BASEPRI, r0
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f7fe fe16 	bl	80014e0 <vTaskSwitchContext>
 80028b4:	f04f 0000 	mov.w	r0, #0
 80028b8:	f380 8811 	msr	BASEPRI, r0
 80028bc:	bc09      	pop	{r0, r3}
 80028be:	6819      	ldr	r1, [r3, #0]
 80028c0:	6808      	ldr	r0, [r1, #0]
 80028c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c6:	f01e 0f10 	tst.w	lr, #16
 80028ca:	bf08      	it	eq
 80028cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80028d0:	f380 8809 	msr	PSP, r0
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	f3af 8000 	nop.w

080028e0 <pxCurrentTCBConst>:
 80028e0:	20000088 	.word	0x20000088
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop

080028e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
        __asm volatile
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	607b      	str	r3, [r7, #4]
    }
 8002900:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002902:	f001 fc5f 	bl	80041c4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002906:	f7fe fcd1 	bl	80012ac <xTaskIncrementTick>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002910:	f001 fcb6 	bl	8004280 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <SysTick_Handler+0x50>)
 8002916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e001      	b.n	8002922 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800291e:	f001 fc93 	bl	8004248 <SEGGER_SYSVIEW_RecordExitISR>
 8002922:	2300      	movs	r3, #0
 8002924:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f383 8811 	msr	BASEPRI, r3
    }
 800292c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	e000ed04 	.word	0xe000ed04

0800293c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <vPortSetupTimerInterrupt+0x34>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <vPortSetupTimerInterrupt+0x38>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <vPortSetupTimerInterrupt+0x3c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <vPortSetupTimerInterrupt+0x40>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	099b      	lsrs	r3, r3, #6
 8002958:	4a09      	ldr	r2, [pc, #36]	; (8002980 <vPortSetupTimerInterrupt+0x44>)
 800295a:	3b01      	subs	r3, #1
 800295c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <vPortSetupTimerInterrupt+0x34>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010
 8002974:	e000e018 	.word	0xe000e018
 8002978:	20000000 	.word	0x20000000
 800297c:	10624dd3 	.word	0x10624dd3
 8002980:	e000e014 	.word	0xe000e014

08002984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002994 <vPortEnableVFP+0x10>
 8002988:	6801      	ldr	r1, [r0, #0]
 800298a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800298e:	6001      	str	r1, [r0, #0]
 8002990:	4770      	bx	lr
 8002992:	0000      	.short	0x0000
 8002994:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop

0800299c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80029a2:	f3ef 8305 	mrs	r3, IPSR
 80029a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b0f      	cmp	r3, #15
 80029ac:	d914      	bls.n	80029d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80029ae:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <vPortValidateInterruptPriority+0x70>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80029b8:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <vPortValidateInterruptPriority+0x74>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	7afa      	ldrb	r2, [r7, #11]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d20a      	bcs.n	80029d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	607b      	str	r3, [r7, #4]
    }
 80029d4:	bf00      	nop
 80029d6:	e7fe      	b.n	80029d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <vPortValidateInterruptPriority+0x78>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <vPortValidateInterruptPriority+0x7c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d90a      	bls.n	80029fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	603b      	str	r3, [r7, #0]
    }
 80029fa:	bf00      	nop
 80029fc:	e7fe      	b.n	80029fc <vPortValidateInterruptPriority+0x60>
    }
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000e3f0 	.word	0xe000e3f0
 8002a10:	200001c8 	.word	0x200001c8
 8002a14:	e000ed0c 	.word	0xe000ed0c
 8002a18:	200001cc 	.word	0x200001cc

08002a1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002a28:	f7fe fb10 	bl	800104c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002a2c:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <pvPortMalloc+0x160>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002a34:	f000 f908 	bl	8002c48 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d012      	beq.n	8002a64 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002a3e:	2208      	movs	r2, #8
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	3308      	adds	r3, #8
 8002a4a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d804      	bhi.n	8002a60 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	e001      	b.n	8002a64 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	db70      	blt.n	8002b4c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d06d      	beq.n	8002b4c <pvPortMalloc+0x130>
 8002a70:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <pvPortMalloc+0x164>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d868      	bhi.n	8002b4c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002a7a:	4b42      	ldr	r3, [pc, #264]	; (8002b84 <pvPortMalloc+0x168>)
 8002a7c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002a7e:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <pvPortMalloc+0x168>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a84:	e004      	b.n	8002a90 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d903      	bls.n	8002aa2 <pvPortMalloc+0x86>
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f1      	bne.n	8002a86 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002aa2:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <pvPortMalloc+0x160>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d04f      	beq.n	8002b4c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	4413      	add	r3, r2
 8002ab4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	1ad2      	subs	r2, r2, r3
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d91f      	bls.n	8002b0e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <pvPortMalloc+0xda>
        __asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	613b      	str	r3, [r7, #16]
    }
 8002af2:	bf00      	nop
 8002af4:	e7fe      	b.n	8002af4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	1ad2      	subs	r2, r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b08:	6978      	ldr	r0, [r7, #20]
 8002b0a:	f000 f8f9 	bl	8002d00 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b0e:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <pvPortMalloc+0x164>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <pvPortMalloc+0x164>)
 8002b1a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <pvPortMalloc+0x164>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <pvPortMalloc+0x16c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d203      	bcs.n	8002b30 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b28:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <pvPortMalloc+0x164>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <pvPortMalloc+0x16c>)
 8002b2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <pvPortMalloc+0x170>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <pvPortMalloc+0x170>)
 8002b4a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002b4c:	f7fe fa8c 	bl	8001068 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <pvPortMalloc+0x154>
        __asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	60fb      	str	r3, [r7, #12]
    }
 8002b6c:	bf00      	nop
 8002b6e:	e7fe      	b.n	8002b6e <pvPortMalloc+0x152>
    return pvReturn;
 8002b70:	69fb      	ldr	r3, [r7, #28]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3728      	adds	r7, #40	; 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20012dd8 	.word	0x20012dd8
 8002b80:	20012ddc 	.word	0x20012ddc
 8002b84:	20012dd0 	.word	0x20012dd0
 8002b88:	20012de0 	.word	0x20012de0
 8002b8c:	20012de4 	.word	0x20012de4

08002b90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d049      	beq.n	8002c36 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	425b      	negs	r3, r3
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4413      	add	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <vPortFree+0x3e>
        __asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	60fb      	str	r3, [r7, #12]
    }
 8002bca:	bf00      	nop
 8002bcc:	e7fe      	b.n	8002bcc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <vPortFree+0x5c>
        __asm volatile
 8002bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	60bb      	str	r3, [r7, #8]
    }
 8002be8:	bf00      	nop
 8002bea:	e7fe      	b.n	8002bea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	0fdb      	lsrs	r3, r3, #31
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01c      	beq.n	8002c36 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d118      	bne.n	8002c36 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002c10:	f7fe fa1c 	bl	800104c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <vPortFree+0xb0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <vPortFree+0xb0>)
 8002c20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c22:	6938      	ldr	r0, [r7, #16]
 8002c24:	f000 f86c 	bl	8002d00 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <vPortFree+0xb4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <vPortFree+0xb4>)
 8002c30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002c32:	f7fe fa19 	bl	8001068 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20012ddc 	.word	0x20012ddc
 8002c44:	20012de8 	.word	0x20012de8

08002c48 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c4e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002c52:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <prvHeapInit+0xa4>)
 8002c56:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00c      	beq.n	8002c7c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3307      	adds	r3, #7
 8002c66:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0307 	bic.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <prvHeapInit+0xa4>)
 8002c78:	4413      	add	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <prvHeapInit+0xa8>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <prvHeapInit+0xa8>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	4413      	add	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002c94:	2208      	movs	r2, #8
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0307 	bic.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a13      	ldr	r2, [pc, #76]	; (8002cf4 <prvHeapInit+0xac>)
 8002ca8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <prvHeapInit+0xac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <prvHeapInit+0xac>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	1ad2      	subs	r2, r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <prvHeapInit+0xac>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a08      	ldr	r2, [pc, #32]	; (8002cf8 <prvHeapInit+0xb0>)
 8002cd6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <prvHeapInit+0xb4>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	200001d0 	.word	0x200001d0
 8002cf0:	20012dd0 	.word	0x20012dd0
 8002cf4:	20012dd8 	.word	0x20012dd8
 8002cf8:	20012de0 	.word	0x20012de0
 8002cfc:	20012ddc 	.word	0x20012ddc

08002d00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d08:	4b28      	ldr	r3, [pc, #160]	; (8002dac <prvInsertBlockIntoFreeList+0xac>)
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e002      	b.n	8002d14 <prvInsertBlockIntoFreeList+0x14>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d8f7      	bhi.n	8002d0e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	4413      	add	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d108      	bne.n	8002d42 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	441a      	add	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	441a      	add	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d118      	bne.n	8002d88 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <prvInsertBlockIntoFreeList+0xb0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d00d      	beq.n	8002d7e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	441a      	add	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e008      	b.n	8002d90 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <prvInsertBlockIntoFreeList+0xb0>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e003      	b.n	8002d90 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d002      	beq.n	8002d9e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20012dd0 	.word	0x20012dd0
 8002db0:	20012dd8 	.word	0x20012dd8

08002db4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002db8:	4803      	ldr	r0, [pc, #12]	; (8002dc8 <_cbSendSystemDesc+0x14>)
 8002dba:	f001 f9ad 	bl	8004118 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002dbe:	4803      	ldr	r0, [pc, #12]	; (8002dcc <_cbSendSystemDesc+0x18>)
 8002dc0:	f001 f9aa 	bl	8004118 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	08004b3c 	.word	0x08004b3c
 8002dcc:	08004b68 	.word	0x08004b68

08002dd0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <SEGGER_SYSVIEW_Conf+0x20>)
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <SEGGER_SYSVIEW_Conf+0x20>)
 8002dda:	6819      	ldr	r1, [r3, #0]
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <SEGGER_SYSVIEW_Conf+0x24>)
 8002dde:	4a06      	ldr	r2, [pc, #24]	; (8002df8 <SEGGER_SYSVIEW_Conf+0x28>)
 8002de0:	f000 fd18 	bl	8003814 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002de4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002de8:	f000 fd58 	bl	800389c <SEGGER_SYSVIEW_SetRAMBase>
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000000 	.word	0x20000000
 8002df4:	08002db5 	.word	0x08002db5
 8002df8:	08004bf0 	.word	0x08004bf0

08002dfc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	e033      	b.n	8002e70 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002e08:	491e      	ldr	r1, [pc, #120]	; (8002e84 <_cbSendTaskList+0x88>)
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	491a      	ldr	r1, [pc, #104]	; (8002e84 <_cbSendTaskList+0x88>)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3304      	adds	r3, #4
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	4c16      	ldr	r4, [pc, #88]	; (8002e84 <_cbSendTaskList+0x88>)
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4423      	add	r3, r4
 8002e38:	3308      	adds	r3, #8
 8002e3a:	681c      	ldr	r4, [r3, #0]
 8002e3c:	4d11      	ldr	r5, [pc, #68]	; (8002e84 <_cbSendTaskList+0x88>)
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	442b      	add	r3, r5
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	681d      	ldr	r5, [r3, #0]
 8002e4e:	4e0d      	ldr	r6, [pc, #52]	; (8002e84 <_cbSendTaskList+0x88>)
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4433      	add	r3, r6
 8002e5c:	3310      	adds	r3, #16
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	462b      	mov	r3, r5
 8002e64:	4622      	mov	r2, r4
 8002e66:	f000 f8bd 	bl	8002fe4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <_cbSendTaskList+0x8c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d3c6      	bcc.n	8002e08 <_cbSendTaskList+0xc>
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e84:	20012dec 	.word	0x20012dec
 8002e88:	20012e8c 	.word	0x20012e8c

08002e8c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002e94:	f7fe f9f8 	bl	8001288 <xTaskGetTickCountFromISR>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	469a      	mov	sl, r3
 8002e9e:	4693      	mov	fp, r2
 8002ea0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	f04f 0a00 	mov.w	sl, #0
 8002eb0:	f04f 0b00 	mov.w	fp, #0
 8002eb4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002eb8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002ebc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002ec0:	4652      	mov	r2, sl
 8002ec2:	465b      	mov	r3, fp
 8002ec4:	1a14      	subs	r4, r2, r0
 8002ec6:	eb63 0501 	sbc.w	r5, r3, r1
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	00ab      	lsls	r3, r5, #2
 8002ed4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002ed8:	00a2      	lsls	r2, r4, #2
 8002eda:	4614      	mov	r4, r2
 8002edc:	461d      	mov	r5, r3
 8002ede:	eb14 0800 	adds.w	r8, r4, r0
 8002ee2:	eb45 0901 	adc.w	r9, r5, r1
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efa:	4690      	mov	r8, r2
 8002efc:	4699      	mov	r9, r3
 8002efe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002f02:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002f14 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002f22:	2205      	movs	r2, #5
 8002f24:	492b      	ldr	r1, [pc, #172]	; (8002fd4 <SYSVIEW_AddTask+0xc0>)
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	f001 fda4 	bl	8004a74 <memcmp>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04b      	beq.n	8002fca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <SYSVIEW_AddTask+0xc4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b07      	cmp	r3, #7
 8002f38:	d903      	bls.n	8002f42 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002f3a:	4828      	ldr	r0, [pc, #160]	; (8002fdc <SYSVIEW_AddTask+0xc8>)
 8002f3c:	f001 fb8a 	bl	8004654 <SEGGER_SYSVIEW_Warn>
    return;
 8002f40:	e044      	b.n	8002fcc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002f42:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <SYSVIEW_AddTask+0xc4>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4926      	ldr	r1, [pc, #152]	; (8002fe0 <SYSVIEW_AddTask+0xcc>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <SYSVIEW_AddTask+0xc4>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4921      	ldr	r1, [pc, #132]	; (8002fe0 <SYSVIEW_AddTask+0xcc>)
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	3304      	adds	r3, #4
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <SYSVIEW_AddTask+0xc4>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	491b      	ldr	r1, [pc, #108]	; (8002fe0 <SYSVIEW_AddTask+0xcc>)
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3308      	adds	r3, #8
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <SYSVIEW_AddTask+0xc4>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4916      	ldr	r1, [pc, #88]	; (8002fe0 <SYSVIEW_AddTask+0xcc>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	330c      	adds	r3, #12
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <SYSVIEW_AddTask+0xc4>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4910      	ldr	r1, [pc, #64]	; (8002fe0 <SYSVIEW_AddTask+0xcc>)
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3310      	adds	r3, #16
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <SYSVIEW_AddTask+0xc4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	4a08      	ldr	r2, [pc, #32]	; (8002fd8 <SYSVIEW_AddTask+0xc4>)
 8002fb6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f80e 	bl	8002fe4 <SYSVIEW_SendTaskInfo>
 8002fc8:	e000      	b.n	8002fcc <SYSVIEW_AddTask+0xb8>
    return;
 8002fca:	bf00      	nop

}
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	08004b78 	.word	0x08004b78
 8002fd8:	20012e8c 	.word	0x20012e8c
 8002fdc:	08004b80 	.word	0x08004b80
 8002fe0:	20012dec 	.word	0x20012dec

08002fe4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	; 0x28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	2214      	movs	r2, #20
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f001 fd58 	bl	8004ab0 <memset>
  TaskInfo.TaskID     = TaskID;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	4618      	mov	r0, r3
 800301a:	f000 ff85 	bl	8003f28 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800301e:	bf00      	nop
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <_DoInit+0x98>)
 8003030:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2203      	movs	r2, #3
 8003036:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2203      	movs	r2, #3
 800303c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <_DoInit+0x9c>)
 8003042:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a20      	ldr	r2, [pc, #128]	; (80030c8 <_DoInit+0xa0>)
 8003048:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003050:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <_DoInit+0x9c>)
 8003068:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a17      	ldr	r2, [pc, #92]	; (80030cc <_DoInit+0xa4>)
 800306e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2210      	movs	r2, #16
 8003074:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3307      	adds	r3, #7
 800308c:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <_DoInit+0xa8>)
 800308e:	6810      	ldr	r0, [r2, #0]
 8003090:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003092:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <_DoInit+0xac>)
 800309a:	6810      	ldr	r0, [r2, #0]
 800309c:	6018      	str	r0, [r3, #0]
 800309e:	8891      	ldrh	r1, [r2, #4]
 80030a0:	7992      	ldrb	r2, [r2, #6]
 80030a2:	8099      	strh	r1, [r3, #4]
 80030a4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80030a6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80030b0:	f3bf 8f5f 	dmb	sy
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	20012e90 	.word	0x20012e90
 80030c4:	08004bd0 	.word	0x08004bd0
 80030c8:	20012f38 	.word	0x20012f38
 80030cc:	20013338 	.word	0x20013338
 80030d0:	08004bdc 	.word	0x08004bdc
 80030d4:	08004be0 	.word	0x08004be0

080030d8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	; 0x30
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80030e4:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <SEGGER_RTT_ReadNoLock+0x108>)
 80030e6:	623b      	str	r3, [r7, #32]
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <SEGGER_RTT_ReadNoLock+0x1e>
 80030f2:	f7ff ff99 	bl	8003028 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	3360      	adds	r3, #96	; 0x60
 8003102:	4a37      	ldr	r2, [pc, #220]	; (80031e0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003104:	4413      	add	r3, r2
 8003106:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003118:	2300      	movs	r3, #0
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800311c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	429a      	cmp	r2, r3
 8003122:	d92b      	bls.n	800317c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4293      	cmp	r3, r2
 8003134:	bf28      	it	cs
 8003136:	4613      	movcs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	4413      	add	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	6939      	ldr	r1, [r7, #16]
 8003148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800314a:	f001 fca3 	bl	8004a94 <memcpy>
    NumBytesRead += NumBytesRem;
 800314e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	4413      	add	r3, r2
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	4413      	add	r3, r2
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	4413      	add	r3, r2
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003174:	429a      	cmp	r2, r3
 8003176:	d101      	bne.n	800317c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003178:	2300      	movs	r3, #0
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4293      	cmp	r3, r2
 800318a:	bf28      	it	cs
 800318c:	4613      	movcs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d019      	beq.n	80031ca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	4413      	add	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	6939      	ldr	r1, [r7, #16]
 80031a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031a6:	f001 fc75 	bl	8004a94 <memcpy>
    NumBytesRead += NumBytesRem;
 80031aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	4413      	add	r3, r2
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4413      	add	r3, r2
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80031c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	4413      	add	r3, r2
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80031ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3730      	adds	r7, #48	; 0x30
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20012e90 	.word	0x20012e90

080031e4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80031f2:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003200:	f7ff ff12 	bl	8003028 <_DoInit>
  SEGGER_RTT_LOCK();
 8003204:	f3ef 8311 	mrs	r3, BASEPRI
 8003208:	f04f 0120 	mov.w	r1, #32
 800320c:	f381 8811 	msr	BASEPRI, r1
 8003210:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003212:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003214:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800321a:	6939      	ldr	r1, [r7, #16]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	3304      	adds	r3, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3301      	adds	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	429a      	cmp	r2, r3
 8003240:	dbeb      	blt.n	800321a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003242:	e000      	b.n	8003246 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003244:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	429a      	cmp	r2, r3
 800324e:	da3f      	bge.n	80032d0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003250:	6939      	ldr	r1, [r7, #16]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003264:	6939      	ldr	r1, [r7, #16]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	3304      	adds	r3, #4
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800327a:	6939      	ldr	r1, [r7, #16]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	440b      	add	r3, r1
 8003288:	3320      	adds	r3, #32
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800328e:	6939      	ldr	r1, [r7, #16]
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	3328      	adds	r3, #40	; 0x28
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80032a2:	6939      	ldr	r1, [r7, #16]
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	440b      	add	r3, r1
 80032b0:	3324      	adds	r3, #36	; 0x24
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80032b6:	6939      	ldr	r1, [r7, #16]
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	332c      	adds	r3, #44	; 0x2c
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80032ca:	f3bf 8f5f 	dmb	sy
 80032ce:	e002      	b.n	80032d6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80032dc:	69fb      	ldr	r3, [r7, #28]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20012e90 	.word	0x20012e90

080032ec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80032fa:	4b33      	ldr	r3, [pc, #204]	; (80033c8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003308:	f7ff fe8e 	bl	8003028 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800330c:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800330e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	461a      	mov	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4293      	cmp	r3, r2
 800331a:	d24d      	bcs.n	80033b8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800331c:	f3ef 8311 	mrs	r3, BASEPRI
 8003320:	f04f 0120 	mov.w	r1, #32
 8003324:	f381 8811 	msr	BASEPRI, r1
 8003328:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d031      	beq.n	8003394 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003330:	6979      	ldr	r1, [r7, #20]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	3360      	adds	r3, #96	; 0x60
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003344:	6979      	ldr	r1, [r7, #20]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	3364      	adds	r3, #100	; 0x64
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003358:	6979      	ldr	r1, [r7, #20]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	3368      	adds	r3, #104	; 0x68
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800336c:	6979      	ldr	r1, [r7, #20]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	440b      	add	r3, r1
 800337a:	3370      	adds	r3, #112	; 0x70
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003380:	6979      	ldr	r1, [r7, #20]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	336c      	adds	r3, #108	; 0x6c
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003394:	6979      	ldr	r1, [r7, #20]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	3374      	adds	r3, #116	; 0x74
 80033a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80033a8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e002      	b.n	80033be <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80033b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033bc:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80033be:	69fb      	ldr	r3, [r7, #28]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20012e90 	.word	0x20012e90

080033cc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80033dc:	e002      	b.n	80033e4 <_EncodeStr+0x18>
    Len++;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	3301      	adds	r3, #1
 80033e2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f6      	bne.n	80033de <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d901      	bls.n	80033fc <_EncodeStr+0x30>
    Len = Limit;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2bfe      	cmp	r3, #254	; 0xfe
 8003400:	d806      	bhi.n	8003410 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	60fa      	str	r2, [r7, #12]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	e011      	b.n	8003434 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	60fa      	str	r2, [r7, #12]
 8003416:	22ff      	movs	r2, #255	; 0xff
 8003418:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	60fa      	str	r2, [r7, #12]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	0a19      	lsrs	r1, r3, #8
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	60fa      	str	r2, [r7, #12]
 8003430:	b2ca      	uxtb	r2, r1
 8003432:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003438:	e00a      	b.n	8003450 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	1c53      	adds	r3, r2, #1
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1c59      	adds	r1, r3, #1
 8003444:	60f9      	str	r1, [r7, #12]
 8003446:	7812      	ldrb	r2, [r2, #0]
 8003448:	701a      	strb	r2, [r3, #0]
    n++;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3301      	adds	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	429a      	cmp	r2, r3
 8003456:	d3f0      	bcc.n	800343a <_EncodeStr+0x6e>
  }
  return pPayload;
 8003458:	68fb      	ldr	r3, [r7, #12]
}
 800345a:	4618      	mov	r0, r3
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003486:	4b36      	ldr	r3, [pc, #216]	; (8003560 <_HandleIncomingPacket+0xe0>)
 8003488:	7e1b      	ldrb	r3, [r3, #24]
 800348a:	4618      	mov	r0, r3
 800348c:	1cfb      	adds	r3, r7, #3
 800348e:	2201      	movs	r2, #1
 8003490:	4619      	mov	r1, r3
 8003492:	f7ff fe21 	bl	80030d8 <SEGGER_RTT_ReadNoLock>
 8003496:	4603      	mov	r3, r0
 8003498:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	dd54      	ble.n	800354a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	2b80      	cmp	r3, #128	; 0x80
 80034a4:	d032      	beq.n	800350c <_HandleIncomingPacket+0x8c>
 80034a6:	2b80      	cmp	r3, #128	; 0x80
 80034a8:	dc42      	bgt.n	8003530 <_HandleIncomingPacket+0xb0>
 80034aa:	2b07      	cmp	r3, #7
 80034ac:	dc16      	bgt.n	80034dc <_HandleIncomingPacket+0x5c>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	dd3e      	ble.n	8003530 <_HandleIncomingPacket+0xb0>
 80034b2:	3b01      	subs	r3, #1
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d83b      	bhi.n	8003530 <_HandleIncomingPacket+0xb0>
 80034b8:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <_HandleIncomingPacket+0x40>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034e3 	.word	0x080034e3
 80034c4:	080034e9 	.word	0x080034e9
 80034c8:	080034ef 	.word	0x080034ef
 80034cc:	080034f5 	.word	0x080034f5
 80034d0:	080034fb 	.word	0x080034fb
 80034d4:	08003501 	.word	0x08003501
 80034d8:	08003507 	.word	0x08003507
 80034dc:	2b7f      	cmp	r3, #127	; 0x7f
 80034de:	d036      	beq.n	800354e <_HandleIncomingPacket+0xce>
 80034e0:	e026      	b.n	8003530 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80034e2:	f000 fba7 	bl	8003c34 <SEGGER_SYSVIEW_Start>
      break;
 80034e6:	e037      	b.n	8003558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80034e8:	f000 fc5e 	bl	8003da8 <SEGGER_SYSVIEW_Stop>
      break;
 80034ec:	e034      	b.n	8003558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80034ee:	f000 fe37 	bl	8004160 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80034f2:	e031      	b.n	8003558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80034f4:	f000 fdfc 	bl	80040f0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80034f8:	e02e      	b.n	8003558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80034fa:	f000 fc7b 	bl	8003df4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80034fe:	e02b      	b.n	8003558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003500:	f001 f86a 	bl	80045d8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003504:	e028      	b.n	8003558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003506:	f001 f849 	bl	800459c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800350a:	e025      	b.n	8003558 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <_HandleIncomingPacket+0xe0>)
 800350e:	7e1b      	ldrb	r3, [r3, #24]
 8003510:	4618      	mov	r0, r3
 8003512:	1cfb      	adds	r3, r7, #3
 8003514:	2201      	movs	r2, #1
 8003516:	4619      	mov	r1, r3
 8003518:	f7ff fdde 	bl	80030d8 <SEGGER_RTT_ReadNoLock>
 800351c:	4603      	mov	r3, r0
 800351e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	dd15      	ble.n	8003552 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	4618      	mov	r0, r3
 800352a:	f000 ffb7 	bl	800449c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800352e:	e010      	b.n	8003552 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	b25b      	sxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	da0e      	bge.n	8003556 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <_HandleIncomingPacket+0xe0>)
 800353a:	7e1b      	ldrb	r3, [r3, #24]
 800353c:	4618      	mov	r0, r3
 800353e:	1cfb      	adds	r3, r7, #3
 8003540:	2201      	movs	r2, #1
 8003542:	4619      	mov	r1, r3
 8003544:	f7ff fdc8 	bl	80030d8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003548:	e005      	b.n	8003556 <_HandleIncomingPacket+0xd6>
    }
  }
 800354a:	bf00      	nop
 800354c:	e004      	b.n	8003558 <_HandleIncomingPacket+0xd8>
      break;
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <_HandleIncomingPacket+0xd8>
      break;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <_HandleIncomingPacket+0xd8>
      break;
 8003556:	bf00      	nop
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20014350 	.word	0x20014350

08003564 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003564:	b580      	push	{r7, lr}
 8003566:	b08c      	sub	sp, #48	; 0x30
 8003568:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800356a:	2301      	movs	r3, #1
 800356c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	3301      	adds	r3, #1
 8003572:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003578:	4b31      	ldr	r3, [pc, #196]	; (8003640 <_TrySendOverflowPacket+0xdc>)
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
 800357e:	e00b      	b.n	8003598 <_TrySendOverflowPacket+0x34>
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	b2da      	uxtb	r2, r3
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	1c59      	adds	r1, r3, #1
 8003588:	62f9      	str	r1, [r7, #44]	; 0x2c
 800358a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003594:	09db      	lsrs	r3, r3, #7
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	2b7f      	cmp	r3, #127	; 0x7f
 800359c:	d8f0      	bhi.n	8003580 <_TrySendOverflowPacket+0x1c>
 800359e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80035ae:	4b25      	ldr	r3, [pc, #148]	; (8003644 <_TrySendOverflowPacket+0xe0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <_TrySendOverflowPacket+0xdc>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	e00b      	b.n	80035e0 <_TrySendOverflowPacket+0x7c>
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	1c59      	adds	r1, r3, #1
 80035d0:	6279      	str	r1, [r7, #36]	; 0x24
 80035d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	09db      	lsrs	r3, r3, #7
 80035de:	623b      	str	r3, [r7, #32]
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	2b7f      	cmp	r3, #127	; 0x7f
 80035e4:	d8f0      	bhi.n	80035c8 <_TrySendOverflowPacket+0x64>
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	627a      	str	r2, [r7, #36]	; 0x24
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <_TrySendOverflowPacket+0xdc>)
 80035f8:	785b      	ldrb	r3, [r3, #1]
 80035fa:	4618      	mov	r0, r3
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	461a      	mov	r2, r3
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	4619      	mov	r1, r3
 8003608:	f7fc fdea 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800360c:	4603      	mov	r3, r0
 800360e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003616:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <_TrySendOverflowPacket+0xdc>)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <_TrySendOverflowPacket+0xdc>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	3b01      	subs	r3, #1
 8003622:	b2da      	uxtb	r2, r3
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <_TrySendOverflowPacket+0xdc>)
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e004      	b.n	8003634 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <_TrySendOverflowPacket+0xdc>)
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	3301      	adds	r3, #1
 8003630:	4a03      	ldr	r2, [pc, #12]	; (8003640 <_TrySendOverflowPacket+0xdc>)
 8003632:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003634:	693b      	ldr	r3, [r7, #16]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3730      	adds	r7, #48	; 0x30
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20014350 	.word	0x20014350
 8003644:	e0001004 	.word	0xe0001004

08003648 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003654:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <_SendPacket+0x1c0>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d010      	beq.n	800367e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800365c:	4b6a      	ldr	r3, [pc, #424]	; (8003808 <_SendPacket+0x1c0>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80a3 	beq.w	80037ac <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003666:	4b68      	ldr	r3, [pc, #416]	; (8003808 <_SendPacket+0x1c0>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d109      	bne.n	8003682 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800366e:	f7ff ff79 	bl	8003564 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003672:	4b65      	ldr	r3, [pc, #404]	; (8003808 <_SendPacket+0x1c0>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	f040 809a 	bne.w	80037b0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800367c:	e001      	b.n	8003682 <_SendPacket+0x3a>
    goto Send;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <_SendPacket+0x3c>
Send:
 8003682:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b1f      	cmp	r3, #31
 8003688:	d809      	bhi.n	800369e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <_SendPacket+0x1c0>)
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	f040 808b 	bne.w	80037b4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b17      	cmp	r3, #23
 80036a2:	d807      	bhi.n	80036b4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e03d      	b.n	8003730 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b7f      	cmp	r3, #127	; 0x7f
 80036c0:	d912      	bls.n	80036e8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	09da      	lsrs	r2, r3, #7
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	3a01      	subs	r2, #1
 80036da:	60fa      	str	r2, [r7, #12]
 80036dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e006      	b.n	80036f6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b7f      	cmp	r3, #127	; 0x7f
 80036fa:	d912      	bls.n	8003722 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	09da      	lsrs	r2, r3, #7
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3b01      	subs	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	3a01      	subs	r2, #1
 8003714:	60fa      	str	r2, [r7, #12]
 8003716:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e006      	b.n	8003730 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3b01      	subs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003730:	4b36      	ldr	r3, [pc, #216]	; (800380c <_SendPacket+0x1c4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003736:	4b34      	ldr	r3, [pc, #208]	; (8003808 <_SendPacket+0x1c0>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	623b      	str	r3, [r7, #32]
 8003748:	e00b      	b.n	8003762 <_SendPacket+0x11a>
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	b2da      	uxtb	r2, r3
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	1c59      	adds	r1, r3, #1
 8003752:	6279      	str	r1, [r7, #36]	; 0x24
 8003754:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	09db      	lsrs	r3, r3, #7
 8003760:	623b      	str	r3, [r7, #32]
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	2b7f      	cmp	r3, #127	; 0x7f
 8003766:	d8f0      	bhi.n	800374a <_SendPacket+0x102>
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	627a      	str	r2, [r7, #36]	; 0x24
 800376e:	6a3a      	ldr	r2, [r7, #32]
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003778:	4b23      	ldr	r3, [pc, #140]	; (8003808 <_SendPacket+0x1c0>)
 800377a:	785b      	ldrb	r3, [r3, #1]
 800377c:	4618      	mov	r0, r3
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	461a      	mov	r2, r3
 8003786:	68f9      	ldr	r1, [r7, #12]
 8003788:	f7fc fd2a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800378c:	4603      	mov	r3, r0
 800378e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003796:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <_SendPacket+0x1c0>)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	60d3      	str	r3, [r2, #12]
 800379c:	e00b      	b.n	80037b6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800379e:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <_SendPacket+0x1c0>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b18      	ldr	r3, [pc, #96]	; (8003808 <_SendPacket+0x1c0>)
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	e004      	b.n	80037b6 <_SendPacket+0x16e>
    goto SendDone;
 80037ac:	bf00      	nop
 80037ae:	e002      	b.n	80037b6 <_SendPacket+0x16e>
      goto SendDone;
 80037b0:	bf00      	nop
 80037b2:	e000      	b.n	80037b6 <_SendPacket+0x16e>
      goto SendDone;
 80037b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <_SendPacket+0x1c0>)
 80037b8:	7e1b      	ldrb	r3, [r3, #24]
 80037ba:	4619      	mov	r1, r3
 80037bc:	4a14      	ldr	r2, [pc, #80]	; (8003810 <_SendPacket+0x1c8>)
 80037be:	460b      	mov	r3, r1
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	440b      	add	r3, r1
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	336c      	adds	r3, #108	; 0x6c
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <_SendPacket+0x1c0>)
 80037ce:	7e1b      	ldrb	r3, [r3, #24]
 80037d0:	4618      	mov	r0, r3
 80037d2:	490f      	ldr	r1, [pc, #60]	; (8003810 <_SendPacket+0x1c8>)
 80037d4:	4603      	mov	r3, r0
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4403      	add	r3, r0
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	440b      	add	r3, r1
 80037de:	3370      	adds	r3, #112	; 0x70
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d00b      	beq.n	80037fe <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <_SendPacket+0x1c0>)
 80037e8:	789b      	ldrb	r3, [r3, #2]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d107      	bne.n	80037fe <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <_SendPacket+0x1c0>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80037f4:	f7ff fe44 	bl	8003480 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <_SendPacket+0x1c0>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80037fe:	bf00      	nop
 8003800:	3728      	adds	r7, #40	; 0x28
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20014350 	.word	0x20014350
 800380c:	e0001004 	.word	0xe0001004
 8003810:	20012e90 	.word	0x20012e90

08003814 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003822:	2300      	movs	r3, #0
 8003824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003828:	4917      	ldr	r1, [pc, #92]	; (8003888 <SEGGER_SYSVIEW_Init+0x74>)
 800382a:	4818      	ldr	r0, [pc, #96]	; (800388c <SEGGER_SYSVIEW_Init+0x78>)
 800382c:	f7ff fcda 	bl	80031e4 <SEGGER_RTT_AllocUpBuffer>
 8003830:	4603      	mov	r3, r0
 8003832:	b2da      	uxtb	r2, r3
 8003834:	4b16      	ldr	r3, [pc, #88]	; (8003890 <SEGGER_SYSVIEW_Init+0x7c>)
 8003836:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003838:	4b15      	ldr	r3, [pc, #84]	; (8003890 <SEGGER_SYSVIEW_Init+0x7c>)
 800383a:	785a      	ldrb	r2, [r3, #1]
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <SEGGER_SYSVIEW_Init+0x7c>)
 800383e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003840:	4b13      	ldr	r3, [pc, #76]	; (8003890 <SEGGER_SYSVIEW_Init+0x7c>)
 8003842:	7e1b      	ldrb	r3, [r3, #24]
 8003844:	4618      	mov	r0, r3
 8003846:	2300      	movs	r3, #0
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2308      	movs	r3, #8
 800384c:	4a11      	ldr	r2, [pc, #68]	; (8003894 <SEGGER_SYSVIEW_Init+0x80>)
 800384e:	490f      	ldr	r1, [pc, #60]	; (800388c <SEGGER_SYSVIEW_Init+0x78>)
 8003850:	f7ff fd4c 	bl	80032ec <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <SEGGER_SYSVIEW_Init+0x7c>)
 8003856:	2200      	movs	r2, #0
 8003858:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800385a:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <SEGGER_SYSVIEW_Init+0x84>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <SEGGER_SYSVIEW_Init+0x7c>)
 8003860:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003862:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <SEGGER_SYSVIEW_Init+0x7c>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003868:	4a09      	ldr	r2, [pc, #36]	; (8003890 <SEGGER_SYSVIEW_Init+0x7c>)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800386e:	4a08      	ldr	r2, [pc, #32]	; (8003890 <SEGGER_SYSVIEW_Init+0x7c>)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003874:	4a06      	ldr	r2, [pc, #24]	; (8003890 <SEGGER_SYSVIEW_Init+0x7c>)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <SEGGER_SYSVIEW_Init+0x7c>)
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20013348 	.word	0x20013348
 800388c:	08004be8 	.word	0x08004be8
 8003890:	20014350 	.word	0x20014350
 8003894:	20014348 	.word	0x20014348
 8003898:	e0001004 	.word	0xe0001004

0800389c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80038a4:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6113      	str	r3, [r2, #16]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20014350 	.word	0x20014350

080038bc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80038c4:	f3ef 8311 	mrs	r3, BASEPRI
 80038c8:	f04f 0120 	mov.w	r1, #32
 80038cc:	f381 8811 	msr	BASEPRI, r1
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	4808      	ldr	r0, [pc, #32]	; (80038f4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80038d4:	f7ff fdc7 	bl	8003466 <_PreparePacket>
 80038d8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	68b8      	ldr	r0, [r7, #8]
 80038e0:	f7ff feb2 	bl	8003648 <_SendPacket>
  RECORD_END();
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f383 8811 	msr	BASEPRI, r3
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20014380 	.word	0x20014380

080038f8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003902:	f3ef 8311 	mrs	r3, BASEPRI
 8003906:	f04f 0120 	mov.w	r1, #32
 800390a:	f381 8811 	msr	BASEPRI, r1
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	4816      	ldr	r0, [pc, #88]	; (800396c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003912:	f7ff fda8 	bl	8003466 <_PreparePacket>
 8003916:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	e00b      	b.n	800393e <SEGGER_SYSVIEW_RecordU32+0x46>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	1c59      	adds	r1, r3, #1
 800392e:	61f9      	str	r1, [r7, #28]
 8003930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	09db      	lsrs	r3, r3, #7
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b7f      	cmp	r3, #127	; 0x7f
 8003942:	d8f0      	bhi.n	8003926 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	61fa      	str	r2, [r7, #28]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	68f9      	ldr	r1, [r7, #12]
 8003958:	6938      	ldr	r0, [r7, #16]
 800395a:	f7ff fe75 	bl	8003648 <_SendPacket>
  RECORD_END();
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f383 8811 	msr	BASEPRI, r3
}
 8003964:	bf00      	nop
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20014380 	.word	0x20014380

08003970 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b08c      	sub	sp, #48	; 0x30
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800397c:	f3ef 8311 	mrs	r3, BASEPRI
 8003980:	f04f 0120 	mov.w	r1, #32
 8003984:	f381 8811 	msr	BASEPRI, r1
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	4825      	ldr	r0, [pc, #148]	; (8003a20 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800398c:	f7ff fd6b 	bl	8003466 <_PreparePacket>
 8003990:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
 800399e:	e00b      	b.n	80039b8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80039a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a6:	1c59      	adds	r1, r3, #1
 80039a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	09db      	lsrs	r3, r3, #7
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ba:	2b7f      	cmp	r3, #127	; 0x7f
 80039bc:	d8f0      	bhi.n	80039a0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	623b      	str	r3, [r7, #32]
 80039d6:	e00b      	b.n	80039f0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	1c59      	adds	r1, r3, #1
 80039e0:	6279      	str	r1, [r7, #36]	; 0x24
 80039e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	09db      	lsrs	r3, r3, #7
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	2b7f      	cmp	r3, #127	; 0x7f
 80039f4:	d8f0      	bhi.n	80039d8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	627a      	str	r2, [r7, #36]	; 0x24
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	6979      	ldr	r1, [r7, #20]
 8003a0a:	69b8      	ldr	r0, [r7, #24]
 8003a0c:	f7ff fe1c 	bl	8003648 <_SendPacket>
  RECORD_END();
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f383 8811 	msr	BASEPRI, r3
}
 8003a16:	bf00      	nop
 8003a18:	3730      	adds	r7, #48	; 0x30
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20014380 	.word	0x20014380

08003a24 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08e      	sub	sp, #56	; 0x38
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a32:	f3ef 8311 	mrs	r3, BASEPRI
 8003a36:	f04f 0120 	mov.w	r1, #32
 8003a3a:	f381 8811 	msr	BASEPRI, r1
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	4832      	ldr	r0, [pc, #200]	; (8003b0c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003a42:	f7ff fd10 	bl	8003466 <_PreparePacket>
 8003a46:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	633b      	str	r3, [r7, #48]	; 0x30
 8003a54:	e00b      	b.n	8003a6e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5c:	1c59      	adds	r1, r3, #1
 8003a5e:	6379      	str	r1, [r7, #52]	; 0x34
 8003a60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	09db      	lsrs	r3, r3, #7
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	2b7f      	cmp	r3, #127	; 0x7f
 8003a72:	d8f0      	bhi.n	8003a56 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	637a      	str	r2, [r7, #52]	; 0x34
 8003a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a8c:	e00b      	b.n	8003aa6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	1c59      	adds	r1, r3, #1
 8003a96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003a98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	09db      	lsrs	r3, r3, #7
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8003aaa:	d8f0      	bhi.n	8003a8e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	e00b      	b.n	8003ade <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1c59      	adds	r1, r3, #1
 8003ace:	6279      	str	r1, [r7, #36]	; 0x24
 8003ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	09db      	lsrs	r3, r3, #7
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ae2:	d8f0      	bhi.n	8003ac6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	627a      	str	r2, [r7, #36]	; 0x24
 8003aea:	6a3a      	ldr	r2, [r7, #32]
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	6979      	ldr	r1, [r7, #20]
 8003af8:	69b8      	ldr	r0, [r7, #24]
 8003afa:	f7ff fda5 	bl	8003648 <_SendPacket>
  RECORD_END();
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f383 8811 	msr	BASEPRI, r3
}
 8003b04:	bf00      	nop
 8003b06:	3738      	adds	r7, #56	; 0x38
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20014380 	.word	0x20014380

08003b10 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b090      	sub	sp, #64	; 0x40
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b22:	f04f 0120 	mov.w	r1, #32
 8003b26:	f381 8811 	msr	BASEPRI, r1
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	4840      	ldr	r0, [pc, #256]	; (8003c30 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003b2e:	f7ff fc9a 	bl	8003466 <_PreparePacket>
 8003b32:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b40:	e00b      	b.n	8003b5a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b48:	1c59      	adds	r1, r3, #1
 8003b4a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003b4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	09db      	lsrs	r3, r3, #7
 8003b58:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b5e:	d8f0      	bhi.n	8003b42 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	633b      	str	r3, [r7, #48]	; 0x30
 8003b78:	e00b      	b.n	8003b92 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b80:	1c59      	adds	r1, r3, #1
 8003b82:	6379      	str	r1, [r7, #52]	; 0x34
 8003b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	09db      	lsrs	r3, r3, #7
 8003b90:	633b      	str	r3, [r7, #48]	; 0x30
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	2b7f      	cmp	r3, #127	; 0x7f
 8003b96:	d8f0      	bhi.n	8003b7a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	637a      	str	r2, [r7, #52]	; 0x34
 8003b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb0:	e00b      	b.n	8003bca <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	1c59      	adds	r1, r3, #1
 8003bba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003bbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	09db      	lsrs	r3, r3, #7
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8003bce:	d8f0      	bhi.n	8003bb2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
 8003be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be6:	623b      	str	r3, [r7, #32]
 8003be8:	e00b      	b.n	8003c02 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	1c59      	adds	r1, r3, #1
 8003bf2:	6279      	str	r1, [r7, #36]	; 0x24
 8003bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	09db      	lsrs	r3, r3, #7
 8003c00:	623b      	str	r3, [r7, #32]
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	2b7f      	cmp	r3, #127	; 0x7f
 8003c06:	d8f0      	bhi.n	8003bea <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c0e:	6a3a      	ldr	r2, [r7, #32]
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	6979      	ldr	r1, [r7, #20]
 8003c1c:	69b8      	ldr	r0, [r7, #24]
 8003c1e:	f7ff fd13 	bl	8003648 <_SendPacket>
  RECORD_END();
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f383 8811 	msr	BASEPRI, r3
}
 8003c28:	bf00      	nop
 8003c2a:	3740      	adds	r7, #64	; 0x40
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20014380 	.word	0x20014380

08003c34 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08c      	sub	sp, #48	; 0x30
 8003c38:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003c3a:	4b58      	ldr	r3, [pc, #352]	; (8003d9c <SEGGER_SYSVIEW_Start+0x168>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003c40:	f3ef 8311 	mrs	r3, BASEPRI
 8003c44:	f04f 0120 	mov.w	r1, #32
 8003c48:	f381 8811 	msr	BASEPRI, r1
 8003c4c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003c4e:	4b53      	ldr	r3, [pc, #332]	; (8003d9c <SEGGER_SYSVIEW_Start+0x168>)
 8003c50:	785b      	ldrb	r3, [r3, #1]
 8003c52:	220a      	movs	r2, #10
 8003c54:	4952      	ldr	r1, [pc, #328]	; (8003da0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fc fac2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003c62:	200a      	movs	r0, #10
 8003c64:	f7ff fe2a 	bl	80038bc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c68:	f3ef 8311 	mrs	r3, BASEPRI
 8003c6c:	f04f 0120 	mov.w	r1, #32
 8003c70:	f381 8811 	msr	BASEPRI, r1
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	484b      	ldr	r0, [pc, #300]	; (8003da4 <SEGGER_SYSVIEW_Start+0x170>)
 8003c78:	f7ff fbf5 	bl	8003466 <_PreparePacket>
 8003c7c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c86:	4b45      	ldr	r3, [pc, #276]	; (8003d9c <SEGGER_SYSVIEW_Start+0x168>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c8c:	e00b      	b.n	8003ca6 <SEGGER_SYSVIEW_Start+0x72>
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	1c59      	adds	r1, r3, #1
 8003c96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	09db      	lsrs	r3, r3, #7
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8003caa:	d8f0      	bhi.n	8003c8e <SEGGER_SYSVIEW_Start+0x5a>
 8003cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc0:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <SEGGER_SYSVIEW_Start+0x168>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	e00b      	b.n	8003ce0 <SEGGER_SYSVIEW_Start+0xac>
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	1c59      	adds	r1, r3, #1
 8003cd0:	6279      	str	r1, [r7, #36]	; 0x24
 8003cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	09db      	lsrs	r3, r3, #7
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ce4:	d8f0      	bhi.n	8003cc8 <SEGGER_SYSVIEW_Start+0x94>
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	627a      	str	r2, [r7, #36]	; 0x24
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <SEGGER_SYSVIEW_Start+0x168>)
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	e00b      	b.n	8003d1a <SEGGER_SYSVIEW_Start+0xe6>
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	1c59      	adds	r1, r3, #1
 8003d0a:	61f9      	str	r1, [r7, #28]
 8003d0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	09db      	lsrs	r3, r3, #7
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d1e:	d8f0      	bhi.n	8003d02 <SEGGER_SYSVIEW_Start+0xce>
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	61fa      	str	r2, [r7, #28]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	e00b      	b.n	8003d52 <SEGGER_SYSVIEW_Start+0x11e>
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	1c59      	adds	r1, r3, #1
 8003d42:	6179      	str	r1, [r7, #20]
 8003d44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	09db      	lsrs	r3, r3, #7
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b7f      	cmp	r3, #127	; 0x7f
 8003d56:	d8f0      	bhi.n	8003d3a <SEGGER_SYSVIEW_Start+0x106>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	617a      	str	r2, [r7, #20]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003d68:	2218      	movs	r2, #24
 8003d6a:	6839      	ldr	r1, [r7, #0]
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff fc6b 	bl	8003648 <_SendPacket>
      RECORD_END();
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <SEGGER_SYSVIEW_Start+0x168>)
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <SEGGER_SYSVIEW_Start+0x168>)
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003d86:	f000 f9eb 	bl	8004160 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003d8a:	f000 f9b1 	bl	80040f0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003d8e:	f000 fc23 	bl	80045d8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003d92:	bf00      	nop
 8003d94:	3730      	adds	r7, #48	; 0x30
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20014350 	.word	0x20014350
 8003da0:	08004bf8 	.word	0x08004bf8
 8003da4:	20014380 	.word	0x20014380

08003da8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003dae:	f3ef 8311 	mrs	r3, BASEPRI
 8003db2:	f04f 0120 	mov.w	r1, #32
 8003db6:	f381 8811 	msr	BASEPRI, r1
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	480b      	ldr	r0, [pc, #44]	; (8003dec <SEGGER_SYSVIEW_Stop+0x44>)
 8003dbe:	f7ff fb52 	bl	8003466 <_PreparePacket>
 8003dc2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003dcc:	220b      	movs	r2, #11
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	6838      	ldr	r0, [r7, #0]
 8003dd2:	f7ff fc39 	bl	8003648 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f383 8811 	msr	BASEPRI, r3
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20014380 	.word	0x20014380
 8003df0:	20014350 	.word	0x20014350

08003df4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08c      	sub	sp, #48	; 0x30
 8003df8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8003dfe:	f04f 0120 	mov.w	r1, #32
 8003e02:	f381 8811 	msr	BASEPRI, r1
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	4845      	ldr	r0, [pc, #276]	; (8003f20 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003e0a:	f7ff fb2c 	bl	8003466 <_PreparePacket>
 8003e0e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e18:	4b42      	ldr	r3, [pc, #264]	; (8003f24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1e:	e00b      	b.n	8003e38 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	1c59      	adds	r1, r3, #1
 8003e28:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	09db      	lsrs	r3, r3, #7
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e3c:	d8f0      	bhi.n	8003e20 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	4b34      	ldr	r3, [pc, #208]	; (8003f24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	623b      	str	r3, [r7, #32]
 8003e58:	e00b      	b.n	8003e72 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	1c59      	adds	r1, r3, #1
 8003e62:	6279      	str	r1, [r7, #36]	; 0x24
 8003e64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	09db      	lsrs	r3, r3, #7
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	2b7f      	cmp	r3, #127	; 0x7f
 8003e76:	d8f0      	bhi.n	8003e5a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	627a      	str	r2, [r7, #36]	; 0x24
 8003e7e:	6a3a      	ldr	r2, [r7, #32]
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	e00b      	b.n	8003eac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	1c59      	adds	r1, r3, #1
 8003e9c:	61f9      	str	r1, [r7, #28]
 8003e9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	09db      	lsrs	r3, r3, #7
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb0:	d8f0      	bhi.n	8003e94 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	61fa      	str	r2, [r7, #28]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	e00b      	b.n	8003ee4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	1c59      	adds	r1, r3, #1
 8003ed4:	6179      	str	r1, [r7, #20]
 8003ed6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	09db      	lsrs	r3, r3, #7
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee8:	d8f0      	bhi.n	8003ecc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	617a      	str	r2, [r7, #20]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003efa:	2218      	movs	r2, #24
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	68b8      	ldr	r0, [r7, #8]
 8003f00:	f7ff fba2 	bl	8003648 <_SendPacket>
  RECORD_END();
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	4798      	blx	r3
  }
}
 8003f18:	bf00      	nop
 8003f1a:	3730      	adds	r7, #48	; 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20014380 	.word	0x20014380
 8003f24:	20014350 	.word	0x20014350

08003f28 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b092      	sub	sp, #72	; 0x48
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003f30:	f3ef 8311 	mrs	r3, BASEPRI
 8003f34:	f04f 0120 	mov.w	r1, #32
 8003f38:	f381 8811 	msr	BASEPRI, r1
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	486a      	ldr	r0, [pc, #424]	; (80040e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003f40:	f7ff fa91 	bl	8003466 <_PreparePacket>
 8003f44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b66      	ldr	r3, [pc, #408]	; (80040ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	643b      	str	r3, [r7, #64]	; 0x40
 8003f5a:	e00b      	b.n	8003f74 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f62:	1c59      	adds	r1, r3, #1
 8003f64:	6479      	str	r1, [r7, #68]	; 0x44
 8003f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f70:	09db      	lsrs	r3, r3, #7
 8003f72:	643b      	str	r3, [r7, #64]	; 0x40
 8003f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f76:	2b7f      	cmp	r3, #127	; 0x7f
 8003f78:	d8f0      	bhi.n	8003f5c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f94:	e00b      	b.n	8003fae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9c:	1c59      	adds	r1, r3, #1
 8003f9e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003fa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	09db      	lsrs	r3, r3, #7
 8003fac:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	2b7f      	cmp	r3, #127	; 0x7f
 8003fb2:	d8f0      	bhi.n	8003f96 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]
 8003fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	4619      	mov	r1, r3
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff f9fd 	bl	80033cc <_EncodeStr>
 8003fd2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003fd4:	2209      	movs	r2, #9
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	6938      	ldr	r0, [r7, #16]
 8003fda:	f7ff fb35 	bl	8003648 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b40      	ldr	r3, [pc, #256]	; (80040ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff2:	e00b      	b.n	800400c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffa:	1c59      	adds	r1, r3, #1
 8003ffc:	6379      	str	r1, [r7, #52]	; 0x34
 8003ffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	09db      	lsrs	r3, r3, #7
 800400a:	633b      	str	r3, [r7, #48]	; 0x30
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	2b7f      	cmp	r3, #127	; 0x7f
 8004010:	d8f0      	bhi.n	8003ff4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	637a      	str	r2, [r7, #52]	; 0x34
 8004018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004020:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
 800402c:	e00b      	b.n	8004046 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	b2da      	uxtb	r2, r3
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	1c59      	adds	r1, r3, #1
 8004036:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004038:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	09db      	lsrs	r3, r3, #7
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	2b7f      	cmp	r3, #127	; 0x7f
 800404a:	d8f0      	bhi.n	800402e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	623b      	str	r3, [r7, #32]
 8004066:	e00b      	b.n	8004080 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	b2da      	uxtb	r2, r3
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	1c59      	adds	r1, r3, #1
 8004070:	6279      	str	r1, [r7, #36]	; 0x24
 8004072:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	09db      	lsrs	r3, r3, #7
 800407e:	623b      	str	r3, [r7, #32]
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	2b7f      	cmp	r3, #127	; 0x7f
 8004084:	d8f0      	bhi.n	8004068 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	627a      	str	r2, [r7, #36]	; 0x24
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	2300      	movs	r3, #0
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	e00b      	b.n	80040b8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	1c59      	adds	r1, r3, #1
 80040a8:	61f9      	str	r1, [r7, #28]
 80040aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	09db      	lsrs	r3, r3, #7
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b7f      	cmp	r3, #127	; 0x7f
 80040bc:	d8f0      	bhi.n	80040a0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	61fa      	str	r2, [r7, #28]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80040ce:	2215      	movs	r2, #21
 80040d0:	68f9      	ldr	r1, [r7, #12]
 80040d2:	6938      	ldr	r0, [r7, #16]
 80040d4:	f7ff fab8 	bl	8003648 <_SendPacket>
  RECORD_END();
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f383 8811 	msr	BASEPRI, r3
}
 80040de:	bf00      	nop
 80040e0:	3748      	adds	r7, #72	; 0x48
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20014380 	.word	0x20014380
 80040ec:	20014350 	.word	0x20014350

080040f0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004106:	4b03      	ldr	r3, [pc, #12]	; (8004114 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4798      	blx	r3
  }
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20014350 	.word	0x20014350

08004118 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004120:	f3ef 8311 	mrs	r3, BASEPRI
 8004124:	f04f 0120 	mov.w	r1, #32
 8004128:	f381 8811 	msr	BASEPRI, r1
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	480b      	ldr	r0, [pc, #44]	; (800415c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004130:	f7ff f999 	bl	8003466 <_PreparePacket>
 8004134:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	6938      	ldr	r0, [r7, #16]
 800413c:	f7ff f946 	bl	80033cc <_EncodeStr>
 8004140:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004142:	220e      	movs	r2, #14
 8004144:	68f9      	ldr	r1, [r7, #12]
 8004146:	6938      	ldr	r0, [r7, #16]
 8004148:	f7ff fa7e 	bl	8003648 <_SendPacket>
  RECORD_END();
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f383 8811 	msr	BASEPRI, r3
}
 8004152:	bf00      	nop
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20014380 	.word	0x20014380

08004160 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01a      	beq.n	80041a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800416e:	4b13      	ldr	r3, [pc, #76]	; (80041bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d015      	beq.n	80041a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004178:	4b10      	ldr	r3, [pc, #64]	; (80041bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4798      	blx	r3
 8004180:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004184:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004186:	e9d7 0100 	ldrd	r0, r1, [r7]
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	000a      	movs	r2, r1
 8004194:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004196:	4613      	mov	r3, r2
 8004198:	461a      	mov	r2, r3
 800419a:	4621      	mov	r1, r4
 800419c:	200d      	movs	r0, #13
 800419e:	f7ff fbe7 	bl	8003970 <SEGGER_SYSVIEW_RecordU32x2>
 80041a2:	e006      	b.n	80041b2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4619      	mov	r1, r3
 80041aa:	200c      	movs	r0, #12
 80041ac:	f7ff fba4 	bl	80038f8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd90      	pop	{r4, r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20014350 	.word	0x20014350
 80041c0:	e0001004 	.word	0xe0001004

080041c4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041ca:	f3ef 8311 	mrs	r3, BASEPRI
 80041ce:	f04f 0120 	mov.w	r1, #32
 80041d2:	f381 8811 	msr	BASEPRI, r1
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	4819      	ldr	r0, [pc, #100]	; (8004240 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80041da:	f7ff f944 	bl	8003466 <_PreparePacket>
 80041de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80041e4:	4b17      	ldr	r3, [pc, #92]	; (8004244 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	e00b      	b.n	8004210 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	1c59      	adds	r1, r3, #1
 8004200:	6179      	str	r1, [r7, #20]
 8004202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	09db      	lsrs	r3, r3, #7
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b7f      	cmp	r3, #127	; 0x7f
 8004214:	d8f0      	bhi.n	80041f8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	617a      	str	r2, [r7, #20]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004226:	2202      	movs	r2, #2
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	68b8      	ldr	r0, [r7, #8]
 800422c:	f7ff fa0c 	bl	8003648 <_SendPacket>
  RECORD_END();
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f383 8811 	msr	BASEPRI, r3
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20014380 	.word	0x20014380
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800424e:	f3ef 8311 	mrs	r3, BASEPRI
 8004252:	f04f 0120 	mov.w	r1, #32
 8004256:	f381 8811 	msr	BASEPRI, r1
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	4807      	ldr	r0, [pc, #28]	; (800427c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800425e:	f7ff f902 	bl	8003466 <_PreparePacket>
 8004262:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004264:	2203      	movs	r2, #3
 8004266:	6839      	ldr	r1, [r7, #0]
 8004268:	6838      	ldr	r0, [r7, #0]
 800426a:	f7ff f9ed 	bl	8003648 <_SendPacket>
  RECORD_END();
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f383 8811 	msr	BASEPRI, r3
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20014380 	.word	0x20014380

08004280 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004286:	f3ef 8311 	mrs	r3, BASEPRI
 800428a:	f04f 0120 	mov.w	r1, #32
 800428e:	f381 8811 	msr	BASEPRI, r1
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	4807      	ldr	r0, [pc, #28]	; (80042b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004296:	f7ff f8e6 	bl	8003466 <_PreparePacket>
 800429a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800429c:	2212      	movs	r2, #18
 800429e:	6839      	ldr	r1, [r7, #0]
 80042a0:	6838      	ldr	r0, [r7, #0]
 80042a2:	f7ff f9d1 	bl	8003648 <_SendPacket>
  RECORD_END();
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f383 8811 	msr	BASEPRI, r3
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20014380 	.word	0x20014380

080042b8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80042be:	f3ef 8311 	mrs	r3, BASEPRI
 80042c2:	f04f 0120 	mov.w	r1, #32
 80042c6:	f381 8811 	msr	BASEPRI, r1
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	4807      	ldr	r0, [pc, #28]	; (80042ec <SEGGER_SYSVIEW_OnIdle+0x34>)
 80042ce:	f7ff f8ca 	bl	8003466 <_PreparePacket>
 80042d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80042d4:	2211      	movs	r2, #17
 80042d6:	6839      	ldr	r1, [r7, #0]
 80042d8:	6838      	ldr	r0, [r7, #0]
 80042da:	f7ff f9b5 	bl	8003648 <_SendPacket>
  RECORD_END();
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f383 8811 	msr	BASEPRI, r3
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20014380 	.word	0x20014380

080042f0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042f8:	f3ef 8311 	mrs	r3, BASEPRI
 80042fc:	f04f 0120 	mov.w	r1, #32
 8004300:	f381 8811 	msr	BASEPRI, r1
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	4819      	ldr	r0, [pc, #100]	; (800436c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004308:	f7ff f8ad 	bl	8003466 <_PreparePacket>
 800430c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	e00b      	b.n	800433e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	1c59      	adds	r1, r3, #1
 800432e:	61f9      	str	r1, [r7, #28]
 8004330:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	09db      	lsrs	r3, r3, #7
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b7f      	cmp	r3, #127	; 0x7f
 8004342:	d8f0      	bhi.n	8004326 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	61fa      	str	r2, [r7, #28]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004354:	2208      	movs	r2, #8
 8004356:	68f9      	ldr	r1, [r7, #12]
 8004358:	6938      	ldr	r0, [r7, #16]
 800435a:	f7ff f975 	bl	8003648 <_SendPacket>
  RECORD_END();
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f383 8811 	msr	BASEPRI, r3
}
 8004364:	bf00      	nop
 8004366:	3720      	adds	r7, #32
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20014380 	.word	0x20014380
 8004370:	20014350 	.word	0x20014350

08004374 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800437c:	f3ef 8311 	mrs	r3, BASEPRI
 8004380:	f04f 0120 	mov.w	r1, #32
 8004384:	f381 8811 	msr	BASEPRI, r1
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	4819      	ldr	r0, [pc, #100]	; (80043f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800438c:	f7ff f86b 	bl	8003466 <_PreparePacket>
 8004390:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004396:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
 80043a8:	e00b      	b.n	80043c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	1c59      	adds	r1, r3, #1
 80043b2:	61f9      	str	r1, [r7, #28]
 80043b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	09db      	lsrs	r3, r3, #7
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b7f      	cmp	r3, #127	; 0x7f
 80043c6:	d8f0      	bhi.n	80043aa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	61fa      	str	r2, [r7, #28]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80043d8:	2204      	movs	r2, #4
 80043da:	68f9      	ldr	r1, [r7, #12]
 80043dc:	6938      	ldr	r0, [r7, #16]
 80043de:	f7ff f933 	bl	8003648 <_SendPacket>
  RECORD_END();
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f383 8811 	msr	BASEPRI, r3
}
 80043e8:	bf00      	nop
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20014380 	.word	0x20014380
 80043f4:	20014350 	.word	0x20014350

080043f8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004400:	f3ef 8311 	mrs	r3, BASEPRI
 8004404:	f04f 0120 	mov.w	r1, #32
 8004408:	f381 8811 	msr	BASEPRI, r1
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	4819      	ldr	r0, [pc, #100]	; (8004474 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004410:	f7ff f829 	bl	8003466 <_PreparePacket>
 8004414:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800441a:	4b17      	ldr	r3, [pc, #92]	; (8004478 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	61fb      	str	r3, [r7, #28]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	e00b      	b.n	8004446 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	1c59      	adds	r1, r3, #1
 8004436:	61f9      	str	r1, [r7, #28]
 8004438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	09db      	lsrs	r3, r3, #7
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	2b7f      	cmp	r3, #127	; 0x7f
 800444a:	d8f0      	bhi.n	800442e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	61fa      	str	r2, [r7, #28]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800445c:	2206      	movs	r2, #6
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	6938      	ldr	r0, [r7, #16]
 8004462:	f7ff f8f1 	bl	8003648 <_SendPacket>
  RECORD_END();
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f383 8811 	msr	BASEPRI, r3
}
 800446c:	bf00      	nop
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20014380 	.word	0x20014380
 8004478:	20014350 	.word	0x20014350

0800447c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	1ad3      	subs	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	20014350 	.word	0x20014350

0800449c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b08c      	sub	sp, #48	; 0x30
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80044a6:	4b3b      	ldr	r3, [pc, #236]	; (8004594 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d06d      	beq.n	800458a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80044ae:	4b39      	ldr	r3, [pc, #228]	; (8004594 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80044b4:	2300      	movs	r3, #0
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b8:	e008      	b.n	80044cc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80044ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	3301      	adds	r3, #1
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d3f2      	bcc.n	80044ba <SEGGER_SYSVIEW_SendModule+0x1e>
 80044d4:	e000      	b.n	80044d8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80044d6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d055      	beq.n	800458a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044de:	f3ef 8311 	mrs	r3, BASEPRI
 80044e2:	f04f 0120 	mov.w	r1, #32
 80044e6:	f381 8811 	msr	BASEPRI, r1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	482a      	ldr	r0, [pc, #168]	; (8004598 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80044ee:	f7fe ffba 	bl	8003466 <_PreparePacket>
 80044f2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	623b      	str	r3, [r7, #32]
 8004500:	e00b      	b.n	800451a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	1c59      	adds	r1, r3, #1
 800450a:	6279      	str	r1, [r7, #36]	; 0x24
 800450c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	09db      	lsrs	r3, r3, #7
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	2b7f      	cmp	r3, #127	; 0x7f
 800451e:	d8f0      	bhi.n	8004502 <SEGGER_SYSVIEW_SendModule+0x66>
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	627a      	str	r2, [r7, #36]	; 0x24
 8004526:	6a3a      	ldr	r2, [r7, #32]
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	e00b      	b.n	8004554 <SEGGER_SYSVIEW_SendModule+0xb8>
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	1c59      	adds	r1, r3, #1
 8004544:	61f9      	str	r1, [r7, #28]
 8004546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	09db      	lsrs	r3, r3, #7
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b7f      	cmp	r3, #127	; 0x7f
 8004558:	d8f0      	bhi.n	800453c <SEGGER_SYSVIEW_SendModule+0xa0>
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	61fa      	str	r2, [r7, #28]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2280      	movs	r2, #128	; 0x80
 8004570:	4619      	mov	r1, r3
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7fe ff2a 	bl	80033cc <_EncodeStr>
 8004578:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800457a:	2216      	movs	r2, #22
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	6938      	ldr	r0, [r7, #16]
 8004580:	f7ff f862 	bl	8003648 <_SendPacket>
      RECORD_END();
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800458a:	bf00      	nop
 800458c:	3730      	adds	r7, #48	; 0x30
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20014378 	.word	0x20014378
 8004598:	20014380 	.word	0x20014380

0800459c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00f      	beq.n	80045ca <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f2      	bne.n	80045b0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20014378 	.word	0x20014378

080045d8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80045de:	f3ef 8311 	mrs	r3, BASEPRI
 80045e2:	f04f 0120 	mov.w	r1, #32
 80045e6:	f381 8811 	msr	BASEPRI, r1
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	4817      	ldr	r0, [pc, #92]	; (800464c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80045ee:	f7fe ff3a 	bl	8003466 <_PreparePacket>
 80045f2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	e00b      	b.n	800461c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	b2da      	uxtb	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1c59      	adds	r1, r3, #1
 800460c:	6179      	str	r1, [r7, #20]
 800460e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	09db      	lsrs	r3, r3, #7
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b7f      	cmp	r3, #127	; 0x7f
 8004620:	d8f0      	bhi.n	8004604 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	617a      	str	r2, [r7, #20]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004632:	221b      	movs	r2, #27
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	68b8      	ldr	r0, [r7, #8]
 8004638:	f7ff f806 	bl	8003648 <_SendPacket>
  RECORD_END();
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f383 8811 	msr	BASEPRI, r3
}
 8004642:	bf00      	nop
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20014380 	.word	0x20014380
 8004650:	2001437c 	.word	0x2001437c

08004654 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800465c:	f3ef 8311 	mrs	r3, BASEPRI
 8004660:	f04f 0120 	mov.w	r1, #32
 8004664:	f381 8811 	msr	BASEPRI, r1
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	4827      	ldr	r0, [pc, #156]	; (8004708 <SEGGER_SYSVIEW_Warn+0xb4>)
 800466c:	f7fe fefb 	bl	8003466 <_PreparePacket>
 8004670:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	6938      	ldr	r0, [r7, #16]
 8004678:	f7fe fea8 	bl	80033cc <_EncodeStr>
 800467c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
 8004682:	2301      	movs	r3, #1
 8004684:	623b      	str	r3, [r7, #32]
 8004686:	e00b      	b.n	80046a0 <SEGGER_SYSVIEW_Warn+0x4c>
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	b2da      	uxtb	r2, r3
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	1c59      	adds	r1, r3, #1
 8004690:	6279      	str	r1, [r7, #36]	; 0x24
 8004692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	09db      	lsrs	r3, r3, #7
 800469e:	623b      	str	r3, [r7, #32]
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	2b7f      	cmp	r3, #127	; 0x7f
 80046a4:	d8f0      	bhi.n	8004688 <SEGGER_SYSVIEW_Warn+0x34>
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	627a      	str	r2, [r7, #36]	; 0x24
 80046ac:	6a3a      	ldr	r2, [r7, #32]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	e00b      	b.n	80046d8 <SEGGER_SYSVIEW_Warn+0x84>
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	61f9      	str	r1, [r7, #28]
 80046ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	09db      	lsrs	r3, r3, #7
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2b7f      	cmp	r3, #127	; 0x7f
 80046dc:	d8f0      	bhi.n	80046c0 <SEGGER_SYSVIEW_Warn+0x6c>
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	61fa      	str	r2, [r7, #28]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80046ee:	221a      	movs	r2, #26
 80046f0:	68f9      	ldr	r1, [r7, #12]
 80046f2:	6938      	ldr	r0, [r7, #16]
 80046f4:	f7fe ffa8 	bl	8003648 <_SendPacket>
  RECORD_END();
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f383 8811 	msr	BASEPRI, r3
}
 80046fe:	bf00      	nop
 8004700:	3728      	adds	r7, #40	; 0x28
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20014380 	.word	0x20014380

0800470c <GPIO_Config>:
 * orden estricto para poder que el sistema permita configurar el periférico X.
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento específico (relacionado con el periférico RCC), a esto lo llamaremos
 * simplemente "activar el periférico o activar la señal de reloj del periférico"
 */
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a88      	ldr	r2, [pc, #544]	; (8004944 <GPIO_Config+0x238>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d106      	bne.n	8004734 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 8004726:	4b88      	ldr	r3, [pc, #544]	; (8004948 <GPIO_Config+0x23c>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	4a87      	ldr	r2, [pc, #540]	; (8004948 <GPIO_Config+0x23c>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	6313      	str	r3, [r2, #48]	; 0x30
 8004732:	e03a      	b.n	80047aa <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a84      	ldr	r2, [pc, #528]	; (800494c <GPIO_Config+0x240>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d106      	bne.n	800474c <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 800473e:	4b82      	ldr	r3, [pc, #520]	; (8004948 <GPIO_Config+0x23c>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	4a81      	ldr	r2, [pc, #516]	; (8004948 <GPIO_Config+0x23c>)
 8004744:	f043 0302 	orr.w	r3, r3, #2
 8004748:	6313      	str	r3, [r2, #48]	; 0x30
 800474a:	e02e      	b.n	80047aa <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a7f      	ldr	r2, [pc, #508]	; (8004950 <GPIO_Config+0x244>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d106      	bne.n	8004764 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 8004756:	4b7c      	ldr	r3, [pc, #496]	; (8004948 <GPIO_Config+0x23c>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	4a7b      	ldr	r2, [pc, #492]	; (8004948 <GPIO_Config+0x23c>)
 800475c:	f043 0304 	orr.w	r3, r3, #4
 8004760:	6313      	str	r3, [r2, #48]	; 0x30
 8004762:	e022      	b.n	80047aa <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a7a      	ldr	r2, [pc, #488]	; (8004954 <GPIO_Config+0x248>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d106      	bne.n	800477c <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800476e:	4b76      	ldr	r3, [pc, #472]	; (8004948 <GPIO_Config+0x23c>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	4a75      	ldr	r2, [pc, #468]	; (8004948 <GPIO_Config+0x23c>)
 8004774:	f043 0308 	orr.w	r3, r3, #8
 8004778:	6313      	str	r3, [r2, #48]	; 0x30
 800477a:	e016      	b.n	80047aa <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a75      	ldr	r2, [pc, #468]	; (8004958 <GPIO_Config+0x24c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d106      	bne.n	8004794 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8004786:	4b70      	ldr	r3, [pc, #448]	; (8004948 <GPIO_Config+0x23c>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	4a6f      	ldr	r2, [pc, #444]	; (8004948 <GPIO_Config+0x23c>)
 800478c:	f043 0310 	orr.w	r3, r3, #16
 8004790:	6313      	str	r3, [r2, #48]	; 0x30
 8004792:	e00a      	b.n	80047aa <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a70      	ldr	r2, [pc, #448]	; (800495c <GPIO_Config+0x250>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d105      	bne.n	80047aa <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800479e:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <GPIO_Config+0x23c>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	4a69      	ldr	r2, [pc, #420]	; (8004948 <GPIO_Config+0x23c>)
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	795b      	ldrb	r3, [r3, #5]
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	791b      	ldrb	r3, [r3, #4]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operacion bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	791b      	ldrb	r3, [r3, #4]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	2103      	movs	r1, #3
 80047ca:	fa01 f303 	lsl.w	r3, r1, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	4619      	mov	r1, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	400a      	ands	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6819      	ldr	r1, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	7a1b      	ldrb	r3, [r3, #8]
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	791b      	ldrb	r3, [r3, #4]
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	791b      	ldrb	r3, [r3, #4]
 8004804:	4619      	mov	r1, r3
 8004806:	2301      	movs	r3, #1
 8004808:	408b      	lsls	r3, r1
 800480a:	43db      	mvns	r3, r3
 800480c:	4619      	mov	r1, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	400a      	ands	r2, r1
 8004814:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);//Si no funciona, juntar la multiplicación
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	799b      	ldrb	r3, [r3, #6]
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	791b      	ldrb	r3, [r3, #4]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	791b      	ldrb	r3, [r3, #4]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	2103      	movs	r1, #3
 8004846:	fa01 f303 	lsl.w	r3, r1, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	4619      	mov	r1, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	400a      	ands	r2, r1
 8004854:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6899      	ldr	r1, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	79db      	ldrb	r3, [r3, #7]
 800486a:	461a      	mov	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	791b      	ldrb	r3, [r3, #4]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	791b      	ldrb	r3, [r3, #4]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	2103      	movs	r1, #3
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	4619      	mov	r1, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	400a      	ands	r2, r1
 8004894:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68d9      	ldr	r1, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... se verá luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	795b      	ldrb	r3, [r3, #5]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d143      	bne.n	8004936 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	791b      	ldrb	r3, [r3, #4]
 80048b2:	2b07      	cmp	r3, #7
 80048b4:	d81f      	bhi.n	80048f6 <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	791b      	ldrb	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a1a      	ldr	r2, [r3, #32]
 80048c4:	210f      	movs	r1, #15
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	4619      	mov	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	400a      	ands	r2, r1
 80048d6:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a1a      	ldr	r2, [r3, #32]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	7a5b      	ldrb	r3, [r3, #9]
 80048e2:	4619      	mov	r1, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ea:	4619      	mov	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	621a      	str	r2, [r3, #32]
			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
} // Fin del GPIO_config
 80048f4:	e01f      	b.n	8004936 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	791b      	ldrb	r3, [r3, #4]
 80048fa:	3b08      	subs	r3, #8
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004906:	210f      	movs	r1, #15
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	4619      	mov	r1, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	400a      	ands	r2, r1
 8004918:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	7a5b      	ldrb	r3, [r3, #9]
 8004924:	4619      	mov	r1, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	4619      	mov	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40020000 	.word	0x40020000
 8004948:	40023800 	.word	0x40023800
 800494c:	40020400 	.word	0x40020400
 8004950:	40020800 	.word	0x40020800
 8004954:	40020c00 	.word	0x40020c00
 8004958:	40021000 	.word	0x40021000
 800495c:	40021c00 	.word	0x40021c00

08004960 <GPIO_WritePin>:

/**
 * FUNCIÓN utilizada para cambiar de estado al pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posición que deseamos
	//pPinHandler->pGPIOx->DDR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNUmber);
	if(newState == SET){
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d10d      	bne.n	800498e <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699a      	ldr	r2, [r3, #24]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	791b      	ldrb	r3, [r3, #4]
 800497c:	4619      	mov	r1, r3
 800497e:	2301      	movs	r3, #1
 8004980:	408b      	lsls	r3, r1
 8004982:	4619      	mov	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 800498c:	e00d      	b.n	80049aa <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	791b      	ldrb	r3, [r3, #4]
 8004998:	3310      	adds	r3, #16
 800499a:	2101      	movs	r1, #1
 800499c:	fa01 f303 	lsl.w	r3, r1, r3
 80049a0:	4619      	mov	r1, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	619a      	str	r2, [r3, #24]
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <GPIO_ReadPin>:

/**
 * Función para leer el estado de un pin específico.
 */
uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
	// Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]

	if(pPinHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN){
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	795b      	ldrb	r3, [r3, #5]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <GPIO_ReadPin+0x24>
		// Cargamos el valor del registro IDR, desplazado a derecha tantas veces como la ubicación
		// del pin especifico
		pinValue = (pPinHandler->pGPIOx->IDR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	7912      	ldrb	r2, [r2, #4]
 80049d4:	40d3      	lsrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e006      	b.n	80049e8 <GPIO_ReadPin+0x32>
	}
	else{
		// Cargamos el valor del registro ODR, desplazado a derecha tantas veces como la ubicación
		// del pin especifico
		pinValue = (pPinHandler->pGPIOx->ODR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	7912      	ldrb	r2, [r2, #4]
 80049e4:	40d3      	lsrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
	}
	pinValue &= 0b0001;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80049f0:	68fb      	ldr	r3, [r7, #12]

}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <GPIOxTooglePin>:

/**
 * Función para cambiar el estado de un pin.
 */
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
	/* En el Output Data Register (ODR) se almacena el estado de un pin de salida,
	 * aplicando una máscara con un XOR se puede obtener el complemento de dicho
	 * valor, si está en 0, pasa a 1; si está en 1 pasa a 0*/
	pPinHandler->pGPIOx->ODR ^= (0b1 << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	791b      	ldrb	r3, [r3, #4]
 8004a10:	4619      	mov	r1, r3
 8004a12:	2301      	movs	r3, #1
 8004a14:	408b      	lsls	r3, r1
 8004a16:	4619      	mov	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	404a      	eors	r2, r1
 8004a1e:	615a      	str	r2, [r3, #20]
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <__libc_init_array>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	4d0d      	ldr	r5, [pc, #52]	; (8004a64 <__libc_init_array+0x38>)
 8004a30:	4c0d      	ldr	r4, [pc, #52]	; (8004a68 <__libc_init_array+0x3c>)
 8004a32:	1b64      	subs	r4, r4, r5
 8004a34:	10a4      	asrs	r4, r4, #2
 8004a36:	2600      	movs	r6, #0
 8004a38:	42a6      	cmp	r6, r4
 8004a3a:	d109      	bne.n	8004a50 <__libc_init_array+0x24>
 8004a3c:	4d0b      	ldr	r5, [pc, #44]	; (8004a6c <__libc_init_array+0x40>)
 8004a3e:	4c0c      	ldr	r4, [pc, #48]	; (8004a70 <__libc_init_array+0x44>)
 8004a40:	f000 f83e 	bl	8004ac0 <_init>
 8004a44:	1b64      	subs	r4, r4, r5
 8004a46:	10a4      	asrs	r4, r4, #2
 8004a48:	2600      	movs	r6, #0
 8004a4a:	42a6      	cmp	r6, r4
 8004a4c:	d105      	bne.n	8004a5a <__libc_init_array+0x2e>
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a54:	4798      	blx	r3
 8004a56:	3601      	adds	r6, #1
 8004a58:	e7ee      	b.n	8004a38 <__libc_init_array+0xc>
 8004a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5e:	4798      	blx	r3
 8004a60:	3601      	adds	r6, #1
 8004a62:	e7f2      	b.n	8004a4a <__libc_init_array+0x1e>
 8004a64:	08004c04 	.word	0x08004c04
 8004a68:	08004c04 	.word	0x08004c04
 8004a6c:	08004c04 	.word	0x08004c04
 8004a70:	08004c08 	.word	0x08004c08

08004a74 <memcmp>:
 8004a74:	b510      	push	{r4, lr}
 8004a76:	3901      	subs	r1, #1
 8004a78:	4402      	add	r2, r0
 8004a7a:	4290      	cmp	r0, r2
 8004a7c:	d101      	bne.n	8004a82 <memcmp+0xe>
 8004a7e:	2000      	movs	r0, #0
 8004a80:	e005      	b.n	8004a8e <memcmp+0x1a>
 8004a82:	7803      	ldrb	r3, [r0, #0]
 8004a84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004a88:	42a3      	cmp	r3, r4
 8004a8a:	d001      	beq.n	8004a90 <memcmp+0x1c>
 8004a8c:	1b18      	subs	r0, r3, r4
 8004a8e:	bd10      	pop	{r4, pc}
 8004a90:	3001      	adds	r0, #1
 8004a92:	e7f2      	b.n	8004a7a <memcmp+0x6>

08004a94 <memcpy>:
 8004a94:	440a      	add	r2, r1
 8004a96:	4291      	cmp	r1, r2
 8004a98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a9c:	d100      	bne.n	8004aa0 <memcpy+0xc>
 8004a9e:	4770      	bx	lr
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aaa:	4291      	cmp	r1, r2
 8004aac:	d1f9      	bne.n	8004aa2 <memcpy+0xe>
 8004aae:	bd10      	pop	{r4, pc}

08004ab0 <memset>:
 8004ab0:	4402      	add	r2, r0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d100      	bne.n	8004aba <memset+0xa>
 8004ab8:	4770      	bx	lr
 8004aba:	f803 1b01 	strb.w	r1, [r3], #1
 8004abe:	e7f9      	b.n	8004ab4 <memset+0x4>

08004ac0 <_init>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	bf00      	nop
 8004ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac6:	bc08      	pop	{r3}
 8004ac8:	469e      	mov	lr, r3
 8004aca:	4770      	bx	lr

08004acc <_fini>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	bf00      	nop
 8004ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad2:	bc08      	pop	{r3}
 8004ad4:	469e      	mov	lr, r3
 8004ad6:	4770      	bx	lr
