
Ejemplo LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a4  080049a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080049a4  080049a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049a4  080049a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a8  080049a8  000149a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014458  2000000c  080049b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014464  080049b8  00024464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb08  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afd  00000000  00000000  0002bb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002d648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002e070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b9a  00000000  00000000  0002e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b616  00000000  00000000  0004054a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000638b0  00000000  00000000  0004bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af410  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a18  00000000  00000000  000af460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004860 	.word	0x08004860

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08004860 	.word	0x08004860

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012e90 	.word	0x20012e90

08000274 <main>:
void initSystem(void);
void vTask_Blink_Led( void * pvParameters );
void vTaskTwo( void * pvParameters );

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af02      	add	r7, sp, #8

	initSystem();
 800027a:	f000 f85d 	bl	8000338 <initSystem>

	/* Activamos la unidad de punto flotante (FPU) */
	SCB->CPACR    |= (0xF << 20);
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <main+0x9c>)
 8000280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000284:	4a22      	ldr	r2, [pc, #136]	; (8000310 <main+0x9c>)
 8000286:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800028a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Activamos del contador de Ticks */
	DWT->CTRL    |= (1 << 0);
 800028e:	4b21      	ldr	r3, [pc, #132]	; (8000314 <main+0xa0>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a20      	ldr	r2, [pc, #128]	; (8000314 <main+0xa0>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6013      	str	r3, [r2, #0]

	/* Necesario para el SEGGER*/
	vInitPrioGroupValue();
 800029a:	f002 f885 	bl	80023a8 <vInitPrioGroupValue>

	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 800029e:	f002 fc07 	bl	8002ab0 <SEGGER_SYSVIEW_Conf>
	/* Despues activamos el sistema */
	SEGGER_SYSVIEW_Start();
 80002a2:	f003 fb37 	bl	8003914 <SEGGER_SYSVIEW_Start>

	BaseType_t xReturned;


    xReturned = xTaskCreate(
 80002a6:	4b1c      	ldr	r3, [pc, #112]	; (8000318 <main+0xa4>)
 80002a8:	9301      	str	r3, [sp, #4]
 80002aa:	2302      	movs	r3, #2
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	4b1b      	ldr	r3, [pc, #108]	; (800031c <main+0xa8>)
 80002b0:	22c8      	movs	r2, #200	; 0xc8
 80002b2:	491b      	ldr	r1, [pc, #108]	; (8000320 <main+0xac>)
 80002b4:	481b      	ldr	r0, [pc, #108]	; (8000324 <main+0xb0>)
 80002b6:	f000 fccb 	bl	8000c50 <xTaskCreate>
 80002ba:	60f8      	str	r0, [r7, #12]
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-1",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask1 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d00a      	beq.n	80002d8 <main+0x64>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002c6:	f383 8811 	msr	BASEPRI, r3
 80002ca:	f3bf 8f6f 	isb	sy
 80002ce:	f3bf 8f4f 	dsb	sy
 80002d2:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002d4:	bf00      	nop
 80002d6:	e7fe      	b.n	80002d6 <main+0x62>

    xReturned = xTaskCreate(
 80002d8:	4b13      	ldr	r3, [pc, #76]	; (8000328 <main+0xb4>)
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	2302      	movs	r3, #2
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <main+0xb8>)
 80002e2:	22c8      	movs	r2, #200	; 0xc8
 80002e4:	4912      	ldr	r1, [pc, #72]	; (8000330 <main+0xbc>)
 80002e6:	4813      	ldr	r0, [pc, #76]	; (8000334 <main+0xc0>)
 80002e8:	f000 fcb2 	bl	8000c50 <xTaskCreate>
 80002ec:	60f8      	str	r0, [r7, #12]
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-2",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask2 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d00a      	beq.n	800030a <main+0x96>
        __asm volatile
 80002f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002f8:	f383 8811 	msr	BASEPRI, r3
 80002fc:	f3bf 8f6f 	isb	sy
 8000300:	f3bf 8f4f 	dsb	sy
 8000304:	607b      	str	r3, [r7, #4]
    }
 8000306:	bf00      	nop
 8000308:	e7fe      	b.n	8000308 <main+0x94>

    vTaskStartScheduler();
 800030a:	f000 fe3d 	bl	8000f88 <vTaskStartScheduler>

    /* Loop forever */
	while(1){
 800030e:	e7fe      	b.n	800030e <main+0x9a>
 8000310:	e000ed00 	.word	0xe000ed00
 8000314:	e0001000 	.word	0xe0001000
 8000318:	20000040 	.word	0x20000040
 800031c:	08004878 	.word	0x08004878
 8000320:	08004894 	.word	0x08004894
 8000324:	08000395 	.word	0x08000395
 8000328:	20000044 	.word	0x20000044
 800032c:	080048a0 	.word	0x080048a0
 8000330:	080048bc 	.word	0x080048bc
 8000334:	080003e9 	.word	0x080003e9

08000338 <initSystem>:

	}
}

/** Función que inicia todo el sistema*/
void initSystem(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	//configPLL(100);

	/* GPIO y Timer del Blinky Led de Estado PA5 */
	handlerBlinkyPin.pGPIOx								= GPIOA;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <initSystem+0x4c>)
 800033e:	4a12      	ldr	r2, [pc, #72]	; (8000388 <initSystem+0x50>)
 8000340:	601a      	str	r2, [r3, #0]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinNumber 		= PIN_5;
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <initSystem+0x4c>)
 8000344:	2205      	movs	r2, #5
 8000346:	711a      	strb	r2, [r3, #4]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_OUT;
 8000348:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <initSystem+0x4c>)
 800034a:	2201      	movs	r2, #1
 800034c:	715a      	strb	r2, [r3, #5]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinSpeed 		= GPIO_OSPEED_FAST;
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <initSystem+0x4c>)
 8000350:	2202      	movs	r2, #2
 8000352:	719a      	strb	r2, [r3, #6]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinOPType 		= GPIO_OTYPE_PUSHPULL;
 8000354:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <initSystem+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	721a      	strb	r2, [r3, #8]
	// Cargo la configuración
	GPIO_Config(&handlerBlinkyPin);
 800035a:	480a      	ldr	r0, [pc, #40]	; (8000384 <initSystem+0x4c>)
 800035c:	f004 f8a6 	bl	80044ac <GPIO_Config>
	// Pongo estado en alto
	GPIO_WritePin(&handlerBlinkyPin, SET);
 8000360:	2101      	movs	r1, #1
 8000362:	4808      	ldr	r0, [pc, #32]	; (8000384 <initSystem+0x4c>)
 8000364:	f004 f9cc 	bl	8004700 <GPIO_WritePin>

	/* GPIO y Timer del Blinky Led de Estado PA5 */
	handlerButton.pGPIOx								= GPIOC;
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <initSystem+0x54>)
 800036a:	4a09      	ldr	r2, [pc, #36]	; (8000390 <initSystem+0x58>)
 800036c:	601a      	str	r2, [r3, #0]
	handlerButton.GPIO_PinConfig.GPIO_PinNumber 		= PIN_13;
 800036e:	4b07      	ldr	r3, [pc, #28]	; (800038c <initSystem+0x54>)
 8000370:	220d      	movs	r2, #13
 8000372:	711a      	strb	r2, [r3, #4]
	handlerButton.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_IN;
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <initSystem+0x54>)
 8000376:	2200      	movs	r2, #0
 8000378:	715a      	strb	r2, [r3, #5]
	// Cargo la configuración
	GPIO_Config(&handlerButton);
 800037a:	4804      	ldr	r0, [pc, #16]	; (800038c <initSystem+0x54>)
 800037c:	f004 f896 	bl	80044ac <GPIO_Config>

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000028 	.word	0x20000028
 8000388:	40020000 	.word	0x40020000
 800038c:	20000034 	.word	0x20000034
 8000390:	40020800 	.word	0x40020800

08000394 <vTask_Blink_Led>:

/** Función que gobierna la tarea 1 */
void vTask_Blink_Led( void * pvParameters )
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af02      	add	r7, sp, #8
 800039a:	6078      	str	r0, [r7, #4]
	BaseType_t notify = {0};
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
	uint8_t change_state = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	72fb      	strb	r3, [r7, #11]


    while(1)
    {
        /* Task code goes here. */
    	if(notify == pdTRUE){
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d106      	bne.n	80003b8 <vTask_Blink_Led+0x24>
    		change_state = !change_state;
 80003aa:	7afb      	ldrb	r3, [r7, #11]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bf0c      	ite	eq
 80003b0:	2301      	moveq	r3, #1
 80003b2:	2300      	movne	r3, #0
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	72fb      	strb	r3, [r7, #11]
    	}

    	if(change_state){
 80003b8:	7afb      	ldrb	r3, [r7, #11]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d003      	beq.n	80003c6 <vTask_Blink_Led+0x32>
    		GPIOxTooglePin(&handlerBlinkyPin);
 80003be:	4809      	ldr	r0, [pc, #36]	; (80003e4 <vTask_Blink_Led+0x50>)
 80003c0:	f004 f9ed 	bl	800479e <GPIOxTooglePin>
 80003c4:	e003      	b.n	80003ce <vTask_Blink_Led+0x3a>
    	}
    	else{
    		GPIO_WritePin(&handlerBlinkyPin, RESET);
 80003c6:	2100      	movs	r1, #0
 80003c8:	4806      	ldr	r0, [pc, #24]	; (80003e4 <vTask_Blink_Led+0x50>)
 80003ca:	f004 f999 	bl	8004700 <GPIO_WritePin>
    	}
    	//printf("%s\n", (char*)pvParameters);
    	//taskYIELD();
    	notify = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(250));
 80003ce:	23fa      	movs	r3, #250	; 0xfa
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2300      	movs	r3, #0
 80003d4:	2200      	movs	r2, #0
 80003d6:	2100      	movs	r1, #0
 80003d8:	2000      	movs	r0, #0
 80003da:	f001 fa3d 	bl	8001858 <xTaskGenericNotifyWait>
 80003de:	60f8      	str	r0, [r7, #12]
    	if(notify == pdTRUE){
 80003e0:	e7e0      	b.n	80003a4 <vTask_Blink_Led+0x10>
 80003e2:	bf00      	nop
 80003e4:	20000028 	.word	0x20000028

080003e8 <vTaskTwo>:
    }
}

/** Función que gobierna la tarea 2 */
void vTaskTwo( void * pvParameters )
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	6078      	str	r0, [r7, #4]

	uint8_t button_state = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_button_state = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	73fb      	strb	r3, [r7, #15]

    while(1)
    {
        /* Task code goes here. */
    	button_state = GPIO_ReadPin(&handlerButton);
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <vTaskTwo+0x44>)
 80003fa:	f004 f9ac 	bl	8004756 <GPIO_ReadPin>
 80003fe:	4603      	mov	r3, r0
 8000400:	73bb      	strb	r3, [r7, #14]

    	if(button_state){
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d00b      	beq.n	8000420 <vTaskTwo+0x38>
    		if(!prev_button_state){
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d108      	bne.n	8000420 <vTaskTwo+0x38>
    			// Notificación
    			xTaskNotify(xHandleTask1,0,eNoAction);
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <vTaskTwo+0x48>)
 8000410:	6818      	ldr	r0, [r3, #0]
 8000412:	2300      	movs	r3, #0
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2300      	movs	r3, #0
 8000418:	2200      	movs	r2, #0
 800041a:	2100      	movs	r1, #0
 800041c:	f001 faa4 	bl	8001968 <xTaskGenericNotify>
    		}
    	}
    	prev_button_state = button_state;
 8000420:	7bbb      	ldrb	r3, [r7, #14]
 8000422:	73fb      	strb	r3, [r7, #15]
    	vTaskDelay(pdMS_TO_TICKS(10));
 8000424:	200a      	movs	r0, #10
 8000426:	f000 fd77 	bl	8000f18 <vTaskDelay>
    	button_state = GPIO_ReadPin(&handlerButton);
 800042a:	e7e5      	b.n	80003f8 <vTaskTwo+0x10>
 800042c:	20000034 	.word	0x20000034
 8000430:	20000040 	.word	0x20000040

08000434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000436:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000438:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800043c:	480c      	ldr	r0, [pc, #48]	; (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043e:	490d      	ldr	r1, [pc, #52]	; (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <LoopForever+0xe>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000454:	4c0a      	ldr	r4, [pc, #40]	; (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000462:	f004 f9b3 	bl	80047cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000466:	f7ff ff05 	bl	8000274 <main>

0800046a <LoopForever>:

LoopForever:
    b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   r0, =_estack
 800046c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000478:	080049ac 	.word	0x080049ac
  ldr r2, =_sbss
 800047c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000480:	20014464 	.word	0x20014464

08000484 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC_IRQHandler>

08000486 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000486:	b480      	push	{r7}
 8000488:	b083      	sub	sp, #12
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f103 0208 	add.w	r2, r3, #8
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800049e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f103 0208 	add.w	r2, r3, #8
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f103 0208 	add.w	r2, r3, #8
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	689a      	ldr	r2, [r3, #8]
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800053e:	d103      	bne.n	8000548 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	691b      	ldr	r3, [r3, #16]
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00c      	b.n	8000562 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3308      	adds	r3, #8
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	e002      	b.n	8000556 <vListInsert+0x2e>
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	429a      	cmp	r2, r3
 8000560:	d2f6      	bcs.n	8000550 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	685a      	ldr	r2, [r3, #4]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	68fa      	ldr	r2, [r7, #12]
 8000576:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	683a      	ldr	r2, [r7, #0]
 800057c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	1c5a      	adds	r2, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	691b      	ldr	r3, [r3, #16]
 80005a6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	6892      	ldr	r2, [r2, #8]
 80005b0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	6852      	ldr	r2, [r2, #4]
 80005ba:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d103      	bne.n	80005ce <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	689a      	ldr	r2, [r3, #8]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	681b      	ldr	r3, [r3, #0]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80005fa:	2301      	movs	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10a      	bne.n	800061e <xQueueGenericReset+0x2e>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	60fb      	str	r3, [r7, #12]
    }
 800061a:	bf00      	nop
 800061c:	e7fe      	b.n	800061c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d05d      	beq.n	80006e0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000628:	2b00      	cmp	r3, #0
 800062a:	d059      	beq.n	80006e0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000634:	2100      	movs	r1, #0
 8000636:	fba3 2302 	umull	r2, r3, r3, r2
 800063a:	2b00      	cmp	r3, #0
 800063c:	d000      	beq.n	8000640 <xQueueGenericReset+0x50>
 800063e:	2101      	movs	r1, #1
 8000640:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000642:	2b00      	cmp	r3, #0
 8000644:	d14c      	bne.n	80006e0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000646:	f001 ff2d 	bl	80024a4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000652:	6939      	ldr	r1, [r7, #16]
 8000654:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000656:	fb01 f303 	mul.w	r3, r1, r3
 800065a:	441a      	add	r2, r3
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	2200      	movs	r2, #0
 8000664:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000676:	3b01      	subs	r3, #1
 8000678:	6939      	ldr	r1, [r7, #16]
 800067a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800067c:	fb01 f303 	mul.w	r3, r1, r3
 8000680:	441a      	add	r2, r3
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	22ff      	movs	r2, #255	; 0xff
 800068a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	22ff      	movs	r2, #255	; 0xff
 8000692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d114      	bne.n	80006c6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d01a      	beq.n	80006da <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	3310      	adds	r3, #16
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 ff17 	bl	80014dc <xTaskRemoveFromEventList>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d012      	beq.n	80006da <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <xQueueGenericReset+0x11c>)
 80006b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	f3bf 8f4f 	dsb	sy
 80006c0:	f3bf 8f6f 	isb	sy
 80006c4:	e009      	b.n	80006da <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	3310      	adds	r3, #16
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fedb 	bl	8000486 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	3324      	adds	r3, #36	; 0x24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fed6 	bl	8000486 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80006da:	f001 ff13 	bl	8002504 <vPortExitCritical>
 80006de:	e001      	b.n	80006e4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10a      	bne.n	8000700 <xQueueGenericReset+0x110>
        __asm volatile
 80006ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ee:	f383 8811 	msr	BASEPRI, r3
 80006f2:	f3bf 8f6f 	isb	sy
 80006f6:	f3bf 8f4f 	dsb	sy
 80006fa:	60bb      	str	r3, [r7, #8]
    }
 80006fc:	bf00      	nop
 80006fe:	e7fe      	b.n	80006fe <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000700:	697b      	ldr	r3, [r7, #20]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	e000ed04 	.word	0xe000ed04

08000710 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af02      	add	r7, sp, #8
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	4613      	mov	r3, r2
 800071c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d02e      	beq.n	8000786 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000728:	2100      	movs	r1, #0
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	fba3 2302 	umull	r2, r3, r3, r2
 8000732:	2b00      	cmp	r3, #0
 8000734:	d000      	beq.n	8000738 <xQueueGenericCreate+0x28>
 8000736:	2101      	movs	r1, #1
 8000738:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800073a:	2b00      	cmp	r3, #0
 800073c:	d123      	bne.n	8000786 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000746:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800074a:	d81c      	bhi.n	8000786 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	fb02 f303 	mul.w	r3, r2, r3
 8000754:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	3350      	adds	r3, #80	; 0x50
 800075a:	4618      	mov	r0, r3
 800075c:	f001 ffce 	bl	80026fc <pvPortMalloc>
 8000760:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d01c      	beq.n	80007a2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	3350      	adds	r3, #80	; 0x50
 8000770:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000772:	79fa      	ldrb	r2, [r7, #7]
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	4613      	mov	r3, r2
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f000 f814 	bl	80007ac <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000784:	e00d      	b.n	80007a2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10a      	bne.n	80007a2 <xQueueGenericCreate+0x92>
        __asm volatile
 800078c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000790:	f383 8811 	msr	BASEPRI, r3
 8000794:	f3bf 8f6f 	isb	sy
 8000798:	f3bf 8f4f 	dsb	sy
 800079c:	613b      	str	r3, [r7, #16]
    }
 800079e:	bf00      	nop
 80007a0:	e7fe      	b.n	80007a0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80007a2:	69fb      	ldr	r3, [r7, #28]
    }
 80007a4:	4618      	mov	r0, r3
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d103      	bne.n	80007c8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	69ba      	ldr	r2, [r7, #24]
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	e002      	b.n	80007ce <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007da:	2101      	movs	r1, #1
 80007dc:	69b8      	ldr	r0, [r7, #24]
 80007de:	f7ff ff07 	bl	80005f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	78fa      	ldrb	r2, [r7, #3]
 80007e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	68f9      	ldr	r1, [r7, #12]
 80007f0:	2073      	movs	r0, #115	; 0x73
 80007f2:	f002 ff87 	bl	8003704 <SEGGER_SYSVIEW_RecordU32x3>
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b08f      	sub	sp, #60	; 0x3c
 8000804:	af02      	add	r7, sp, #8
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000816:	2b00      	cmp	r3, #0
 8000818:	d10a      	bne.n	8000830 <xQueueReceive+0x30>
        __asm volatile
 800081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800081e:	f383 8811 	msr	BASEPRI, r3
 8000822:	f3bf 8f6f 	isb	sy
 8000826:	f3bf 8f4f 	dsb	sy
 800082a:	623b      	str	r3, [r7, #32]
    }
 800082c:	bf00      	nop
 800082e:	e7fe      	b.n	800082e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d103      	bne.n	800083e <xQueueReceive+0x3e>
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <xQueueReceive+0x42>
 800083e:	2301      	movs	r3, #1
 8000840:	e000      	b.n	8000844 <xQueueReceive+0x44>
 8000842:	2300      	movs	r3, #0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10a      	bne.n	800085e <xQueueReceive+0x5e>
        __asm volatile
 8000848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084c:	f383 8811 	msr	BASEPRI, r3
 8000850:	f3bf 8f6f 	isb	sy
 8000854:	f3bf 8f4f 	dsb	sy
 8000858:	61fb      	str	r3, [r7, #28]
    }
 800085a:	bf00      	nop
 800085c:	e7fe      	b.n	800085c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800085e:	f000 ffdd 	bl	800181c <xTaskGetSchedulerState>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <xQueueReceive+0x6e>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d101      	bne.n	8000872 <xQueueReceive+0x72>
 800086e:	2301      	movs	r3, #1
 8000870:	e000      	b.n	8000874 <xQueueReceive+0x74>
 8000872:	2300      	movs	r3, #0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10a      	bne.n	800088e <xQueueReceive+0x8e>
        __asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087c:	f383 8811 	msr	BASEPRI, r3
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	61bb      	str	r3, [r7, #24]
    }
 800088a:	bf00      	nop
 800088c:	e7fe      	b.n	800088c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800088e:	f001 fe09 	bl	80024a4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000896:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	2b00      	cmp	r3, #0
 800089c:	d02f      	beq.n	80008fe <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008a2:	f000 f8bd 	bl	8000a20 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80008a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 fcb7 	bl	800421c <SEGGER_SYSVIEW_ShrinkId>
 80008ae:	4604      	mov	r4, r0
 80008b0:	2000      	movs	r0, #0
 80008b2:	f003 fcb3 	bl	800421c <SEGGER_SYSVIEW_ShrinkId>
 80008b6:	4602      	mov	r2, r0
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2101      	movs	r1, #1
 80008bc:	9100      	str	r1, [sp, #0]
 80008be:	4621      	mov	r1, r4
 80008c0:	205c      	movs	r0, #92	; 0x5c
 80008c2:	f002 ff95 	bl	80037f0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008cc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00f      	beq.n	80008f6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d8:	3310      	adds	r3, #16
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fdfe 	bl	80014dc <xTaskRemoveFromEventList>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d007      	beq.n	80008f6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80008e6:	4b4d      	ldr	r3, [pc, #308]	; (8000a1c <xQueueReceive+0x21c>)
 80008e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	f3bf 8f4f 	dsb	sy
 80008f2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80008f6:	f001 fe05 	bl	8002504 <vPortExitCritical>
                return pdPASS;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e08a      	b.n	8000a14 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d113      	bne.n	800092c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000904:	f001 fdfe 	bl	8002504 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090a:	4618      	mov	r0, r3
 800090c:	f003 fc86 	bl	800421c <SEGGER_SYSVIEW_ShrinkId>
 8000910:	4604      	mov	r4, r0
 8000912:	2000      	movs	r0, #0
 8000914:	f003 fc82 	bl	800421c <SEGGER_SYSVIEW_ShrinkId>
 8000918:	4602      	mov	r2, r0
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2101      	movs	r1, #1
 800091e:	9100      	str	r1, [sp, #0]
 8000920:	4621      	mov	r1, r4
 8000922:	205c      	movs	r0, #92	; 0x5c
 8000924:	f002 ff64 	bl	80037f0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000928:	2300      	movs	r3, #0
 800092a:	e073      	b.n	8000a14 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800092c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092e:	2b00      	cmp	r3, #0
 8000930:	d106      	bne.n	8000940 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fe36 	bl	80015a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800093c:	2301      	movs	r3, #1
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000940:	f001 fde0 	bl	8002504 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000944:	f000 fb82 	bl	800104c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000948:	f001 fdac 	bl	80024a4 <vPortEnterCritical>
 800094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000952:	b25b      	sxtb	r3, r3
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000958:	d103      	bne.n	8000962 <xQueueReceive+0x162>
 800095a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000968:	b25b      	sxtb	r3, r3
 800096a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800096e:	d103      	bne.n	8000978 <xQueueReceive+0x178>
 8000970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000978:	f001 fdc4 	bl	8002504 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800097c:	1d3a      	adds	r2, r7, #4
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fe25 	bl	80015d4 <xTaskCheckForTimeOut>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d124      	bne.n	80009da <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000992:	f000 f8bd 	bl	8000b10 <prvIsQueueEmpty>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d018      	beq.n	80009ce <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800099c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099e:	3324      	adds	r3, #36	; 0x24
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fd47 	bl	8001438 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80009aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009ac:	f000 f85e 	bl	8000a6c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80009b0:	f000 fb5a 	bl	8001068 <xTaskResumeAll>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f47f af69 	bne.w	800088e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <xQueueReceive+0x21c>)
 80009be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	f3bf 8f4f 	dsb	sy
 80009c8:	f3bf 8f6f 	isb	sy
 80009cc:	e75f      	b.n	800088e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80009ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009d0:	f000 f84c 	bl	8000a6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80009d4:	f000 fb48 	bl	8001068 <xTaskResumeAll>
 80009d8:	e759      	b.n	800088e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80009da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009dc:	f000 f846 	bl	8000a6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80009e0:	f000 fb42 	bl	8001068 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009e6:	f000 f893 	bl	8000b10 <prvIsQueueEmpty>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f43f af4e 	beq.w	800088e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80009f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fc11 	bl	800421c <SEGGER_SYSVIEW_ShrinkId>
 80009fa:	4604      	mov	r4, r0
 80009fc:	2000      	movs	r0, #0
 80009fe:	f003 fc0d 	bl	800421c <SEGGER_SYSVIEW_ShrinkId>
 8000a02:	4602      	mov	r2, r0
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2101      	movs	r1, #1
 8000a08:	9100      	str	r1, [sp, #0]
 8000a0a:	4621      	mov	r1, r4
 8000a0c:	205c      	movs	r0, #92	; 0x5c
 8000a0e:	f002 feef 	bl	80037f0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000a12:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3734      	adds	r7, #52	; 0x34
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	e000ed04 	.word	0xe000ed04

08000a20 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d018      	beq.n	8000a64 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	68da      	ldr	r2, [r3, #12]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	441a      	add	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	68da      	ldr	r2, [r3, #12]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d303      	bcc.n	8000a54 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68d9      	ldr	r1, [r3, #12]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	6838      	ldr	r0, [r7, #0]
 8000a60:	f003 fee8 	bl	8004834 <memcpy>
    }
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000a74:	f001 fd16 	bl	80024a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a7e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a80:	e011      	b.n	8000aa6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d012      	beq.n	8000ab0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3324      	adds	r3, #36	; 0x24
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fd24 	bl	80014dc <xTaskRemoveFromEventList>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000a9a:	f000 fe01 	bl	80016a0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	dce9      	bgt.n	8000a82 <prvUnlockQueue+0x16>
 8000aae:	e000      	b.n	8000ab2 <prvUnlockQueue+0x46>
                    break;
 8000ab0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	22ff      	movs	r2, #255	; 0xff
 8000ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000aba:	f001 fd23 	bl	8002504 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000abe:	f001 fcf1 	bl	80024a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ac8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000aca:	e011      	b.n	8000af0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	691b      	ldr	r3, [r3, #16]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d012      	beq.n	8000afa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3310      	adds	r3, #16
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fcff 	bl	80014dc <xTaskRemoveFromEventList>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ae4:	f000 fddc 	bl	80016a0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ae8:	7bbb      	ldrb	r3, [r7, #14]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000af0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	dce9      	bgt.n	8000acc <prvUnlockQueue+0x60>
 8000af8:	e000      	b.n	8000afc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000afa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	22ff      	movs	r2, #255	; 0xff
 8000b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000b04:	f001 fcfe 	bl	8002504 <vPortExitCritical>
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000b18:	f001 fcc4 	bl	80024a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	e001      	b.n	8000b2e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000b2e:	f001 fce9 	bl	8002504 <vPortExitCritical>

    return xReturn;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10a      	bne.n	8000b66 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b54:	f383 8811 	msr	BASEPRI, r3
 8000b58:	f3bf 8f6f 	isb	sy
 8000b5c:	f3bf 8f4f 	dsb	sy
 8000b60:	60fb      	str	r3, [r7, #12]
    }
 8000b62:	bf00      	nop
 8000b64:	e7fe      	b.n	8000b64 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d024      	beq.n	8000bb6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e01e      	b.n	8000bb0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000b72:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <vQueueAddToRegistry+0xa8>)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	4413      	add	r3, r2
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d105      	bne.n	8000b8e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <vQueueAddToRegistry+0xa8>)
 8000b88:	4413      	add	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
                    break;
 8000b8c:	e013      	b.n	8000bb6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d10a      	bne.n	8000baa <vQueueAddToRegistry+0x6e>
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <vQueueAddToRegistry+0xa8>)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d104      	bne.n	8000baa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <vQueueAddToRegistry+0xa8>)
 8000ba6:	4413      	add	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b07      	cmp	r3, #7
 8000bb4:	d9dd      	bls.n	8000b72 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00f      	beq.n	8000bdc <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 fb26 	bl	800421c <SEGGER_SYSVIEW_ShrinkId>
 8000bd0:	4601      	mov	r1, r0
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	2071      	movs	r0, #113	; 0x71
 8000bd8:	f002 fd3a 	bl	8003650 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000048 	.word	0x20000048

08000be8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000bf8:	f001 fc54 	bl	80024a4 <vPortEnterCritical>
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c08:	d103      	bne.n	8000c12 <vQueueWaitForMessageRestricted+0x2a>
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c1e:	d103      	bne.n	8000c28 <vQueueWaitForMessageRestricted+0x40>
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c28:	f001 fc6c 	bl	8002504 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d106      	bne.n	8000c42 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3324      	adds	r3, #36	; 0x24
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	68b9      	ldr	r1, [r7, #8]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fc1f 	bl	8001480 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff12 	bl	8000a6c <prvUnlockQueue>
    }
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af04      	add	r7, sp, #16
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fd49 	bl	80026fc <pvPortMalloc>
 8000c6a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00e      	beq.n	8000c90 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000c72:	2058      	movs	r0, #88	; 0x58
 8000c74:	f001 fd42 	bl	80026fc <pvPortMalloc>
 8000c78:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
 8000c86:	e005      	b.n	8000c94 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000c88:	6978      	ldr	r0, [r7, #20]
 8000c8a:	f001 fdf1 	bl	8002870 <vPortFree>
 8000c8e:	e001      	b.n	8000c94 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d013      	beq.n	8000cc2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c9a:	88fa      	ldrh	r2, [r7, #6]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	9303      	str	r3, [sp, #12]
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68b9      	ldr	r1, [r7, #8]
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f000 f80e 	bl	8000cd2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000cb6:	69f8      	ldr	r0, [r7, #28]
 8000cb8:	f000 f8a2 	bl	8000e00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	e002      	b.n	8000cc8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000cc8:	69bb      	ldr	r3, [r7, #24]
    }
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b088      	sub	sp, #32
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	461a      	mov	r2, r3
 8000cea:	21a5      	movs	r1, #165	; 0xa5
 8000cec:	f003 fdb0 	bl	8004850 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	f023 0307 	bic.w	r3, r3, #7
 8000d08:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00a      	beq.n	8000d2a <prvInitialiseNewTask+0x58>
        __asm volatile
 8000d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d18:	f383 8811 	msr	BASEPRI, r3
 8000d1c:	f3bf 8f6f 	isb	sy
 8000d20:	f3bf 8f4f 	dsb	sy
 8000d24:	617b      	str	r3, [r7, #20]
    }
 8000d26:	bf00      	nop
 8000d28:	e7fe      	b.n	8000d28 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d01f      	beq.n	8000d70 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	e012      	b.n	8000d5c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	7819      	ldrb	r1, [r3, #0]
 8000d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	4413      	add	r3, r2
 8000d44:	3334      	adds	r3, #52	; 0x34
 8000d46:	460a      	mov	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	2b09      	cmp	r3, #9
 8000d60:	d9e9      	bls.n	8000d36 <prvInitialiseNewTask+0x64>
 8000d62:	e000      	b.n	8000d66 <prvInitialiseNewTask+0x94>
            {
                break;
 8000d64:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000d6e:	e003      	b.n	8000d78 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d901      	bls.n	8000d82 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d8c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d90:	2200      	movs	r2, #0
 8000d92:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d96:	3304      	adds	r3, #4
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fb94 	bl	80004c6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da0:	3318      	adds	r3, #24
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fb8f 	bl	80004c6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db0:	f1c3 0205 	rsb	r2, r3, #5
 8000db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc0:	3350      	adds	r3, #80	; 0x50
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fd42 	bl	8004850 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dce:	3354      	adds	r3, #84	; 0x54
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fd3b 	bl	8004850 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	68f9      	ldr	r1, [r7, #12]
 8000dde:	69b8      	ldr	r0, [r7, #24]
 8000de0:	f001 f9b0 	bl	8002144 <pxPortInitialiseStack>
 8000de4:	4602      	mov	r2, r0
 8000de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000df4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000e00:	b5b0      	push	{r4, r5, r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000e08:	f001 fb4c 	bl	80024a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000e0c:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <prvAddNewTaskToReadyList+0xfc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	4a3a      	ldr	r2, [pc, #232]	; (8000efc <prvAddNewTaskToReadyList+0xfc>)
 8000e14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000e16:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <prvAddNewTaskToReadyList+0x100>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d109      	bne.n	8000e32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000e1e:	4a38      	ldr	r2, [pc, #224]	; (8000f00 <prvAddNewTaskToReadyList+0x100>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000e24:	4b35      	ldr	r3, [pc, #212]	; (8000efc <prvAddNewTaskToReadyList+0xfc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d110      	bne.n	8000e4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000e2c:	f000 fc5c 	bl	80016e8 <prvInitialiseTaskLists>
 8000e30:	e00d      	b.n	8000e4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000e32:	4b34      	ldr	r3, [pc, #208]	; (8000f04 <prvAddNewTaskToReadyList+0x104>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d109      	bne.n	8000e4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000e3a:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <prvAddNewTaskToReadyList+0x100>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d802      	bhi.n	8000e4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000e48:	4a2d      	ldr	r2, [pc, #180]	; (8000f00 <prvAddNewTaskToReadyList+0x100>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <prvAddNewTaskToReadyList+0x108>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a2c      	ldr	r2, [pc, #176]	; (8000f08 <prvAddNewTaskToReadyList+0x108>)
 8000e56:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <prvAddNewTaskToReadyList+0x108>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d016      	beq.n	8000e94 <prvAddNewTaskToReadyList+0x94>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 f8b1 	bl	8003fd0 <SEGGER_SYSVIEW_OnTaskCreate>
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	461d      	mov	r5, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	461c      	mov	r4, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	1ae3      	subs	r3, r4, r3
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	462b      	mov	r3, r5
 8000e90:	f001 feb0 	bl	8002bf4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 f91e 	bl	80040d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <prvAddNewTaskToReadyList+0x10c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <prvAddNewTaskToReadyList+0x10c>)
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <prvAddNewTaskToReadyList+0x110>)
 8000ebc:	441a      	add	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	f7ff fb0b 	bl	80004e0 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000eca:	f001 fb1b 	bl	8002504 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <prvAddNewTaskToReadyList+0x104>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00e      	beq.n	8000ef4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <prvAddNewTaskToReadyList+0x100>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <prvAddNewTaskToReadyList+0x114>)
 8000ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	f3bf 8f4f 	dsb	sy
 8000ef0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bdb0      	pop	{r4, r5, r7, pc}
 8000efc:	20000160 	.word	0x20000160
 8000f00:	20000088 	.word	0x20000088
 8000f04:	2000016c 	.word	0x2000016c
 8000f08:	2000017c 	.word	0x2000017c
 8000f0c:	20000168 	.word	0x20000168
 8000f10:	2000008c 	.word	0x2000008c
 8000f14:	e000ed04 	.word	0xe000ed04

08000f18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d01b      	beq.n	8000f62 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <vTaskDelay+0x68>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00a      	beq.n	8000f48 <vTaskDelay+0x30>
        __asm volatile
 8000f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f36:	f383 8811 	msr	BASEPRI, r3
 8000f3a:	f3bf 8f6f 	isb	sy
 8000f3e:	f3bf 8f4f 	dsb	sy
 8000f42:	60bb      	str	r3, [r7, #8]
    }
 8000f44:	bf00      	nop
 8000f46:	e7fe      	b.n	8000f46 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000f48:	f000 f880 	bl	800104c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	2023      	movs	r0, #35	; 0x23
 8000f50:	f002 fb42 	bl	80035d8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000f54:	2100      	movs	r1, #0
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fdf8 	bl	8001b4c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000f5c:	f000 f884 	bl	8001068 <xTaskResumeAll>
 8000f60:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d107      	bne.n	8000f78 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <vTaskDelay+0x6c>)
 8000f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	f3bf 8f4f 	dsb	sy
 8000f74:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000188 	.word	0x20000188
 8000f84:	e000ed04 	.word	0xe000ed04

08000f88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <vTaskStartScheduler+0xa4>)
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	2300      	movs	r3, #0
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	2282      	movs	r2, #130	; 0x82
 8000f9a:	4925      	ldr	r1, [pc, #148]	; (8001030 <vTaskStartScheduler+0xa8>)
 8000f9c:	4825      	ldr	r0, [pc, #148]	; (8001034 <vTaskStartScheduler+0xac>)
 8000f9e:	f7ff fe57 	bl	8000c50 <xTaskCreate>
 8000fa2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d102      	bne.n	8000fb0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8000faa:	f000 fe47 	bl	8001c3c <xTimerCreateTimerTask>
 8000fae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d124      	bne.n	8001000 <vTaskStartScheduler+0x78>
        __asm volatile
 8000fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fba:	f383 8811 	msr	BASEPRI, r3
 8000fbe:	f3bf 8f6f 	isb	sy
 8000fc2:	f3bf 8f4f 	dsb	sy
 8000fc6:	60bb      	str	r3, [r7, #8]
    }
 8000fc8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <vTaskStartScheduler+0xb0>)
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <vTaskStartScheduler+0xb4>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <vTaskStartScheduler+0xb8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <vTaskStartScheduler+0xbc>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <vTaskStartScheduler+0xa4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d102      	bne.n	8000ff0 <vTaskStartScheduler+0x68>
 8000fea:	f002 ffd5 	bl	8003f98 <SEGGER_SYSVIEW_OnIdle>
 8000fee:	e004      	b.n	8000ffa <vTaskStartScheduler+0x72>
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <vTaskStartScheduler+0xbc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 f82d 	bl	8004054 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000ffa:	f001 f933 	bl	8002264 <xPortStartScheduler>
 8000ffe:	e00e      	b.n	800101e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001006:	d10a      	bne.n	800101e <vTaskStartScheduler+0x96>
        __asm volatile
 8001008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800100c:	f383 8811 	msr	BASEPRI, r3
 8001010:	f3bf 8f6f 	isb	sy
 8001014:	f3bf 8f4f 	dsb	sy
 8001018:	607b      	str	r3, [r7, #4]
    }
 800101a:	bf00      	nop
 800101c:	e7fe      	b.n	800101c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <vTaskStartScheduler+0xc0>)
 8001020:	681b      	ldr	r3, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000184 	.word	0x20000184
 8001030:	080048c4 	.word	0x080048c4
 8001034:	080016b9 	.word	0x080016b9
 8001038:	20000180 	.word	0x20000180
 800103c:	2000016c 	.word	0x2000016c
 8001040:	20000164 	.word	0x20000164
 8001044:	20000088 	.word	0x20000088
 8001048:	20000004 	.word	0x20000004

0800104c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <vTaskSuspendAll+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a03      	ldr	r2, [pc, #12]	; (8001064 <vTaskSuspendAll+0x18>)
 8001058:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	20000188 	.word	0x20000188

08001068 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001076:	4b43      	ldr	r3, [pc, #268]	; (8001184 <xTaskResumeAll+0x11c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10a      	bne.n	8001094 <xTaskResumeAll+0x2c>
        __asm volatile
 800107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001082:	f383 8811 	msr	BASEPRI, r3
 8001086:	f3bf 8f6f 	isb	sy
 800108a:	f3bf 8f4f 	dsb	sy
 800108e:	603b      	str	r3, [r7, #0]
    }
 8001090:	bf00      	nop
 8001092:	e7fe      	b.n	8001092 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001094:	f001 fa06 	bl	80024a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001098:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <xTaskResumeAll+0x11c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	4a39      	ldr	r2, [pc, #228]	; (8001184 <xTaskResumeAll+0x11c>)
 80010a0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010a2:	4b38      	ldr	r3, [pc, #224]	; (8001184 <xTaskResumeAll+0x11c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d165      	bne.n	8001176 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80010aa:	4b37      	ldr	r3, [pc, #220]	; (8001188 <xTaskResumeAll+0x120>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d061      	beq.n	8001176 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010b2:	e032      	b.n	800111a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <xTaskResumeAll+0x124>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3318      	adds	r3, #24
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa6a 	bl	800059a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3304      	adds	r3, #4
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa65 	bl	800059a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 f800 	bl	80040d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	2201      	movs	r2, #1
 80010de:	409a      	lsls	r2, r3
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <xTaskResumeAll+0x128>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <xTaskResumeAll+0x128>)
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4a27      	ldr	r2, [pc, #156]	; (8001194 <xTaskResumeAll+0x12c>)
 80010f8:	441a      	add	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3304      	adds	r3, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4610      	mov	r0, r2
 8001102:	f7ff f9ed 	bl	80004e0 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <xTaskResumeAll+0x130>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	429a      	cmp	r2, r3
 8001112:	d302      	bcc.n	800111a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <xTaskResumeAll+0x134>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <xTaskResumeAll+0x124>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1c8      	bne.n	80010b4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001128:	f000 fb5c 	bl	80017e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <xTaskResumeAll+0x138>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d010      	beq.n	800115a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001138:	f000 f858 	bl	80011ec <xTaskIncrementTick>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <xTaskResumeAll+0x134>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f1      	bne.n	8001138 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <xTaskResumeAll+0x138>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <xTaskResumeAll+0x134>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d009      	beq.n	8001176 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001162:	2301      	movs	r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <xTaskResumeAll+0x13c>)
 8001168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	f3bf 8f4f 	dsb	sy
 8001172:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001176:	f001 f9c5 	bl	8002504 <vPortExitCritical>

    return xAlreadyYielded;
 800117a:	68bb      	ldr	r3, [r7, #8]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000188 	.word	0x20000188
 8001188:	20000160 	.word	0x20000160
 800118c:	20000120 	.word	0x20000120
 8001190:	20000168 	.word	0x20000168
 8001194:	2000008c 	.word	0x2000008c
 8001198:	20000088 	.word	0x20000088
 800119c:	20000174 	.word	0x20000174
 80011a0:	20000170 	.word	0x20000170
 80011a4:	e000ed04 	.word	0xe000ed04

080011a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <xTaskGetTickCount+0x1c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000164 	.word	0x20000164

080011c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80011ce:	f001 fa55 	bl	800267c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <xTaskGetTickCountFromISR+0x20>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80011dc:	683b      	ldr	r3, [r7, #0]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000164 	.word	0x20000164

080011ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011f6:	4b50      	ldr	r3, [pc, #320]	; (8001338 <xTaskIncrementTick+0x14c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 8092 	bne.w	8001324 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001200:	4b4e      	ldr	r3, [pc, #312]	; (800133c <xTaskIncrementTick+0x150>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001208:	4a4c      	ldr	r2, [pc, #304]	; (800133c <xTaskIncrementTick+0x150>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d120      	bne.n	8001256 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001214:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <xTaskIncrementTick+0x154>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00a      	beq.n	8001234 <xTaskIncrementTick+0x48>
        __asm volatile
 800121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001222:	f383 8811 	msr	BASEPRI, r3
 8001226:	f3bf 8f6f 	isb	sy
 800122a:	f3bf 8f4f 	dsb	sy
 800122e:	603b      	str	r3, [r7, #0]
    }
 8001230:	bf00      	nop
 8001232:	e7fe      	b.n	8001232 <xTaskIncrementTick+0x46>
 8001234:	4b42      	ldr	r3, [pc, #264]	; (8001340 <xTaskIncrementTick+0x154>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b42      	ldr	r3, [pc, #264]	; (8001344 <xTaskIncrementTick+0x158>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a40      	ldr	r2, [pc, #256]	; (8001340 <xTaskIncrementTick+0x154>)
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4a40      	ldr	r2, [pc, #256]	; (8001344 <xTaskIncrementTick+0x158>)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <xTaskIncrementTick+0x15c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	4a3e      	ldr	r2, [pc, #248]	; (8001348 <xTaskIncrementTick+0x15c>)
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	f000 fac7 	bl	80017e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <xTaskIncrementTick+0x160>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	429a      	cmp	r2, r3
 800125e:	d34c      	bcc.n	80012fa <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001260:	4b37      	ldr	r3, [pc, #220]	; (8001340 <xTaskIncrementTick+0x154>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d104      	bne.n	8001274 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800126a:	4b38      	ldr	r3, [pc, #224]	; (800134c <xTaskIncrementTick+0x160>)
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001270:	601a      	str	r2, [r3, #0]
                    break;
 8001272:	e042      	b.n	80012fa <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <xTaskIncrementTick+0x154>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	d203      	bcs.n	8001294 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800128c:	4a2f      	ldr	r2, [pc, #188]	; (800134c <xTaskIncrementTick+0x160>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001292:	e032      	b.n	80012fa <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	3304      	adds	r3, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f97e 	bl	800059a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3318      	adds	r3, #24
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f975 	bl	800059a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 ff10 	bl	80040d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	2201      	movs	r2, #1
 80012be:	409a      	lsls	r2, r3
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <xTaskIncrementTick+0x164>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <xTaskIncrementTick+0x164>)
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <xTaskIncrementTick+0x168>)
 80012d8:	441a      	add	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3304      	adds	r3, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4610      	mov	r0, r2
 80012e2:	f7ff f8fd 	bl	80004e0 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <xTaskIncrementTick+0x16c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d3b5      	bcc.n	8001260 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012f8:	e7b2      	b.n	8001260 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <xTaskIncrementTick+0x16c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001300:	4914      	ldr	r1, [pc, #80]	; (8001354 <xTaskIncrementTick+0x168>)
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d901      	bls.n	8001316 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8001312:	2301      	movs	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <xTaskIncrementTick+0x170>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800131e:	2301      	movs	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	e004      	b.n	800132e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <xTaskIncrementTick+0x174>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <xTaskIncrementTick+0x174>)
 800132c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800132e:	697b      	ldr	r3, [r7, #20]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000188 	.word	0x20000188
 800133c:	20000164 	.word	0x20000164
 8001340:	20000118 	.word	0x20000118
 8001344:	2000011c 	.word	0x2000011c
 8001348:	20000178 	.word	0x20000178
 800134c:	20000180 	.word	0x20000180
 8001350:	20000168 	.word	0x20000168
 8001354:	2000008c 	.word	0x2000008c
 8001358:	20000088 	.word	0x20000088
 800135c:	20000174 	.word	0x20000174
 8001360:	20000170 	.word	0x20000170

08001364 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <vTaskSwitchContext+0xbc>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <vTaskSwitchContext+0xc0>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001378:	e04d      	b.n	8001416 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <vTaskSwitchContext+0xc0>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001380:	4b29      	ldr	r3, [pc, #164]	; (8001428 <vTaskSwitchContext+0xc4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800138e:	7afb      	ldrb	r3, [r7, #11]
 8001390:	f1c3 031f 	rsb	r3, r3, #31
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	4925      	ldr	r1, [pc, #148]	; (800142c <vTaskSwitchContext+0xc8>)
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10a      	bne.n	80013c0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80013aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ae:	f383 8811 	msr	BASEPRI, r3
 80013b2:	f3bf 8f6f 	isb	sy
 80013b6:	f3bf 8f4f 	dsb	sy
 80013ba:	607b      	str	r3, [r7, #4]
    }
 80013bc:	bf00      	nop
 80013be:	e7fe      	b.n	80013be <vTaskSwitchContext+0x5a>
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <vTaskSwitchContext+0xc8>)
 80013cc:	4413      	add	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	3308      	adds	r3, #8
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d104      	bne.n	80013f0 <vTaskSwitchContext+0x8c>
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <vTaskSwitchContext+0xcc>)
 80013f8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <vTaskSwitchContext+0xcc>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <vTaskSwitchContext+0xd0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d102      	bne.n	800140c <vTaskSwitchContext+0xa8>
 8001406:	f002 fdc7 	bl	8003f98 <SEGGER_SYSVIEW_OnIdle>
}
 800140a:	e004      	b.n	8001416 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <vTaskSwitchContext+0xcc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fe1f 	bl	8004054 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000188 	.word	0x20000188
 8001424:	20000174 	.word	0x20000174
 8001428:	20000168 	.word	0x20000168
 800142c:	2000008c 	.word	0x2000008c
 8001430:	20000088 	.word	0x20000088
 8001434:	20000184 	.word	0x20000184

08001438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10a      	bne.n	800145e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800144c:	f383 8811 	msr	BASEPRI, r3
 8001450:	f3bf 8f6f 	isb	sy
 8001454:	f3bf 8f4f 	dsb	sy
 8001458:	60fb      	str	r3, [r7, #12]
    }
 800145a:	bf00      	nop
 800145c:	e7fe      	b.n	800145c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <vTaskPlaceOnEventList+0x44>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3318      	adds	r3, #24
 8001464:	4619      	mov	r1, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff f85e 	bl	8000528 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800146c:	2101      	movs	r1, #1
 800146e:	6838      	ldr	r0, [r7, #0]
 8001470:	f000 fb6c 	bl	8001b4c <prvAddCurrentTaskToDelayedList>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000088 	.word	0x20000088

08001480 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10a      	bne.n	80014a8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001496:	f383 8811 	msr	BASEPRI, r3
 800149a:	f3bf 8f6f 	isb	sy
 800149e:	f3bf 8f4f 	dsb	sy
 80014a2:	617b      	str	r3, [r7, #20]
    }
 80014a4:	bf00      	nop
 80014a6:	e7fe      	b.n	80014a6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <vTaskPlaceOnEventListRestricted+0x58>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3318      	adds	r3, #24
 80014ae:	4619      	mov	r1, r3
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff f815 	bl	80004e0 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014c0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80014c2:	2024      	movs	r0, #36	; 0x24
 80014c4:	f002 f86a 	bl	800359c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	68b8      	ldr	r0, [r7, #8]
 80014cc:	f000 fb3e 	bl	8001b4c <prvAddCurrentTaskToDelayedList>
    }
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000088 	.word	0x20000088

080014dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10a      	bne.n	8001508 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80014f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f6:	f383 8811 	msr	BASEPRI, r3
 80014fa:	f3bf 8f6f 	isb	sy
 80014fe:	f3bf 8f4f 	dsb	sy
 8001502:	60fb      	str	r3, [r7, #12]
    }
 8001504:	bf00      	nop
 8001506:	e7fe      	b.n	8001506 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	3318      	adds	r3, #24
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f844 	bl	800059a <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <xTaskRemoveFromEventList+0xb4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d120      	bne.n	800155c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	3304      	adds	r3, #4
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f83b 	bl	800059a <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fdd6 	bl	80040d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	2201      	movs	r2, #1
 8001532:	409a      	lsls	r2, r3
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <xTaskRemoveFromEventList+0xb8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4313      	orrs	r3, r2
 800153a:	4a16      	ldr	r2, [pc, #88]	; (8001594 <xTaskRemoveFromEventList+0xb8>)
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <xTaskRemoveFromEventList+0xbc>)
 800154c:	441a      	add	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	3304      	adds	r3, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4610      	mov	r0, r2
 8001556:	f7fe ffc3 	bl	80004e0 <vListInsertEnd>
 800155a:	e005      	b.n	8001568 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	3318      	adds	r3, #24
 8001560:	4619      	mov	r1, r3
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <xTaskRemoveFromEventList+0xc0>)
 8001564:	f7fe ffbc 	bl	80004e0 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <xTaskRemoveFromEventList+0xc4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	429a      	cmp	r2, r3
 8001574:	d905      	bls.n	8001582 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <xTaskRemoveFromEventList+0xc8>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e001      	b.n	8001586 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001586:	697b      	ldr	r3, [r7, #20]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000188 	.word	0x20000188
 8001594:	20000168 	.word	0x20000168
 8001598:	2000008c 	.word	0x2000008c
 800159c:	20000120 	.word	0x20000120
 80015a0:	20000088 	.word	0x20000088
 80015a4:	20000174 	.word	0x20000174

080015a8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <vTaskInternalSetTimeOutState+0x24>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <vTaskInternalSetTimeOutState+0x28>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	605a      	str	r2, [r3, #4]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	20000178 	.word	0x20000178
 80015d0:	20000164 	.word	0x20000164

080015d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10a      	bne.n	80015fa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80015e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e8:	f383 8811 	msr	BASEPRI, r3
 80015ec:	f3bf 8f6f 	isb	sy
 80015f0:	f3bf 8f4f 	dsb	sy
 80015f4:	613b      	str	r3, [r7, #16]
    }
 80015f6:	bf00      	nop
 80015f8:	e7fe      	b.n	80015f8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10a      	bne.n	8001616 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001604:	f383 8811 	msr	BASEPRI, r3
 8001608:	f3bf 8f6f 	isb	sy
 800160c:	f3bf 8f4f 	dsb	sy
 8001610:	60fb      	str	r3, [r7, #12]
    }
 8001612:	bf00      	nop
 8001614:	e7fe      	b.n	8001614 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001616:	f000 ff45 	bl	80024a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <xTaskCheckForTimeOut+0xc4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001632:	d102      	bne.n	800163a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	e026      	b.n	8001688 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <xTaskCheckForTimeOut+0xc8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d00a      	beq.n	800165c <xTaskCheckForTimeOut+0x88>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	429a      	cmp	r2, r3
 800164e:	d305      	bcc.n	800165c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001650:	2301      	movs	r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e015      	b.n	8001688 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	429a      	cmp	r2, r3
 8001664:	d20b      	bcs.n	800167e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	1ad2      	subs	r2, r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ff98 	bl	80015a8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	e004      	b.n	8001688 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001684:	2301      	movs	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001688:	f000 ff3c 	bl	8002504 <vPortExitCritical>

    return xReturn;
 800168c:	69fb      	ldr	r3, [r7, #28]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000164 	.word	0x20000164
 800169c:	20000178 	.word	0x20000178

080016a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <vTaskMissedYield+0x14>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	20000174 	.word	0x20000174

080016b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80016c0:	f000 f852 	bl	8001768 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <prvIdleTask+0x28>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d9f9      	bls.n	80016c0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <prvIdleTask+0x2c>)
 80016ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f3bf 8f4f 	dsb	sy
 80016d8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80016dc:	e7f0      	b.n	80016c0 <prvIdleTask+0x8>
 80016de:	bf00      	nop
 80016e0:	2000008c 	.word	0x2000008c
 80016e4:	e000ed04 	.word	0xe000ed04

080016e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	e00c      	b.n	800170e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <prvInitialiseTaskLists+0x60>)
 8001700:	4413      	add	r3, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe febf 	bl	8000486 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3301      	adds	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b04      	cmp	r3, #4
 8001712:	d9ef      	bls.n	80016f4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <prvInitialiseTaskLists+0x64>)
 8001716:	f7fe feb6 	bl	8000486 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800171a:	480d      	ldr	r0, [pc, #52]	; (8001750 <prvInitialiseTaskLists+0x68>)
 800171c:	f7fe feb3 	bl	8000486 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <prvInitialiseTaskLists+0x6c>)
 8001722:	f7fe feb0 	bl	8000486 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001726:	480c      	ldr	r0, [pc, #48]	; (8001758 <prvInitialiseTaskLists+0x70>)
 8001728:	f7fe fead 	bl	8000486 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <prvInitialiseTaskLists+0x74>)
 800172e:	f7fe feaa 	bl	8000486 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <prvInitialiseTaskLists+0x78>)
 8001734:	4a05      	ldr	r2, [pc, #20]	; (800174c <prvInitialiseTaskLists+0x64>)
 8001736:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <prvInitialiseTaskLists+0x7c>)
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <prvInitialiseTaskLists+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000008c 	.word	0x2000008c
 800174c:	200000f0 	.word	0x200000f0
 8001750:	20000104 	.word	0x20000104
 8001754:	20000120 	.word	0x20000120
 8001758:	20000134 	.word	0x20000134
 800175c:	2000014c 	.word	0x2000014c
 8001760:	20000118 	.word	0x20000118
 8001764:	2000011c 	.word	0x2000011c

08001768 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800176e:	e019      	b.n	80017a4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001770:	f000 fe98 	bl	80024a4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <prvCheckTasksWaitingTermination+0x50>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3304      	adds	r3, #4
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe ff0a 	bl	800059a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <prvCheckTasksWaitingTermination+0x54>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3b01      	subs	r3, #1
 800178c:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <prvCheckTasksWaitingTermination+0x54>)
 800178e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <prvCheckTasksWaitingTermination+0x58>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3b01      	subs	r3, #1
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <prvCheckTasksWaitingTermination+0x58>)
 8001798:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800179a:	f000 feb3 	bl	8002504 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f810 	bl	80017c4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <prvCheckTasksWaitingTermination+0x58>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e1      	bne.n	8001770 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000134 	.word	0x20000134
 80017bc:	20000160 	.word	0x20000160
 80017c0:	20000148 	.word	0x20000148

080017c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4618      	mov	r0, r3
 80017d2:	f001 f84d 	bl	8002870 <vPortFree>
                vPortFree( pxTCB );
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f001 f84a 	bl	8002870 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <prvResetNextTaskUnblockTime+0x30>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d104      	bne.n	80017fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <prvResetNextTaskUnblockTime+0x34>)
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80017fa:	e005      	b.n	8001808 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <prvResetNextTaskUnblockTime+0x30>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <prvResetNextTaskUnblockTime+0x34>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000118 	.word	0x20000118
 8001818:	20000180 	.word	0x20000180

0800181c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <xTaskGetSchedulerState+0x34>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800182a:	2301      	movs	r3, #1
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	e008      	b.n	8001842 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <xTaskGetSchedulerState+0x38>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001838:	2302      	movs	r3, #2
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	e001      	b.n	8001842 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001842:	687b      	ldr	r3, [r7, #4]
    }
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	2000016c 	.word	0x2000016c
 8001854:	20000188 	.word	0x20000188

08001858 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800186c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001870:	f383 8811 	msr	BASEPRI, r3
 8001874:	f3bf 8f6f 	isb	sy
 8001878:	f3bf 8f4f 	dsb	sy
 800187c:	613b      	str	r3, [r7, #16]
    }
 800187e:	bf00      	nop
 8001880:	e7fe      	b.n	8001880 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001882:	f000 fe0f 	bl	80024a4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <xTaskGenericNotifyWait+0x108>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	3354      	adds	r3, #84	; 0x54
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d022      	beq.n	80018de <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001898:	4b31      	ldr	r3, [pc, #196]	; (8001960 <xTaskGenericNotifyWait+0x108>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	3214      	adds	r2, #20
 80018a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	43d2      	mvns	r2, r2
 80018a8:	4011      	ands	r1, r2
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	3214      	adds	r2, #20
 80018ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <xTaskGenericNotifyWait+0x108>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4413      	add	r3, r2
 80018ba:	3354      	adds	r3, #84	; 0x54
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018c6:	2101      	movs	r1, #1
 80018c8:	6a38      	ldr	r0, [r7, #32]
 80018ca:	f000 f93f 	bl	8001b4c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <xTaskGenericNotifyWait+0x10c>)
 80018d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f3bf 8f4f 	dsb	sy
 80018da:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80018de:	f000 fe11 	bl	8002504 <vPortExitCritical>

        taskENTER_CRITICAL();
 80018e2:	f000 fddf 	bl	80024a4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	2040      	movs	r0, #64	; 0x40
 80018f4:	f001 ff7c 	bl	80037f0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <xTaskGenericNotifyWait+0x108>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	3214      	adds	r2, #20
 8001906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <xTaskGenericNotifyWait+0x108>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4413      	add	r3, r2
 8001916:	3354      	adds	r3, #84	; 0x54
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d002      	beq.n	8001926 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e00e      	b.n	8001944 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <xTaskGenericNotifyWait+0x108>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	3214      	adds	r2, #20
 800192e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	43d2      	mvns	r2, r2
 8001936:	4011      	ands	r1, r2
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	3214      	adds	r2, #20
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001940:	2301      	movs	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <xTaskGenericNotifyWait+0x108>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	3354      	adds	r3, #84	; 0x54
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001952:	f000 fdd7 	bl	8002504 <vPortExitCritical>

        return xReturn;
 8001956:	697b      	ldr	r3, [r7, #20]
    }
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000088 	.word	0x20000088
 8001964:	e000ed04 	.word	0xe000ed04

08001968 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001976:	2301      	movs	r3, #1
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00a      	beq.n	8001996 <xTaskGenericNotify+0x2e>
        __asm volatile
 8001980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001984:	f383 8811 	msr	BASEPRI, r3
 8001988:	f3bf 8f6f 	isb	sy
 800198c:	f3bf 8f4f 	dsb	sy
 8001990:	623b      	str	r3, [r7, #32]
    }
 8001992:	bf00      	nop
 8001994:	e7fe      	b.n	8001994 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10a      	bne.n	80019b2 <xTaskGenericNotify+0x4a>
        __asm volatile
 800199c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a0:	f383 8811 	msr	BASEPRI, r3
 80019a4:	f3bf 8f6f 	isb	sy
 80019a8:	f3bf 8f4f 	dsb	sy
 80019ac:	61fb      	str	r3, [r7, #28]
    }
 80019ae:	bf00      	nop
 80019b0:	e7fe      	b.n	80019b0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80019b6:	f000 fd75 	bl	80024a4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80019ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	3214      	adds	r2, #20
 80019c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019cc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80019ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4413      	add	r3, r2
 80019d4:	3354      	adds	r3, #84	; 0x54
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80019dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	4413      	add	r3, r2
 80019e2:	3354      	adds	r3, #84	; 0x54
 80019e4:	2202      	movs	r2, #2
 80019e6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d83b      	bhi.n	8001a66 <xTaskGenericNotify+0xfe>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <xTaskGenericNotify+0x8c>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a85 	.word	0x08001a85
 80019f8:	08001a09 	.word	0x08001a09
 80019fc:	08001a25 	.word	0x08001a25
 8001a00:	08001a3d 	.word	0x08001a3d
 8001a04:	08001a4b 	.word	0x08001a4b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	3214      	adds	r2, #20
 8001a0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	ea42 0103 	orr.w	r1, r2, r3
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	3214      	adds	r2, #20
 8001a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001a22:	e032      	b.n	8001a8a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	3214      	adds	r2, #20
 8001a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2e:	1c59      	adds	r1, r3, #1
 8001a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	3214      	adds	r2, #20
 8001a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001a3a:	e026      	b.n	8001a8a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	3214      	adds	r2, #20
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001a48:	e01f      	b.n	8001a8a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d006      	beq.n	8001a60 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	3214      	adds	r2, #20
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001a5e:	e014      	b.n	8001a8a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001a64:	e011      	b.n	8001a8a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001a66:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <xTaskGenericNotify+0x1d0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00c      	beq.n	8001a88 <xTaskGenericNotify+0x120>
        __asm volatile
 8001a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a72:	f383 8811 	msr	BASEPRI, r3
 8001a76:	f3bf 8f6f 	isb	sy
 8001a7a:	f3bf 8f4f 	dsb	sy
 8001a7e:	61bb      	str	r3, [r7, #24]
    }
 8001a80:	bf00      	nop
 8001a82:	e7fe      	b.n	8001a82 <xTaskGenericNotify+0x11a>
                    break;
 8001a84:	bf00      	nop
 8001a86:	e000      	b.n	8001a8a <xTaskGenericNotify+0x122>

                    break;
 8001a88:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fbc5 	bl	800421c <SEGGER_SYSVIEW_ShrinkId>
 8001a92:	4601      	mov	r1, r0
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	203e      	movs	r0, #62	; 0x3e
 8001aa0:	f001 fea6 	bl	80037f0 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d13d      	bne.n	8001b28 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aae:	3304      	adds	r3, #4
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd72 	bl	800059a <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8001ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fb0d 	bl	80040d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <xTaskGenericNotify+0x1d4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <xTaskGenericNotify+0x1d4>)
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4a18      	ldr	r2, [pc, #96]	; (8001b40 <xTaskGenericNotify+0x1d8>)
 8001ade:	441a      	add	r2, r3
 8001ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f7fe fcfa 	bl	80004e0 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00a      	beq.n	8001b0a <xTaskGenericNotify+0x1a2>
        __asm volatile
 8001af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af8:	f383 8811 	msr	BASEPRI, r3
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	617b      	str	r3, [r7, #20]
    }
 8001b06:	bf00      	nop
 8001b08:	e7fe      	b.n	8001b08 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <xTaskGenericNotify+0x1dc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d907      	bls.n	8001b28 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <xTaskGenericNotify+0x1e0>)
 8001b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f3bf 8f4f 	dsb	sy
 8001b24:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001b28:	f000 fcec 	bl	8002504 <vPortExitCritical>

        return xReturn;
 8001b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3730      	adds	r7, #48	; 0x30
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000164 	.word	0x20000164
 8001b3c:	20000168 	.word	0x20000168
 8001b40:	2000008c 	.word	0x2000008c
 8001b44:	20000088 	.word	0x20000088
 8001b48:	e000ed04 	.word	0xe000ed04

08001b4c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001b56:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b5c:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3304      	adds	r3, #4
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd19 	bl	800059a <uxListRemove>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10b      	bne.n	8001b86 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	2201      	movs	r2, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4013      	ands	r3, r2
 8001b82:	4a29      	ldr	r2, [pc, #164]	; (8001c28 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001b84:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b8c:	d110      	bne.n	8001bb0 <prvAddCurrentTaskToDelayedList+0x64>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00d      	beq.n	8001bb0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	211b      	movs	r1, #27
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 fade 	bl	800415c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ba0:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4820      	ldr	r0, [pc, #128]	; (8001c2c <prvAddCurrentTaskToDelayedList+0xe0>)
 8001baa:	f7fe fc99 	bl	80004e0 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001bae:	e032      	b.n	8001c16 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d20f      	bcs.n	8001be8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2104      	movs	r1, #4
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fac4 	bl	800415c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4610      	mov	r0, r2
 8001be2:	f7fe fca1 	bl	8000528 <vListInsert>
}
 8001be6:	e016      	b.n	8001c16 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2104      	movs	r1, #4
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 fab4 	bl	800415c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4610      	mov	r0, r2
 8001c02:	f7fe fc91 	bl	8000528 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <prvAddCurrentTaskToDelayedList+0xec>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d202      	bcs.n	8001c16 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001c10:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <prvAddCurrentTaskToDelayedList+0xec>)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	6013      	str	r3, [r2, #0]
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000164 	.word	0x20000164
 8001c24:	20000088 	.word	0x20000088
 8001c28:	20000168 	.word	0x20000168
 8001c2c:	2000014c 	.word	0x2000014c
 8001c30:	2000011c 	.word	0x2000011c
 8001c34:	20000118 	.word	0x20000118
 8001c38:	20000180 	.word	0x20000180

08001c3c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001c46:	f000 fa47 	bl	80020d8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <xTimerCreateTimerTask+0x54>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <xTimerCreateTimerTask+0x58>)
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	2302      	movs	r3, #2
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c60:	490d      	ldr	r1, [pc, #52]	; (8001c98 <xTimerCreateTimerTask+0x5c>)
 8001c62:	480e      	ldr	r0, [pc, #56]	; (8001c9c <xTimerCreateTimerTask+0x60>)
 8001c64:	f7fe fff4 	bl	8000c50 <xTaskCreate>
 8001c68:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10a      	bne.n	8001c86 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c74:	f383 8811 	msr	BASEPRI, r3
 8001c78:	f3bf 8f6f 	isb	sy
 8001c7c:	f3bf 8f4f 	dsb	sy
 8001c80:	603b      	str	r3, [r7, #0]
    }
 8001c82:	bf00      	nop
 8001c84:	e7fe      	b.n	8001c84 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001c86:	687b      	ldr	r3, [r7, #4]
    }
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200001bc 	.word	0x200001bc
 8001c94:	200001c0 	.word	0x200001c0
 8001c98:	080048cc 	.word	0x080048cc
 8001c9c:	08001d45 	.word	0x08001d45

08001ca0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001cac:	e008      	b.n	8001cc0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	18d1      	adds	r1, r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f8dd 	bl	8001e8c <prvInsertTimerInActiveList>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ea      	bne.n	8001cae <prvReloadTimer+0xe>
        }
    }
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <prvProcessExpiredTimer+0x5c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fc4c 	bl	800059a <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff ffc3 	bl	8001ca0 <prvReloadTimer>
 8001d1a:	e008      	b.n	8001d2e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	4798      	blx	r3
    }
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200001b4 	.word	0x200001b4

08001d44 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f857 	bl	8001e04 <prvGetNextExpireTime>
 8001d56:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f803 	bl	8001d68 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001d62:	f000 f8d5 	bl	8001f10 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001d66:	e7f1      	b.n	8001d4c <prvTimerTask+0x8>

08001d68 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001d72:	f7ff f96b 	bl	800104c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 f866 	bl	8001e4c <prvSampleTimeNow>
 8001d80:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d130      	bne.n	8001dea <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10a      	bne.n	8001da4 <prvProcessTimerOrBlockTask+0x3c>
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d806      	bhi.n	8001da4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001d96:	f7ff f967 	bl	8001068 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001d9a:	68f9      	ldr	r1, [r7, #12]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ffa1 	bl	8001ce4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001da2:	e024      	b.n	8001dee <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d008      	beq.n	8001dbc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <prvProcessTimerOrBlockTask+0x90>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <prvProcessTimerOrBlockTask+0x50>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <prvProcessTimerOrBlockTask+0x52>
 8001db8:	2300      	movs	r3, #0
 8001dba:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <prvProcessTimerOrBlockTask+0x94>)
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe ff0d 	bl	8000be8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001dce:	f7ff f94b 	bl	8001068 <xTaskResumeAll>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <prvProcessTimerOrBlockTask+0x98>)
 8001dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	f3bf 8f4f 	dsb	sy
 8001de4:	f3bf 8f6f 	isb	sy
    }
 8001de8:	e001      	b.n	8001dee <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001dea:	f7ff f93d 	bl	8001068 <xTaskResumeAll>
    }
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200001b8 	.word	0x200001b8
 8001dfc:	200001bc 	.word	0x200001bc
 8001e00:	e000ed04 	.word	0xe000ed04

08001e04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <prvGetNextExpireTime+0x44>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <prvGetNextExpireTime+0x16>
 8001e16:	2201      	movs	r2, #1
 8001e18:	e000      	b.n	8001e1c <prvGetNextExpireTime+0x18>
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <prvGetNextExpireTime+0x44>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e001      	b.n	8001e38 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001e38:	68fb      	ldr	r3, [r7, #12]
    }
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	200001b4 	.word	0x200001b4

08001e4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001e54:	f7ff f9a8 	bl	80011a8 <xTaskGetTickCount>
 8001e58:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <prvSampleTimeNow+0x3c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d205      	bcs.n	8001e70 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001e64:	f000 f912 	bl	800208c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e002      	b.n	8001e76 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <prvSampleTimeNow+0x3c>)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    }
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200001c4 	.word	0x200001c4

08001e8c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d812      	bhi.n	8001ed8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	1ad2      	subs	r2, r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d302      	bcc.n	8001ec6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e01b      	b.n	8001efe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <prvInsertTimerInActiveList+0x7c>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	f7fe fb29 	bl	8000528 <vListInsert>
 8001ed6:	e012      	b.n	8001efe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d206      	bcs.n	8001eee <prvInsertTimerInActiveList+0x62>
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d302      	bcc.n	8001eee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e007      	b.n	8001efe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <prvInsertTimerInActiveList+0x80>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f7fe fb15 	bl	8000528 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001efe:	697b      	ldr	r3, [r7, #20]
    }
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200001b8 	.word	0x200001b8
 8001f0c:	200001b4 	.word	0x200001b4

08001f10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001f16:	e0a6      	b.n	8002066 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f2c0 80a2 	blt.w	8002064 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fb32 	bl	800059a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff87 	bl	8001e4c <prvSampleTimeNow>
 8001f3e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	f200 808e 	bhi.w	8002066 <prvProcessReceivedCommands+0x156>
 8001f4a:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <prvProcessReceivedCommands+0x40>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	08001f75 	.word	0x08001f75
 8001f54:	08001f75 	.word	0x08001f75
 8001f58:	08001fdd 	.word	0x08001fdd
 8001f5c:	08001ff1 	.word	0x08001ff1
 8001f60:	0800203b 	.word	0x0800203b
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f75 	.word	0x08001f75
 8001f6c:	08001fdd 	.word	0x08001fdd
 8001f70:	08001ff1 	.word	0x08001ff1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	18d1      	adds	r1, r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	69f8      	ldr	r0, [r7, #28]
 8001f94:	f7ff ff7a 	bl	8001e8c <prvInsertTimerInActiveList>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d063      	beq.n	8002066 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d009      	beq.n	8001fc0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	69f8      	ldr	r0, [r7, #28]
 8001fba:	f7ff fe71 	bl	8001ca0 <prvReloadTimer>
 8001fbe:	e008      	b.n	8001fd2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	69f8      	ldr	r0, [r7, #28]
 8001fd8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001fda:	e044      	b.n	8002066 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001fee:	e03a      	b.n	8002066 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10a      	bne.n	8002026 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8002010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	617b      	str	r3, [r7, #20]
    }
 8002022:	bf00      	nop
 8002024:	e7fe      	b.n	8002024 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	18d1      	adds	r1, r2, r3
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	69f8      	ldr	r0, [r7, #28]
 8002034:	f7ff ff2a 	bl	8001e8c <prvInsertTimerInActiveList>
                        break;
 8002038:	e015      	b.n	8002066 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d103      	bne.n	8002050 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002048:	69f8      	ldr	r0, [r7, #28]
 800204a:	f000 fc11 	bl	8002870 <vPortFree>
 800204e:	e00a      	b.n	8002066 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	b2da      	uxtb	r2, r3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002062:	e000      	b.n	8002066 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002064:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <prvProcessReceivedCommands+0x178>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f107 0108 	add.w	r1, r7, #8
 800206e:	2200      	movs	r2, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fbc5 	bl	8000800 <xQueueReceive>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f af4d 	bne.w	8001f18 <prvProcessReceivedCommands+0x8>
        }
    }
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200001bc 	.word	0x200001bc

0800208c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002092:	e009      	b.n	80020a8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <prvSwitchTimerLists+0x44>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800209e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a2:	6838      	ldr	r0, [r7, #0]
 80020a4:	f7ff fe1e 	bl	8001ce4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <prvSwitchTimerLists+0x44>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <prvSwitchTimerLists+0x44>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <prvSwitchTimerLists+0x48>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <prvSwitchTimerLists+0x44>)
 80020be:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <prvSwitchTimerLists+0x48>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
    }
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200001b4 	.word	0x200001b4
 80020d4:	200001b8 	.word	0x200001b8

080020d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80020dc:	f000 f9e2 	bl	80024a4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <prvCheckForValidListAndQueue+0x54>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d11d      	bne.n	8002124 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80020e8:	4811      	ldr	r0, [pc, #68]	; (8002130 <prvCheckForValidListAndQueue+0x58>)
 80020ea:	f7fe f9cc 	bl	8000486 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80020ee:	4811      	ldr	r0, [pc, #68]	; (8002134 <prvCheckForValidListAndQueue+0x5c>)
 80020f0:	f7fe f9c9 	bl	8000486 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <prvCheckForValidListAndQueue+0x60>)
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <prvCheckForValidListAndQueue+0x58>)
 80020f8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <prvCheckForValidListAndQueue+0x64>)
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <prvCheckForValidListAndQueue+0x5c>)
 80020fe:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002100:	2200      	movs	r2, #0
 8002102:	210c      	movs	r1, #12
 8002104:	200a      	movs	r0, #10
 8002106:	f7fe fb03 	bl	8000710 <xQueueGenericCreate>
 800210a:	4603      	mov	r3, r0
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <prvCheckForValidListAndQueue+0x54>)
 800210e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <prvCheckForValidListAndQueue+0x54>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <prvCheckForValidListAndQueue+0x54>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4908      	ldr	r1, [pc, #32]	; (8002140 <prvCheckForValidListAndQueue+0x68>)
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fd0c 	bl	8000b3c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002124:	f000 f9ee 	bl	8002504 <vPortExitCritical>
    }
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200001bc 	.word	0x200001bc
 8002130:	2000018c 	.word	0x2000018c
 8002134:	200001a0 	.word	0x200001a0
 8002138:	200001b4 	.word	0x200001b4
 800213c:	200001b8 	.word	0x200001b8
 8002140:	080048d4 	.word	0x080048d4

08002144 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3b04      	subs	r3, #4
 8002154:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800215c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3b04      	subs	r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f023 0201 	bic.w	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3b04      	subs	r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002174:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <pxPortInitialiseStack+0x64>)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3b14      	subs	r3, #20
 800217e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3b04      	subs	r3, #4
 800218a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f06f 0202 	mvn.w	r2, #2
 8002192:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3b20      	subs	r3, #32
 8002198:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800219a:	68fb      	ldr	r3, [r7, #12]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	080021ad 	.word	0x080021ad

080021ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <prvTaskExitError+0x54>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021be:	d00a      	beq.n	80021d6 <prvTaskExitError+0x2a>
        __asm volatile
 80021c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c4:	f383 8811 	msr	BASEPRI, r3
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	60fb      	str	r3, [r7, #12]
    }
 80021d2:	bf00      	nop
 80021d4:	e7fe      	b.n	80021d4 <prvTaskExitError+0x28>
        __asm volatile
 80021d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021da:	f383 8811 	msr	BASEPRI, r3
 80021de:	f3bf 8f6f 	isb	sy
 80021e2:	f3bf 8f4f 	dsb	sy
 80021e6:	60bb      	str	r3, [r7, #8]
    }
 80021e8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80021ea:	bf00      	nop
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0fc      	beq.n	80021ec <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	20000008 	.word	0x20000008
	...

08002210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <pxCurrentTCBConst2>)
 8002212:	6819      	ldr	r1, [r3, #0]
 8002214:	6808      	ldr	r0, [r1, #0]
 8002216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800221a:	f380 8809 	msr	PSP, r0
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f04f 0000 	mov.w	r0, #0
 8002226:	f380 8811 	msr	BASEPRI, r0
 800222a:	4770      	bx	lr
 800222c:	f3af 8000 	nop.w

08002230 <pxCurrentTCBConst2>:
 8002230:	20000088 	.word	0x20000088
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop

08002238 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002238:	4808      	ldr	r0, [pc, #32]	; (800225c <prvPortStartFirstTask+0x24>)
 800223a:	6800      	ldr	r0, [r0, #0]
 800223c:	6800      	ldr	r0, [r0, #0]
 800223e:	f380 8808 	msr	MSP, r0
 8002242:	f04f 0000 	mov.w	r0, #0
 8002246:	f380 8814 	msr	CONTROL, r0
 800224a:	b662      	cpsie	i
 800224c:	b661      	cpsie	f
 800224e:	f3bf 8f4f 	dsb	sy
 8002252:	f3bf 8f6f 	isb	sy
 8002256:	df00      	svc	0
 8002258:	bf00      	nop
 800225a:	0000      	.short	0x0000
 800225c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop

08002264 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800226a:	4b46      	ldr	r3, [pc, #280]	; (8002384 <xPortStartScheduler+0x120>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a46      	ldr	r2, [pc, #280]	; (8002388 <xPortStartScheduler+0x124>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d10a      	bne.n	800228a <xPortStartScheduler+0x26>
        __asm volatile
 8002274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002278:	f383 8811 	msr	BASEPRI, r3
 800227c:	f3bf 8f6f 	isb	sy
 8002280:	f3bf 8f4f 	dsb	sy
 8002284:	613b      	str	r3, [r7, #16]
    }
 8002286:	bf00      	nop
 8002288:	e7fe      	b.n	8002288 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <xPortStartScheduler+0x120>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a3f      	ldr	r2, [pc, #252]	; (800238c <xPortStartScheduler+0x128>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d10a      	bne.n	80022aa <xPortStartScheduler+0x46>
        __asm volatile
 8002294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002298:	f383 8811 	msr	BASEPRI, r3
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	60fb      	str	r3, [r7, #12]
    }
 80022a6:	bf00      	nop
 80022a8:	e7fe      	b.n	80022a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80022aa:	4b39      	ldr	r3, [pc, #228]	; (8002390 <xPortStartScheduler+0x12c>)
 80022ac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	22ff      	movs	r2, #255	; 0xff
 80022ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <xPortStartScheduler+0x130>)
 80022d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <xPortStartScheduler+0x134>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80022d8:	e009      	b.n	80022ee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80022da:	4b2f      	ldr	r3, [pc, #188]	; (8002398 <xPortStartScheduler+0x134>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3b01      	subs	r3, #1
 80022e0:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <xPortStartScheduler+0x134>)
 80022e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f6:	2b80      	cmp	r3, #128	; 0x80
 80022f8:	d0ef      	beq.n	80022da <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80022fa:	4b27      	ldr	r3, [pc, #156]	; (8002398 <xPortStartScheduler+0x134>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b04      	cmp	r3, #4
 8002304:	d00a      	beq.n	800231c <xPortStartScheduler+0xb8>
        __asm volatile
 8002306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230a:	f383 8811 	msr	BASEPRI, r3
 800230e:	f3bf 8f6f 	isb	sy
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	60bb      	str	r3, [r7, #8]
    }
 8002318:	bf00      	nop
 800231a:	e7fe      	b.n	800231a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800231c:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <xPortStartScheduler+0x134>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <xPortStartScheduler+0x134>)
 8002324:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <xPortStartScheduler+0x134>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800232e:	4a1a      	ldr	r2, [pc, #104]	; (8002398 <xPortStartScheduler+0x134>)
 8002330:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <xPortStartScheduler+0x138>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a17      	ldr	r2, [pc, #92]	; (800239c <xPortStartScheduler+0x138>)
 8002340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002344:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <xPortStartScheduler+0x138>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a14      	ldr	r2, [pc, #80]	; (800239c <xPortStartScheduler+0x138>)
 800234c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002350:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002352:	f000 f963 	bl	800261c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <xPortStartScheduler+0x13c>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800235c:	f000 f982 	bl	8002664 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <xPortStartScheduler+0x140>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <xPortStartScheduler+0x140>)
 8002366:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800236a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800236c:	f7ff ff64 	bl	8002238 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002370:	f7fe fff8 	bl	8001364 <vTaskSwitchContext>
    prvTaskExitError();
 8002374:	f7ff ff1a 	bl	80021ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00
 8002388:	410fc271 	.word	0x410fc271
 800238c:	410fc270 	.word	0x410fc270
 8002390:	e000e400 	.word	0xe000e400
 8002394:	200001c8 	.word	0x200001c8
 8002398:	200001cc 	.word	0x200001cc
 800239c:	e000ed20 	.word	0xe000ed20
 80023a0:	20000008 	.word	0x20000008
 80023a4:	e000ef34 	.word	0xe000ef34

080023a8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <vInitPrioGroupValue+0xe4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a37      	ldr	r2, [pc, #220]	; (8002490 <vInitPrioGroupValue+0xe8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d10a      	bne.n	80023ce <vInitPrioGroupValue+0x26>
        __asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	613b      	str	r3, [r7, #16]
    }
 80023ca:	bf00      	nop
 80023cc:	e7fe      	b.n	80023cc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80023ce:	4b2f      	ldr	r3, [pc, #188]	; (800248c <vInitPrioGroupValue+0xe4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a30      	ldr	r2, [pc, #192]	; (8002494 <vInitPrioGroupValue+0xec>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d10a      	bne.n	80023ee <vInitPrioGroupValue+0x46>
        __asm volatile
 80023d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	f3bf 8f6f 	isb	sy
 80023e4:	f3bf 8f4f 	dsb	sy
 80023e8:	60fb      	str	r3, [r7, #12]
    }
 80023ea:	bf00      	nop
 80023ec:	e7fe      	b.n	80023ec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80023ee:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <vInitPrioGroupValue+0xf0>)
 80023f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	22ff      	movs	r2, #255	; 0xff
 80023fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b22      	ldr	r3, [pc, #136]	; (800249c <vInitPrioGroupValue+0xf4>)
 8002414:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002416:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <vInitPrioGroupValue+0xf8>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800241c:	e009      	b.n	8002432 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <vInitPrioGroupValue+0xf8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3b01      	subs	r3, #1
 8002424:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <vInitPrioGroupValue+0xf8>)
 8002426:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	b2db      	uxtb	r3, r3
 8002430:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243a:	2b80      	cmp	r3, #128	; 0x80
 800243c:	d0ef      	beq.n	800241e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <vInitPrioGroupValue+0xf8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	d00a      	beq.n	8002460 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800244a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	60bb      	str	r3, [r7, #8]
    }
 800245c:	bf00      	nop
 800245e:	e7fe      	b.n	800245e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <vInitPrioGroupValue+0xf8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <vInitPrioGroupValue+0xf8>)
 8002468:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <vInitPrioGroupValue+0xf8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <vInitPrioGroupValue+0xf8>)
 8002474:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00
 8002490:	410fc271 	.word	0x410fc271
 8002494:	410fc270 	.word	0x410fc270
 8002498:	e000e400 	.word	0xe000e400
 800249c:	200001c8 	.word	0x200001c8
 80024a0:	200001cc 	.word	0x200001cc

080024a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
        __asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	607b      	str	r3, [r7, #4]
    }
 80024bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <vPortEnterCritical+0x58>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <vPortEnterCritical+0x58>)
 80024c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <vPortEnterCritical+0x58>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d10f      	bne.n	80024f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <vPortEnterCritical+0x5c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80024da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	603b      	str	r3, [r7, #0]
    }
 80024ec:	bf00      	nop
 80024ee:	e7fe      	b.n	80024ee <vPortEnterCritical+0x4a>
    }
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	20000008 	.word	0x20000008
 8002500:	e000ed04 	.word	0xe000ed04

08002504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <vPortExitCritical+0x50>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <vPortExitCritical+0x24>
        __asm volatile
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	607b      	str	r3, [r7, #4]
    }
 8002524:	bf00      	nop
 8002526:	e7fe      	b.n	8002526 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <vPortExitCritical+0x50>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <vPortExitCritical+0x50>)
 8002530:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <vPortExitCritical+0x50>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <vPortExitCritical+0x42>
 800253a:	2300      	movs	r3, #0
 800253c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002544:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000008 	.word	0x20000008
	...

08002560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002560:	f3ef 8009 	mrs	r0, PSP
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <pxCurrentTCBConst>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	f01e 0f10 	tst.w	lr, #16
 8002570:	bf08      	it	eq
 8002572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800257a:	6010      	str	r0, [r2, #0]
 800257c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002584:	f380 8811 	msr	BASEPRI, r0
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f7fe fee8 	bl	8001364 <vTaskSwitchContext>
 8002594:	f04f 0000 	mov.w	r0, #0
 8002598:	f380 8811 	msr	BASEPRI, r0
 800259c:	bc09      	pop	{r0, r3}
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	6808      	ldr	r0, [r1, #0]
 80025a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a6:	f01e 0f10 	tst.w	lr, #16
 80025aa:	bf08      	it	eq
 80025ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80025b0:	f380 8809 	msr	PSP, r0
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	f3af 8000 	nop.w

080025c0 <pxCurrentTCBConst>:
 80025c0:	20000088 	.word	0x20000088
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop

080025c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
        __asm volatile
 80025ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d2:	f383 8811 	msr	BASEPRI, r3
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	607b      	str	r3, [r7, #4]
    }
 80025e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80025e2:	f001 fc5f 	bl	8003ea4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80025e6:	f7fe fe01 	bl	80011ec <xTaskIncrementTick>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d006      	beq.n	80025fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80025f0:	f001 fcb6 	bl	8003f60 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <SysTick_Handler+0x50>)
 80025f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e001      	b.n	8002602 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80025fe:	f001 fc93 	bl	8003f28 <SEGGER_SYSVIEW_RecordExitISR>
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f383 8811 	msr	BASEPRI, r3
    }
 800260c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	e000ed04 	.word	0xe000ed04

0800261c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <vPortSetupTimerInterrupt+0x34>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <vPortSetupTimerInterrupt+0x38>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <vPortSetupTimerInterrupt+0x3c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <vPortSetupTimerInterrupt+0x40>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	099b      	lsrs	r3, r3, #6
 8002638:	4a09      	ldr	r2, [pc, #36]	; (8002660 <vPortSetupTimerInterrupt+0x44>)
 800263a:	3b01      	subs	r3, #1
 800263c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <vPortSetupTimerInterrupt+0x34>)
 8002640:	2207      	movs	r2, #7
 8002642:	601a      	str	r2, [r3, #0]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000e010 	.word	0xe000e010
 8002654:	e000e018 	.word	0xe000e018
 8002658:	20000000 	.word	0x20000000
 800265c:	10624dd3 	.word	0x10624dd3
 8002660:	e000e014 	.word	0xe000e014

08002664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002674 <vPortEnableVFP+0x10>
 8002668:	6801      	ldr	r1, [r0, #0]
 800266a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800266e:	6001      	str	r1, [r0, #0]
 8002670:	4770      	bx	lr
 8002672:	0000      	.short	0x0000
 8002674:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop

0800267c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002682:	f3ef 8305 	mrs	r3, IPSR
 8002686:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	d914      	bls.n	80026b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800268e:	4a17      	ldr	r2, [pc, #92]	; (80026ec <vPortValidateInterruptPriority+0x70>)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002698:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <vPortValidateInterruptPriority+0x74>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	7afa      	ldrb	r2, [r7, #11]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d20a      	bcs.n	80026b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	607b      	str	r3, [r7, #4]
    }
 80026b4:	bf00      	nop
 80026b6:	e7fe      	b.n	80026b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <vPortValidateInterruptPriority+0x78>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <vPortValidateInterruptPriority+0x7c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d90a      	bls.n	80026de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80026c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	603b      	str	r3, [r7, #0]
    }
 80026da:	bf00      	nop
 80026dc:	e7fe      	b.n	80026dc <vPortValidateInterruptPriority+0x60>
    }
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000e3f0 	.word	0xe000e3f0
 80026f0:	200001c8 	.word	0x200001c8
 80026f4:	e000ed0c 	.word	0xe000ed0c
 80026f8:	200001cc 	.word	0x200001cc

080026fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002708:	f7fe fca0 	bl	800104c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800270c:	4b53      	ldr	r3, [pc, #332]	; (800285c <pvPortMalloc+0x160>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002714:	f000 f908 	bl	8002928 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d012      	beq.n	8002744 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800271e:	2208      	movs	r2, #8
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	3308      	adds	r3, #8
 800272a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	43db      	mvns	r3, r3
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	d804      	bhi.n	8002740 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	4413      	add	r3, r2
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	e001      	b.n	8002744 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	db70      	blt.n	800282c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d06d      	beq.n	800282c <pvPortMalloc+0x130>
 8002750:	4b43      	ldr	r3, [pc, #268]	; (8002860 <pvPortMalloc+0x164>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d868      	bhi.n	800282c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800275a:	4b42      	ldr	r3, [pc, #264]	; (8002864 <pvPortMalloc+0x168>)
 800275c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800275e:	4b41      	ldr	r3, [pc, #260]	; (8002864 <pvPortMalloc+0x168>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002764:	e004      	b.n	8002770 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d903      	bls.n	8002782 <pvPortMalloc+0x86>
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f1      	bne.n	8002766 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002782:	4b36      	ldr	r3, [pc, #216]	; (800285c <pvPortMalloc+0x160>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002788:	429a      	cmp	r2, r3
 800278a:	d04f      	beq.n	800282c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2208      	movs	r2, #8
 8002792:	4413      	add	r3, r2
 8002794:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	1ad2      	subs	r2, r2, r3
 80027a6:	2308      	movs	r3, #8
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d91f      	bls.n	80027ee <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80027ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <pvPortMalloc+0xda>
        __asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	613b      	str	r3, [r7, #16]
    }
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	1ad2      	subs	r2, r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80027e8:	6978      	ldr	r0, [r7, #20]
 80027ea:	f000 f8f9 	bl	80029e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <pvPortMalloc+0x164>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <pvPortMalloc+0x164>)
 80027fa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <pvPortMalloc+0x164>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <pvPortMalloc+0x16c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d203      	bcs.n	8002810 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <pvPortMalloc+0x164>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a16      	ldr	r2, [pc, #88]	; (8002868 <pvPortMalloc+0x16c>)
 800280e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <pvPortMalloc+0x170>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	4a10      	ldr	r2, [pc, #64]	; (800286c <pvPortMalloc+0x170>)
 800282a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800282c:	f7fe fc1c 	bl	8001068 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <pvPortMalloc+0x154>
        __asm volatile
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	60fb      	str	r3, [r7, #12]
    }
 800284c:	bf00      	nop
 800284e:	e7fe      	b.n	800284e <pvPortMalloc+0x152>
    return pvReturn;
 8002850:	69fb      	ldr	r3, [r7, #28]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3728      	adds	r7, #40	; 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20012dd8 	.word	0x20012dd8
 8002860:	20012ddc 	.word	0x20012ddc
 8002864:	20012dd0 	.word	0x20012dd0
 8002868:	20012de0 	.word	0x20012de0
 800286c:	20012de4 	.word	0x20012de4

08002870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d049      	beq.n	8002916 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002882:	2308      	movs	r3, #8
 8002884:	425b      	negs	r3, r3
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4413      	add	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	db0a      	blt.n	80028ae <vPortFree+0x3e>
        __asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	60fb      	str	r3, [r7, #12]
    }
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <vPortFree+0x5c>
        __asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	60bb      	str	r3, [r7, #8]
    }
 80028c8:	bf00      	nop
 80028ca:	e7fe      	b.n	80028ca <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	0fdb      	lsrs	r3, r3, #31
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01c      	beq.n	8002916 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d118      	bne.n	8002916 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80028f0:	f7fe fbac 	bl	800104c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <vPortFree+0xb0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	4a08      	ldr	r2, [pc, #32]	; (8002920 <vPortFree+0xb0>)
 8002900:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002902:	6938      	ldr	r0, [r7, #16]
 8002904:	f000 f86c 	bl	80029e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <vPortFree+0xb4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	4a05      	ldr	r2, [pc, #20]	; (8002924 <vPortFree+0xb4>)
 8002910:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002912:	f7fe fba9 	bl	8001068 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002916:	bf00      	nop
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20012ddc 	.word	0x20012ddc
 8002924:	20012de8 	.word	0x20012de8

08002928 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800292e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002932:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002934:	4b25      	ldr	r3, [pc, #148]	; (80029cc <prvHeapInit+0xa4>)
 8002936:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00c      	beq.n	800295c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3307      	adds	r3, #7
 8002946:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0307 	bic.w	r3, r3, #7
 800294e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <prvHeapInit+0xa4>)
 8002958:	4413      	add	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <prvHeapInit+0xa8>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <prvHeapInit+0xa8>)
 8002968:	2200      	movs	r2, #0
 800296a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	4413      	add	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002974:	2208      	movs	r2, #8
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0307 	bic.w	r3, r3, #7
 8002982:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <prvHeapInit+0xac>)
 8002988:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <prvHeapInit+0xac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <prvHeapInit+0xac>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	1ad2      	subs	r2, r2, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <prvHeapInit+0xac>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4a08      	ldr	r2, [pc, #32]	; (80029d8 <prvHeapInit+0xb0>)
 80029b6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a07      	ldr	r2, [pc, #28]	; (80029dc <prvHeapInit+0xb4>)
 80029be:	6013      	str	r3, [r2, #0]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	200001d0 	.word	0x200001d0
 80029d0:	20012dd0 	.word	0x20012dd0
 80029d4:	20012dd8 	.word	0x20012dd8
 80029d8:	20012de0 	.word	0x20012de0
 80029dc:	20012ddc 	.word	0x20012ddc

080029e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <prvInsertBlockIntoFreeList+0xac>)
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	e002      	b.n	80029f4 <prvInsertBlockIntoFreeList+0x14>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d8f7      	bhi.n	80029ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	4413      	add	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d108      	bne.n	8002a22 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	441a      	add	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	441a      	add	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d118      	bne.n	8002a68 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <prvInsertBlockIntoFreeList+0xb0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d00d      	beq.n	8002a5e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	441a      	add	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e008      	b.n	8002a70 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <prvInsertBlockIntoFreeList+0xb0>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e003      	b.n	8002a70 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d002      	beq.n	8002a7e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20012dd0 	.word	0x20012dd0
 8002a90:	20012dd8 	.word	0x20012dd8

08002a94 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002a98:	4803      	ldr	r0, [pc, #12]	; (8002aa8 <_cbSendSystemDesc+0x14>)
 8002a9a:	f001 f9ad 	bl	8003df8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002a9e:	4803      	ldr	r0, [pc, #12]	; (8002aac <_cbSendSystemDesc+0x18>)
 8002aa0:	f001 f9aa 	bl	8003df8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	080048dc 	.word	0x080048dc
 8002aac:	08004908 	.word	0x08004908

08002ab0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <SEGGER_SYSVIEW_Conf+0x20>)
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <SEGGER_SYSVIEW_Conf+0x20>)
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <SEGGER_SYSVIEW_Conf+0x24>)
 8002abe:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <SEGGER_SYSVIEW_Conf+0x28>)
 8002ac0:	f000 fd18 	bl	80034f4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002ac4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002ac8:	f000 fd58 	bl	800357c <SEGGER_SYSVIEW_SetRAMBase>
}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	08002a95 	.word	0x08002a95
 8002ad8:	08004990 	.word	0x08004990

08002adc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	e033      	b.n	8002b50 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002ae8:	491e      	ldr	r1, [pc, #120]	; (8002b64 <_cbSendTaskList+0x88>)
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	491a      	ldr	r1, [pc, #104]	; (8002b64 <_cbSendTaskList+0x88>)
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	3304      	adds	r3, #4
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	4c16      	ldr	r4, [pc, #88]	; (8002b64 <_cbSendTaskList+0x88>)
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4423      	add	r3, r4
 8002b18:	3308      	adds	r3, #8
 8002b1a:	681c      	ldr	r4, [r3, #0]
 8002b1c:	4d11      	ldr	r5, [pc, #68]	; (8002b64 <_cbSendTaskList+0x88>)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	442b      	add	r3, r5
 8002b2a:	330c      	adds	r3, #12
 8002b2c:	681d      	ldr	r5, [r3, #0]
 8002b2e:	4e0d      	ldr	r6, [pc, #52]	; (8002b64 <_cbSendTaskList+0x88>)
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4433      	add	r3, r6
 8002b3c:	3310      	adds	r3, #16
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	462b      	mov	r3, r5
 8002b44:	4622      	mov	r2, r4
 8002b46:	f000 f8bd 	bl	8002cc4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <_cbSendTaskList+0x8c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d3c6      	bcc.n	8002ae8 <_cbSendTaskList+0xc>
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b64:	20012dec 	.word	0x20012dec
 8002b68:	20012e8c 	.word	0x20012e8c

08002b6c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002b74:	f7fe fb28 	bl	80011c8 <xTaskGetTickCountFromISR>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	469a      	mov	sl, r3
 8002b7e:	4693      	mov	fp, r2
 8002b80:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	f04f 0a00 	mov.w	sl, #0
 8002b90:	f04f 0b00 	mov.w	fp, #0
 8002b94:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002b98:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002b9c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	465b      	mov	r3, fp
 8002ba4:	1a14      	subs	r4, r2, r0
 8002ba6:	eb63 0501 	sbc.w	r5, r3, r1
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	00ab      	lsls	r3, r5, #2
 8002bb4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002bb8:	00a2      	lsls	r2, r4, #2
 8002bba:	4614      	mov	r4, r2
 8002bbc:	461d      	mov	r5, r3
 8002bbe:	eb14 0800 	adds.w	r8, r4, r0
 8002bc2:	eb45 0901 	adc.w	r9, r5, r1
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bda:	4690      	mov	r8, r2
 8002bdc:	4699      	mov	r9, r3
 8002bde:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002be2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002bf4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002c02:	2205      	movs	r2, #5
 8002c04:	492b      	ldr	r1, [pc, #172]	; (8002cb4 <SYSVIEW_AddTask+0xc0>)
 8002c06:	68b8      	ldr	r0, [r7, #8]
 8002c08:	f001 fe04 	bl	8004814 <memcmp>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d04b      	beq.n	8002caa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002c12:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <SYSVIEW_AddTask+0xc4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b07      	cmp	r3, #7
 8002c18:	d903      	bls.n	8002c22 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002c1a:	4828      	ldr	r0, [pc, #160]	; (8002cbc <SYSVIEW_AddTask+0xc8>)
 8002c1c:	f001 fbea 	bl	80043f4 <SEGGER_SYSVIEW_Warn>
    return;
 8002c20:	e044      	b.n	8002cac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <SYSVIEW_AddTask+0xc4>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4926      	ldr	r1, [pc, #152]	; (8002cc0 <SYSVIEW_AddTask+0xcc>)
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <SYSVIEW_AddTask+0xc4>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4921      	ldr	r1, [pc, #132]	; (8002cc0 <SYSVIEW_AddTask+0xcc>)
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3304      	adds	r3, #4
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <SYSVIEW_AddTask+0xc4>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	491b      	ldr	r1, [pc, #108]	; (8002cc0 <SYSVIEW_AddTask+0xcc>)
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <SYSVIEW_AddTask+0xc4>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4916      	ldr	r1, [pc, #88]	; (8002cc0 <SYSVIEW_AddTask+0xcc>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	330c      	adds	r3, #12
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <SYSVIEW_AddTask+0xc4>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4910      	ldr	r1, [pc, #64]	; (8002cc0 <SYSVIEW_AddTask+0xcc>)
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3310      	adds	r3, #16
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <SYSVIEW_AddTask+0xc4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3301      	adds	r3, #1
 8002c94:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <SYSVIEW_AddTask+0xc4>)
 8002c96:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f80e 	bl	8002cc4 <SYSVIEW_SendTaskInfo>
 8002ca8:	e000      	b.n	8002cac <SYSVIEW_AddTask+0xb8>
    return;
 8002caa:	bf00      	nop

}
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	08004918 	.word	0x08004918
 8002cb8:	20012e8c 	.word	0x20012e8c
 8002cbc:	08004920 	.word	0x08004920
 8002cc0:	20012dec 	.word	0x20012dec

08002cc4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	2214      	movs	r2, #20
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 fdb8 	bl	8004850 <memset>
  TaskInfo.TaskID     = TaskID;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 ff85 	bl	8003c08 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002cfe:	bf00      	nop
 8002d00:	3728      	adds	r7, #40	; 0x28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002d0e:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <_DoInit+0x98>)
 8002d10:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2203      	movs	r2, #3
 8002d16:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a20      	ldr	r2, [pc, #128]	; (8002da4 <_DoInit+0x9c>)
 8002d22:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a20      	ldr	r2, [pc, #128]	; (8002da8 <_DoInit+0xa0>)
 8002d28:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d30:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a17      	ldr	r2, [pc, #92]	; (8002da4 <_DoInit+0x9c>)
 8002d48:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a17      	ldr	r2, [pc, #92]	; (8002dac <_DoInit+0xa4>)
 8002d4e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2210      	movs	r2, #16
 8002d54:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3307      	adds	r3, #7
 8002d6c:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <_DoInit+0xa8>)
 8002d6e:	6810      	ldr	r0, [r2, #0]
 8002d70:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002d72:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <_DoInit+0xac>)
 8002d7a:	6810      	ldr	r0, [r2, #0]
 8002d7c:	6018      	str	r0, [r3, #0]
 8002d7e:	8891      	ldrh	r1, [r2, #4]
 8002d80:	7992      	ldrb	r2, [r2, #6]
 8002d82:	8099      	strh	r1, [r3, #4]
 8002d84:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002d86:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002d90:	f3bf 8f5f 	dmb	sy
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	20012e90 	.word	0x20012e90
 8002da4:	08004970 	.word	0x08004970
 8002da8:	20012f38 	.word	0x20012f38
 8002dac:	20013338 	.word	0x20013338
 8002db0:	0800497c 	.word	0x0800497c
 8002db4:	08004980 	.word	0x08004980

08002db8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08c      	sub	sp, #48	; 0x30
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002dc4:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <SEGGER_RTT_ReadNoLock+0x108>)
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <SEGGER_RTT_ReadNoLock+0x1e>
 8002dd2:	f7ff ff99 	bl	8002d08 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	3360      	adds	r3, #96	; 0x60
 8002de2:	4a37      	ldr	r2, [pc, #220]	; (8002ec0 <SEGGER_RTT_ReadNoLock+0x108>)
 8002de4:	4413      	add	r3, r2
 8002de6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d92b      	bls.n	8002e5c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4293      	cmp	r3, r2
 8002e14:	bf28      	it	cs
 8002e16:	4613      	movcs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	4413      	add	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	6939      	ldr	r1, [r7, #16]
 8002e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e2a:	f001 fd03 	bl	8004834 <memcpy>
    NumBytesRead += NumBytesRem;
 8002e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	4413      	add	r3, r2
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d101      	bne.n	8002e5c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	bf28      	it	cs
 8002e6c:	4613      	movcs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d019      	beq.n	8002eaa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	4413      	add	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	6939      	ldr	r1, [r7, #16]
 8002e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e86:	f001 fcd5 	bl	8004834 <memcpy>
    NumBytesRead += NumBytesRem;
 8002e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	4413      	add	r3, r2
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	4413      	add	r3, r2
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3730      	adds	r7, #48	; 0x30
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20012e90 	.word	0x20012e90

08002ec4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8002ee0:	f7ff ff12 	bl	8002d08 <_DoInit>
  SEGGER_RTT_LOCK();
 8002ee4:	f3ef 8311 	mrs	r3, BASEPRI
 8002ee8:	f04f 0120 	mov.w	r1, #32
 8002eec:	f381 8811 	msr	BASEPRI, r1
 8002ef0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002ef4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002efa:	6939      	ldr	r1, [r7, #16]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	440b      	add	r3, r1
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3301      	adds	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	dbeb      	blt.n	8002efa <SEGGER_RTT_AllocUpBuffer+0x36>
 8002f22:	e000      	b.n	8002f26 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002f24:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	da3f      	bge.n	8002fb0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8002f30:	6939      	ldr	r1, [r7, #16]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	440b      	add	r3, r1
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002f44:	6939      	ldr	r1, [r7, #16]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	440b      	add	r3, r1
 8002f54:	3304      	adds	r3, #4
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002f5a:	6939      	ldr	r1, [r7, #16]
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	3320      	adds	r3, #32
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8002f6e:	6939      	ldr	r1, [r7, #16]
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3328      	adds	r3, #40	; 0x28
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8002f82:	6939      	ldr	r1, [r7, #16]
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	4613      	mov	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	440b      	add	r3, r1
 8002f90:	3324      	adds	r3, #36	; 0x24
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002f96:	6939      	ldr	r1, [r7, #16]
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	332c      	adds	r3, #44	; 0x2c
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002faa:	f3bf 8f5f 	dmb	sy
 8002fae:	e002      	b.n	8002fb6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fb4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3720      	adds	r7, #32
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20012e90 	.word	0x20012e90

08002fcc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002fda:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002fe8:	f7ff fe8e 	bl	8002d08 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002fec:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8002fee:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d24d      	bcs.n	8003098 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8002ffc:	f3ef 8311 	mrs	r3, BASEPRI
 8003000:	f04f 0120 	mov.w	r1, #32
 8003004:	f381 8811 	msr	BASEPRI, r1
 8003008:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d031      	beq.n	8003074 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003010:	6979      	ldr	r1, [r7, #20]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	440b      	add	r3, r1
 800301e:	3360      	adds	r3, #96	; 0x60
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003024:	6979      	ldr	r1, [r7, #20]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	3364      	adds	r3, #100	; 0x64
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003038:	6979      	ldr	r1, [r7, #20]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	3368      	adds	r3, #104	; 0x68
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800304c:	6979      	ldr	r1, [r7, #20]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	3370      	adds	r3, #112	; 0x70
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003060:	6979      	ldr	r1, [r7, #20]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	336c      	adds	r3, #108	; 0x6c
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003074:	6979      	ldr	r1, [r7, #20]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	440b      	add	r3, r1
 8003082:	3374      	adds	r3, #116	; 0x74
 8003084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003086:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003088:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	e002      	b.n	800309e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800309c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800309e:	69fb      	ldr	r3, [r7, #28]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20012e90 	.word	0x20012e90

080030ac <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80030bc:	e002      	b.n	80030c4 <_EncodeStr+0x18>
    Len++;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3301      	adds	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4413      	add	r3, r2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f6      	bne.n	80030be <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d901      	bls.n	80030dc <_EncodeStr+0x30>
    Len = Limit;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2bfe      	cmp	r3, #254	; 0xfe
 80030e0:	d806      	bhi.n	80030f0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	60fa      	str	r2, [r7, #12]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	e011      	b.n	8003114 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	60fa      	str	r2, [r7, #12]
 80030f6:	22ff      	movs	r2, #255	; 0xff
 80030f8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	60fa      	str	r2, [r7, #12]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	0a19      	lsrs	r1, r3, #8
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	60fa      	str	r2, [r7, #12]
 8003110:	b2ca      	uxtb	r2, r1
 8003112:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003118:	e00a      	b.n	8003130 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	1c53      	adds	r3, r2, #1
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1c59      	adds	r1, r3, #1
 8003124:	60f9      	str	r1, [r7, #12]
 8003126:	7812      	ldrb	r2, [r2, #0]
 8003128:	701a      	strb	r2, [r3, #0]
    n++;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3301      	adds	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	429a      	cmp	r2, r3
 8003136:	d3f0      	bcc.n	800311a <_EncodeStr+0x6e>
  }
  return pPayload;
 8003138:	68fb      	ldr	r3, [r7, #12]
}
 800313a:	4618      	mov	r0, r3
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3304      	adds	r3, #4
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003166:	4b36      	ldr	r3, [pc, #216]	; (8003240 <_HandleIncomingPacket+0xe0>)
 8003168:	7e1b      	ldrb	r3, [r3, #24]
 800316a:	4618      	mov	r0, r3
 800316c:	1cfb      	adds	r3, r7, #3
 800316e:	2201      	movs	r2, #1
 8003170:	4619      	mov	r1, r3
 8003172:	f7ff fe21 	bl	8002db8 <SEGGER_RTT_ReadNoLock>
 8003176:	4603      	mov	r3, r0
 8003178:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	dd54      	ble.n	800322a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	2b80      	cmp	r3, #128	; 0x80
 8003184:	d032      	beq.n	80031ec <_HandleIncomingPacket+0x8c>
 8003186:	2b80      	cmp	r3, #128	; 0x80
 8003188:	dc42      	bgt.n	8003210 <_HandleIncomingPacket+0xb0>
 800318a:	2b07      	cmp	r3, #7
 800318c:	dc16      	bgt.n	80031bc <_HandleIncomingPacket+0x5c>
 800318e:	2b00      	cmp	r3, #0
 8003190:	dd3e      	ble.n	8003210 <_HandleIncomingPacket+0xb0>
 8003192:	3b01      	subs	r3, #1
 8003194:	2b06      	cmp	r3, #6
 8003196:	d83b      	bhi.n	8003210 <_HandleIncomingPacket+0xb0>
 8003198:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <_HandleIncomingPacket+0x40>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	080031c3 	.word	0x080031c3
 80031a4:	080031c9 	.word	0x080031c9
 80031a8:	080031cf 	.word	0x080031cf
 80031ac:	080031d5 	.word	0x080031d5
 80031b0:	080031db 	.word	0x080031db
 80031b4:	080031e1 	.word	0x080031e1
 80031b8:	080031e7 	.word	0x080031e7
 80031bc:	2b7f      	cmp	r3, #127	; 0x7f
 80031be:	d036      	beq.n	800322e <_HandleIncomingPacket+0xce>
 80031c0:	e026      	b.n	8003210 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80031c2:	f000 fba7 	bl	8003914 <SEGGER_SYSVIEW_Start>
      break;
 80031c6:	e037      	b.n	8003238 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80031c8:	f000 fc5e 	bl	8003a88 <SEGGER_SYSVIEW_Stop>
      break;
 80031cc:	e034      	b.n	8003238 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80031ce:	f000 fe37 	bl	8003e40 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80031d2:	e031      	b.n	8003238 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80031d4:	f000 fdfc 	bl	8003dd0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80031d8:	e02e      	b.n	8003238 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80031da:	f000 fc7b 	bl	8003ad4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80031de:	e02b      	b.n	8003238 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80031e0:	f001 f8ca 	bl	8004378 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80031e4:	e028      	b.n	8003238 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80031e6:	f001 f8a9 	bl	800433c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80031ea:	e025      	b.n	8003238 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <_HandleIncomingPacket+0xe0>)
 80031ee:	7e1b      	ldrb	r3, [r3, #24]
 80031f0:	4618      	mov	r0, r3
 80031f2:	1cfb      	adds	r3, r7, #3
 80031f4:	2201      	movs	r2, #1
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7ff fdde 	bl	8002db8 <SEGGER_RTT_ReadNoLock>
 80031fc:	4603      	mov	r3, r0
 80031fe:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	dd15      	ble.n	8003232 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	4618      	mov	r0, r3
 800320a:	f001 f817 	bl	800423c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800320e:	e010      	b.n	8003232 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	b25b      	sxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	da0e      	bge.n	8003236 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <_HandleIncomingPacket+0xe0>)
 800321a:	7e1b      	ldrb	r3, [r3, #24]
 800321c:	4618      	mov	r0, r3
 800321e:	1cfb      	adds	r3, r7, #3
 8003220:	2201      	movs	r2, #1
 8003222:	4619      	mov	r1, r3
 8003224:	f7ff fdc8 	bl	8002db8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003228:	e005      	b.n	8003236 <_HandleIncomingPacket+0xd6>
    }
  }
 800322a:	bf00      	nop
 800322c:	e004      	b.n	8003238 <_HandleIncomingPacket+0xd8>
      break;
 800322e:	bf00      	nop
 8003230:	e002      	b.n	8003238 <_HandleIncomingPacket+0xd8>
      break;
 8003232:	bf00      	nop
 8003234:	e000      	b.n	8003238 <_HandleIncomingPacket+0xd8>
      break;
 8003236:	bf00      	nop
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20014350 	.word	0x20014350

08003244 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	; 0x30
 8003248:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800324a:	2301      	movs	r3, #1
 800324c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800324e:	1d3b      	adds	r3, r7, #4
 8003250:	3301      	adds	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003258:	4b31      	ldr	r3, [pc, #196]	; (8003320 <_TrySendOverflowPacket+0xdc>)
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
 800325e:	e00b      	b.n	8003278 <_TrySendOverflowPacket+0x34>
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	b2da      	uxtb	r2, r3
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	62f9      	str	r1, [r7, #44]	; 0x2c
 800326a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	09db      	lsrs	r3, r3, #7
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	2b7f      	cmp	r3, #127	; 0x7f
 800327c:	d8f0      	bhi.n	8003260 <_TrySendOverflowPacket+0x1c>
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800328e:	4b25      	ldr	r3, [pc, #148]	; (8003324 <_TrySendOverflowPacket+0xe0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003294:	4b22      	ldr	r3, [pc, #136]	; (8003320 <_TrySendOverflowPacket+0xdc>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	623b      	str	r3, [r7, #32]
 80032a6:	e00b      	b.n	80032c0 <_TrySendOverflowPacket+0x7c>
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	1c59      	adds	r1, r3, #1
 80032b0:	6279      	str	r1, [r7, #36]	; 0x24
 80032b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	09db      	lsrs	r3, r3, #7
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	2b7f      	cmp	r3, #127	; 0x7f
 80032c4:	d8f0      	bhi.n	80032a8 <_TrySendOverflowPacket+0x64>
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	627a      	str	r2, [r7, #36]	; 0x24
 80032cc:	6a3a      	ldr	r2, [r7, #32]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <_TrySendOverflowPacket+0xdc>)
 80032d8:	785b      	ldrb	r3, [r3, #1]
 80032da:	4618      	mov	r0, r3
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	1d3b      	adds	r3, r7, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	f7fc ff7a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80032ec:	4603      	mov	r3, r0
 80032ee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80032f6:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <_TrySendOverflowPacket+0xdc>)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <_TrySendOverflowPacket+0xdc>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	3b01      	subs	r3, #1
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <_TrySendOverflowPacket+0xdc>)
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	e004      	b.n	8003314 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <_TrySendOverflowPacket+0xdc>)
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	3301      	adds	r3, #1
 8003310:	4a03      	ldr	r2, [pc, #12]	; (8003320 <_TrySendOverflowPacket+0xdc>)
 8003312:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003314:	693b      	ldr	r3, [r7, #16]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3730      	adds	r7, #48	; 0x30
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20014350 	.word	0x20014350
 8003324:	e0001004 	.word	0xe0001004

08003328 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003334:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <_SendPacket+0x1c0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d010      	beq.n	800335e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800333c:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <_SendPacket+0x1c0>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80a3 	beq.w	800348c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003346:	4b68      	ldr	r3, [pc, #416]	; (80034e8 <_SendPacket+0x1c0>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d109      	bne.n	8003362 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800334e:	f7ff ff79 	bl	8003244 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003352:	4b65      	ldr	r3, [pc, #404]	; (80034e8 <_SendPacket+0x1c0>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b01      	cmp	r3, #1
 8003358:	f040 809a 	bne.w	8003490 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800335c:	e001      	b.n	8003362 <_SendPacket+0x3a>
    goto Send;
 800335e:	bf00      	nop
 8003360:	e000      	b.n	8003364 <_SendPacket+0x3c>
Send:
 8003362:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b1f      	cmp	r3, #31
 8003368:	d809      	bhi.n	800337e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800336a:	4b5f      	ldr	r3, [pc, #380]	; (80034e8 <_SendPacket+0x1c0>)
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	f040 808b 	bne.w	8003494 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b17      	cmp	r3, #23
 8003382:	d807      	bhi.n	8003394 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3b01      	subs	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e03d      	b.n	8003410 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b7f      	cmp	r3, #127	; 0x7f
 80033a0:	d912      	bls.n	80033c8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	09da      	lsrs	r2, r3, #7
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	3a01      	subs	r2, #1
 80033ba:	60fa      	str	r2, [r7, #12]
 80033bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e006      	b.n	80033d6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b7f      	cmp	r3, #127	; 0x7f
 80033da:	d912      	bls.n	8003402 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	09da      	lsrs	r2, r3, #7
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	3a01      	subs	r2, #1
 80033f4:	60fa      	str	r2, [r7, #12]
 80033f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e006      	b.n	8003410 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3b01      	subs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003410:	4b36      	ldr	r3, [pc, #216]	; (80034ec <_SendPacket+0x1c4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003416:	4b34      	ldr	r3, [pc, #208]	; (80034e8 <_SendPacket+0x1c0>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	623b      	str	r3, [r7, #32]
 8003428:	e00b      	b.n	8003442 <_SendPacket+0x11a>
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	1c59      	adds	r1, r3, #1
 8003432:	6279      	str	r1, [r7, #36]	; 0x24
 8003434:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	09db      	lsrs	r3, r3, #7
 8003440:	623b      	str	r3, [r7, #32]
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	2b7f      	cmp	r3, #127	; 0x7f
 8003446:	d8f0      	bhi.n	800342a <_SendPacket+0x102>
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	627a      	str	r2, [r7, #36]	; 0x24
 800344e:	6a3a      	ldr	r2, [r7, #32]
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003458:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <_SendPacket+0x1c0>)
 800345a:	785b      	ldrb	r3, [r3, #1]
 800345c:	4618      	mov	r0, r3
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	461a      	mov	r2, r3
 8003466:	68f9      	ldr	r1, [r7, #12]
 8003468:	f7fc feba 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800346c:	4603      	mov	r3, r0
 800346e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003476:	4a1c      	ldr	r2, [pc, #112]	; (80034e8 <_SendPacket+0x1c0>)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	60d3      	str	r3, [r2, #12]
 800347c:	e00b      	b.n	8003496 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800347e:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <_SendPacket+0x1c0>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	3301      	adds	r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <_SendPacket+0x1c0>)
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e004      	b.n	8003496 <_SendPacket+0x16e>
    goto SendDone;
 800348c:	bf00      	nop
 800348e:	e002      	b.n	8003496 <_SendPacket+0x16e>
      goto SendDone;
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <_SendPacket+0x16e>
      goto SendDone;
 8003494:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <_SendPacket+0x1c0>)
 8003498:	7e1b      	ldrb	r3, [r3, #24]
 800349a:	4619      	mov	r1, r3
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <_SendPacket+0x1c8>)
 800349e:	460b      	mov	r3, r1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	440b      	add	r3, r1
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	336c      	adds	r3, #108	; 0x6c
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <_SendPacket+0x1c0>)
 80034ae:	7e1b      	ldrb	r3, [r3, #24]
 80034b0:	4618      	mov	r0, r3
 80034b2:	490f      	ldr	r1, [pc, #60]	; (80034f0 <_SendPacket+0x1c8>)
 80034b4:	4603      	mov	r3, r0
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4403      	add	r3, r0
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	3370      	adds	r3, #112	; 0x70
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d00b      	beq.n	80034de <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80034c6:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <_SendPacket+0x1c0>)
 80034c8:	789b      	ldrb	r3, [r3, #2]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <_SendPacket+0x1c0>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80034d4:	f7ff fe44 	bl	8003160 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <_SendPacket+0x1c0>)
 80034da:	2200      	movs	r2, #0
 80034dc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80034de:	bf00      	nop
 80034e0:	3728      	adds	r7, #40	; 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20014350 	.word	0x20014350
 80034ec:	e0001004 	.word	0xe0001004
 80034f0:	20012e90 	.word	0x20012e90

080034f4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003502:	2300      	movs	r3, #0
 8003504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003508:	4917      	ldr	r1, [pc, #92]	; (8003568 <SEGGER_SYSVIEW_Init+0x74>)
 800350a:	4818      	ldr	r0, [pc, #96]	; (800356c <SEGGER_SYSVIEW_Init+0x78>)
 800350c:	f7ff fcda 	bl	8002ec4 <SEGGER_RTT_AllocUpBuffer>
 8003510:	4603      	mov	r3, r0
 8003512:	b2da      	uxtb	r2, r3
 8003514:	4b16      	ldr	r3, [pc, #88]	; (8003570 <SEGGER_SYSVIEW_Init+0x7c>)
 8003516:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <SEGGER_SYSVIEW_Init+0x7c>)
 800351a:	785a      	ldrb	r2, [r3, #1]
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <SEGGER_SYSVIEW_Init+0x7c>)
 800351e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003520:	4b13      	ldr	r3, [pc, #76]	; (8003570 <SEGGER_SYSVIEW_Init+0x7c>)
 8003522:	7e1b      	ldrb	r3, [r3, #24]
 8003524:	4618      	mov	r0, r3
 8003526:	2300      	movs	r3, #0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2308      	movs	r3, #8
 800352c:	4a11      	ldr	r2, [pc, #68]	; (8003574 <SEGGER_SYSVIEW_Init+0x80>)
 800352e:	490f      	ldr	r1, [pc, #60]	; (800356c <SEGGER_SYSVIEW_Init+0x78>)
 8003530:	f7ff fd4c 	bl	8002fcc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003534:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <SEGGER_SYSVIEW_Init+0x7c>)
 8003536:	2200      	movs	r2, #0
 8003538:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <SEGGER_SYSVIEW_Init+0x84>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <SEGGER_SYSVIEW_Init+0x7c>)
 8003540:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003542:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <SEGGER_SYSVIEW_Init+0x7c>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003548:	4a09      	ldr	r2, [pc, #36]	; (8003570 <SEGGER_SYSVIEW_Init+0x7c>)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <SEGGER_SYSVIEW_Init+0x7c>)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003554:	4a06      	ldr	r2, [pc, #24]	; (8003570 <SEGGER_SYSVIEW_Init+0x7c>)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <SEGGER_SYSVIEW_Init+0x7c>)
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20013348 	.word	0x20013348
 800356c:	08004988 	.word	0x08004988
 8003570:	20014350 	.word	0x20014350
 8003574:	20014348 	.word	0x20014348
 8003578:	e0001004 	.word	0xe0001004

0800357c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003584:	4a04      	ldr	r2, [pc, #16]	; (8003598 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6113      	str	r3, [r2, #16]
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20014350 	.word	0x20014350

0800359c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80035a4:	f3ef 8311 	mrs	r3, BASEPRI
 80035a8:	f04f 0120 	mov.w	r1, #32
 80035ac:	f381 8811 	msr	BASEPRI, r1
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4808      	ldr	r0, [pc, #32]	; (80035d4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80035b4:	f7ff fdc7 	bl	8003146 <_PreparePacket>
 80035b8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	68b8      	ldr	r0, [r7, #8]
 80035c0:	f7ff feb2 	bl	8003328 <_SendPacket>
  RECORD_END();
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f383 8811 	msr	BASEPRI, r3
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20014380 	.word	0x20014380

080035d8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80035e2:	f3ef 8311 	mrs	r3, BASEPRI
 80035e6:	f04f 0120 	mov.w	r1, #32
 80035ea:	f381 8811 	msr	BASEPRI, r1
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	4816      	ldr	r0, [pc, #88]	; (800364c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80035f2:	f7ff fda8 	bl	8003146 <_PreparePacket>
 80035f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	e00b      	b.n	800361e <SEGGER_SYSVIEW_RecordU32+0x46>
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	1c59      	adds	r1, r3, #1
 800360e:	61f9      	str	r1, [r7, #28]
 8003610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	09db      	lsrs	r3, r3, #7
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b7f      	cmp	r3, #127	; 0x7f
 8003622:	d8f0      	bhi.n	8003606 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	61fa      	str	r2, [r7, #28]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68f9      	ldr	r1, [r7, #12]
 8003638:	6938      	ldr	r0, [r7, #16]
 800363a:	f7ff fe75 	bl	8003328 <_SendPacket>
  RECORD_END();
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f383 8811 	msr	BASEPRI, r3
}
 8003644:	bf00      	nop
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20014380 	.word	0x20014380

08003650 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b08c      	sub	sp, #48	; 0x30
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800365c:	f3ef 8311 	mrs	r3, BASEPRI
 8003660:	f04f 0120 	mov.w	r1, #32
 8003664:	f381 8811 	msr	BASEPRI, r1
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	4825      	ldr	r0, [pc, #148]	; (8003700 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800366c:	f7ff fd6b 	bl	8003146 <_PreparePacket>
 8003670:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
 800367e:	e00b      	b.n	8003698 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	b2da      	uxtb	r2, r3
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	1c59      	adds	r1, r3, #1
 8003688:	62f9      	str	r1, [r7, #44]	; 0x2c
 800368a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	09db      	lsrs	r3, r3, #7
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	2b7f      	cmp	r3, #127	; 0x7f
 800369c:	d8f0      	bhi.n	8003680 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	623b      	str	r3, [r7, #32]
 80036b6:	e00b      	b.n	80036d0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	1c59      	adds	r1, r3, #1
 80036c0:	6279      	str	r1, [r7, #36]	; 0x24
 80036c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	09db      	lsrs	r3, r3, #7
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	2b7f      	cmp	r3, #127	; 0x7f
 80036d4:	d8f0      	bhi.n	80036b8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	627a      	str	r2, [r7, #36]	; 0x24
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	6979      	ldr	r1, [r7, #20]
 80036ea:	69b8      	ldr	r0, [r7, #24]
 80036ec:	f7ff fe1c 	bl	8003328 <_SendPacket>
  RECORD_END();
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f383 8811 	msr	BASEPRI, r3
}
 80036f6:	bf00      	nop
 80036f8:	3730      	adds	r7, #48	; 0x30
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20014380 	.word	0x20014380

08003704 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b08e      	sub	sp, #56	; 0x38
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003712:	f3ef 8311 	mrs	r3, BASEPRI
 8003716:	f04f 0120 	mov.w	r1, #32
 800371a:	f381 8811 	msr	BASEPRI, r1
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	4832      	ldr	r0, [pc, #200]	; (80037ec <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003722:	f7ff fd10 	bl	8003146 <_PreparePacket>
 8003726:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	637b      	str	r3, [r7, #52]	; 0x34
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	633b      	str	r3, [r7, #48]	; 0x30
 8003734:	e00b      	b.n	800374e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	b2da      	uxtb	r2, r3
 800373a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373c:	1c59      	adds	r1, r3, #1
 800373e:	6379      	str	r1, [r7, #52]	; 0x34
 8003740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	09db      	lsrs	r3, r3, #7
 800374c:	633b      	str	r3, [r7, #48]	; 0x30
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	2b7f      	cmp	r3, #127	; 0x7f
 8003752:	d8f0      	bhi.n	8003736 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	637a      	str	r2, [r7, #52]	; 0x34
 800375a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003762:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
 800376c:	e00b      	b.n	8003786 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	b2da      	uxtb	r2, r3
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	1c59      	adds	r1, r3, #1
 8003776:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003778:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	09db      	lsrs	r3, r3, #7
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	2b7f      	cmp	r3, #127	; 0x7f
 800378a:	d8f0      	bhi.n	800376e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	623b      	str	r3, [r7, #32]
 80037a4:	e00b      	b.n	80037be <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	1c59      	adds	r1, r3, #1
 80037ae:	6279      	str	r1, [r7, #36]	; 0x24
 80037b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	09db      	lsrs	r3, r3, #7
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	2b7f      	cmp	r3, #127	; 0x7f
 80037c2:	d8f0      	bhi.n	80037a6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	627a      	str	r2, [r7, #36]	; 0x24
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	6979      	ldr	r1, [r7, #20]
 80037d8:	69b8      	ldr	r0, [r7, #24]
 80037da:	f7ff fda5 	bl	8003328 <_SendPacket>
  RECORD_END();
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f383 8811 	msr	BASEPRI, r3
}
 80037e4:	bf00      	nop
 80037e6:	3738      	adds	r7, #56	; 0x38
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20014380 	.word	0x20014380

080037f0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b090      	sub	sp, #64	; 0x40
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80037fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003802:	f04f 0120 	mov.w	r1, #32
 8003806:	f381 8811 	msr	BASEPRI, r1
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	4840      	ldr	r0, [pc, #256]	; (8003910 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800380e:	f7ff fc9a 	bl	8003146 <_PreparePacket>
 8003812:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003820:	e00b      	b.n	800383a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003824:	b2da      	uxtb	r2, r3
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800382c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	09db      	lsrs	r3, r3, #7
 8003838:	63bb      	str	r3, [r7, #56]	; 0x38
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	2b7f      	cmp	r3, #127	; 0x7f
 800383e:	d8f0      	bhi.n	8003822 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	633b      	str	r3, [r7, #48]	; 0x30
 8003858:	e00b      	b.n	8003872 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	b2da      	uxtb	r2, r3
 800385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003860:	1c59      	adds	r1, r3, #1
 8003862:	6379      	str	r1, [r7, #52]	; 0x34
 8003864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	09db      	lsrs	r3, r3, #7
 8003870:	633b      	str	r3, [r7, #48]	; 0x30
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	2b7f      	cmp	r3, #127	; 0x7f
 8003876:	d8f0      	bhi.n	800385a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	637a      	str	r2, [r7, #52]	; 0x34
 800387e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003886:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003890:	e00b      	b.n	80038aa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	b2da      	uxtb	r2, r3
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	1c59      	adds	r1, r3, #1
 800389a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800389c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	09db      	lsrs	r3, r3, #7
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	2b7f      	cmp	r3, #127	; 0x7f
 80038ae:	d8f0      	bhi.n	8003892 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
 80038c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	e00b      	b.n	80038e2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	1c59      	adds	r1, r3, #1
 80038d2:	6279      	str	r1, [r7, #36]	; 0x24
 80038d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	09db      	lsrs	r3, r3, #7
 80038e0:	623b      	str	r3, [r7, #32]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	2b7f      	cmp	r3, #127	; 0x7f
 80038e6:	d8f0      	bhi.n	80038ca <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	627a      	str	r2, [r7, #36]	; 0x24
 80038ee:	6a3a      	ldr	r2, [r7, #32]
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	69b8      	ldr	r0, [r7, #24]
 80038fe:	f7ff fd13 	bl	8003328 <_SendPacket>
  RECORD_END();
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f383 8811 	msr	BASEPRI, r3
}
 8003908:	bf00      	nop
 800390a:	3740      	adds	r7, #64	; 0x40
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20014380 	.word	0x20014380

08003914 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b08c      	sub	sp, #48	; 0x30
 8003918:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800391a:	4b58      	ldr	r3, [pc, #352]	; (8003a7c <SEGGER_SYSVIEW_Start+0x168>)
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003920:	f3ef 8311 	mrs	r3, BASEPRI
 8003924:	f04f 0120 	mov.w	r1, #32
 8003928:	f381 8811 	msr	BASEPRI, r1
 800392c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800392e:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <SEGGER_SYSVIEW_Start+0x168>)
 8003930:	785b      	ldrb	r3, [r3, #1]
 8003932:	220a      	movs	r2, #10
 8003934:	4952      	ldr	r1, [pc, #328]	; (8003a80 <SEGGER_SYSVIEW_Start+0x16c>)
 8003936:	4618      	mov	r0, r3
 8003938:	f7fc fc52 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003942:	200a      	movs	r0, #10
 8003944:	f7ff fe2a 	bl	800359c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003948:	f3ef 8311 	mrs	r3, BASEPRI
 800394c:	f04f 0120 	mov.w	r1, #32
 8003950:	f381 8811 	msr	BASEPRI, r1
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	484b      	ldr	r0, [pc, #300]	; (8003a84 <SEGGER_SYSVIEW_Start+0x170>)
 8003958:	f7ff fbf5 	bl	8003146 <_PreparePacket>
 800395c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003966:	4b45      	ldr	r3, [pc, #276]	; (8003a7c <SEGGER_SYSVIEW_Start+0x168>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
 800396c:	e00b      	b.n	8003986 <SEGGER_SYSVIEW_Start+0x72>
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	b2da      	uxtb	r2, r3
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	1c59      	adds	r1, r3, #1
 8003976:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003978:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	09db      	lsrs	r3, r3, #7
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	2b7f      	cmp	r3, #127	; 0x7f
 800398a:	d8f0      	bhi.n	800396e <SEGGER_SYSVIEW_Start+0x5a>
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <SEGGER_SYSVIEW_Start+0x168>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	623b      	str	r3, [r7, #32]
 80039a6:	e00b      	b.n	80039c0 <SEGGER_SYSVIEW_Start+0xac>
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	1c59      	adds	r1, r3, #1
 80039b0:	6279      	str	r1, [r7, #36]	; 0x24
 80039b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	09db      	lsrs	r3, r3, #7
 80039be:	623b      	str	r3, [r7, #32]
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	2b7f      	cmp	r3, #127	; 0x7f
 80039c4:	d8f0      	bhi.n	80039a8 <SEGGER_SYSVIEW_Start+0x94>
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	627a      	str	r2, [r7, #36]	; 0x24
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <SEGGER_SYSVIEW_Start+0x168>)
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	e00b      	b.n	80039fa <SEGGER_SYSVIEW_Start+0xe6>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	1c59      	adds	r1, r3, #1
 80039ea:	61f9      	str	r1, [r7, #28]
 80039ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	09db      	lsrs	r3, r3, #7
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b7f      	cmp	r3, #127	; 0x7f
 80039fe:	d8f0      	bhi.n	80039e2 <SEGGER_SYSVIEW_Start+0xce>
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	61fa      	str	r2, [r7, #28]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	e00b      	b.n	8003a32 <SEGGER_SYSVIEW_Start+0x11e>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	1c59      	adds	r1, r3, #1
 8003a22:	6179      	str	r1, [r7, #20]
 8003a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	09db      	lsrs	r3, r3, #7
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b7f      	cmp	r3, #127	; 0x7f
 8003a36:	d8f0      	bhi.n	8003a1a <SEGGER_SYSVIEW_Start+0x106>
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	617a      	str	r2, [r7, #20]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003a48:	2218      	movs	r2, #24
 8003a4a:	6839      	ldr	r1, [r7, #0]
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fc6b 	bl	8003328 <_SendPacket>
      RECORD_END();
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <SEGGER_SYSVIEW_Start+0x168>)
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <SEGGER_SYSVIEW_Start+0x168>)
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003a66:	f000 f9eb 	bl	8003e40 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003a6a:	f000 f9b1 	bl	8003dd0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003a6e:	f000 fc83 	bl	8004378 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003a72:	bf00      	nop
 8003a74:	3730      	adds	r7, #48	; 0x30
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20014350 	.word	0x20014350
 8003a80:	08004998 	.word	0x08004998
 8003a84:	20014380 	.word	0x20014380

08003a88 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a92:	f04f 0120 	mov.w	r1, #32
 8003a96:	f381 8811 	msr	BASEPRI, r1
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	480b      	ldr	r0, [pc, #44]	; (8003acc <SEGGER_SYSVIEW_Stop+0x44>)
 8003a9e:	f7ff fb52 	bl	8003146 <_PreparePacket>
 8003aa2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003aac:	220b      	movs	r2, #11
 8003aae:	6839      	ldr	r1, [r7, #0]
 8003ab0:	6838      	ldr	r0, [r7, #0]
 8003ab2:	f7ff fc39 	bl	8003328 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f383 8811 	msr	BASEPRI, r3
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20014380 	.word	0x20014380
 8003ad0:	20014350 	.word	0x20014350

08003ad4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08c      	sub	sp, #48	; 0x30
 8003ad8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003ada:	f3ef 8311 	mrs	r3, BASEPRI
 8003ade:	f04f 0120 	mov.w	r1, #32
 8003ae2:	f381 8811 	msr	BASEPRI, r1
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	4845      	ldr	r0, [pc, #276]	; (8003c00 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003aea:	f7ff fb2c 	bl	8003146 <_PreparePacket>
 8003aee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af8:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afe:	e00b      	b.n	8003b18 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	09db      	lsrs	r3, r3, #7
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b1c:	d8f0      	bhi.n	8003b00 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	e00b      	b.n	8003b52 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	1c59      	adds	r1, r3, #1
 8003b42:	6279      	str	r1, [r7, #36]	; 0x24
 8003b44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	09db      	lsrs	r3, r3, #7
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	2b7f      	cmp	r3, #127	; 0x7f
 8003b56:	d8f0      	bhi.n	8003b3a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b5e:	6a3a      	ldr	r2, [r7, #32]
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	e00b      	b.n	8003b8c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	1c59      	adds	r1, r3, #1
 8003b7c:	61f9      	str	r1, [r7, #28]
 8003b7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	09db      	lsrs	r3, r3, #7
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b90:	d8f0      	bhi.n	8003b74 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	61fa      	str	r2, [r7, #28]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	e00b      	b.n	8003bc4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	1c59      	adds	r1, r3, #1
 8003bb4:	6179      	str	r1, [r7, #20]
 8003bb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	09db      	lsrs	r3, r3, #7
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8003bc8:	d8f0      	bhi.n	8003bac <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	617a      	str	r2, [r7, #20]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003bda:	2218      	movs	r2, #24
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	68b8      	ldr	r0, [r7, #8]
 8003be0:	f7ff fba2 	bl	8003328 <_SendPacket>
  RECORD_END();
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003bf2:	4b04      	ldr	r3, [pc, #16]	; (8003c04 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	4798      	blx	r3
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3730      	adds	r7, #48	; 0x30
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20014380 	.word	0x20014380
 8003c04:	20014350 	.word	0x20014350

08003c08 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b092      	sub	sp, #72	; 0x48
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003c10:	f3ef 8311 	mrs	r3, BASEPRI
 8003c14:	f04f 0120 	mov.w	r1, #32
 8003c18:	f381 8811 	msr	BASEPRI, r1
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	486a      	ldr	r0, [pc, #424]	; (8003dc8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003c20:	f7ff fa91 	bl	8003146 <_PreparePacket>
 8003c24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
 8003c3a:	e00b      	b.n	8003c54 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c42:	1c59      	adds	r1, r3, #1
 8003c44:	6479      	str	r1, [r7, #68]	; 0x44
 8003c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c50:	09db      	lsrs	r3, r3, #7
 8003c52:	643b      	str	r3, [r7, #64]	; 0x40
 8003c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c56:	2b7f      	cmp	r3, #127	; 0x7f
 8003c58:	d8f0      	bhi.n	8003c3c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	647a      	str	r2, [r7, #68]	; 0x44
 8003c60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c74:	e00b      	b.n	8003c8e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7c:	1c59      	adds	r1, r3, #1
 8003c7e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003c80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	09db      	lsrs	r3, r3, #7
 8003c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	2b7f      	cmp	r3, #127	; 0x7f
 8003c92:	d8f0      	bhi.n	8003c76 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	4619      	mov	r1, r3
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7ff f9fd 	bl	80030ac <_EncodeStr>
 8003cb2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003cb4:	2209      	movs	r2, #9
 8003cb6:	68f9      	ldr	r1, [r7, #12]
 8003cb8:	6938      	ldr	r0, [r7, #16]
 8003cba:	f7ff fb35 	bl	8003328 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd2:	e00b      	b.n	8003cec <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	1c59      	adds	r1, r3, #1
 8003cdc:	6379      	str	r1, [r7, #52]	; 0x34
 8003cde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	09db      	lsrs	r3, r3, #7
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	2b7f      	cmp	r3, #127	; 0x7f
 8003cf0:	d8f0      	bhi.n	8003cd4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	637a      	str	r2, [r7, #52]	; 0x34
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0c:	e00b      	b.n	8003d26 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	1c59      	adds	r1, r3, #1
 8003d16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	09db      	lsrs	r3, r3, #7
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	2b7f      	cmp	r3, #127	; 0x7f
 8003d2a:	d8f0      	bhi.n	8003d0e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	e00b      	b.n	8003d60 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	1c59      	adds	r1, r3, #1
 8003d50:	6279      	str	r1, [r7, #36]	; 0x24
 8003d52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	09db      	lsrs	r3, r3, #7
 8003d5e:	623b      	str	r3, [r7, #32]
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	2b7f      	cmp	r3, #127	; 0x7f
 8003d64:	d8f0      	bhi.n	8003d48 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	627a      	str	r2, [r7, #36]	; 0x24
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	e00b      	b.n	8003d98 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	1c59      	adds	r1, r3, #1
 8003d88:	61f9      	str	r1, [r7, #28]
 8003d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	09db      	lsrs	r3, r3, #7
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d9c:	d8f0      	bhi.n	8003d80 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	61fa      	str	r2, [r7, #28]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003dae:	2215      	movs	r2, #21
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	6938      	ldr	r0, [r7, #16]
 8003db4:	f7ff fab8 	bl	8003328 <_SendPacket>
  RECORD_END();
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f383 8811 	msr	BASEPRI, r3
}
 8003dbe:	bf00      	nop
 8003dc0:	3748      	adds	r7, #72	; 0x48
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20014380 	.word	0x20014380
 8003dcc:	20014350 	.word	0x20014350

08003dd0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003de6:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4798      	blx	r3
  }
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20014350 	.word	0x20014350

08003df8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e00:	f3ef 8311 	mrs	r3, BASEPRI
 8003e04:	f04f 0120 	mov.w	r1, #32
 8003e08:	f381 8811 	msr	BASEPRI, r1
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	480b      	ldr	r0, [pc, #44]	; (8003e3c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003e10:	f7ff f999 	bl	8003146 <_PreparePacket>
 8003e14:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	6938      	ldr	r0, [r7, #16]
 8003e1c:	f7ff f946 	bl	80030ac <_EncodeStr>
 8003e20:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003e22:	220e      	movs	r2, #14
 8003e24:	68f9      	ldr	r1, [r7, #12]
 8003e26:	6938      	ldr	r0, [r7, #16]
 8003e28:	f7ff fa7e 	bl	8003328 <_SendPacket>
  RECORD_END();
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f383 8811 	msr	BASEPRI, r3
}
 8003e32:	bf00      	nop
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20014380 	.word	0x20014380

08003e40 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01a      	beq.n	8003e84 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003e4e:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d015      	beq.n	8003e84 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4798      	blx	r3
 8003e60:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003e64:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003e66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	000a      	movs	r2, r1
 8003e74:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003e76:	4613      	mov	r3, r2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	200d      	movs	r0, #13
 8003e7e:	f7ff fbe7 	bl	8003650 <SEGGER_SYSVIEW_RecordU32x2>
 8003e82:	e006      	b.n	8003e92 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	200c      	movs	r0, #12
 8003e8c:	f7ff fba4 	bl	80035d8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd90      	pop	{r4, r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20014350 	.word	0x20014350
 8003ea0:	e0001004 	.word	0xe0001004

08003ea4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8003eae:	f04f 0120 	mov.w	r1, #32
 8003eb2:	f381 8811 	msr	BASEPRI, r1
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	4819      	ldr	r0, [pc, #100]	; (8003f20 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003eba:	f7ff f944 	bl	8003146 <_PreparePacket>
 8003ebe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003ec4:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	e00b      	b.n	8003ef0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	6179      	str	r1, [r7, #20]
 8003ee2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	09db      	lsrs	r3, r3, #7
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ef4:	d8f0      	bhi.n	8003ed8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	617a      	str	r2, [r7, #20]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003f06:	2202      	movs	r2, #2
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	68b8      	ldr	r0, [r7, #8]
 8003f0c:	f7ff fa0c 	bl	8003328 <_SendPacket>
  RECORD_END();
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f383 8811 	msr	BASEPRI, r3
}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20014380 	.word	0x20014380
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f32:	f04f 0120 	mov.w	r1, #32
 8003f36:	f381 8811 	msr	BASEPRI, r1
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	4807      	ldr	r0, [pc, #28]	; (8003f5c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003f3e:	f7ff f902 	bl	8003146 <_PreparePacket>
 8003f42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003f44:	2203      	movs	r2, #3
 8003f46:	6839      	ldr	r1, [r7, #0]
 8003f48:	6838      	ldr	r0, [r7, #0]
 8003f4a:	f7ff f9ed 	bl	8003328 <_SendPacket>
  RECORD_END();
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f383 8811 	msr	BASEPRI, r3
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20014380 	.word	0x20014380

08003f60 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f66:	f3ef 8311 	mrs	r3, BASEPRI
 8003f6a:	f04f 0120 	mov.w	r1, #32
 8003f6e:	f381 8811 	msr	BASEPRI, r1
 8003f72:	607b      	str	r3, [r7, #4]
 8003f74:	4807      	ldr	r0, [pc, #28]	; (8003f94 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003f76:	f7ff f8e6 	bl	8003146 <_PreparePacket>
 8003f7a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003f7c:	2212      	movs	r2, #18
 8003f7e:	6839      	ldr	r1, [r7, #0]
 8003f80:	6838      	ldr	r0, [r7, #0]
 8003f82:	f7ff f9d1 	bl	8003328 <_SendPacket>
  RECORD_END();
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f383 8811 	msr	BASEPRI, r3
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20014380 	.word	0x20014380

08003f98 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8003fa2:	f04f 0120 	mov.w	r1, #32
 8003fa6:	f381 8811 	msr	BASEPRI, r1
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	4807      	ldr	r0, [pc, #28]	; (8003fcc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003fae:	f7ff f8ca 	bl	8003146 <_PreparePacket>
 8003fb2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003fb4:	2211      	movs	r2, #17
 8003fb6:	6839      	ldr	r1, [r7, #0]
 8003fb8:	6838      	ldr	r0, [r7, #0]
 8003fba:	f7ff f9b5 	bl	8003328 <_SendPacket>
  RECORD_END();
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f383 8811 	msr	BASEPRI, r3
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20014380 	.word	0x20014380

08003fd0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8003fdc:	f04f 0120 	mov.w	r1, #32
 8003fe0:	f381 8811 	msr	BASEPRI, r1
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	4819      	ldr	r0, [pc, #100]	; (800404c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003fe8:	f7ff f8ad 	bl	8003146 <_PreparePacket>
 8003fec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	e00b      	b.n	800401e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	1c59      	adds	r1, r3, #1
 800400e:	61f9      	str	r1, [r7, #28]
 8004010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	09db      	lsrs	r3, r3, #7
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b7f      	cmp	r3, #127	; 0x7f
 8004022:	d8f0      	bhi.n	8004006 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	61fa      	str	r2, [r7, #28]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004034:	2208      	movs	r2, #8
 8004036:	68f9      	ldr	r1, [r7, #12]
 8004038:	6938      	ldr	r0, [r7, #16]
 800403a:	f7ff f975 	bl	8003328 <_SendPacket>
  RECORD_END();
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f383 8811 	msr	BASEPRI, r3
}
 8004044:	bf00      	nop
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20014380 	.word	0x20014380
 8004050:	20014350 	.word	0x20014350

08004054 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800405c:	f3ef 8311 	mrs	r3, BASEPRI
 8004060:	f04f 0120 	mov.w	r1, #32
 8004064:	f381 8811 	msr	BASEPRI, r1
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	4819      	ldr	r0, [pc, #100]	; (80040d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800406c:	f7ff f86b 	bl	8003146 <_PreparePacket>
 8004070:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004076:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	e00b      	b.n	80040a2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	1c59      	adds	r1, r3, #1
 8004092:	61f9      	str	r1, [r7, #28]
 8004094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	09db      	lsrs	r3, r3, #7
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b7f      	cmp	r3, #127	; 0x7f
 80040a6:	d8f0      	bhi.n	800408a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	61fa      	str	r2, [r7, #28]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80040b8:	2204      	movs	r2, #4
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	6938      	ldr	r0, [r7, #16]
 80040be:	f7ff f933 	bl	8003328 <_SendPacket>
  RECORD_END();
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f383 8811 	msr	BASEPRI, r3
}
 80040c8:	bf00      	nop
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20014380 	.word	0x20014380
 80040d4:	20014350 	.word	0x20014350

080040d8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040e0:	f3ef 8311 	mrs	r3, BASEPRI
 80040e4:	f04f 0120 	mov.w	r1, #32
 80040e8:	f381 8811 	msr	BASEPRI, r1
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	4819      	ldr	r0, [pc, #100]	; (8004154 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80040f0:	f7ff f829 	bl	8003146 <_PreparePacket>
 80040f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80040fa:	4b17      	ldr	r3, [pc, #92]	; (8004158 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	e00b      	b.n	8004126 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	b2da      	uxtb	r2, r3
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	1c59      	adds	r1, r3, #1
 8004116:	61f9      	str	r1, [r7, #28]
 8004118:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	09db      	lsrs	r3, r3, #7
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b7f      	cmp	r3, #127	; 0x7f
 800412a:	d8f0      	bhi.n	800410e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	61fa      	str	r2, [r7, #28]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800413c:	2206      	movs	r2, #6
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	6938      	ldr	r0, [r7, #16]
 8004142:	f7ff f8f1 	bl	8003328 <_SendPacket>
  RECORD_END();
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f383 8811 	msr	BASEPRI, r3
}
 800414c:	bf00      	nop
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20014380 	.word	0x20014380
 8004158:	20014350 	.word	0x20014350

0800415c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004166:	f3ef 8311 	mrs	r3, BASEPRI
 800416a:	f04f 0120 	mov.w	r1, #32
 800416e:	f381 8811 	msr	BASEPRI, r1
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	4827      	ldr	r0, [pc, #156]	; (8004214 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004176:	f7fe ffe6 	bl	8003146 <_PreparePacket>
 800417a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004180:	4b25      	ldr	r3, [pc, #148]	; (8004218 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	e00b      	b.n	80041ac <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	b2da      	uxtb	r2, r3
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	1c59      	adds	r1, r3, #1
 800419c:	6279      	str	r1, [r7, #36]	; 0x24
 800419e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	09db      	lsrs	r3, r3, #7
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	2b7f      	cmp	r3, #127	; 0x7f
 80041b0:	d8f0      	bhi.n	8004194 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	627a      	str	r2, [r7, #36]	; 0x24
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	e00b      	b.n	80041e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	1c59      	adds	r1, r3, #1
 80041d4:	61f9      	str	r1, [r7, #28]
 80041d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	09db      	lsrs	r3, r3, #7
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b7f      	cmp	r3, #127	; 0x7f
 80041e8:	d8f0      	bhi.n	80041cc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	61fa      	str	r2, [r7, #28]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80041fa:	2207      	movs	r2, #7
 80041fc:	68f9      	ldr	r1, [r7, #12]
 80041fe:	6938      	ldr	r0, [r7, #16]
 8004200:	f7ff f892 	bl	8003328 <_SendPacket>
  RECORD_END();
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f383 8811 	msr	BASEPRI, r3
}
 800420a:	bf00      	nop
 800420c:	3728      	adds	r7, #40	; 0x28
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20014380 	.word	0x20014380
 8004218:	20014350 	.word	0x20014350

0800421c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004224:	4b04      	ldr	r3, [pc, #16]	; (8004238 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	1ad3      	subs	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20014350 	.word	0x20014350

0800423c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	; 0x30
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d06d      	beq.n	800432a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800424e:	4b39      	ldr	r3, [pc, #228]	; (8004334 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004254:	2300      	movs	r3, #0
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28
 8004258:	e008      	b.n	800426c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	3301      	adds	r3, #1
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004270:	429a      	cmp	r2, r3
 8004272:	d3f2      	bcc.n	800425a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004274:	e000      	b.n	8004278 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004276:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d055      	beq.n	800432a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800427e:	f3ef 8311 	mrs	r3, BASEPRI
 8004282:	f04f 0120 	mov.w	r1, #32
 8004286:	f381 8811 	msr	BASEPRI, r1
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	482a      	ldr	r0, [pc, #168]	; (8004338 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800428e:	f7fe ff5a 	bl	8003146 <_PreparePacket>
 8004292:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	e00b      	b.n	80042ba <SEGGER_SYSVIEW_SendModule+0x7e>
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	1c59      	adds	r1, r3, #1
 80042aa:	6279      	str	r1, [r7, #36]	; 0x24
 80042ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	09db      	lsrs	r3, r3, #7
 80042b8:	623b      	str	r3, [r7, #32]
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	2b7f      	cmp	r3, #127	; 0x7f
 80042be:	d8f0      	bhi.n	80042a2 <SEGGER_SYSVIEW_SendModule+0x66>
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	627a      	str	r2, [r7, #36]	; 0x24
 80042c6:	6a3a      	ldr	r2, [r7, #32]
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	701a      	strb	r2, [r3, #0]
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	e00b      	b.n	80042f4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	1c59      	adds	r1, r3, #1
 80042e4:	61f9      	str	r1, [r7, #28]
 80042e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	09db      	lsrs	r3, r3, #7
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b7f      	cmp	r3, #127	; 0x7f
 80042f8:	d8f0      	bhi.n	80042dc <SEGGER_SYSVIEW_SendModule+0xa0>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	61fa      	str	r2, [r7, #28]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2280      	movs	r2, #128	; 0x80
 8004310:	4619      	mov	r1, r3
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f7fe feca 	bl	80030ac <_EncodeStr>
 8004318:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800431a:	2216      	movs	r2, #22
 800431c:	68f9      	ldr	r1, [r7, #12]
 800431e:	6938      	ldr	r0, [r7, #16]
 8004320:	f7ff f802 	bl	8003328 <_SendPacket>
      RECORD_END();
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800432a:	bf00      	nop
 800432c:	3730      	adds	r7, #48	; 0x30
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20014378 	.word	0x20014378
 8004338:	20014380 	.word	0x20014380

0800433c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00f      	beq.n	800436a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f2      	bne.n	8004350 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20014378 	.word	0x20014378

08004378 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800437e:	f3ef 8311 	mrs	r3, BASEPRI
 8004382:	f04f 0120 	mov.w	r1, #32
 8004386:	f381 8811 	msr	BASEPRI, r1
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	4817      	ldr	r0, [pc, #92]	; (80043ec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800438e:	f7fe feda 	bl	8003146 <_PreparePacket>
 8004392:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	e00b      	b.n	80043bc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	1c59      	adds	r1, r3, #1
 80043ac:	6179      	str	r1, [r7, #20]
 80043ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	09db      	lsrs	r3, r3, #7
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b7f      	cmp	r3, #127	; 0x7f
 80043c0:	d8f0      	bhi.n	80043a4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	617a      	str	r2, [r7, #20]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80043d2:	221b      	movs	r2, #27
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	68b8      	ldr	r0, [r7, #8]
 80043d8:	f7fe ffa6 	bl	8003328 <_SendPacket>
  RECORD_END();
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f383 8811 	msr	BASEPRI, r3
}
 80043e2:	bf00      	nop
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20014380 	.word	0x20014380
 80043f0:	2001437c 	.word	0x2001437c

080043f4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	; 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004400:	f04f 0120 	mov.w	r1, #32
 8004404:	f381 8811 	msr	BASEPRI, r1
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	4827      	ldr	r0, [pc, #156]	; (80044a8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800440c:	f7fe fe9b 	bl	8003146 <_PreparePacket>
 8004410:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	6938      	ldr	r0, [r7, #16]
 8004418:	f7fe fe48 	bl	80030ac <_EncodeStr>
 800441c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
 8004422:	2301      	movs	r3, #1
 8004424:	623b      	str	r3, [r7, #32]
 8004426:	e00b      	b.n	8004440 <SEGGER_SYSVIEW_Warn+0x4c>
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	1c59      	adds	r1, r3, #1
 8004430:	6279      	str	r1, [r7, #36]	; 0x24
 8004432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	09db      	lsrs	r3, r3, #7
 800443e:	623b      	str	r3, [r7, #32]
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	2b7f      	cmp	r3, #127	; 0x7f
 8004444:	d8f0      	bhi.n	8004428 <SEGGER_SYSVIEW_Warn+0x34>
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	627a      	str	r2, [r7, #36]	; 0x24
 800444c:	6a3a      	ldr	r2, [r7, #32]
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e00b      	b.n	8004478 <SEGGER_SYSVIEW_Warn+0x84>
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	1c59      	adds	r1, r3, #1
 8004468:	61f9      	str	r1, [r7, #28]
 800446a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	09db      	lsrs	r3, r3, #7
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b7f      	cmp	r3, #127	; 0x7f
 800447c:	d8f0      	bhi.n	8004460 <SEGGER_SYSVIEW_Warn+0x6c>
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	61fa      	str	r2, [r7, #28]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800448e:	221a      	movs	r2, #26
 8004490:	68f9      	ldr	r1, [r7, #12]
 8004492:	6938      	ldr	r0, [r7, #16]
 8004494:	f7fe ff48 	bl	8003328 <_SendPacket>
  RECORD_END();
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f383 8811 	msr	BASEPRI, r3
}
 800449e:	bf00      	nop
 80044a0:	3728      	adds	r7, #40	; 0x28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20014380 	.word	0x20014380

080044ac <GPIO_Config>:
 * orden estricto para poder que el sistema permita configurar el periférico X.
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento específico (relacionado con el periférico RCC), a esto lo llamaremos
 * simplemente "activar el periférico o activar la señal de reloj del periférico"
 */
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a88      	ldr	r2, [pc, #544]	; (80046e4 <GPIO_Config+0x238>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d106      	bne.n	80044d4 <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80044c6:	4b88      	ldr	r3, [pc, #544]	; (80046e8 <GPIO_Config+0x23c>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	4a87      	ldr	r2, [pc, #540]	; (80046e8 <GPIO_Config+0x23c>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	6313      	str	r3, [r2, #48]	; 0x30
 80044d2:	e03a      	b.n	800454a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a84      	ldr	r2, [pc, #528]	; (80046ec <GPIO_Config+0x240>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d106      	bne.n	80044ec <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80044de:	4b82      	ldr	r3, [pc, #520]	; (80046e8 <GPIO_Config+0x23c>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	4a81      	ldr	r2, [pc, #516]	; (80046e8 <GPIO_Config+0x23c>)
 80044e4:	f043 0302 	orr.w	r3, r3, #2
 80044e8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ea:	e02e      	b.n	800454a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a7f      	ldr	r2, [pc, #508]	; (80046f0 <GPIO_Config+0x244>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d106      	bne.n	8004504 <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 80044f6:	4b7c      	ldr	r3, [pc, #496]	; (80046e8 <GPIO_Config+0x23c>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	4a7b      	ldr	r2, [pc, #492]	; (80046e8 <GPIO_Config+0x23c>)
 80044fc:	f043 0304 	orr.w	r3, r3, #4
 8004500:	6313      	str	r3, [r2, #48]	; 0x30
 8004502:	e022      	b.n	800454a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a7a      	ldr	r2, [pc, #488]	; (80046f4 <GPIO_Config+0x248>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d106      	bne.n	800451c <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 800450e:	4b76      	ldr	r3, [pc, #472]	; (80046e8 <GPIO_Config+0x23c>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	4a75      	ldr	r2, [pc, #468]	; (80046e8 <GPIO_Config+0x23c>)
 8004514:	f043 0308 	orr.w	r3, r3, #8
 8004518:	6313      	str	r3, [r2, #48]	; 0x30
 800451a:	e016      	b.n	800454a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a75      	ldr	r2, [pc, #468]	; (80046f8 <GPIO_Config+0x24c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d106      	bne.n	8004534 <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 8004526:	4b70      	ldr	r3, [pc, #448]	; (80046e8 <GPIO_Config+0x23c>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	4a6f      	ldr	r2, [pc, #444]	; (80046e8 <GPIO_Config+0x23c>)
 800452c:	f043 0310 	orr.w	r3, r3, #16
 8004530:	6313      	str	r3, [r2, #48]	; 0x30
 8004532:	e00a      	b.n	800454a <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a70      	ldr	r2, [pc, #448]	; (80046fc <GPIO_Config+0x250>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d105      	bne.n	800454a <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 800453e:	4b6a      	ldr	r3, [pc, #424]	; (80046e8 <GPIO_Config+0x23c>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	4a69      	ldr	r2, [pc, #420]	; (80046e8 <GPIO_Config+0x23c>)
 8004544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004548:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	795b      	ldrb	r3, [r3, #5]
 800454e:	461a      	mov	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	791b      	ldrb	r3, [r3, #4]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operacion bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	791b      	ldrb	r3, [r3, #4]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	2103      	movs	r1, #3
 800456a:	fa01 f303 	lsl.w	r3, r1, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	4619      	mov	r1, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	400a      	ands	r2, r1
 8004578:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	430a      	orrs	r2, r1
 8004588:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	7a1b      	ldrb	r3, [r3, #8]
 800458e:	461a      	mov	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	791b      	ldrb	r3, [r3, #4]
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	791b      	ldrb	r3, [r3, #4]
 80045a4:	4619      	mov	r1, r3
 80045a6:	2301      	movs	r3, #1
 80045a8:	408b      	lsls	r3, r1
 80045aa:	43db      	mvns	r3, r3
 80045ac:	4619      	mov	r1, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	400a      	ands	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);//Si no funciona, juntar la multiplicación
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	799b      	ldrb	r3, [r3, #6]
 80045ca:	461a      	mov	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	791b      	ldrb	r3, [r3, #4]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	791b      	ldrb	r3, [r3, #4]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	2103      	movs	r1, #3
 80045e6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ea:	43db      	mvns	r3, r3
 80045ec:	4619      	mov	r1, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	400a      	ands	r2, r1
 80045f4:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6899      	ldr	r1, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	430a      	orrs	r2, r1
 8004604:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	79db      	ldrb	r3, [r3, #7]
 800460a:	461a      	mov	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	791b      	ldrb	r3, [r3, #4]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	791b      	ldrb	r3, [r3, #4]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	2103      	movs	r1, #3
 8004626:	fa01 f303 	lsl.w	r3, r1, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	4619      	mov	r1, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	400a      	ands	r2, r1
 8004634:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68d9      	ldr	r1, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	430a      	orrs	r2, r1
 8004644:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... se verá luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	795b      	ldrb	r3, [r3, #5]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d143      	bne.n	80046d6 <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	791b      	ldrb	r3, [r3, #4]
 8004652:	2b07      	cmp	r3, #7
 8004654:	d81f      	bhi.n	8004696 <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	791b      	ldrb	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6a1a      	ldr	r2, [r3, #32]
 8004664:	210f      	movs	r1, #15
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	fa01 f303 	lsl.w	r3, r1, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	4619      	mov	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	400a      	ands	r2, r1
 8004676:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6a1a      	ldr	r2, [r3, #32]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	7a5b      	ldrb	r3, [r3, #9]
 8004682:	4619      	mov	r1, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	4619      	mov	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	621a      	str	r2, [r3, #32]
			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
} // Fin del GPIO_config
 8004694:	e01f      	b.n	80046d6 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	791b      	ldrb	r3, [r3, #4]
 800469a:	3b08      	subs	r3, #8
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046a6:	210f      	movs	r1, #15
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	4619      	mov	r1, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	400a      	ands	r2, r1
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	7a5b      	ldrb	r3, [r3, #9]
 80046c4:	4619      	mov	r1, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	fa01 f303 	lsl.w	r3, r1, r3
 80046cc:	4619      	mov	r1, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40020000 	.word	0x40020000
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40020400 	.word	0x40020400
 80046f0:	40020800 	.word	0x40020800
 80046f4:	40020c00 	.word	0x40020c00
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40021c00 	.word	0x40021c00

08004700 <GPIO_WritePin>:

/**
 * FUNCIÓN utilizada para cambiar de estado al pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posición que deseamos
	//pPinHandler->pGPIOx->DDR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNUmber);
	if(newState == SET){
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d10d      	bne.n	800472e <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	791b      	ldrb	r3, [r3, #4]
 800471c:	4619      	mov	r1, r3
 800471e:	2301      	movs	r3, #1
 8004720:	408b      	lsls	r3, r1
 8004722:	4619      	mov	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 800472c:	e00d      	b.n	800474a <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699a      	ldr	r2, [r3, #24]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	791b      	ldrb	r3, [r3, #4]
 8004738:	3310      	adds	r3, #16
 800473a:	2101      	movs	r1, #1
 800473c:	fa01 f303 	lsl.w	r3, r1, r3
 8004740:	4619      	mov	r1, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	619a      	str	r2, [r3, #24]
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <GPIO_ReadPin>:

/**
 * Función para leer el estado de un pin específico.
 */
uint32_t GPIO_ReadPin(GPIO_Handler_t *pPinHandler){
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
	// Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]

	if(pPinHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN){
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	795b      	ldrb	r3, [r3, #5]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d107      	bne.n	800477a <GPIO_ReadPin+0x24>
		// Cargamos el valor del registro IDR, desplazado a derecha tantas veces como la ubicación
		// del pin especifico
		pinValue = (pPinHandler->pGPIOx->IDR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	7912      	ldrb	r2, [r2, #4]
 8004774:	40d3      	lsrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e006      	b.n	8004788 <GPIO_ReadPin+0x32>
	}
	else{
		// Cargamos el valor del registro ODR, desplazado a derecha tantas veces como la ubicación
		// del pin especifico
		pinValue = (pPinHandler->pGPIOx->ODR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	7912      	ldrb	r2, [r2, #4]
 8004784:	40d3      	lsrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
	}
	pinValue &= 0b0001;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8004790:	68fb      	ldr	r3, [r7, #12]

}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <GPIOxTooglePin>:

/**
 * Función para cambiar el estado de un pin.
 */
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
	/* En el Output Data Register (ODR) se almacena el estado de un pin de salida,
	 * aplicando una máscara con un XOR se puede obtener el complemento de dicho
	 * valor, si está en 0, pasa a 1; si está en 1 pasa a 0*/
	pPinHandler->pGPIOx->ODR ^= (0b1 << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	791b      	ldrb	r3, [r3, #4]
 80047b0:	4619      	mov	r1, r3
 80047b2:	2301      	movs	r3, #1
 80047b4:	408b      	lsls	r3, r1
 80047b6:	4619      	mov	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	404a      	eors	r2, r1
 80047be:	615a      	str	r2, [r3, #20]
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <__libc_init_array>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	4d0d      	ldr	r5, [pc, #52]	; (8004804 <__libc_init_array+0x38>)
 80047d0:	4c0d      	ldr	r4, [pc, #52]	; (8004808 <__libc_init_array+0x3c>)
 80047d2:	1b64      	subs	r4, r4, r5
 80047d4:	10a4      	asrs	r4, r4, #2
 80047d6:	2600      	movs	r6, #0
 80047d8:	42a6      	cmp	r6, r4
 80047da:	d109      	bne.n	80047f0 <__libc_init_array+0x24>
 80047dc:	4d0b      	ldr	r5, [pc, #44]	; (800480c <__libc_init_array+0x40>)
 80047de:	4c0c      	ldr	r4, [pc, #48]	; (8004810 <__libc_init_array+0x44>)
 80047e0:	f000 f83e 	bl	8004860 <_init>
 80047e4:	1b64      	subs	r4, r4, r5
 80047e6:	10a4      	asrs	r4, r4, #2
 80047e8:	2600      	movs	r6, #0
 80047ea:	42a6      	cmp	r6, r4
 80047ec:	d105      	bne.n	80047fa <__libc_init_array+0x2e>
 80047ee:	bd70      	pop	{r4, r5, r6, pc}
 80047f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f4:	4798      	blx	r3
 80047f6:	3601      	adds	r6, #1
 80047f8:	e7ee      	b.n	80047d8 <__libc_init_array+0xc>
 80047fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fe:	4798      	blx	r3
 8004800:	3601      	adds	r6, #1
 8004802:	e7f2      	b.n	80047ea <__libc_init_array+0x1e>
 8004804:	080049a4 	.word	0x080049a4
 8004808:	080049a4 	.word	0x080049a4
 800480c:	080049a4 	.word	0x080049a4
 8004810:	080049a8 	.word	0x080049a8

08004814 <memcmp>:
 8004814:	b510      	push	{r4, lr}
 8004816:	3901      	subs	r1, #1
 8004818:	4402      	add	r2, r0
 800481a:	4290      	cmp	r0, r2
 800481c:	d101      	bne.n	8004822 <memcmp+0xe>
 800481e:	2000      	movs	r0, #0
 8004820:	e005      	b.n	800482e <memcmp+0x1a>
 8004822:	7803      	ldrb	r3, [r0, #0]
 8004824:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004828:	42a3      	cmp	r3, r4
 800482a:	d001      	beq.n	8004830 <memcmp+0x1c>
 800482c:	1b18      	subs	r0, r3, r4
 800482e:	bd10      	pop	{r4, pc}
 8004830:	3001      	adds	r0, #1
 8004832:	e7f2      	b.n	800481a <memcmp+0x6>

08004834 <memcpy>:
 8004834:	440a      	add	r2, r1
 8004836:	4291      	cmp	r1, r2
 8004838:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800483c:	d100      	bne.n	8004840 <memcpy+0xc>
 800483e:	4770      	bx	lr
 8004840:	b510      	push	{r4, lr}
 8004842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800484a:	4291      	cmp	r1, r2
 800484c:	d1f9      	bne.n	8004842 <memcpy+0xe>
 800484e:	bd10      	pop	{r4, pc}

08004850 <memset>:
 8004850:	4402      	add	r2, r0
 8004852:	4603      	mov	r3, r0
 8004854:	4293      	cmp	r3, r2
 8004856:	d100      	bne.n	800485a <memset+0xa>
 8004858:	4770      	bx	lr
 800485a:	f803 1b01 	strb.w	r1, [r3], #1
 800485e:	e7f9      	b.n	8004854 <memset+0x4>

08004860 <_init>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr

0800486c <_fini>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr
