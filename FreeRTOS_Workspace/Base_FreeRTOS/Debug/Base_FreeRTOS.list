
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005724  08005724  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005724  08005724  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005724  08005724  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005724  08005724  00015724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800572c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014454  20000078  080057a4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144cc  080057a4  000244cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d102  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e6  00000000  00000000  0002d1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002f290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002fe08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c88  00000000  00000000  00030858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d119  00000000  00000000  000434e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065a47  00000000  00000000  000505f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6040  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003518  00000000  00000000  000b6090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800557c 	.word	0x0800557c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800557c 	.word	0x0800557c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ee8 	.word	0x20012ee8

08000274 <main>:
/* Prototipos de funciones */
void vTaskOne( void * pvParameters );
void vTaskTwo( void * pvParameters );

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af02      	add	r7, sp, #8

	/* Activamos la unidad de punto flotante (FPU) */
	SCB->CPACR    |= (0xF << 20);
 800027a:	4b29      	ldr	r3, [pc, #164]	; (8000320 <main+0xac>)
 800027c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000280:	4a27      	ldr	r2, [pc, #156]	; (8000320 <main+0xac>)
 8000282:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000286:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Activamos del contador de Ticks */
	DWT->CTRL    |= (1 << 0);
 800028a:	4b26      	ldr	r3, [pc, #152]	; (8000324 <main+0xb0>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a25      	ldr	r2, [pc, #148]	; (8000324 <main+0xb0>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]

	configPLL(100);
 8000296:	2064      	movs	r0, #100	; 0x64
 8000298:	f004 fb38 	bl	800490c <configPLL>

	/* Necesario para el SEGGER*/
	vInitPrioGroupValue();
 800029c:	f001 fea4 	bl	8001fe8 <vInitPrioGroupValue>

	/* */
	SEGGER_UART_init(500000);
 80002a0:	4821      	ldr	r0, [pc, #132]	; (8000328 <main+0xb4>)
 80002a2:	f002 fbfb 	bl	8002a9c <SEGGER_UART_init>

	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 80002a6:	f002 fa23 	bl	80026f0 <SEGGER_SYSVIEW_Conf>
	/* Despues activamos el sistema */
	//SEGGER_SYSVIEW_Start();

	BaseType_t xReturned;
	TaskHandle_t xHandleTask1 = NULL;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandleTask2 = NULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]

    xReturned = xTaskCreate(
 80002b2:	f107 0308 	add.w	r3, r7, #8
 80002b6:	9301      	str	r3, [sp, #4]
 80002b8:	2302      	movs	r3, #2
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <main+0xb8>)
 80002be:	22c8      	movs	r2, #200	; 0xc8
 80002c0:	491b      	ldr	r1, [pc, #108]	; (8000330 <main+0xbc>)
 80002c2:	481c      	ldr	r0, [pc, #112]	; (8000334 <main+0xc0>)
 80002c4:	f000 fcde 	bl	8000c84 <xTaskCreate>
 80002c8:	6178      	str	r0, [r7, #20]
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-1",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask1 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d00a      	beq.n	80002e6 <main+0x72>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002d4:	f383 8811 	msr	BASEPRI, r3
 80002d8:	f3bf 8f6f 	isb	sy
 80002dc:	f3bf 8f4f 	dsb	sy
 80002e0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002e2:	bf00      	nop
 80002e4:	e7fe      	b.n	80002e4 <main+0x70>

    xReturned = xTaskCreate(
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2302      	movs	r3, #2
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	4b12      	ldr	r3, [pc, #72]	; (8000338 <main+0xc4>)
 80002f0:	22c8      	movs	r2, #200	; 0xc8
 80002f2:	4912      	ldr	r1, [pc, #72]	; (800033c <main+0xc8>)
 80002f4:	4812      	ldr	r0, [pc, #72]	; (8000340 <main+0xcc>)
 80002f6:	f000 fcc5 	bl	8000c84 <xTaskCreate>
 80002fa:	6178      	str	r0, [r7, #20]
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-2",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask2 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d00a      	beq.n	8000318 <main+0xa4>
        __asm volatile
 8000302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000306:	f383 8811 	msr	BASEPRI, r3
 800030a:	f3bf 8f6f 	isb	sy
 800030e:	f3bf 8f4f 	dsb	sy
 8000312:	60fb      	str	r3, [r7, #12]
    }
 8000314:	bf00      	nop
 8000316:	e7fe      	b.n	8000316 <main+0xa2>

    vTaskStartScheduler();
 8000318:	f000 fe0a 	bl	8000f30 <vTaskStartScheduler>

    /* Loop forever */
	while(1){
 800031c:	e7fe      	b.n	800031c <main+0xa8>
 800031e:	bf00      	nop
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	e0001000 	.word	0xe0001000
 8000328:	0007a120 	.word	0x0007a120
 800032c:	08005594 	.word	0x08005594
 8000330:	080055b0 	.word	0x080055b0
 8000334:	08000345 	.word	0x08000345
 8000338:	080055b8 	.word	0x080055b8
 800033c:	080055d4 	.word	0x080055d4
 8000340:	08000369 	.word	0x08000369

08000344 <vTaskOne>:
	}
}

/** Función que gobierna la tarea 1 */
void vTaskOne( void * pvParameters )
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]


    while(1)
    {
        /* Task code goes here. */
    	printf("%s\n", (char*)pvParameters);
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f004 fc97 	bl	8004c80 <puts>
    	taskYIELD();
 8000352:	4b04      	ldr	r3, [pc, #16]	; (8000364 <vTaskOne+0x20>)
 8000354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	f3bf 8f4f 	dsb	sy
 800035e:	f3bf 8f6f 	isb	sy
    	printf("%s\n", (char*)pvParameters);
 8000362:	e7f3      	b.n	800034c <vTaskOne+0x8>
 8000364:	e000ed04 	.word	0xe000ed04

08000368 <vTaskTwo>:
    }
}

/** Función que gobierna la tarea 2 */
void vTaskTwo( void * pvParameters )
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]


    while(1)
    {
        /* Task code goes here. */
    	printf("%s\n", (char*)pvParameters);
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f004 fc85 	bl	8004c80 <puts>
    	taskYIELD();
 8000376:	4b04      	ldr	r3, [pc, #16]	; (8000388 <vTaskTwo+0x20>)
 8000378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	f3bf 8f4f 	dsb	sy
 8000382:	f3bf 8f6f 	isb	sy
    	printf("%s\n", (char*)pvParameters);
 8000386:	e7f3      	b.n	8000370 <vTaskTwo+0x8>
 8000388:	e000ed04 	.word	0xe000ed04

0800038c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
 8000392:	60f8      	str	r0, [r7, #12]
 8000394:	60b9      	str	r1, [r7, #8]
 8000396:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]
 800039c:	e00a      	b.n	80003b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800039e:	f3af 8000 	nop.w
 80003a2:	4601      	mov	r1, r0
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	1c5a      	adds	r2, r3, #1
 80003a8:	60ba      	str	r2, [r7, #8]
 80003aa:	b2ca      	uxtb	r2, r1
 80003ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	3301      	adds	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
 80003b4:	697a      	ldr	r2, [r7, #20]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	dbf0      	blt.n	800039e <_read+0x12>
	}

return len;
 80003bc:	687b      	ldr	r3, [r7, #4]
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3718      	adds	r7, #24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
	return -1;
 80003ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003de:	b480      	push	{r7}
 80003e0:	b083      	sub	sp, #12
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003ee:	605a      	str	r2, [r3, #4]
	return 0;
 80003f0:	2300      	movs	r3, #0
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <_isatty>:

int _isatty(int file)
{
 80003fe:	b480      	push	{r7}
 8000400:	b083      	sub	sp, #12
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	return 1;
 8000406:	2301      	movs	r3, #1
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
	return 0;
 8000420:	2300      	movs	r3, #0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
	...

08000430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000438:	4a14      	ldr	r2, [pc, #80]	; (800048c <_sbrk+0x5c>)
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <_sbrk+0x60>)
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d102      	bne.n	8000452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <_sbrk+0x64>)
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <_sbrk+0x68>)
 8000450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <_sbrk+0x64>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4413      	add	r3, r2
 800045a:	693a      	ldr	r2, [r7, #16]
 800045c:	429a      	cmp	r2, r3
 800045e:	d207      	bcs.n	8000470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000460:	f004 fb50 	bl	8004b04 <__errno>
 8000464:	4603      	mov	r3, r0
 8000466:	220c      	movs	r2, #12
 8000468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800046a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800046e:	e009      	b.n	8000484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000470:	4b08      	ldr	r3, [pc, #32]	; (8000494 <_sbrk+0x64>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000476:	4b07      	ldr	r3, [pc, #28]	; (8000494 <_sbrk+0x64>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	4a05      	ldr	r2, [pc, #20]	; (8000494 <_sbrk+0x64>)
 8000480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000482:	68fb      	ldr	r3, [r7, #12]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20020000 	.word	0x20020000
 8000490:	00000400 	.word	0x00000400
 8000494:	20000094 	.word	0x20000094
 8000498:	200144d0 	.word	0x200144d0

0800049c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a6:	490d      	ldr	r1, [pc, #52]	; (80004dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <LoopForever+0xe>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004bc:	4c0a      	ldr	r4, [pc, #40]	; (80004e8 <LoopForever+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ca:	f004 fb21 	bl	8004b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ce:	f7ff fed1 	bl	8000274 <main>

080004d2 <LoopForever>:

LoopForever:
    b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
  ldr   r0, =_estack
 80004d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80004e0:	0800572c 	.word	0x0800572c
  ldr r2, =_sbss
 80004e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80004e8:	200144cc 	.word	0x200144cc

080004ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC_IRQHandler>

080004ee <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f103 0208 	add.w	r2, r3, #8
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000506:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f103 0208 	add.w	r2, r3, #8
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f103 0208 	add.w	r2, r3, #8
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	689a      	ldr	r2, [r3, #8]
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005a6:	d103      	bne.n	80005b0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	e00c      	b.n	80005ca <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3308      	adds	r3, #8
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e002      	b.n	80005be <vListInsert+0x2e>
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d2f6      	bcs.n	80005b8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	1c5a      	adds	r2, r3, #1
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000602:	b480      	push	{r7}
 8000604:	b085      	sub	sp, #20
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	691b      	ldr	r3, [r3, #16]
 800060e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	6892      	ldr	r2, [r2, #8]
 8000618:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	6852      	ldr	r2, [r2, #4]
 8000622:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	d103      	bne.n	8000636 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	1e5a      	subs	r2, r3, #1
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	681b      	ldr	r3, [r3, #0]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b086      	sub	sp, #24
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
 800065e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000660:	2301      	movs	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10a      	bne.n	8000684 <xQueueGenericReset+0x2e>
        __asm volatile
 800066e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000672:	f383 8811 	msr	BASEPRI, r3
 8000676:	f3bf 8f6f 	isb	sy
 800067a:	f3bf 8f4f 	dsb	sy
 800067e:	60fb      	str	r3, [r7, #12]
    }
 8000680:	bf00      	nop
 8000682:	e7fe      	b.n	8000682 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d052      	beq.n	8000730 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800068e:	2b00      	cmp	r3, #0
 8000690:	d04e      	beq.n	8000730 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069a:	2100      	movs	r1, #0
 800069c:	fba3 2302 	umull	r2, r3, r3, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d000      	beq.n	80006a6 <xQueueGenericReset+0x50>
 80006a4:	2101      	movs	r1, #1
 80006a6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d141      	bne.n	8000730 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 80006ac:	f001 fd1a 	bl	80020e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006b8:	6939      	ldr	r1, [r7, #16]
 80006ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80006bc:	fb01 f303 	mul.w	r3, r1, r3
 80006c0:	441a      	add	r2, r3
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	2200      	movs	r2, #0
 80006ca:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006dc:	3b01      	subs	r3, #1
 80006de:	6939      	ldr	r1, [r7, #16]
 80006e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80006e2:	fb01 f303 	mul.w	r3, r1, r3
 80006e6:	441a      	add	r2, r3
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	22ff      	movs	r2, #255	; 0xff
 80006f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	22ff      	movs	r2, #255	; 0xff
 80006f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d109      	bne.n	8000716 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00f      	beq.n	800072a <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	3310      	adds	r3, #16
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fe88 	bl	8001424 <xTaskRemoveFromEventList>
 8000714:	e009      	b.n	800072a <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	3310      	adds	r3, #16
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fee7 	bl	80004ee <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	3324      	adds	r3, #36	; 0x24
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fee2 	bl	80004ee <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800072a:	f001 fd0b 	bl	8002144 <vPortExitCritical>
 800072e:	e001      	b.n	8000734 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10a      	bne.n	8000750 <xQueueGenericReset+0xfa>
        __asm volatile
 800073a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800073e:	f383 8811 	msr	BASEPRI, r3
 8000742:	f3bf 8f6f 	isb	sy
 8000746:	f3bf 8f4f 	dsb	sy
 800074a:	60bb      	str	r3, [r7, #8]
    }
 800074c:	bf00      	nop
 800074e:	e7fe      	b.n	800074e <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000750:	697b      	ldr	r3, [r7, #20]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800075a:	b580      	push	{r7, lr}
 800075c:	b08a      	sub	sp, #40	; 0x28
 800075e:	af02      	add	r7, sp, #8
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	4613      	mov	r3, r2
 8000766:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d02e      	beq.n	80007d0 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000772:	2100      	movs	r1, #0
 8000774:	68ba      	ldr	r2, [r7, #8]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	fba3 2302 	umull	r2, r3, r3, r2
 800077c:	2b00      	cmp	r3, #0
 800077e:	d000      	beq.n	8000782 <xQueueGenericCreate+0x28>
 8000780:	2101      	movs	r1, #1
 8000782:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000784:	2b00      	cmp	r3, #0
 8000786:	d123      	bne.n	80007d0 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000790:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000794:	d81c      	bhi.n	80007d0 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	fb02 f303 	mul.w	r3, r2, r3
 800079e:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	3350      	adds	r3, #80	; 0x50
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fdc9 	bl	800233c <pvPortMalloc>
 80007aa:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d01c      	beq.n	80007ec <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3350      	adds	r3, #80	; 0x50
 80007ba:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	4613      	mov	r3, r2
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	68f8      	ldr	r0, [r7, #12]
 80007ca:	f000 f814 	bl	80007f6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80007ce:	e00d      	b.n	80007ec <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10a      	bne.n	80007ec <xQueueGenericCreate+0x92>
        __asm volatile
 80007d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007da:	f383 8811 	msr	BASEPRI, r3
 80007de:	f3bf 8f6f 	isb	sy
 80007e2:	f3bf 8f4f 	dsb	sy
 80007e6:	613b      	str	r3, [r7, #16]
    }
 80007e8:	bf00      	nop
 80007ea:	e7fe      	b.n	80007ea <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80007ec:	69fb      	ldr	r3, [r7, #28]
    }
 80007ee:	4618      	mov	r0, r3
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b084      	sub	sp, #16
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d103      	bne.n	8000812 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	e002      	b.n	8000818 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000824:	2101      	movs	r1, #1
 8000826:	69b8      	ldr	r0, [r7, #24]
 8000828:	f7ff ff15 	bl	8000656 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	78fa      	ldrb	r2, [r7, #3]
 8000830:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	68f9      	ldr	r1, [r7, #12]
 800083a:	2073      	movs	r0, #115	; 0x73
 800083c:	f003 f950 	bl	8003ae0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b08f      	sub	sp, #60	; 0x3c
 800084c:	af02      	add	r7, sp, #8
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800085c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085e:	2b00      	cmp	r3, #0
 8000860:	d10a      	bne.n	8000878 <xQueueReceive+0x30>
        __asm volatile
 8000862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000866:	f383 8811 	msr	BASEPRI, r3
 800086a:	f3bf 8f6f 	isb	sy
 800086e:	f3bf 8f4f 	dsb	sy
 8000872:	623b      	str	r3, [r7, #32]
    }
 8000874:	bf00      	nop
 8000876:	e7fe      	b.n	8000876 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d103      	bne.n	8000886 <xQueueReceive+0x3e>
 800087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	2b00      	cmp	r3, #0
 8000884:	d101      	bne.n	800088a <xQueueReceive+0x42>
 8000886:	2301      	movs	r3, #1
 8000888:	e000      	b.n	800088c <xQueueReceive+0x44>
 800088a:	2300      	movs	r3, #0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d10a      	bne.n	80008a6 <xQueueReceive+0x5e>
        __asm volatile
 8000890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000894:	f383 8811 	msr	BASEPRI, r3
 8000898:	f3bf 8f6f 	isb	sy
 800089c:	f3bf 8f4f 	dsb	sy
 80008a0:	61fb      	str	r3, [r7, #28]
    }
 80008a2:	bf00      	nop
 80008a4:	e7fe      	b.n	80008a4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008a6:	f000 ff57 	bl	8001758 <xTaskGetSchedulerState>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <xQueueReceive+0x6e>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d101      	bne.n	80008ba <xQueueReceive+0x72>
 80008b6:	2301      	movs	r3, #1
 80008b8:	e000      	b.n	80008bc <xQueueReceive+0x74>
 80008ba:	2300      	movs	r3, #0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10a      	bne.n	80008d6 <xQueueReceive+0x8e>
        __asm volatile
 80008c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c4:	f383 8811 	msr	BASEPRI, r3
 80008c8:	f3bf 8f6f 	isb	sy
 80008cc:	f3bf 8f4f 	dsb	sy
 80008d0:	61bb      	str	r3, [r7, #24]
    }
 80008d2:	bf00      	nop
 80008d4:	e7fe      	b.n	80008d4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80008d6:	f001 fc05 	bl	80020e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008de:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d024      	beq.n	8000930 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80008e6:	68b9      	ldr	r1, [r7, #8]
 80008e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008ea:	f000 f8b3 	bl	8000a54 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80008ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fe83 	bl	80045fc <SEGGER_SYSVIEW_ShrinkId>
 80008f6:	4604      	mov	r4, r0
 80008f8:	2000      	movs	r0, #0
 80008fa:	f003 fe7f 	bl	80045fc <SEGGER_SYSVIEW_ShrinkId>
 80008fe:	4602      	mov	r2, r0
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2101      	movs	r1, #1
 8000904:	9100      	str	r1, [sp, #0]
 8000906:	4621      	mov	r1, r4
 8000908:	205c      	movs	r0, #92	; 0x5c
 800090a:	f003 f95f 	bl	8003bcc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	1e5a      	subs	r2, r3, #1
 8000912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000914:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d004      	beq.n	8000928 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000920:	3310      	adds	r3, #16
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fd7e 	bl	8001424 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000928:	f001 fc0c 	bl	8002144 <vPortExitCritical>
                return pdPASS;
 800092c:	2301      	movs	r3, #1
 800092e:	e08a      	b.n	8000a46 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d113      	bne.n	800095e <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000936:	f001 fc05 	bl	8002144 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800093a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093c:	4618      	mov	r0, r3
 800093e:	f003 fe5d 	bl	80045fc <SEGGER_SYSVIEW_ShrinkId>
 8000942:	4604      	mov	r4, r0
 8000944:	2000      	movs	r0, #0
 8000946:	f003 fe59 	bl	80045fc <SEGGER_SYSVIEW_ShrinkId>
 800094a:	4602      	mov	r2, r0
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2101      	movs	r1, #1
 8000950:	9100      	str	r1, [sp, #0]
 8000952:	4621      	mov	r1, r4
 8000954:	205c      	movs	r0, #92	; 0x5c
 8000956:	f003 f939 	bl	8003bcc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800095a:	2300      	movs	r3, #0
 800095c:	e073      	b.n	8000a46 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800095e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000960:	2b00      	cmp	r3, #0
 8000962:	d106      	bne.n	8000972 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fdc1 	bl	80014f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800096e:	2301      	movs	r3, #1
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000972:	f001 fbe7 	bl	8002144 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000976:	f000 fb3d 	bl	8000ff4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800097a:	f001 fbb3 	bl	80020e4 <vPortEnterCritical>
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000984:	b25b      	sxtb	r3, r3
 8000986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800098a:	d103      	bne.n	8000994 <xQueueReceive+0x14c>
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800099a:	b25b      	sxtb	r3, r3
 800099c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009a0:	d103      	bne.n	80009aa <xQueueReceive+0x162>
 80009a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80009aa:	f001 fbcb 	bl	8002144 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009ae:	1d3a      	adds	r2, r7, #4
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fdb0 	bl	800151c <xTaskCheckForTimeOut>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d124      	bne.n	8000a0c <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009c4:	f000 f8be 	bl	8000b44 <prvIsQueueEmpty>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d018      	beq.n	8000a00 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80009ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d0:	3324      	adds	r3, #36	; 0x24
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fcd2 	bl	8001380 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80009dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009de:	f000 f85f 	bl	8000aa0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80009e2:	f000 fb15 	bl	8001010 <xTaskResumeAll>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	f47f af74 	bne.w	80008d6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <xQueueReceive+0x208>)
 80009f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	f3bf 8f4f 	dsb	sy
 80009fa:	f3bf 8f6f 	isb	sy
 80009fe:	e76a      	b.n	80008d6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a02:	f000 f84d 	bl	8000aa0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a06:	f000 fb03 	bl	8001010 <xTaskResumeAll>
 8000a0a:	e764      	b.n	80008d6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a0e:	f000 f847 	bl	8000aa0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a12:	f000 fafd 	bl	8001010 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a18:	f000 f894 	bl	8000b44 <prvIsQueueEmpty>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f43f af59 	beq.w	80008d6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fde8 	bl	80045fc <SEGGER_SYSVIEW_ShrinkId>
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f003 fde4 	bl	80045fc <SEGGER_SYSVIEW_ShrinkId>
 8000a34:	4602      	mov	r2, r0
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	9100      	str	r1, [sp, #0]
 8000a3c:	4621      	mov	r1, r4
 8000a3e:	205c      	movs	r0, #92	; 0x5c
 8000a40:	f003 f8c4 	bl	8003bcc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000a44:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3734      	adds	r7, #52	; 0x34
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd90      	pop	{r4, r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	e000ed04 	.word	0xe000ed04

08000a54 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d018      	beq.n	8000a98 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	68da      	ldr	r2, [r3, #12]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	441a      	add	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d303      	bcc.n	8000a88 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68d9      	ldr	r1, [r3, #12]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	461a      	mov	r2, r3
 8000a92:	6838      	ldr	r0, [r7, #0]
 8000a94:	f004 f870 	bl	8004b78 <memcpy>
    }
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000aa8:	f001 fb1c 	bl	80020e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ab2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ab4:	e011      	b.n	8000ada <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d012      	beq.n	8000ae4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3324      	adds	r3, #36	; 0x24
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fcae 	bl	8001424 <xTaskRemoveFromEventList>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000ace:	f000 fd8b 	bl	80015e8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	dce9      	bgt.n	8000ab6 <prvUnlockQueue+0x16>
 8000ae2:	e000      	b.n	8000ae6 <prvUnlockQueue+0x46>
                    break;
 8000ae4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	22ff      	movs	r2, #255	; 0xff
 8000aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000aee:	f001 fb29 	bl	8002144 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000af2:	f001 faf7 	bl	80020e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000afc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000afe:	e011      	b.n	8000b24 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d012      	beq.n	8000b2e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3310      	adds	r3, #16
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fc89 	bl	8001424 <xTaskRemoveFromEventList>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000b18:	f000 fd66 	bl	80015e8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000b1c:	7bbb      	ldrb	r3, [r7, #14]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	dce9      	bgt.n	8000b00 <prvUnlockQueue+0x60>
 8000b2c:	e000      	b.n	8000b30 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000b2e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	22ff      	movs	r2, #255	; 0xff
 8000b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000b38:	f001 fb04 	bl	8002144 <vPortExitCritical>
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000b4c:	f001 faca 	bl	80020e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	e001      	b.n	8000b62 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000b62:	f001 faef 	bl	8002144 <vPortExitCritical>

    return xReturn;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10a      	bne.n	8000b9a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b88:	f383 8811 	msr	BASEPRI, r3
 8000b8c:	f3bf 8f6f 	isb	sy
 8000b90:	f3bf 8f4f 	dsb	sy
 8000b94:	60fb      	str	r3, [r7, #12]
    }
 8000b96:	bf00      	nop
 8000b98:	e7fe      	b.n	8000b98 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d024      	beq.n	8000bea <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e01e      	b.n	8000be4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <vQueueAddToRegistry+0xa8>)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	4413      	add	r3, r2
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d105      	bne.n	8000bc2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <vQueueAddToRegistry+0xa8>)
 8000bbc:	4413      	add	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
                    break;
 8000bc0:	e013      	b.n	8000bea <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10a      	bne.n	8000bde <vQueueAddToRegistry+0x6e>
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <vQueueAddToRegistry+0xa8>)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d104      	bne.n	8000bde <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <vQueueAddToRegistry+0xa8>)
 8000bda:	4413      	add	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	d9dd      	bls.n	8000ba6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00f      	beq.n	8000c10 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f003 fcfc 	bl	80045fc <SEGGER_SYSVIEW_ShrinkId>
 8000c04:	4601      	mov	r1, r0
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	2071      	movs	r0, #113	; 0x71
 8000c0c:	f002 ff0e 	bl	8003a2c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000098 	.word	0x20000098

08000c1c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000c2c:	f001 fa5a 	bl	80020e4 <vPortEnterCritical>
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c3c:	d103      	bne.n	8000c46 <vQueueWaitForMessageRestricted+0x2a>
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c52:	d103      	bne.n	8000c5c <vQueueWaitForMessageRestricted+0x40>
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c5c:	f001 fa72 	bl	8002144 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d106      	bne.n	8000c76 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3324      	adds	r3, #36	; 0x24
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fba9 	bl	80013c8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff12 	bl	8000aa0 <prvUnlockQueue>
    }
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	; 0x30
 8000c88:	af04      	add	r7, sp, #16
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	4613      	mov	r3, r2
 8000c92:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fb4f 	bl	800233c <pvPortMalloc>
 8000c9e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00e      	beq.n	8000cc4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000ca6:	2058      	movs	r0, #88	; 0x58
 8000ca8:	f001 fb48 	bl	800233c <pvPortMalloc>
 8000cac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	631a      	str	r2, [r3, #48]	; 0x30
 8000cba:	e005      	b.n	8000cc8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000cbc:	6978      	ldr	r0, [r7, #20]
 8000cbe:	f001 fbf7 	bl	80024b0 <vPortFree>
 8000cc2:	e001      	b.n	8000cc8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d013      	beq.n	8000cf6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000cce:	88fa      	ldrh	r2, [r7, #6]
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	9303      	str	r3, [sp, #12]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f000 f80e 	bl	8000d06 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000cea:	69f8      	ldr	r0, [r7, #28]
 8000cec:	f000 f8a2 	bl	8000e34 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
 8000cf4:	e002      	b.n	8000cfc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cfa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000cfc:	69bb      	ldr	r3, [r7, #24]
    }
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b088      	sub	sp, #32
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	21a5      	movs	r1, #165	; 0xa5
 8000d20:	f003 ff38 	bl	8004b94 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	f023 0307 	bic.w	r3, r3, #7
 8000d3c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00a      	beq.n	8000d5e <prvInitialiseNewTask+0x58>
        __asm volatile
 8000d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d4c:	f383 8811 	msr	BASEPRI, r3
 8000d50:	f3bf 8f6f 	isb	sy
 8000d54:	f3bf 8f4f 	dsb	sy
 8000d58:	617b      	str	r3, [r7, #20]
    }
 8000d5a:	bf00      	nop
 8000d5c:	e7fe      	b.n	8000d5c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d01f      	beq.n	8000da4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	e012      	b.n	8000d90 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	4413      	add	r3, r2
 8000d70:	7819      	ldrb	r1, [r3, #0]
 8000d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	4413      	add	r3, r2
 8000d78:	3334      	adds	r3, #52	; 0x34
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d006      	beq.n	8000d98 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	2b09      	cmp	r3, #9
 8000d94:	d9e9      	bls.n	8000d6a <prvInitialiseNewTask+0x64>
 8000d96:	e000      	b.n	8000d9a <prvInitialiseNewTask+0x94>
            {
                break;
 8000d98:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000da2:	e003      	b.n	8000dac <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d901      	bls.n	8000db6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000db2:	2304      	movs	r3, #4
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dc0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dca:	3304      	adds	r3, #4
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fbae 	bl	800052e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	3318      	adds	r3, #24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fba9 	bl	800052e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000de0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de4:	f1c3 0205 	rsb	r2, r3, #5
 8000de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dea:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df4:	3350      	adds	r3, #80	; 0x50
 8000df6:	2204      	movs	r2, #4
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 feca 	bl	8004b94 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e02:	3354      	adds	r3, #84	; 0x54
 8000e04:	2201      	movs	r2, #1
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 fec3 	bl	8004b94 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	68f9      	ldr	r1, [r7, #12]
 8000e12:	69b8      	ldr	r0, [r7, #24]
 8000e14:	f000 ffba 	bl	8001d8c <pxPortInitialiseStack>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e28:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000e2a:	bf00      	nop
 8000e2c:	3720      	adds	r7, #32
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000e3c:	f001 f952 	bl	80020e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000e40:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <prvAddNewTaskToReadyList+0xe4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a34      	ldr	r2, [pc, #208]	; (8000f18 <prvAddNewTaskToReadyList+0xe4>)
 8000e48:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000e4a:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <prvAddNewTaskToReadyList+0xe8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d109      	bne.n	8000e66 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000e52:	4a32      	ldr	r2, [pc, #200]	; (8000f1c <prvAddNewTaskToReadyList+0xe8>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <prvAddNewTaskToReadyList+0xe4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d110      	bne.n	8000e82 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000e60:	f000 fbe0 	bl	8001624 <prvInitialiseTaskLists>
 8000e64:	e00d      	b.n	8000e82 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000e66:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <prvAddNewTaskToReadyList+0xec>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d109      	bne.n	8000e82 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <prvAddNewTaskToReadyList+0xe8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d802      	bhi.n	8000e82 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000e7c:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <prvAddNewTaskToReadyList+0xe8>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <prvAddNewTaskToReadyList+0xf0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a26      	ldr	r2, [pc, #152]	; (8000f24 <prvAddNewTaskToReadyList+0xf0>)
 8000e8a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <prvAddNewTaskToReadyList+0xf0>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d016      	beq.n	8000ec8 <prvAddNewTaskToReadyList+0x94>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fa87 	bl	80043b0 <SEGGER_SYSVIEW_OnTaskCreate>
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	461c      	mov	r4, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	1ae3      	subs	r3, r4, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	462b      	mov	r3, r5
 8000ec4:	f001 fcb6 	bl	8002834 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 faf4 	bl	80044b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <prvAddNewTaskToReadyList+0xf4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <prvAddNewTaskToReadyList+0xf4>)
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <prvAddNewTaskToReadyList+0xf8>)
 8000ef0:	441a      	add	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4610      	mov	r0, r2
 8000efa:	f7ff fb25 	bl	8000548 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000efe:	f001 f921 	bl	8002144 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <prvAddNewTaskToReadyList+0xec>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <prvAddNewTaskToReadyList+0xe8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bdb0      	pop	{r4, r5, r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200001b0 	.word	0x200001b0
 8000f1c:	200000d8 	.word	0x200000d8
 8000f20:	200001bc 	.word	0x200001bc
 8000f24:	200001cc 	.word	0x200001cc
 8000f28:	200001b8 	.word	0x200001b8
 8000f2c:	200000dc 	.word	0x200000dc

08000f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <vTaskStartScheduler+0xa4>)
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	2282      	movs	r2, #130	; 0x82
 8000f42:	4925      	ldr	r1, [pc, #148]	; (8000fd8 <vTaskStartScheduler+0xa8>)
 8000f44:	4825      	ldr	r0, [pc, #148]	; (8000fdc <vTaskStartScheduler+0xac>)
 8000f46:	f7ff fe9d 	bl	8000c84 <xTaskCreate>
 8000f4a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d102      	bne.n	8000f58 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8000f52:	f000 fc97 	bl	8001884 <xTimerCreateTimerTask>
 8000f56:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d124      	bne.n	8000fa8 <vTaskStartScheduler+0x78>
        __asm volatile
 8000f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f62:	f383 8811 	msr	BASEPRI, r3
 8000f66:	f3bf 8f6f 	isb	sy
 8000f6a:	f3bf 8f4f 	dsb	sy
 8000f6e:	60bb      	str	r3, [r7, #8]
    }
 8000f70:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <vTaskStartScheduler+0xb0>)
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f78:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <vTaskStartScheduler+0xb4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <vTaskStartScheduler+0xb8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <vTaskStartScheduler+0xbc>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <vTaskStartScheduler+0xa4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d102      	bne.n	8000f98 <vTaskStartScheduler+0x68>
 8000f92:	f003 f9f1 	bl	8004378 <SEGGER_SYSVIEW_OnIdle>
 8000f96:	e004      	b.n	8000fa2 <vTaskStartScheduler+0x72>
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <vTaskStartScheduler+0xbc>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 fa49 	bl	8004434 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000fa2:	f000 ff7f 	bl	8001ea4 <xPortStartScheduler>
 8000fa6:	e00e      	b.n	8000fc6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fae:	d10a      	bne.n	8000fc6 <vTaskStartScheduler+0x96>
        __asm volatile
 8000fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb4:	f383 8811 	msr	BASEPRI, r3
 8000fb8:	f3bf 8f6f 	isb	sy
 8000fbc:	f3bf 8f4f 	dsb	sy
 8000fc0:	607b      	str	r3, [r7, #4]
    }
 8000fc2:	bf00      	nop
 8000fc4:	e7fe      	b.n	8000fc4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <vTaskStartScheduler+0xc0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001d4 	.word	0x200001d4
 8000fd8:	080055dc 	.word	0x080055dc
 8000fdc:	08001601 	.word	0x08001601
 8000fe0:	200001d0 	.word	0x200001d0
 8000fe4:	200001bc 	.word	0x200001bc
 8000fe8:	200001b4 	.word	0x200001b4
 8000fec:	200000d8 	.word	0x200000d8
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <vTaskSuspendAll+0x18>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	4a03      	ldr	r2, [pc, #12]	; (800100c <vTaskSuspendAll+0x18>)
 8001000:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	200001d8 	.word	0x200001d8

08001010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800101e:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <xTaskResumeAll+0x104>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10a      	bne.n	800103c <xTaskResumeAll+0x2c>
        __asm volatile
 8001026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800102a:	f383 8811 	msr	BASEPRI, r3
 800102e:	f3bf 8f6f 	isb	sy
 8001032:	f3bf 8f4f 	dsb	sy
 8001036:	603b      	str	r3, [r7, #0]
    }
 8001038:	bf00      	nop
 800103a:	e7fe      	b.n	800103a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800103c:	f001 f852 	bl	80020e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <xTaskResumeAll+0x104>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3b01      	subs	r3, #1
 8001046:	4a33      	ldr	r2, [pc, #204]	; (8001114 <xTaskResumeAll+0x104>)
 8001048:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <xTaskResumeAll+0x104>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d159      	bne.n	8001106 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <xTaskResumeAll+0x108>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d055      	beq.n	8001106 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800105a:	e032      	b.n	80010c2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <xTaskResumeAll+0x10c>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3318      	adds	r3, #24
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff faca 	bl	8000602 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3304      	adds	r3, #4
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fac5 	bl	8000602 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fa1c 	bl	80044b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	2201      	movs	r2, #1
 8001086:	409a      	lsls	r2, r3
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <xTaskResumeAll+0x110>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4313      	orrs	r3, r2
 800108e:	4a24      	ldr	r2, [pc, #144]	; (8001120 <xTaskResumeAll+0x110>)
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4a21      	ldr	r2, [pc, #132]	; (8001124 <xTaskResumeAll+0x114>)
 80010a0:	441a      	add	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3304      	adds	r3, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f7ff fa4d 	bl	8000548 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <xTaskResumeAll+0x118>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d302      	bcc.n	80010c2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <xTaskResumeAll+0x11c>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <xTaskResumeAll+0x10c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1c8      	bne.n	800105c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80010d0:	f000 fb26 	bl	8001720 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <xTaskResumeAll+0x120>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d010      	beq.n	8001102 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80010e0:	f000 f84a 	bl	8001178 <xTaskIncrementTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <xTaskResumeAll+0x11c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f1      	bne.n	80010e0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <xTaskResumeAll+0x120>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <xTaskResumeAll+0x11c>)
 8001104:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001106:	f001 f81d 	bl	8002144 <vPortExitCritical>

    return xAlreadyYielded;
 800110a:	687b      	ldr	r3, [r7, #4]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200001d8 	.word	0x200001d8
 8001118:	200001b0 	.word	0x200001b0
 800111c:	20000170 	.word	0x20000170
 8001120:	200001b8 	.word	0x200001b8
 8001124:	200000dc 	.word	0x200000dc
 8001128:	200000d8 	.word	0x200000d8
 800112c:	200001c4 	.word	0x200001c4
 8001130:	200001c0 	.word	0x200001c0

08001134 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <xTaskGetTickCount+0x1c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001140:	687b      	ldr	r3, [r7, #4]
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	200001b4 	.word	0x200001b4

08001154 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800115a:	f001 f8af 	bl	80022bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <xTaskGetTickCountFromISR+0x20>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001168:	683b      	ldr	r3, [r7, #0]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001b4 	.word	0x200001b4

08001178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001182:	4b41      	ldr	r3, [pc, #260]	; (8001288 <xTaskIncrementTick+0x110>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d173      	bne.n	8001272 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800118a:	4b40      	ldr	r3, [pc, #256]	; (800128c <xTaskIncrementTick+0x114>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001192:	4a3e      	ldr	r2, [pc, #248]	; (800128c <xTaskIncrementTick+0x114>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d120      	bne.n	80011e0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800119e:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <xTaskIncrementTick+0x118>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00a      	beq.n	80011be <xTaskIncrementTick+0x46>
        __asm volatile
 80011a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ac:	f383 8811 	msr	BASEPRI, r3
 80011b0:	f3bf 8f6f 	isb	sy
 80011b4:	f3bf 8f4f 	dsb	sy
 80011b8:	603b      	str	r3, [r7, #0]
    }
 80011ba:	bf00      	nop
 80011bc:	e7fe      	b.n	80011bc <xTaskIncrementTick+0x44>
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <xTaskIncrementTick+0x118>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	4b33      	ldr	r3, [pc, #204]	; (8001294 <xTaskIncrementTick+0x11c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a31      	ldr	r2, [pc, #196]	; (8001290 <xTaskIncrementTick+0x118>)
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4a31      	ldr	r2, [pc, #196]	; (8001294 <xTaskIncrementTick+0x11c>)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b31      	ldr	r3, [pc, #196]	; (8001298 <xTaskIncrementTick+0x120>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a2f      	ldr	r2, [pc, #188]	; (8001298 <xTaskIncrementTick+0x120>)
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	f000 faa0 	bl	8001720 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80011e0:	4b2e      	ldr	r3, [pc, #184]	; (800129c <xTaskIncrementTick+0x124>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d348      	bcc.n	800127c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <xTaskIncrementTick+0x118>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d104      	bne.n	80011fe <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011f4:	4b29      	ldr	r3, [pc, #164]	; (800129c <xTaskIncrementTick+0x124>)
 80011f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011fa:	601a      	str	r2, [r3, #0]
                    break;
 80011fc:	e03e      	b.n	800127c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011fe:	4b24      	ldr	r3, [pc, #144]	; (8001290 <xTaskIncrementTick+0x118>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	429a      	cmp	r2, r3
 8001214:	d203      	bcs.n	800121e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001216:	4a21      	ldr	r2, [pc, #132]	; (800129c <xTaskIncrementTick+0x124>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800121c:	e02e      	b.n	800127c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	3304      	adds	r3, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f9ed 	bl	8000602 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3318      	adds	r3, #24
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f9e4 	bl	8000602 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	4618      	mov	r0, r3
 800123e:	f003 f93b 	bl	80044b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	2201      	movs	r2, #1
 8001248:	409a      	lsls	r2, r3
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <xTaskIncrementTick+0x128>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4313      	orrs	r3, r2
 8001250:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <xTaskIncrementTick+0x128>)
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <xTaskIncrementTick+0x12c>)
 8001262:	441a      	add	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3304      	adds	r3, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f7ff f96c 	bl	8000548 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001270:	e7bb      	b.n	80011ea <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <xTaskIncrementTick+0x130>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <xTaskIncrementTick+0x130>)
 800127a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800127c:	697b      	ldr	r3, [r7, #20]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200001d8 	.word	0x200001d8
 800128c:	200001b4 	.word	0x200001b4
 8001290:	20000168 	.word	0x20000168
 8001294:	2000016c 	.word	0x2000016c
 8001298:	200001c8 	.word	0x200001c8
 800129c:	200001d0 	.word	0x200001d0
 80012a0:	200001b8 	.word	0x200001b8
 80012a4:	200000dc 	.word	0x200000dc
 80012a8:	200001c0 	.word	0x200001c0

080012ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <vTaskSwitchContext+0xbc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <vTaskSwitchContext+0xc0>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80012c0:	e04d      	b.n	800135e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <vTaskSwitchContext+0xc0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <vTaskSwitchContext+0xc4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	f1c3 031f 	rsb	r3, r3, #31
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	4925      	ldr	r1, [pc, #148]	; (8001374 <vTaskSwitchContext+0xc8>)
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10a      	bne.n	8001308 <vTaskSwitchContext+0x5c>
        __asm volatile
 80012f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f6:	f383 8811 	msr	BASEPRI, r3
 80012fa:	f3bf 8f6f 	isb	sy
 80012fe:	f3bf 8f4f 	dsb	sy
 8001302:	607b      	str	r3, [r7, #4]
    }
 8001304:	bf00      	nop
 8001306:	e7fe      	b.n	8001306 <vTaskSwitchContext+0x5a>
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <vTaskSwitchContext+0xc8>)
 8001314:	4413      	add	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	3308      	adds	r3, #8
 800132a:	429a      	cmp	r2, r3
 800132c:	d104      	bne.n	8001338 <vTaskSwitchContext+0x8c>
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <vTaskSwitchContext+0xcc>)
 8001340:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <vTaskSwitchContext+0xcc>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <vTaskSwitchContext+0xd0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d102      	bne.n	8001354 <vTaskSwitchContext+0xa8>
 800134e:	f003 f813 	bl	8004378 <SEGGER_SYSVIEW_OnIdle>
}
 8001352:	e004      	b.n	800135e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <vTaskSwitchContext+0xcc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f003 f86b 	bl	8004434 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001d8 	.word	0x200001d8
 800136c:	200001c4 	.word	0x200001c4
 8001370:	200001b8 	.word	0x200001b8
 8001374:	200000dc 	.word	0x200000dc
 8001378:	200000d8 	.word	0x200000d8
 800137c:	200001d4 	.word	0x200001d4

08001380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10a      	bne.n	80013a6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001394:	f383 8811 	msr	BASEPRI, r3
 8001398:	f3bf 8f6f 	isb	sy
 800139c:	f3bf 8f4f 	dsb	sy
 80013a0:	60fb      	str	r3, [r7, #12]
    }
 80013a2:	bf00      	nop
 80013a4:	e7fe      	b.n	80013a4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <vTaskPlaceOnEventList+0x44>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3318      	adds	r3, #24
 80013ac:	4619      	mov	r1, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff f8ee 	bl	8000590 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80013b4:	2101      	movs	r1, #1
 80013b6:	6838      	ldr	r0, [r7, #0]
 80013b8:	f000 f9ec 	bl	8001794 <prvAddCurrentTaskToDelayedList>
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200000d8 	.word	0x200000d8

080013c8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10a      	bne.n	80013f0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80013da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013de:	f383 8811 	msr	BASEPRI, r3
 80013e2:	f3bf 8f6f 	isb	sy
 80013e6:	f3bf 8f4f 	dsb	sy
 80013ea:	617b      	str	r3, [r7, #20]
    }
 80013ec:	bf00      	nop
 80013ee:	e7fe      	b.n	80013ee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <vTaskPlaceOnEventListRestricted+0x58>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3318      	adds	r3, #24
 80013f6:	4619      	mov	r1, r3
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff f8a5 	bl	8000548 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001408:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800140a:	2024      	movs	r0, #36	; 0x24
 800140c:	f002 fab4 	bl	8003978 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f000 f9be 	bl	8001794 <prvAddCurrentTaskToDelayedList>
    }
 8001418:	bf00      	nop
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200000d8 	.word	0x200000d8

08001424 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10a      	bne.n	8001450 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800143a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800143e:	f383 8811 	msr	BASEPRI, r3
 8001442:	f3bf 8f6f 	isb	sy
 8001446:	f3bf 8f4f 	dsb	sy
 800144a:	60fb      	str	r3, [r7, #12]
    }
 800144c:	bf00      	nop
 800144e:	e7fe      	b.n	800144e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	3318      	adds	r3, #24
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f8d4 	bl	8000602 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <xTaskRemoveFromEventList+0xb4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d120      	bne.n	80014a4 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	3304      	adds	r3, #4
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f8cb 	bl	8000602 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4618      	mov	r0, r3
 8001470:	f003 f822 	bl	80044b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	2201      	movs	r2, #1
 800147a:	409a      	lsls	r2, r3
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <xTaskRemoveFromEventList+0xb8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4313      	orrs	r3, r2
 8001482:	4a16      	ldr	r2, [pc, #88]	; (80014dc <xTaskRemoveFromEventList+0xb8>)
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <xTaskRemoveFromEventList+0xbc>)
 8001494:	441a      	add	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	3304      	adds	r3, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f7ff f853 	bl	8000548 <vListInsertEnd>
 80014a2:	e005      	b.n	80014b0 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	3318      	adds	r3, #24
 80014a8:	4619      	mov	r1, r3
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <xTaskRemoveFromEventList+0xc0>)
 80014ac:	f7ff f84c 	bl	8000548 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <xTaskRemoveFromEventList+0xc4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d905      	bls.n	80014ca <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80014be:	2301      	movs	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <xTaskRemoveFromEventList+0xc8>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e001      	b.n	80014ce <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80014ce:	697b      	ldr	r3, [r7, #20]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200001d8 	.word	0x200001d8
 80014dc:	200001b8 	.word	0x200001b8
 80014e0:	200000dc 	.word	0x200000dc
 80014e4:	20000170 	.word	0x20000170
 80014e8:	200000d8 	.word	0x200000d8
 80014ec:	200001c4 	.word	0x200001c4

080014f0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <vTaskInternalSetTimeOutState+0x24>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <vTaskInternalSetTimeOutState+0x28>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	605a      	str	r2, [r3, #4]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	200001c8 	.word	0x200001c8
 8001518:	200001b4 	.word	0x200001b4

0800151c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10a      	bne.n	8001542 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800152c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001530:	f383 8811 	msr	BASEPRI, r3
 8001534:	f3bf 8f6f 	isb	sy
 8001538:	f3bf 8f4f 	dsb	sy
 800153c:	613b      	str	r3, [r7, #16]
    }
 800153e:	bf00      	nop
 8001540:	e7fe      	b.n	8001540 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10a      	bne.n	800155e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154c:	f383 8811 	msr	BASEPRI, r3
 8001550:	f3bf 8f6f 	isb	sy
 8001554:	f3bf 8f4f 	dsb	sy
 8001558:	60fb      	str	r3, [r7, #12]
    }
 800155a:	bf00      	nop
 800155c:	e7fe      	b.n	800155c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800155e:	f000 fdc1 	bl	80020e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <xTaskCheckForTimeOut+0xc4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800157a:	d102      	bne.n	8001582 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	e026      	b.n	80015d0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <xTaskCheckForTimeOut+0xc8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d00a      	beq.n	80015a4 <xTaskCheckForTimeOut+0x88>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	429a      	cmp	r2, r3
 8001596:	d305      	bcc.n	80015a4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001598:	2301      	movs	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e015      	b.n	80015d0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d20b      	bcs.n	80015c6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	1ad2      	subs	r2, r2, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff98 	bl	80014f0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	e004      	b.n	80015d0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80015d0:	f000 fdb8 	bl	8002144 <vPortExitCritical>

    return xReturn;
 80015d4:	69fb      	ldr	r3, [r7, #28]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001b4 	.word	0x200001b4
 80015e4:	200001c8 	.word	0x200001c8

080015e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <vTaskMissedYield+0x14>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	200001c4 	.word	0x200001c4

08001600 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001608:	f000 f84c 	bl	80016a4 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <prvIdleTask+0x20>)
 800160e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f3bf 8f4f 	dsb	sy
 8001618:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800161c:	e7f4      	b.n	8001608 <prvIdleTask+0x8>
 800161e:	bf00      	nop
 8001620:	e000ed04 	.word	0xe000ed04

08001624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	e00c      	b.n	800164a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <prvInitialiseTaskLists+0x60>)
 800163c:	4413      	add	r3, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff55 	bl	80004ee <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3301      	adds	r3, #1
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b04      	cmp	r3, #4
 800164e:	d9ef      	bls.n	8001630 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <prvInitialiseTaskLists+0x64>)
 8001652:	f7fe ff4c 	bl	80004ee <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001656:	480d      	ldr	r0, [pc, #52]	; (800168c <prvInitialiseTaskLists+0x68>)
 8001658:	f7fe ff49 	bl	80004ee <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <prvInitialiseTaskLists+0x6c>)
 800165e:	f7fe ff46 	bl	80004ee <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001662:	480c      	ldr	r0, [pc, #48]	; (8001694 <prvInitialiseTaskLists+0x70>)
 8001664:	f7fe ff43 	bl	80004ee <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <prvInitialiseTaskLists+0x74>)
 800166a:	f7fe ff40 	bl	80004ee <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <prvInitialiseTaskLists+0x78>)
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <prvInitialiseTaskLists+0x64>)
 8001672:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <prvInitialiseTaskLists+0x7c>)
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <prvInitialiseTaskLists+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200000dc 	.word	0x200000dc
 8001688:	20000140 	.word	0x20000140
 800168c:	20000154 	.word	0x20000154
 8001690:	20000170 	.word	0x20000170
 8001694:	20000184 	.word	0x20000184
 8001698:	2000019c 	.word	0x2000019c
 800169c:	20000168 	.word	0x20000168
 80016a0:	2000016c 	.word	0x2000016c

080016a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016aa:	e019      	b.n	80016e0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80016ac:	f000 fd1a 	bl	80020e4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <prvCheckTasksWaitingTermination+0x50>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3304      	adds	r3, #4
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ffa0 	bl	8000602 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <prvCheckTasksWaitingTermination+0x54>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <prvCheckTasksWaitingTermination+0x54>)
 80016ca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <prvCheckTasksWaitingTermination+0x58>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <prvCheckTasksWaitingTermination+0x58>)
 80016d4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80016d6:	f000 fd35 	bl	8002144 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f810 	bl	8001700 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <prvCheckTasksWaitingTermination+0x58>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1e1      	bne.n	80016ac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000184 	.word	0x20000184
 80016f8:	200001b0 	.word	0x200001b0
 80016fc:	20000198 	.word	0x20000198

08001700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fecf 	bl	80024b0 <vPortFree>
                vPortFree( pxTCB );
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fecc 	bl	80024b0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <prvResetNextTaskUnblockTime+0x30>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d104      	bne.n	8001738 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <prvResetNextTaskUnblockTime+0x34>)
 8001730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001734:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001736:	e005      	b.n	8001744 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <prvResetNextTaskUnblockTime+0x30>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <prvResetNextTaskUnblockTime+0x34>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000168 	.word	0x20000168
 8001754:	200001d0 	.word	0x200001d0

08001758 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <xTaskGetSchedulerState+0x34>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001766:	2301      	movs	r3, #1
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	e008      	b.n	800177e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <xTaskGetSchedulerState+0x38>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001774:	2302      	movs	r3, #2
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	e001      	b.n	800177e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800177e:	687b      	ldr	r3, [r7, #4]
    }
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	200001bc 	.word	0x200001bc
 8001790:	200001d8 	.word	0x200001d8

08001794 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800179e:	4b32      	ldr	r3, [pc, #200]	; (8001868 <prvAddCurrentTaskToDelayedList+0xd4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017a4:	4b31      	ldr	r3, [pc, #196]	; (800186c <prvAddCurrentTaskToDelayedList+0xd8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3304      	adds	r3, #4
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe ff29 	bl	8000602 <uxListRemove>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10b      	bne.n	80017ce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <prvAddCurrentTaskToDelayedList+0xd8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	2201      	movs	r2, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <prvAddCurrentTaskToDelayedList+0xdc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4013      	ands	r3, r2
 80017ca:	4a29      	ldr	r2, [pc, #164]	; (8001870 <prvAddCurrentTaskToDelayedList+0xdc>)
 80017cc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017d4:	d110      	bne.n	80017f8 <prvAddCurrentTaskToDelayedList+0x64>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00d      	beq.n	80017f8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <prvAddCurrentTaskToDelayedList+0xd8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	211b      	movs	r1, #27
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 feaa 	bl	800453c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80017e8:	4b20      	ldr	r3, [pc, #128]	; (800186c <prvAddCurrentTaskToDelayedList+0xd8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3304      	adds	r3, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4820      	ldr	r0, [pc, #128]	; (8001874 <prvAddCurrentTaskToDelayedList+0xe0>)
 80017f2:	f7fe fea9 	bl	8000548 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80017f6:	e032      	b.n	800185e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d20f      	bcs.n	8001830 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2104      	movs	r1, #4
 8001816:	4618      	mov	r0, r3
 8001818:	f002 fe90 	bl	800453c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <prvAddCurrentTaskToDelayedList+0xe4>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3304      	adds	r3, #4
 8001826:	4619      	mov	r1, r3
 8001828:	4610      	mov	r0, r2
 800182a:	f7fe feb1 	bl	8000590 <vListInsert>
}
 800182e:	e016      	b.n	800185e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2104      	movs	r1, #4
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fe80 	bl	800453c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <prvAddCurrentTaskToDelayedList+0xe8>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <prvAddCurrentTaskToDelayedList+0xd8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3304      	adds	r3, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4610      	mov	r0, r2
 800184a:	f7fe fea1 	bl	8000590 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <prvAddCurrentTaskToDelayedList+0xec>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	429a      	cmp	r2, r3
 8001856:	d202      	bcs.n	800185e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001858:	4a09      	ldr	r2, [pc, #36]	; (8001880 <prvAddCurrentTaskToDelayedList+0xec>)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	6013      	str	r3, [r2, #0]
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200001b4 	.word	0x200001b4
 800186c:	200000d8 	.word	0x200000d8
 8001870:	200001b8 	.word	0x200001b8
 8001874:	2000019c 	.word	0x2000019c
 8001878:	2000016c 	.word	0x2000016c
 800187c:	20000168 	.word	0x20000168
 8001880:	200001d0 	.word	0x200001d0

08001884 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800188e:	f000 fa47 	bl	8001d20 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <xTimerCreateTimerTask+0x54>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <xTimerCreateTimerTask+0x58>)
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	2302      	movs	r3, #2
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2300      	movs	r3, #0
 80018a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a8:	490d      	ldr	r1, [pc, #52]	; (80018e0 <xTimerCreateTimerTask+0x5c>)
 80018aa:	480e      	ldr	r0, [pc, #56]	; (80018e4 <xTimerCreateTimerTask+0x60>)
 80018ac:	f7ff f9ea 	bl	8000c84 <xTaskCreate>
 80018b0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10a      	bne.n	80018ce <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80018b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018bc:	f383 8811 	msr	BASEPRI, r3
 80018c0:	f3bf 8f6f 	isb	sy
 80018c4:	f3bf 8f4f 	dsb	sy
 80018c8:	603b      	str	r3, [r7, #0]
    }
 80018ca:	bf00      	nop
 80018cc:	e7fe      	b.n	80018cc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80018ce:	687b      	ldr	r3, [r7, #4]
    }
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000020c 	.word	0x2000020c
 80018dc:	20000210 	.word	0x20000210
 80018e0:	080055e4 	.word	0x080055e4
 80018e4:	0800198d 	.word	0x0800198d

080018e8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80018f4:	e008      	b.n	8001908 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	4413      	add	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	699a      	ldr	r2, [r3, #24]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	18d1      	adds	r1, r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f8dd 	bl	8001ad4 <prvInsertTimerInActiveList>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1ea      	bne.n	80018f6 <prvReloadTimer+0xe>
        }
    }
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <prvProcessExpiredTimer+0x5c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3304      	adds	r3, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe5c 	bl	8000602 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff ffc3 	bl	80018e8 <prvReloadTimer>
 8001962:	e008      	b.n	8001976 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	4798      	blx	r3
    }
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000204 	.word	0x20000204

0800198c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	4618      	mov	r0, r3
 800199a:	f000 f857 	bl	8001a4c <prvGetNextExpireTime>
 800199e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4619      	mov	r1, r3
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 f803 	bl	80019b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80019aa:	f000 f8d5 	bl	8001b58 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80019ae:	e7f1      	b.n	8001994 <prvTimerTask+0x8>

080019b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80019ba:	f7ff fb1b 	bl	8000ff4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f866 	bl	8001a94 <prvSampleTimeNow>
 80019c8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d130      	bne.n	8001a32 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <prvProcessTimerOrBlockTask+0x3c>
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d806      	bhi.n	80019ec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80019de:	f7ff fb17 	bl	8001010 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ffa1 	bl	800192c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80019ea:	e024      	b.n	8001a36 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d008      	beq.n	8001a04 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <prvProcessTimerOrBlockTask+0x90>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <prvProcessTimerOrBlockTask+0x50>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <prvProcessTimerOrBlockTask+0x52>
 8001a00:	2300      	movs	r3, #0
 8001a02:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <prvProcessTimerOrBlockTask+0x94>)
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f903 	bl	8000c1c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001a16:	f7ff fafb 	bl	8001010 <xTaskResumeAll>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10a      	bne.n	8001a36 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <prvProcessTimerOrBlockTask+0x98>)
 8001a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	f3bf 8f6f 	isb	sy
    }
 8001a30:	e001      	b.n	8001a36 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001a32:	f7ff faed 	bl	8001010 <xTaskResumeAll>
    }
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000208 	.word	0x20000208
 8001a44:	2000020c 	.word	0x2000020c
 8001a48:	e000ed04 	.word	0xe000ed04

08001a4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <prvGetNextExpireTime+0x44>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <prvGetNextExpireTime+0x16>
 8001a5e:	2201      	movs	r2, #1
 8001a60:	e000      	b.n	8001a64 <prvGetNextExpireTime+0x18>
 8001a62:	2200      	movs	r2, #0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <prvGetNextExpireTime+0x44>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	e001      	b.n	8001a80 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001a80:	68fb      	ldr	r3, [r7, #12]
    }
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000204 	.word	0x20000204

08001a94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001a9c:	f7ff fb4a 	bl	8001134 <xTaskGetTickCount>
 8001aa0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <prvSampleTimeNow+0x3c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d205      	bcs.n	8001ab8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001aac:	f000 f912 	bl	8001cd4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	e002      	b.n	8001abe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <prvSampleTimeNow+0x3c>)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    }
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000214 	.word	0x20000214

08001ad4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d812      	bhi.n	8001b20 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	1ad2      	subs	r2, r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d302      	bcc.n	8001b0e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e01b      	b.n	8001b46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <prvInsertTimerInActiveList+0x7c>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3304      	adds	r3, #4
 8001b16:	4619      	mov	r1, r3
 8001b18:	4610      	mov	r0, r2
 8001b1a:	f7fe fd39 	bl	8000590 <vListInsert>
 8001b1e:	e012      	b.n	8001b46 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d206      	bcs.n	8001b36 <prvInsertTimerInActiveList+0x62>
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d302      	bcc.n	8001b36 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001b30:	2301      	movs	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e007      	b.n	8001b46 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <prvInsertTimerInActiveList+0x80>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4610      	mov	r0, r2
 8001b42:	f7fe fd25 	bl	8000590 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001b46:	697b      	ldr	r3, [r7, #20]
    }
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000208 	.word	0x20000208
 8001b54:	20000204 	.word	0x20000204

08001b58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001b5e:	e0a6      	b.n	8001cae <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f2c0 80a2 	blt.w	8001cac <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	3304      	adds	r3, #4
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fd42 	bl	8000602 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff87 	bl	8001a94 <prvSampleTimeNow>
 8001b86:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	f200 808e 	bhi.w	8001cae <prvProcessReceivedCommands+0x156>
 8001b92:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <prvProcessReceivedCommands+0x40>)
 8001b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b98:	08001bbd 	.word	0x08001bbd
 8001b9c:	08001bbd 	.word	0x08001bbd
 8001ba0:	08001c25 	.word	0x08001c25
 8001ba4:	08001c39 	.word	0x08001c39
 8001ba8:	08001c83 	.word	0x08001c83
 8001bac:	08001bbd 	.word	0x08001bbd
 8001bb0:	08001bbd 	.word	0x08001bbd
 8001bb4:	08001c25 	.word	0x08001c25
 8001bb8:	08001c39 	.word	0x08001c39
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	18d1      	adds	r1, r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	69f8      	ldr	r0, [r7, #28]
 8001bdc:	f7ff ff7a 	bl	8001ad4 <prvInsertTimerInActiveList>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d063      	beq.n	8001cae <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d009      	beq.n	8001c08 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	69f8      	ldr	r0, [r7, #28]
 8001c02:	f7ff fe71 	bl	80018e8 <prvReloadTimer>
 8001c06:	e008      	b.n	8001c1a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	69f8      	ldr	r0, [r7, #28]
 8001c20:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001c22:	e044      	b.n	8001cae <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001c36:	e03a      	b.n	8001cae <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10a      	bne.n	8001c6e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8001c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5c:	f383 8811 	msr	BASEPRI, r3
 8001c60:	f3bf 8f6f 	isb	sy
 8001c64:	f3bf 8f4f 	dsb	sy
 8001c68:	617b      	str	r3, [r7, #20]
    }
 8001c6a:	bf00      	nop
 8001c6c:	e7fe      	b.n	8001c6c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	18d1      	adds	r1, r2, r3
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	69f8      	ldr	r0, [r7, #28]
 8001c7c:	f7ff ff2a 	bl	8001ad4 <prvInsertTimerInActiveList>
                        break;
 8001c80:	e015      	b.n	8001cae <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d103      	bne.n	8001c98 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8001c90:	69f8      	ldr	r0, [r7, #28]
 8001c92:	f000 fc0d 	bl	80024b0 <vPortFree>
 8001c96:	e00a      	b.n	8001cae <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001caa:	e000      	b.n	8001cae <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001cac:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <prvProcessReceivedCommands+0x178>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f107 0108 	add.w	r1, r7, #8
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fdc5 	bl	8000848 <xQueueReceive>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f47f af4d 	bne.w	8001b60 <prvProcessReceivedCommands+0x8>
        }
    }
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2000020c 	.word	0x2000020c

08001cd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001cda:	e009      	b.n	8001cf0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <prvSwitchTimerLists+0x44>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001ce6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fe1e 	bl	800192c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <prvSwitchTimerLists+0x44>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <prvSwitchTimerLists+0x44>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <prvSwitchTimerLists+0x48>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <prvSwitchTimerLists+0x44>)
 8001d06:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <prvSwitchTimerLists+0x48>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
    }
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000204 	.word	0x20000204
 8001d1c:	20000208 	.word	0x20000208

08001d20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001d24:	f000 f9de 	bl	80020e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <prvCheckForValidListAndQueue+0x54>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d11d      	bne.n	8001d6c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001d30:	4811      	ldr	r0, [pc, #68]	; (8001d78 <prvCheckForValidListAndQueue+0x58>)
 8001d32:	f7fe fbdc 	bl	80004ee <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001d36:	4811      	ldr	r0, [pc, #68]	; (8001d7c <prvCheckForValidListAndQueue+0x5c>)
 8001d38:	f7fe fbd9 	bl	80004ee <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <prvCheckForValidListAndQueue+0x60>)
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <prvCheckForValidListAndQueue+0x58>)
 8001d40:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <prvCheckForValidListAndQueue+0x64>)
 8001d44:	4a0d      	ldr	r2, [pc, #52]	; (8001d7c <prvCheckForValidListAndQueue+0x5c>)
 8001d46:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001d48:	2200      	movs	r2, #0
 8001d4a:	210c      	movs	r1, #12
 8001d4c:	200a      	movs	r0, #10
 8001d4e:	f7fe fd04 	bl	800075a <xQueueGenericCreate>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <prvCheckForValidListAndQueue+0x54>)
 8001d56:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <prvCheckForValidListAndQueue+0x54>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <prvCheckForValidListAndQueue+0x54>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4908      	ldr	r1, [pc, #32]	; (8001d88 <prvCheckForValidListAndQueue+0x68>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ff02 	bl	8000b70 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001d6c:	f000 f9ea 	bl	8002144 <vPortExitCritical>
    }
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	2000020c 	.word	0x2000020c
 8001d78:	200001dc 	.word	0x200001dc
 8001d7c:	200001f0 	.word	0x200001f0
 8001d80:	20000204 	.word	0x20000204
 8001d84:	20000208 	.word	0x20000208
 8001d88:	080055ec 	.word	0x080055ec

08001d8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001da4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3b04      	subs	r3, #4
 8001daa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f023 0201 	bic.w	r2, r3, #1
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3b04      	subs	r3, #4
 8001dba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	; (8001df0 <pxPortInitialiseStack+0x64>)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3b14      	subs	r3, #20
 8001dc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3b04      	subs	r3, #4
 8001dd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f06f 0202 	mvn.w	r2, #2
 8001dda:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3b20      	subs	r3, #32
 8001de0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	08001df5 	.word	0x08001df5

08001df4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <prvTaskExitError+0x54>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e06:	d00a      	beq.n	8001e1e <prvTaskExitError+0x2a>
        __asm volatile
 8001e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0c:	f383 8811 	msr	BASEPRI, r3
 8001e10:	f3bf 8f6f 	isb	sy
 8001e14:	f3bf 8f4f 	dsb	sy
 8001e18:	60fb      	str	r3, [r7, #12]
    }
 8001e1a:	bf00      	nop
 8001e1c:	e7fe      	b.n	8001e1c <prvTaskExitError+0x28>
        __asm volatile
 8001e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e22:	f383 8811 	msr	BASEPRI, r3
 8001e26:	f3bf 8f6f 	isb	sy
 8001e2a:	f3bf 8f4f 	dsb	sy
 8001e2e:	60bb      	str	r3, [r7, #8]
    }
 8001e30:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001e32:	bf00      	nop
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0fc      	beq.n	8001e34 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	00000000 	.word	0x00000000

08001e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <pxCurrentTCBConst2>)
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	6808      	ldr	r0, [r1, #0]
 8001e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e5a:	f380 8809 	msr	PSP, r0
 8001e5e:	f3bf 8f6f 	isb	sy
 8001e62:	f04f 0000 	mov.w	r0, #0
 8001e66:	f380 8811 	msr	BASEPRI, r0
 8001e6a:	4770      	bx	lr
 8001e6c:	f3af 8000 	nop.w

08001e70 <pxCurrentTCBConst2>:
 8001e70:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop

08001e78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001e78:	4808      	ldr	r0, [pc, #32]	; (8001e9c <prvPortStartFirstTask+0x24>)
 8001e7a:	6800      	ldr	r0, [r0, #0]
 8001e7c:	6800      	ldr	r0, [r0, #0]
 8001e7e:	f380 8808 	msr	MSP, r0
 8001e82:	f04f 0000 	mov.w	r0, #0
 8001e86:	f380 8814 	msr	CONTROL, r0
 8001e8a:	b662      	cpsie	i
 8001e8c:	b661      	cpsie	f
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	f3bf 8f6f 	isb	sy
 8001e96:	df00      	svc	0
 8001e98:	bf00      	nop
 8001e9a:	0000      	.short	0x0000
 8001e9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop

08001ea4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001eaa:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <xPortStartScheduler+0x120>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a46      	ldr	r2, [pc, #280]	; (8001fc8 <xPortStartScheduler+0x124>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d10a      	bne.n	8001eca <xPortStartScheduler+0x26>
        __asm volatile
 8001eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb8:	f383 8811 	msr	BASEPRI, r3
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	613b      	str	r3, [r7, #16]
    }
 8001ec6:	bf00      	nop
 8001ec8:	e7fe      	b.n	8001ec8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001eca:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <xPortStartScheduler+0x120>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a3f      	ldr	r2, [pc, #252]	; (8001fcc <xPortStartScheduler+0x128>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d10a      	bne.n	8001eea <xPortStartScheduler+0x46>
        __asm volatile
 8001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	60fb      	str	r3, [r7, #12]
    }
 8001ee6:	bf00      	nop
 8001ee8:	e7fe      	b.n	8001ee8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001eea:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <xPortStartScheduler+0x12c>)
 8001eec:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	22ff      	movs	r2, #255	; 0xff
 8001efa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <xPortStartScheduler+0x130>)
 8001f10:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001f12:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <xPortStartScheduler+0x134>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f18:	e009      	b.n	8001f2e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <xPortStartScheduler+0x134>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	4a2d      	ldr	r2, [pc, #180]	; (8001fd8 <xPortStartScheduler+0x134>)
 8001f22:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f36:	2b80      	cmp	r3, #128	; 0x80
 8001f38:	d0ef      	beq.n	8001f1a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001f3a:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <xPortStartScheduler+0x134>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d00a      	beq.n	8001f5c <xPortStartScheduler+0xb8>
        __asm volatile
 8001f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	60bb      	str	r3, [r7, #8]
    }
 8001f58:	bf00      	nop
 8001f5a:	e7fe      	b.n	8001f5a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <xPortStartScheduler+0x134>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <xPortStartScheduler+0x134>)
 8001f64:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <xPortStartScheduler+0x134>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f6e:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <xPortStartScheduler+0x134>)
 8001f70:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <xPortStartScheduler+0x138>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <xPortStartScheduler+0x138>)
 8001f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <xPortStartScheduler+0x138>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <xPortStartScheduler+0x138>)
 8001f8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001f90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001f92:	f000 f963 	bl	800225c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <xPortStartScheduler+0x13c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001f9c:	f000 f982 	bl	80022a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <xPortStartScheduler+0x140>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <xPortStartScheduler+0x140>)
 8001fa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001faa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001fac:	f7ff ff64 	bl	8001e78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001fb0:	f7ff f97c 	bl	80012ac <vTaskSwitchContext>
    prvTaskExitError();
 8001fb4:	f7ff ff1e 	bl	8001df4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00
 8001fc8:	410fc271 	.word	0x410fc271
 8001fcc:	410fc270 	.word	0x410fc270
 8001fd0:	e000e400 	.word	0xe000e400
 8001fd4:	20000218 	.word	0x20000218
 8001fd8:	2000021c 	.word	0x2000021c
 8001fdc:	e000ed20 	.word	0xe000ed20
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	e000ef34 	.word	0xe000ef34

08001fe8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001fee:	4b37      	ldr	r3, [pc, #220]	; (80020cc <vInitPrioGroupValue+0xe4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a37      	ldr	r2, [pc, #220]	; (80020d0 <vInitPrioGroupValue+0xe8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d10a      	bne.n	800200e <vInitPrioGroupValue+0x26>
        __asm volatile
 8001ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffc:	f383 8811 	msr	BASEPRI, r3
 8002000:	f3bf 8f6f 	isb	sy
 8002004:	f3bf 8f4f 	dsb	sy
 8002008:	613b      	str	r3, [r7, #16]
    }
 800200a:	bf00      	nop
 800200c:	e7fe      	b.n	800200c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800200e:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <vInitPrioGroupValue+0xe4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a30      	ldr	r2, [pc, #192]	; (80020d4 <vInitPrioGroupValue+0xec>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d10a      	bne.n	800202e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800201c:	f383 8811 	msr	BASEPRI, r3
 8002020:	f3bf 8f6f 	isb	sy
 8002024:	f3bf 8f4f 	dsb	sy
 8002028:	60fb      	str	r3, [r7, #12]
    }
 800202a:	bf00      	nop
 800202c:	e7fe      	b.n	800202c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800202e:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <vInitPrioGroupValue+0xf0>)
 8002030:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	22ff      	movs	r2, #255	; 0xff
 800203e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b22      	ldr	r3, [pc, #136]	; (80020dc <vInitPrioGroupValue+0xf4>)
 8002054:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <vInitPrioGroupValue+0xf8>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800205c:	e009      	b.n	8002072 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <vInitPrioGroupValue+0xf8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3b01      	subs	r3, #1
 8002064:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <vInitPrioGroupValue+0xf8>)
 8002066:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	b2db      	uxtb	r3, r3
 8002070:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207a:	2b80      	cmp	r3, #128	; 0x80
 800207c:	d0ef      	beq.n	800205e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <vInitPrioGroupValue+0xf8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	d00a      	beq.n	80020a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208e:	f383 8811 	msr	BASEPRI, r3
 8002092:	f3bf 8f6f 	isb	sy
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	60bb      	str	r3, [r7, #8]
    }
 800209c:	bf00      	nop
 800209e:	e7fe      	b.n	800209e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <vInitPrioGroupValue+0xf8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <vInitPrioGroupValue+0xf8>)
 80020a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <vInitPrioGroupValue+0xf8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <vInitPrioGroupValue+0xf8>)
 80020b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80020be:	bf00      	nop
 80020c0:	371c      	adds	r7, #28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00
 80020d0:	410fc271 	.word	0x410fc271
 80020d4:	410fc270 	.word	0x410fc270
 80020d8:	e000e400 	.word	0xe000e400
 80020dc:	20000218 	.word	0x20000218
 80020e0:	2000021c 	.word	0x2000021c

080020e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
        __asm volatile
 80020ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	607b      	str	r3, [r7, #4]
    }
 80020fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <vPortEnterCritical+0x58>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <vPortEnterCritical+0x58>)
 8002106:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <vPortEnterCritical+0x58>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d10f      	bne.n	8002130 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <vPortEnterCritical+0x5c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <vPortEnterCritical+0x4c>
        __asm volatile
 800211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211e:	f383 8811 	msr	BASEPRI, r3
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	603b      	str	r3, [r7, #0]
    }
 800212c:	bf00      	nop
 800212e:	e7fe      	b.n	800212e <vPortEnterCritical+0x4a>
    }
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	20000008 	.word	0x20000008
 8002140:	e000ed04 	.word	0xe000ed04

08002144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <vPortExitCritical+0x50>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <vPortExitCritical+0x24>
        __asm volatile
 8002152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	607b      	str	r3, [r7, #4]
    }
 8002164:	bf00      	nop
 8002166:	e7fe      	b.n	8002166 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <vPortExitCritical+0x50>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3b01      	subs	r3, #1
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <vPortExitCritical+0x50>)
 8002170:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <vPortExitCritical+0x50>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d105      	bne.n	8002186 <vPortExitCritical+0x42>
 800217a:	2300      	movs	r3, #0
 800217c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002184:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000008 	.word	0x20000008
	...

080021a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80021a0:	f3ef 8009 	mrs	r0, PSP
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <pxCurrentTCBConst>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	f01e 0f10 	tst.w	lr, #16
 80021b0:	bf08      	it	eq
 80021b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80021b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ba:	6010      	str	r0, [r2, #0]
 80021bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80021c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80021c4:	f380 8811 	msr	BASEPRI, r0
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	f7ff f86c 	bl	80012ac <vTaskSwitchContext>
 80021d4:	f04f 0000 	mov.w	r0, #0
 80021d8:	f380 8811 	msr	BASEPRI, r0
 80021dc:	bc09      	pop	{r0, r3}
 80021de:	6819      	ldr	r1, [r3, #0]
 80021e0:	6808      	ldr	r0, [r1, #0]
 80021e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e6:	f01e 0f10 	tst.w	lr, #16
 80021ea:	bf08      	it	eq
 80021ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80021f0:	f380 8809 	msr	PSP, r0
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	f3af 8000 	nop.w

08002200 <pxCurrentTCBConst>:
 8002200:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop

08002208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
        __asm volatile
 800220e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	607b      	str	r3, [r7, #4]
    }
 8002220:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002222:	f002 f82f 	bl	8004284 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002226:	f7fe ffa7 	bl	8001178 <xTaskIncrementTick>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002230:	f002 f886 	bl	8004340 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <SysTick_Handler+0x50>)
 8002236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e001      	b.n	8002242 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800223e:	f002 f863 	bl	8004308 <SEGGER_SYSVIEW_RecordExitISR>
 8002242:	2300      	movs	r3, #0
 8002244:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f383 8811 	msr	BASEPRI, r3
    }
 800224c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000ed04 	.word	0xe000ed04

0800225c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <vPortSetupTimerInterrupt+0x34>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <vPortSetupTimerInterrupt+0x38>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <vPortSetupTimerInterrupt+0x3c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <vPortSetupTimerInterrupt+0x40>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	099b      	lsrs	r3, r3, #6
 8002278:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <vPortSetupTimerInterrupt+0x44>)
 800227a:	3b01      	subs	r3, #1
 800227c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <vPortSetupTimerInterrupt+0x34>)
 8002280:	2207      	movs	r2, #7
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e010 	.word	0xe000e010
 8002294:	e000e018 	.word	0xe000e018
 8002298:	20000000 	.word	0x20000000
 800229c:	10624dd3 	.word	0x10624dd3
 80022a0:	e000e014 	.word	0xe000e014

080022a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80022a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80022b4 <vPortEnableVFP+0x10>
 80022a8:	6801      	ldr	r1, [r0, #0]
 80022aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80022ae:	6001      	str	r1, [r0, #0]
 80022b0:	4770      	bx	lr
 80022b2:	0000      	.short	0x0000
 80022b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop

080022bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80022c2:	f3ef 8305 	mrs	r3, IPSR
 80022c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b0f      	cmp	r3, #15
 80022cc:	d914      	bls.n	80022f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <vPortValidateInterruptPriority+0x70>)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <vPortValidateInterruptPriority+0x74>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	7afa      	ldrb	r2, [r7, #11]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d20a      	bcs.n	80022f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80022e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e6:	f383 8811 	msr	BASEPRI, r3
 80022ea:	f3bf 8f6f 	isb	sy
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	607b      	str	r3, [r7, #4]
    }
 80022f4:	bf00      	nop
 80022f6:	e7fe      	b.n	80022f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <vPortValidateInterruptPriority+0x78>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <vPortValidateInterruptPriority+0x7c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d90a      	bls.n	800231e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	603b      	str	r3, [r7, #0]
    }
 800231a:	bf00      	nop
 800231c:	e7fe      	b.n	800231c <vPortValidateInterruptPriority+0x60>
    }
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e3f0 	.word	0xe000e3f0
 8002330:	20000218 	.word	0x20000218
 8002334:	e000ed0c 	.word	0xe000ed0c
 8002338:	2000021c 	.word	0x2000021c

0800233c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002348:	f7fe fe54 	bl	8000ff4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800234c:	4b53      	ldr	r3, [pc, #332]	; (800249c <pvPortMalloc+0x160>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002354:	f000 f908 	bl	8002568 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d012      	beq.n	8002384 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800235e:	2208      	movs	r2, #8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	3308      	adds	r3, #8
 800236a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	43db      	mvns	r3, r3
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d804      	bhi.n	8002380 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	4413      	add	r3, r2
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	e001      	b.n	8002384 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db70      	blt.n	800246c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d06d      	beq.n	800246c <pvPortMalloc+0x130>
 8002390:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <pvPortMalloc+0x164>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	d868      	bhi.n	800246c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800239a:	4b42      	ldr	r3, [pc, #264]	; (80024a4 <pvPortMalloc+0x168>)
 800239c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <pvPortMalloc+0x168>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023a4:	e004      	b.n	80023b0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d903      	bls.n	80023c2 <pvPortMalloc+0x86>
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f1      	bne.n	80023a6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80023c2:	4b36      	ldr	r3, [pc, #216]	; (800249c <pvPortMalloc+0x160>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d04f      	beq.n	800246c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2208      	movs	r2, #8
 80023d2:	4413      	add	r3, r2
 80023d4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	1ad2      	subs	r2, r2, r3
 80023e6:	2308      	movs	r3, #8
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d91f      	bls.n	800242e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <pvPortMalloc+0xda>
        __asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	613b      	str	r3, [r7, #16]
    }
 8002412:	bf00      	nop
 8002414:	e7fe      	b.n	8002414 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	1ad2      	subs	r2, r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002428:	6978      	ldr	r0, [r7, #20]
 800242a:	f000 f8f9 	bl	8002620 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <pvPortMalloc+0x164>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <pvPortMalloc+0x164>)
 800243a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <pvPortMalloc+0x164>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <pvPortMalloc+0x16c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d203      	bcs.n	8002450 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <pvPortMalloc+0x164>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a16      	ldr	r2, [pc, #88]	; (80024a8 <pvPortMalloc+0x16c>)
 800244e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <pvPortMalloc+0x170>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	4a10      	ldr	r2, [pc, #64]	; (80024ac <pvPortMalloc+0x170>)
 800246a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800246c:	f7fe fdd0 	bl	8001010 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <pvPortMalloc+0x154>
        __asm volatile
 800247a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247e:	f383 8811 	msr	BASEPRI, r3
 8002482:	f3bf 8f6f 	isb	sy
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	60fb      	str	r3, [r7, #12]
    }
 800248c:	bf00      	nop
 800248e:	e7fe      	b.n	800248e <pvPortMalloc+0x152>
    return pvReturn;
 8002490:	69fb      	ldr	r3, [r7, #28]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3728      	adds	r7, #40	; 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20012e28 	.word	0x20012e28
 80024a0:	20012e2c 	.word	0x20012e2c
 80024a4:	20012e20 	.word	0x20012e20
 80024a8:	20012e30 	.word	0x20012e30
 80024ac:	20012e34 	.word	0x20012e34

080024b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d049      	beq.n	8002556 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80024c2:	2308      	movs	r3, #8
 80024c4:	425b      	negs	r3, r3
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4413      	add	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db0a      	blt.n	80024ee <vPortFree+0x3e>
        __asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	60fb      	str	r3, [r7, #12]
    }
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <vPortFree+0x5c>
        __asm volatile
 80024f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fa:	f383 8811 	msr	BASEPRI, r3
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f3bf 8f4f 	dsb	sy
 8002506:	60bb      	str	r3, [r7, #8]
    }
 8002508:	bf00      	nop
 800250a:	e7fe      	b.n	800250a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	0fdb      	lsrs	r3, r3, #31
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01c      	beq.n	8002556 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d118      	bne.n	8002556 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002530:	f7fe fd60 	bl	8000ff4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <vPortFree+0xb0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4413      	add	r3, r2
 800253e:	4a08      	ldr	r2, [pc, #32]	; (8002560 <vPortFree+0xb0>)
 8002540:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002542:	6938      	ldr	r0, [r7, #16]
 8002544:	f000 f86c 	bl	8002620 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <vPortFree+0xb4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <vPortFree+0xb4>)
 8002550:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002552:	f7fe fd5d 	bl	8001010 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20012e2c 	.word	0x20012e2c
 8002564:	20012e38 	.word	0x20012e38

08002568 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800256e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002572:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <prvHeapInit+0xa4>)
 8002576:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3307      	adds	r3, #7
 8002586:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0307 	bic.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	4a1d      	ldr	r2, [pc, #116]	; (800260c <prvHeapInit+0xa4>)
 8002598:	4413      	add	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80025a0:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <prvHeapInit+0xa8>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <prvHeapInit+0xa8>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4413      	add	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80025b4:	2208      	movs	r2, #8
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0307 	bic.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <prvHeapInit+0xac>)
 80025c8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <prvHeapInit+0xac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <prvHeapInit+0xac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	1ad2      	subs	r2, r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <prvHeapInit+0xac>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a08      	ldr	r2, [pc, #32]	; (8002618 <prvHeapInit+0xb0>)
 80025f6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <prvHeapInit+0xb4>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	20000220 	.word	0x20000220
 8002610:	20012e20 	.word	0x20012e20
 8002614:	20012e28 	.word	0x20012e28
 8002618:	20012e30 	.word	0x20012e30
 800261c:	20012e2c 	.word	0x20012e2c

08002620 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002628:	4b28      	ldr	r3, [pc, #160]	; (80026cc <prvInsertBlockIntoFreeList+0xac>)
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e002      	b.n	8002634 <prvInsertBlockIntoFreeList+0x14>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	429a      	cmp	r2, r3
 800263c:	d8f7      	bhi.n	800262e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	4413      	add	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	d108      	bne.n	8002662 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	441a      	add	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	441a      	add	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d118      	bne.n	80026a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <prvInsertBlockIntoFreeList+0xb0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d00d      	beq.n	800269e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	441a      	add	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e008      	b.n	80026b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <prvInsertBlockIntoFreeList+0xb0>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e003      	b.n	80026b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d002      	beq.n	80026be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20012e20 	.word	0x20012e20
 80026d0:	20012e28 	.word	0x20012e28

080026d4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80026d8:	4803      	ldr	r0, [pc, #12]	; (80026e8 <_cbSendSystemDesc+0x14>)
 80026da:	f001 fd7d 	bl	80041d8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80026de:	4803      	ldr	r0, [pc, #12]	; (80026ec <_cbSendSystemDesc+0x18>)
 80026e0:	f001 fd7a 	bl	80041d8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	080055f4 	.word	0x080055f4
 80026ec:	08005620 	.word	0x08005620

080026f0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <SEGGER_SYSVIEW_Conf+0x20>)
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <SEGGER_SYSVIEW_Conf+0x20>)
 80026fa:	6819      	ldr	r1, [r3, #0]
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SEGGER_SYSVIEW_Conf+0x24>)
 80026fe:	4a06      	ldr	r2, [pc, #24]	; (8002718 <SEGGER_SYSVIEW_Conf+0x28>)
 8002700:	f001 f8e6 	bl	80038d0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002704:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002708:	f001 f926 	bl	8003958 <SEGGER_SYSVIEW_SetRAMBase>
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000000 	.word	0x20000000
 8002714:	080026d5 	.word	0x080026d5
 8002718:	080056a8 	.word	0x080056a8

0800271c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800271c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271e:	b085      	sub	sp, #20
 8002720:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	e033      	b.n	8002790 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002728:	491e      	ldr	r1, [pc, #120]	; (80027a4 <_cbSendTaskList+0x88>)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	491a      	ldr	r1, [pc, #104]	; (80027a4 <_cbSendTaskList+0x88>)
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3304      	adds	r3, #4
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	4c16      	ldr	r4, [pc, #88]	; (80027a4 <_cbSendTaskList+0x88>)
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4423      	add	r3, r4
 8002758:	3308      	adds	r3, #8
 800275a:	681c      	ldr	r4, [r3, #0]
 800275c:	4d11      	ldr	r5, [pc, #68]	; (80027a4 <_cbSendTaskList+0x88>)
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	442b      	add	r3, r5
 800276a:	330c      	adds	r3, #12
 800276c:	681d      	ldr	r5, [r3, #0]
 800276e:	4e0d      	ldr	r6, [pc, #52]	; (80027a4 <_cbSendTaskList+0x88>)
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4433      	add	r3, r6
 800277c:	3310      	adds	r3, #16
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	462b      	mov	r3, r5
 8002784:	4622      	mov	r2, r4
 8002786:	f000 f8bd 	bl	8002904 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3301      	adds	r3, #1
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <_cbSendTaskList+0x8c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	d3c6      	bcc.n	8002728 <_cbSendTaskList+0xc>
  }
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a4:	20012e3c 	.word	0x20012e3c
 80027a8:	20012edc 	.word	0x20012edc

080027ac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80027ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80027b4:	f7fe fcce 	bl	8001154 <xTaskGetTickCountFromISR>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2200      	movs	r2, #0
 80027bc:	469a      	mov	sl, r3
 80027be:	4693      	mov	fp, r2
 80027c0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80027c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	f04f 0a00 	mov.w	sl, #0
 80027d0:	f04f 0b00 	mov.w	fp, #0
 80027d4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80027d8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80027dc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80027e0:	4652      	mov	r2, sl
 80027e2:	465b      	mov	r3, fp
 80027e4:	1a14      	subs	r4, r2, r0
 80027e6:	eb63 0501 	sbc.w	r5, r3, r1
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	00ab      	lsls	r3, r5, #2
 80027f4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80027f8:	00a2      	lsls	r2, r4, #2
 80027fa:	4614      	mov	r4, r2
 80027fc:	461d      	mov	r5, r3
 80027fe:	eb14 0800 	adds.w	r8, r4, r0
 8002802:	eb45 0901 	adc.w	r9, r5, r1
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800281a:	4690      	mov	r8, r2
 800281c:	4699      	mov	r9, r3
 800281e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002822:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002834 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002842:	2205      	movs	r2, #5
 8002844:	492b      	ldr	r1, [pc, #172]	; (80028f4 <SYSVIEW_AddTask+0xc0>)
 8002846:	68b8      	ldr	r0, [r7, #8]
 8002848:	f002 f986 	bl	8004b58 <memcmp>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d04b      	beq.n	80028ea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002852:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <SYSVIEW_AddTask+0xc4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b07      	cmp	r3, #7
 8002858:	d903      	bls.n	8002862 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800285a:	4828      	ldr	r0, [pc, #160]	; (80028fc <SYSVIEW_AddTask+0xc8>)
 800285c:	f001 ffba 	bl	80047d4 <SEGGER_SYSVIEW_Warn>
    return;
 8002860:	e044      	b.n	80028ec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002862:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <SYSVIEW_AddTask+0xc4>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4926      	ldr	r1, [pc, #152]	; (8002900 <SYSVIEW_AddTask+0xcc>)
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <SYSVIEW_AddTask+0xc4>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4921      	ldr	r1, [pc, #132]	; (8002900 <SYSVIEW_AddTask+0xcc>)
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	3304      	adds	r3, #4
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <SYSVIEW_AddTask+0xc4>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	491b      	ldr	r1, [pc, #108]	; (8002900 <SYSVIEW_AddTask+0xcc>)
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	3308      	adds	r3, #8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <SYSVIEW_AddTask+0xc4>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4916      	ldr	r1, [pc, #88]	; (8002900 <SYSVIEW_AddTask+0xcc>)
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	330c      	adds	r3, #12
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <SYSVIEW_AddTask+0xc4>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4910      	ldr	r1, [pc, #64]	; (8002900 <SYSVIEW_AddTask+0xcc>)
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3310      	adds	r3, #16
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <SYSVIEW_AddTask+0xc4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	4a08      	ldr	r2, [pc, #32]	; (80028f8 <SYSVIEW_AddTask+0xc4>)
 80028d6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f80e 	bl	8002904 <SYSVIEW_SendTaskInfo>
 80028e8:	e000      	b.n	80028ec <SYSVIEW_AddTask+0xb8>
    return;
 80028ea:	bf00      	nop

}
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	08005630 	.word	0x08005630
 80028f8:	20012edc 	.word	0x20012edc
 80028fc:	08005638 	.word	0x08005638
 8002900:	20012e3c 	.word	0x20012e3c

08002904 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	2214      	movs	r2, #20
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f002 f93a 	bl	8004b94 <memset>
  TaskInfo.TaskID     = TaskID;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4618      	mov	r0, r3
 800293a:	f001 fb55 	bl	8003fe8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800293e:	bf00      	nop
 8002940:	3728      	adds	r7, #40	; 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4907      	ldr	r1, [pc, #28]	; (8002980 <__NVIC_EnableIRQ+0x38>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	; (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80029de:	f001 ff55 	bl	800488c <SEGGER_SYSVIEW_IsStarted>
 80029e2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80029ea:	f001 f981 	bl	8003cf0 <SEGGER_SYSVIEW_Start>
  }
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <_cbOnUARTRx+0x3c>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d806      	bhi.n	8002a18 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <_cbOnUARTRx+0x3c>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <_cbOnUARTRx+0x3c>)
 8002a14:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002a16:	e009      	b.n	8002a2c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002a18:	f7ff ffde 	bl	80029d8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <_cbOnUARTRx+0x3c>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	2201      	movs	r2, #1
 8002a26:	4619      	mov	r1, r3
 8002a28:	f000 fbea 	bl	8003200 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002a2c:	bf00      	nop
}
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	2000000c 	.word	0x2000000c

08002a38 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8002a40:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <_cbOnUARTTx+0x5c>)
 8002a42:	785b      	ldrb	r3, [r3, #1]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d80f      	bhi.n	8002a68 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <_cbOnUARTTx+0x5c>)
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <_cbOnUARTTx+0x60>)
 8002a50:	5c9a      	ldrb	r2, [r3, r2]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <_cbOnUARTTx+0x5c>)
 8002a58:	785b      	ldrb	r3, [r3, #1]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <_cbOnUARTTx+0x5c>)
 8002a60:	705a      	strb	r2, [r3, #1]
    r = 1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
    goto Done;
 8002a66:	e00f      	b.n	8002a88 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <_cbOnUARTTx+0x5c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fa19 	bl	8002ea8 <SEGGER_RTT_ReadUpBufferNoLock>
 8002a76:	4603      	mov	r3, r0
 8002a78:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	da02      	bge.n	8002a86 <_cbOnUARTTx+0x4e>
    r = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e000      	b.n	8002a88 <_cbOnUARTTx+0x50>
  }
Done:
 8002a86:	bf00      	nop
  return r;
 8002a88:	68fb      	ldr	r3, [r7, #12]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000000c 	.word	0x2000000c
 8002a98:	080056b0 	.word	0x080056b0

08002a9c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <SEGGER_UART_init+0x1c>)
 8002aa6:	4905      	ldr	r1, [pc, #20]	; (8002abc <SEGGER_UART_init+0x20>)
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f863 	bl	8002b74 <HIF_UART_Init>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	080029f9 	.word	0x080029f9
 8002abc:	08002a39 	.word	0x08002a39

08002ac0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <USART2_IRQHandler+0x80>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d011      	beq.n	8002afa <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <USART2_IRQHandler+0x84>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 030b 	and.w	r3, r3, #11
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d108      	bne.n	8002afa <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002ae8:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <USART2_IRQHandler+0x88>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002af0:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <USART2_IRQHandler+0x88>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	79fa      	ldrb	r2, [r7, #7]
 8002af6:	4610      	mov	r0, r2
 8002af8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01a      	beq.n	8002b3a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <USART2_IRQHandler+0x8c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d015      	beq.n	8002b38 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <USART2_IRQHandler+0x8c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1dfa      	adds	r2, r7, #7
 8002b12:	4610      	mov	r0, r2
 8002b14:	4798      	blx	r3
 8002b16:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <USART2_IRQHandler+0x90>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <USART2_IRQHandler+0x90>)
 8002b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e006      	b.n	8002b3a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <USART2_IRQHandler+0x80>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8002b30:	79fa      	ldrb	r2, [r7, #7]
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <USART2_IRQHandler+0x84>)
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e000      	b.n	8002b3a <USART2_IRQHandler+0x7a>
      return;
 8002b38:	bf00      	nop
    }
  }
}
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40004400 	.word	0x40004400
 8002b44:	40004404 	.word	0x40004404
 8002b48:	20012ee0 	.word	0x20012ee0
 8002b4c:	20012ee4 	.word	0x20012ee4
 8002b50:	4000440c 	.word	0x4000440c

08002b54 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	4000440c 	.word	0x4000440c

08002b74 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8002b80:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <HIF_UART_Init+0xc8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2d      	ldr	r2, [pc, #180]	; (8002c3c <HIF_UART_Init+0xc8>)
 8002b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <HIF_UART_Init+0xcc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <HIF_UART_Init+0xcc>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HIF_UART_Init+0xd0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8002bac:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8002bae:	4a25      	ldr	r2, [pc, #148]	; (8002c44 <HIF_UART_Init+0xd0>)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8002bb4:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HIF_UART_Init+0xd4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bc0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002bc8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8002bca:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HIF_UART_Init+0xd4>)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <HIF_UART_Init+0xd8>)
 8002bd2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8002bd6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <HIF_UART_Init+0xdc>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8002bde:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HIF_UART_Init+0xe0>)
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8002bea:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <HIF_UART_Init+0xe4>)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c02:	d302      	bcc.n	8002c0a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002c04:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002c08:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	4a11      	ldr	r2, [pc, #68]	; (8002c5c <HIF_UART_Init+0xe8>)
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8002c1a:	4a11      	ldr	r2, [pc, #68]	; (8002c60 <HIF_UART_Init+0xec>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8002c20:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <HIF_UART_Init+0xf0>)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8002c26:	2106      	movs	r1, #6
 8002c28:	2026      	movs	r0, #38	; 0x26
 8002c2a:	f7ff feab 	bl	8002984 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8002c2e:	2026      	movs	r0, #38	; 0x26
 8002c30:	f7ff fe8a 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002c34:	bf00      	nop
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40023840 	.word	0x40023840
 8002c40:	40023830 	.word	0x40023830
 8002c44:	40020020 	.word	0x40020020
 8002c48:	40020000 	.word	0x40020000
 8002c4c:	4000440c 	.word	0x4000440c
 8002c50:	40004410 	.word	0x40004410
 8002c54:	40004414 	.word	0x40004414
 8002c58:	05f5e100 	.word	0x05f5e100
 8002c5c:	40004408 	.word	0x40004408
 8002c60:	20012ee0 	.word	0x20012ee0
 8002c64:	20012ee4 	.word	0x20012ee4

08002c68 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <_DoInit+0x98>)
 8002c70:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2203      	movs	r2, #3
 8002c76:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a20      	ldr	r2, [pc, #128]	; (8002d04 <_DoInit+0x9c>)
 8002c82:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <_DoInit+0xa0>)
 8002c88:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c90:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <_DoInit+0x9c>)
 8002ca8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <_DoInit+0xa4>)
 8002cae:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3307      	adds	r3, #7
 8002ccc:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <_DoInit+0xa8>)
 8002cce:	6810      	ldr	r0, [r2, #0]
 8002cd0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002cd2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <_DoInit+0xac>)
 8002cda:	6810      	ldr	r0, [r2, #0]
 8002cdc:	6018      	str	r0, [r3, #0]
 8002cde:	8891      	ldrh	r1, [r2, #4]
 8002ce0:	7992      	ldrb	r2, [r2, #6]
 8002ce2:	8099      	strh	r1, [r3, #4]
 8002ce4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002ce6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002cf0:	f3bf 8f5f 	dmb	sy
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	20012ee8 	.word	0x20012ee8
 8002d04:	08005688 	.word	0x08005688
 8002d08:	20012f90 	.word	0x20012f90
 8002d0c:	20013390 	.word	0x20013390
 8002d10:	08005694 	.word	0x08005694
 8002d14:	08005698 	.word	0x08005698

08002d18 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002d24:	2300      	movs	r3, #0
 8002d26:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d905      	bls.n	8002d48 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
 8002d46:	e007      	b.n	8002d58 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	69b9      	ldr	r1, [r7, #24]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	1acb      	subs	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3b01      	subs	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	4293      	cmp	r3, r2
 8002d64:	bf28      	it	cs
 8002d66:	4613      	movcs	r3, r2
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bf28      	it	cs
 8002d72:	4613      	movcs	r3, r2
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	6978      	ldr	r0, [r7, #20]
 8002d86:	f001 fef7 	bl	8004b78 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002d8a:	6a3a      	ldr	r2, [r7, #32]
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	4413      	add	r3, r2
 8002d90:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	4413      	add	r3, r2
 8002d98:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	4413      	add	r3, r2
 8002da8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d101      	bne.n	8002db8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002db8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1b2      	bne.n	8002d2e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3728      	adds	r7, #40	; 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b088      	sub	sp, #32
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d911      	bls.n	8002e1a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	6938      	ldr	r0, [r7, #16]
 8002e06:	f001 feb7 	bl	8004b78 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002e0a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002e18:	e01f      	b.n	8002e5a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	6938      	ldr	r0, [r7, #16]
 8002e2e:	f001 fea3 	bl	8004b78 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4413      	add	r3, r2
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6938      	ldr	r0, [r7, #16]
 8002e4c:	f001 fe94 	bl	8004b78 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002e50:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	60da      	str	r2, [r3, #12]
}
 8002e5a:	bf00      	nop
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002e62:	b480      	push	{r7}
 8002e64:	b087      	sub	sp, #28
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d808      	bhi.n	8002e90 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad2      	subs	r2, r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e004      	b.n	8002e9a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002e9a:	697b      	ldr	r3, [r7, #20]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	; 0x30
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8002eb4:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8002ec2:	f7ff fed1 	bl	8002c68 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4a37      	ldr	r2, [pc, #220]	; (8002fb0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002ed4:	4413      	add	r3, r2
 8002ed6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d92b      	bls.n	8002f4c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4293      	cmp	r3, r2
 8002f04:	bf28      	it	cs
 8002f06:	4613      	movcs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	4413      	add	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	6939      	ldr	r1, [r7, #16]
 8002f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f1a:	f001 fe2d 	bl	8004b78 <memcpy>
    NumBytesRead += NumBytesRem;
 8002f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	4413      	add	r3, r2
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d101      	bne.n	8002f4c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	bf28      	it	cs
 8002f5c:	4613      	movcs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d019      	beq.n	8002f9a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	4413      	add	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	6939      	ldr	r1, [r7, #16]
 8002f74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f76:	f001 fdff 	bl	8004b78 <memcpy>
    NumBytesRead += NumBytesRem;
 8002f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	4413      	add	r3, r2
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	4413      	add	r3, r2
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	4413      	add	r3, r2
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3730      	adds	r7, #48	; 0x30
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20012ee8 	.word	0x20012ee8

08002fb4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002fc0:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <SEGGER_RTT_ReadNoLock+0x108>)
 8002fc2:	623b      	str	r3, [r7, #32]
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <SEGGER_RTT_ReadNoLock+0x1e>
 8002fce:	f7ff fe4b 	bl	8002c68 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	3360      	adds	r3, #96	; 0x60
 8002fde:	4a37      	ldr	r2, [pc, #220]	; (80030bc <SEGGER_RTT_ReadNoLock+0x108>)
 8002fe0:	4413      	add	r3, r2
 8002fe2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d92b      	bls.n	8003058 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4293      	cmp	r3, r2
 8003010:	bf28      	it	cs
 8003012:	4613      	movcs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	4413      	add	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	6939      	ldr	r1, [r7, #16]
 8003024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003026:	f001 fda7 	bl	8004b78 <memcpy>
    NumBytesRead += NumBytesRem;
 800302a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	4413      	add	r3, r2
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	4413      	add	r3, r2
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	4413      	add	r3, r2
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003050:	429a      	cmp	r2, r3
 8003052:	d101      	bne.n	8003058 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003054:	2300      	movs	r3, #0
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4293      	cmp	r3, r2
 8003066:	bf28      	it	cs
 8003068:	4613      	movcs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d019      	beq.n	80030a6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	4413      	add	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	6939      	ldr	r1, [r7, #16]
 8003080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003082:	f001 fd79 	bl	8004b78 <memcpy>
    NumBytesRead += NumBytesRem;
 8003086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	4413      	add	r3, r2
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	4413      	add	r3, r2
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800309e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	4413      	add	r3, r2
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030b0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3730      	adds	r7, #48	; 0x30
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20012ee8 	.word	0x20012ee8

080030c0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	3360      	adds	r3, #96	; 0x60
 80030dc:	4a1f      	ldr	r2, [pc, #124]	; (800315c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80030de:	4413      	add	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d029      	beq.n	800313e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d82e      	bhi.n	800314c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d013      	beq.n	800311e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80030f6:	e029      	b.n	800314c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80030f8:	6978      	ldr	r0, [r7, #20]
 80030fa:	f7ff feb2 	bl	8002e62 <_GetAvailWriteSpace>
 80030fe:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	d202      	bcs.n	800310e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800310c:	e021      	b.n	8003152 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	69b9      	ldr	r1, [r7, #24]
 8003116:	6978      	ldr	r0, [r7, #20]
 8003118:	f7ff fe5b 	bl	8002dd2 <_WriteNoCheck>
    break;
 800311c:	e019      	b.n	8003152 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800311e:	6978      	ldr	r0, [r7, #20]
 8003120:	f7ff fe9f 	bl	8002e62 <_GetAvailWriteSpace>
 8003124:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4293      	cmp	r3, r2
 800312c:	bf28      	it	cs
 800312e:	4613      	movcs	r3, r2
 8003130:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	69b9      	ldr	r1, [r7, #24]
 8003136:	6978      	ldr	r0, [r7, #20]
 8003138:	f7ff fe4b 	bl	8002dd2 <_WriteNoCheck>
    break;
 800313c:	e009      	b.n	8003152 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	69b9      	ldr	r1, [r7, #24]
 8003142:	6978      	ldr	r0, [r7, #20]
 8003144:	f7ff fde8 	bl	8002d18 <_WriteBlocking>
 8003148:	61f8      	str	r0, [r7, #28]
    break;
 800314a:	e002      	b.n	8003152 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
    break;
 8003150:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003152:	69fb      	ldr	r3, [r7, #28]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20012ee8 	.word	0x20012ee8

08003160 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <SEGGER_RTT_WriteNoLock+0x9c>)
 800317e:	4413      	add	r3, r2
 8003180:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d029      	beq.n	80031de <SEGGER_RTT_WriteNoLock+0x7e>
 800318a:	2b02      	cmp	r3, #2
 800318c:	d82e      	bhi.n	80031ec <SEGGER_RTT_WriteNoLock+0x8c>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <SEGGER_RTT_WriteNoLock+0x38>
 8003192:	2b01      	cmp	r3, #1
 8003194:	d013      	beq.n	80031be <SEGGER_RTT_WriteNoLock+0x5e>
 8003196:	e029      	b.n	80031ec <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003198:	6978      	ldr	r0, [r7, #20]
 800319a:	f7ff fe62 	bl	8002e62 <_GetAvailWriteSpace>
 800319e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d202      	bcs.n	80031ae <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80031ac:	e021      	b.n	80031f2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	69b9      	ldr	r1, [r7, #24]
 80031b6:	6978      	ldr	r0, [r7, #20]
 80031b8:	f7ff fe0b 	bl	8002dd2 <_WriteNoCheck>
    break;
 80031bc:	e019      	b.n	80031f2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80031be:	6978      	ldr	r0, [r7, #20]
 80031c0:	f7ff fe4f 	bl	8002e62 <_GetAvailWriteSpace>
 80031c4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4293      	cmp	r3, r2
 80031cc:	bf28      	it	cs
 80031ce:	4613      	movcs	r3, r2
 80031d0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	69b9      	ldr	r1, [r7, #24]
 80031d6:	6978      	ldr	r0, [r7, #20]
 80031d8:	f7ff fdfb 	bl	8002dd2 <_WriteNoCheck>
    break;
 80031dc:	e009      	b.n	80031f2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	69b9      	ldr	r1, [r7, #24]
 80031e2:	6978      	ldr	r0, [r7, #20]
 80031e4:	f7ff fd98 	bl	8002d18 <_WriteBlocking>
 80031e8:	61f8      	str	r0, [r7, #28]
    break;
 80031ea:	e002      	b.n	80031f2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
    break;
 80031f0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80031f2:	69fb      	ldr	r3, [r7, #28]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3720      	adds	r7, #32
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20012ee8 	.word	0x20012ee8

08003200 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800321a:	f7ff fd25 	bl	8002c68 <_DoInit>
  SEGGER_RTT_LOCK();
 800321e:	f3ef 8311 	mrs	r3, BASEPRI
 8003222:	f04f 0120 	mov.w	r1, #32
 8003226:	f381 8811 	msr	BASEPRI, r1
 800322a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7ff ff45 	bl	80030c0 <SEGGER_RTT_WriteDownBufferNoLock>
 8003236:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800323e:	697b      	ldr	r3, [r7, #20]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20012ee8 	.word	0x20012ee8

0800324c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <SEGGER_RTT_Write+0x48>)
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <SEGGER_RTT_Write+0x1e>
 8003266:	f7ff fcff 	bl	8002c68 <_DoInit>
  SEGGER_RTT_LOCK();
 800326a:	f3ef 8311 	mrs	r3, BASEPRI
 800326e:	f04f 0120 	mov.w	r1, #32
 8003272:	f381 8811 	msr	BASEPRI, r1
 8003276:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f7ff ff6f 	bl	8003160 <SEGGER_RTT_WriteNoLock>
 8003282:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800328a:	697b      	ldr	r3, [r7, #20]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20012ee8 	.word	0x20012ee8

08003298 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80032a6:	4b3d      	ldr	r3, [pc, #244]	; (800339c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80032b4:	f7ff fcd8 	bl	8002c68 <_DoInit>
  SEGGER_RTT_LOCK();
 80032b8:	f3ef 8311 	mrs	r3, BASEPRI
 80032bc:	f04f 0120 	mov.w	r1, #32
 80032c0:	f381 8811 	msr	BASEPRI, r1
 80032c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80032c6:	4b35      	ldr	r3, [pc, #212]	; (800339c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80032c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80032ce:	6939      	ldr	r1, [r7, #16]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	3304      	adds	r3, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3301      	adds	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	dbeb      	blt.n	80032ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80032f6:	e000      	b.n	80032fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80032f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	429a      	cmp	r2, r3
 8003302:	da3f      	bge.n	8003384 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003304:	6939      	ldr	r1, [r7, #16]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003318:	6939      	ldr	r1, [r7, #16]
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	440b      	add	r3, r1
 8003328:	3304      	adds	r3, #4
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800332e:	6939      	ldr	r1, [r7, #16]
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	3320      	adds	r3, #32
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003342:	6939      	ldr	r1, [r7, #16]
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	3328      	adds	r3, #40	; 0x28
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003356:	6939      	ldr	r1, [r7, #16]
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	440b      	add	r3, r1
 8003364:	3324      	adds	r3, #36	; 0x24
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800336a:	6939      	ldr	r1, [r7, #16]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	332c      	adds	r3, #44	; 0x2c
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800337e:	f3bf 8f5f 	dmb	sy
 8003382:	e002      	b.n	800338a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003388:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003390:	69fb      	ldr	r3, [r7, #28]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20012ee8 	.word	0x20012ee8

080033a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80033ae:	4b33      	ldr	r3, [pc, #204]	; (800347c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80033bc:	f7ff fc54 	bl	8002c68 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80033c0:	4b2e      	ldr	r3, [pc, #184]	; (800347c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80033c2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	461a      	mov	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d24d      	bcs.n	800346c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80033d0:	f3ef 8311 	mrs	r3, BASEPRI
 80033d4:	f04f 0120 	mov.w	r1, #32
 80033d8:	f381 8811 	msr	BASEPRI, r1
 80033dc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d031      	beq.n	8003448 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80033e4:	6979      	ldr	r1, [r7, #20]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	3360      	adds	r3, #96	; 0x60
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80033f8:	6979      	ldr	r1, [r7, #20]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	440b      	add	r3, r1
 8003406:	3364      	adds	r3, #100	; 0x64
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	440b      	add	r3, r1
 800341a:	3368      	adds	r3, #104	; 0x68
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003420:	6979      	ldr	r1, [r7, #20]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	3370      	adds	r3, #112	; 0x70
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003434:	6979      	ldr	r1, [r7, #20]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	440b      	add	r3, r1
 8003442:	336c      	adds	r3, #108	; 0x6c
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003448:	6979      	ldr	r1, [r7, #20]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	440b      	add	r3, r1
 8003456:	3374      	adds	r3, #116	; 0x74
 8003458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800345c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e002      	b.n	8003472 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003470:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003472:	69fb      	ldr	r3, [r7, #28]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20012ee8 	.word	0x20012ee8

08003480 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003490:	e002      	b.n	8003498 <_EncodeStr+0x18>
    Len++;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	3301      	adds	r3, #1
 8003496:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4413      	add	r3, r2
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f6      	bne.n	8003492 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d901      	bls.n	80034b0 <_EncodeStr+0x30>
    Len = Limit;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2bfe      	cmp	r3, #254	; 0xfe
 80034b4:	d806      	bhi.n	80034c4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	60fa      	str	r2, [r7, #12]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e011      	b.n	80034e8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	60fa      	str	r2, [r7, #12]
 80034ca:	22ff      	movs	r2, #255	; 0xff
 80034cc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	60fa      	str	r2, [r7, #12]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	0a19      	lsrs	r1, r3, #8
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	60fa      	str	r2, [r7, #12]
 80034e4:	b2ca      	uxtb	r2, r1
 80034e6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80034ec:	e00a      	b.n	8003504 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	1c53      	adds	r3, r2, #1
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1c59      	adds	r1, r3, #1
 80034f8:	60f9      	str	r1, [r7, #12]
 80034fa:	7812      	ldrb	r2, [r2, #0]
 80034fc:	701a      	strb	r2, [r3, #0]
    n++;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	3301      	adds	r3, #1
 8003502:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	429a      	cmp	r2, r3
 800350a:	d3f0      	bcc.n	80034ee <_EncodeStr+0x6e>
  }
  return pPayload;
 800350c:	68fb      	ldr	r3, [r7, #12]
}
 800350e:	4618      	mov	r0, r3
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <_HandleIncomingPacket+0xe0>)
 800353c:	7e1b      	ldrb	r3, [r3, #24]
 800353e:	4618      	mov	r0, r3
 8003540:	1cfb      	adds	r3, r7, #3
 8003542:	2201      	movs	r2, #1
 8003544:	4619      	mov	r1, r3
 8003546:	f7ff fd35 	bl	8002fb4 <SEGGER_RTT_ReadNoLock>
 800354a:	4603      	mov	r3, r0
 800354c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	dd54      	ble.n	80035fe <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	2b80      	cmp	r3, #128	; 0x80
 8003558:	d032      	beq.n	80035c0 <_HandleIncomingPacket+0x8c>
 800355a:	2b80      	cmp	r3, #128	; 0x80
 800355c:	dc42      	bgt.n	80035e4 <_HandleIncomingPacket+0xb0>
 800355e:	2b07      	cmp	r3, #7
 8003560:	dc16      	bgt.n	8003590 <_HandleIncomingPacket+0x5c>
 8003562:	2b00      	cmp	r3, #0
 8003564:	dd3e      	ble.n	80035e4 <_HandleIncomingPacket+0xb0>
 8003566:	3b01      	subs	r3, #1
 8003568:	2b06      	cmp	r3, #6
 800356a:	d83b      	bhi.n	80035e4 <_HandleIncomingPacket+0xb0>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <_HandleIncomingPacket+0x40>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003597 	.word	0x08003597
 8003578:	0800359d 	.word	0x0800359d
 800357c:	080035a3 	.word	0x080035a3
 8003580:	080035a9 	.word	0x080035a9
 8003584:	080035af 	.word	0x080035af
 8003588:	080035b5 	.word	0x080035b5
 800358c:	080035bb 	.word	0x080035bb
 8003590:	2b7f      	cmp	r3, #127	; 0x7f
 8003592:	d036      	beq.n	8003602 <_HandleIncomingPacket+0xce>
 8003594:	e026      	b.n	80035e4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003596:	f000 fbab 	bl	8003cf0 <SEGGER_SYSVIEW_Start>
      break;
 800359a:	e037      	b.n	800360c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800359c:	f000 fc64 	bl	8003e68 <SEGGER_SYSVIEW_Stop>
      break;
 80035a0:	e034      	b.n	800360c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80035a2:	f000 fe3d 	bl	8004220 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80035a6:	e031      	b.n	800360c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80035a8:	f000 fe02 	bl	80041b0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80035ac:	e02e      	b.n	800360c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80035ae:	f000 fc81 	bl	8003eb4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80035b2:	e02b      	b.n	800360c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80035b4:	f001 f8d0 	bl	8004758 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80035b8:	e028      	b.n	800360c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80035ba:	f001 f8af 	bl	800471c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80035be:	e025      	b.n	800360c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <_HandleIncomingPacket+0xe0>)
 80035c2:	7e1b      	ldrb	r3, [r3, #24]
 80035c4:	4618      	mov	r0, r3
 80035c6:	1cfb      	adds	r3, r7, #3
 80035c8:	2201      	movs	r2, #1
 80035ca:	4619      	mov	r1, r3
 80035cc:	f7ff fcf2 	bl	8002fb4 <SEGGER_RTT_ReadNoLock>
 80035d0:	4603      	mov	r3, r0
 80035d2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	dd15      	ble.n	8003606 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 f81d 	bl	800461c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80035e2:	e010      	b.n	8003606 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	b25b      	sxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	da0e      	bge.n	800360a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <_HandleIncomingPacket+0xe0>)
 80035ee:	7e1b      	ldrb	r3, [r3, #24]
 80035f0:	4618      	mov	r0, r3
 80035f2:	1cfb      	adds	r3, r7, #3
 80035f4:	2201      	movs	r2, #1
 80035f6:	4619      	mov	r1, r3
 80035f8:	f7ff fcdc 	bl	8002fb4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80035fc:	e005      	b.n	800360a <_HandleIncomingPacket+0xd6>
    }
  }
 80035fe:	bf00      	nop
 8003600:	e004      	b.n	800360c <_HandleIncomingPacket+0xd8>
      break;
 8003602:	bf00      	nop
 8003604:	e002      	b.n	800360c <_HandleIncomingPacket+0xd8>
      break;
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <_HandleIncomingPacket+0xd8>
      break;
 800360a:	bf00      	nop
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200143a8 	.word	0x200143a8

08003618 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	; 0x30
 800361c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800361e:	2301      	movs	r3, #1
 8003620:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362c:	4b32      	ldr	r3, [pc, #200]	; (80036f8 <_TrySendOverflowPacket+0xe0>)
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
 8003632:	e00b      	b.n	800364c <_TrySendOverflowPacket+0x34>
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	b2da      	uxtb	r2, r3
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	1c59      	adds	r1, r3, #1
 800363c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800363e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	09db      	lsrs	r3, r3, #7
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	2b7f      	cmp	r3, #127	; 0x7f
 8003650:	d8f0      	bhi.n	8003634 <_TrySendOverflowPacket+0x1c>
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003662:	4b26      	ldr	r3, [pc, #152]	; (80036fc <_TrySendOverflowPacket+0xe4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003668:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <_TrySendOverflowPacket+0xe0>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	e00b      	b.n	8003694 <_TrySendOverflowPacket+0x7c>
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	1c59      	adds	r1, r3, #1
 8003684:	6279      	str	r1, [r7, #36]	; 0x24
 8003686:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	09db      	lsrs	r3, r3, #7
 8003692:	623b      	str	r3, [r7, #32]
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	2b7f      	cmp	r3, #127	; 0x7f
 8003698:	d8f0      	bhi.n	800367c <_TrySendOverflowPacket+0x64>
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	627a      	str	r2, [r7, #36]	; 0x24
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <_TrySendOverflowPacket+0xe0>)
 80036ac:	785b      	ldrb	r3, [r3, #1]
 80036ae:	4618      	mov	r0, r3
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	1d3b      	adds	r3, r7, #4
 80036ba:	4619      	mov	r1, r3
 80036bc:	f7fc fd90 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80036c0:	4603      	mov	r3, r0
 80036c2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80036c4:	f7ff fa46 	bl	8002b54 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <_TrySendOverflowPacket+0xe0>)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80036d4:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <_TrySendOverflowPacket+0xe0>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	3b01      	subs	r3, #1
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <_TrySendOverflowPacket+0xe0>)
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	e004      	b.n	80036ec <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <_TrySendOverflowPacket+0xe0>)
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	3301      	adds	r3, #1
 80036e8:	4a03      	ldr	r2, [pc, #12]	; (80036f8 <_TrySendOverflowPacket+0xe0>)
 80036ea:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80036ec:	693b      	ldr	r3, [r7, #16]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3730      	adds	r7, #48	; 0x30
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200143a8 	.word	0x200143a8
 80036fc:	e0001004 	.word	0xe0001004

08003700 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800370c:	4b6d      	ldr	r3, [pc, #436]	; (80038c4 <_SendPacket+0x1c4>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d010      	beq.n	8003736 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003714:	4b6b      	ldr	r3, [pc, #428]	; (80038c4 <_SendPacket+0x1c4>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a5 	beq.w	8003868 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800371e:	4b69      	ldr	r3, [pc, #420]	; (80038c4 <_SendPacket+0x1c4>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d109      	bne.n	800373a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003726:	f7ff ff77 	bl	8003618 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800372a:	4b66      	ldr	r3, [pc, #408]	; (80038c4 <_SendPacket+0x1c4>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	f040 809c 	bne.w	800386c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8003734:	e001      	b.n	800373a <_SendPacket+0x3a>
    goto Send;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <_SendPacket+0x3c>
Send:
 800373a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b1f      	cmp	r3, #31
 8003740:	d809      	bhi.n	8003756 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003742:	4b60      	ldr	r3, [pc, #384]	; (80038c4 <_SendPacket+0x1c4>)
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	f040 808d 	bne.w	8003870 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b17      	cmp	r3, #23
 800375a:	d807      	bhi.n	800376c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3b01      	subs	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	e03d      	b.n	80037e8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b7f      	cmp	r3, #127	; 0x7f
 8003778:	d912      	bls.n	80037a0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	09da      	lsrs	r2, r3, #7
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3b01      	subs	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	3a01      	subs	r2, #1
 8003792:	60fa      	str	r2, [r7, #12]
 8003794:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	e006      	b.n	80037ae <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b7f      	cmp	r3, #127	; 0x7f
 80037b2:	d912      	bls.n	80037da <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	09da      	lsrs	r2, r3, #7
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	3a01      	subs	r2, #1
 80037cc:	60fa      	str	r2, [r7, #12]
 80037ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	e006      	b.n	80037e8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3b01      	subs	r3, #1
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80037e8:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <_SendPacket+0x1c8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80037ee:	4b35      	ldr	r3, [pc, #212]	; (80038c4 <_SendPacket+0x1c4>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	623b      	str	r3, [r7, #32]
 8003800:	e00b      	b.n	800381a <_SendPacket+0x11a>
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	1c59      	adds	r1, r3, #1
 800380a:	6279      	str	r1, [r7, #36]	; 0x24
 800380c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	09db      	lsrs	r3, r3, #7
 8003818:	623b      	str	r3, [r7, #32]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	2b7f      	cmp	r3, #127	; 0x7f
 800381e:	d8f0      	bhi.n	8003802 <_SendPacket+0x102>
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	627a      	str	r2, [r7, #36]	; 0x24
 8003826:	6a3a      	ldr	r2, [r7, #32]
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003830:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <_SendPacket+0x1c4>)
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	4618      	mov	r0, r3
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	461a      	mov	r2, r3
 800383e:	68f9      	ldr	r1, [r7, #12]
 8003840:	f7fc fcce 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003844:	4603      	mov	r3, r0
 8003846:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003848:	f7ff f984 	bl	8002b54 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003852:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <_SendPacket+0x1c4>)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	60d3      	str	r3, [r2, #12]
 8003858:	e00b      	b.n	8003872 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800385a:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <_SendPacket+0x1c4>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	3301      	adds	r3, #1
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <_SendPacket+0x1c4>)
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e004      	b.n	8003872 <_SendPacket+0x172>
    goto SendDone;
 8003868:	bf00      	nop
 800386a:	e002      	b.n	8003872 <_SendPacket+0x172>
      goto SendDone;
 800386c:	bf00      	nop
 800386e:	e000      	b.n	8003872 <_SendPacket+0x172>
      goto SendDone;
 8003870:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003872:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <_SendPacket+0x1c4>)
 8003874:	7e1b      	ldrb	r3, [r3, #24]
 8003876:	4619      	mov	r1, r3
 8003878:	4a14      	ldr	r2, [pc, #80]	; (80038cc <_SendPacket+0x1cc>)
 800387a:	460b      	mov	r3, r1
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	440b      	add	r3, r1
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4413      	add	r3, r2
 8003884:	336c      	adds	r3, #108	; 0x6c
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <_SendPacket+0x1c4>)
 800388a:	7e1b      	ldrb	r3, [r3, #24]
 800388c:	4618      	mov	r0, r3
 800388e:	490f      	ldr	r1, [pc, #60]	; (80038cc <_SendPacket+0x1cc>)
 8003890:	4603      	mov	r3, r0
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	4403      	add	r3, r0
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	440b      	add	r3, r1
 800389a:	3370      	adds	r3, #112	; 0x70
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d00b      	beq.n	80038ba <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <_SendPacket+0x1c4>)
 80038a4:	789b      	ldrb	r3, [r3, #2]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d107      	bne.n	80038ba <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <_SendPacket+0x1c4>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80038b0:	f7ff fe40 	bl	8003534 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <_SendPacket+0x1c4>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80038ba:	bf00      	nop
 80038bc:	3728      	adds	r7, #40	; 0x28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200143a8 	.word	0x200143a8
 80038c8:	e0001004 	.word	0xe0001004
 80038cc:	20012ee8 	.word	0x20012ee8

080038d0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80038de:	2300      	movs	r3, #0
 80038e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038e4:	4917      	ldr	r1, [pc, #92]	; (8003944 <SEGGER_SYSVIEW_Init+0x74>)
 80038e6:	4818      	ldr	r0, [pc, #96]	; (8003948 <SEGGER_SYSVIEW_Init+0x78>)
 80038e8:	f7ff fcd6 	bl	8003298 <SEGGER_RTT_AllocUpBuffer>
 80038ec:	4603      	mov	r3, r0
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <SEGGER_SYSVIEW_Init+0x7c>)
 80038f2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80038f4:	4b15      	ldr	r3, [pc, #84]	; (800394c <SEGGER_SYSVIEW_Init+0x7c>)
 80038f6:	785a      	ldrb	r2, [r3, #1]
 80038f8:	4b14      	ldr	r3, [pc, #80]	; (800394c <SEGGER_SYSVIEW_Init+0x7c>)
 80038fa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <SEGGER_SYSVIEW_Init+0x7c>)
 80038fe:	7e1b      	ldrb	r3, [r3, #24]
 8003900:	4618      	mov	r0, r3
 8003902:	2300      	movs	r3, #0
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2308      	movs	r3, #8
 8003908:	4a11      	ldr	r2, [pc, #68]	; (8003950 <SEGGER_SYSVIEW_Init+0x80>)
 800390a:	490f      	ldr	r1, [pc, #60]	; (8003948 <SEGGER_SYSVIEW_Init+0x78>)
 800390c:	f7ff fd48 	bl	80033a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003910:	4b0e      	ldr	r3, [pc, #56]	; (800394c <SEGGER_SYSVIEW_Init+0x7c>)
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <SEGGER_SYSVIEW_Init+0x84>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <SEGGER_SYSVIEW_Init+0x7c>)
 800391c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800391e:	4a0b      	ldr	r2, [pc, #44]	; (800394c <SEGGER_SYSVIEW_Init+0x7c>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003924:	4a09      	ldr	r2, [pc, #36]	; (800394c <SEGGER_SYSVIEW_Init+0x7c>)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <SEGGER_SYSVIEW_Init+0x7c>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003930:	4a06      	ldr	r2, [pc, #24]	; (800394c <SEGGER_SYSVIEW_Init+0x7c>)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <SEGGER_SYSVIEW_Init+0x7c>)
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	200133a0 	.word	0x200133a0
 8003948:	080056a0 	.word	0x080056a0
 800394c:	200143a8 	.word	0x200143a8
 8003950:	200143a0 	.word	0x200143a0
 8003954:	e0001004 	.word	0xe0001004

08003958 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003960:	4a04      	ldr	r2, [pc, #16]	; (8003974 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6113      	str	r3, [r2, #16]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	200143a8 	.word	0x200143a8

08003978 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003980:	f3ef 8311 	mrs	r3, BASEPRI
 8003984:	f04f 0120 	mov.w	r1, #32
 8003988:	f381 8811 	msr	BASEPRI, r1
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4808      	ldr	r0, [pc, #32]	; (80039b0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003990:	f7ff fdc3 	bl	800351a <_PreparePacket>
 8003994:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	68b8      	ldr	r0, [r7, #8]
 800399c:	f7ff feb0 	bl	8003700 <_SendPacket>
  RECORD_END();
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f383 8811 	msr	BASEPRI, r3
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	200143d8 	.word	0x200143d8

080039b4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80039be:	f3ef 8311 	mrs	r3, BASEPRI
 80039c2:	f04f 0120 	mov.w	r1, #32
 80039c6:	f381 8811 	msr	BASEPRI, r1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	4816      	ldr	r0, [pc, #88]	; (8003a28 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80039ce:	f7ff fda4 	bl	800351a <_PreparePacket>
 80039d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	e00b      	b.n	80039fa <SEGGER_SYSVIEW_RecordU32+0x46>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	1c59      	adds	r1, r3, #1
 80039ea:	61f9      	str	r1, [r7, #28]
 80039ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	09db      	lsrs	r3, r3, #7
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b7f      	cmp	r3, #127	; 0x7f
 80039fe:	d8f0      	bhi.n	80039e2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	61fa      	str	r2, [r7, #28]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	6938      	ldr	r0, [r7, #16]
 8003a16:	f7ff fe73 	bl	8003700 <_SendPacket>
  RECORD_END();
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f383 8811 	msr	BASEPRI, r3
}
 8003a20:	bf00      	nop
 8003a22:	3720      	adds	r7, #32
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200143d8 	.word	0x200143d8

08003a2c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08c      	sub	sp, #48	; 0x30
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a38:	f3ef 8311 	mrs	r3, BASEPRI
 8003a3c:	f04f 0120 	mov.w	r1, #32
 8003a40:	f381 8811 	msr	BASEPRI, r1
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	4825      	ldr	r0, [pc, #148]	; (8003adc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003a48:	f7ff fd67 	bl	800351a <_PreparePacket>
 8003a4c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5a:	e00b      	b.n	8003a74 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	1c59      	adds	r1, r3, #1
 8003a64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003a66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	09db      	lsrs	r3, r3, #7
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	2b7f      	cmp	r3, #127	; 0x7f
 8003a78:	d8f0      	bhi.n	8003a5c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	623b      	str	r3, [r7, #32]
 8003a92:	e00b      	b.n	8003aac <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	1c59      	adds	r1, r3, #1
 8003a9c:	6279      	str	r1, [r7, #36]	; 0x24
 8003a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	09db      	lsrs	r3, r3, #7
 8003aaa:	623b      	str	r3, [r7, #32]
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	2b7f      	cmp	r3, #127	; 0x7f
 8003ab0:	d8f0      	bhi.n	8003a94 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	627a      	str	r2, [r7, #36]	; 0x24
 8003ab8:	6a3a      	ldr	r2, [r7, #32]
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	6979      	ldr	r1, [r7, #20]
 8003ac6:	69b8      	ldr	r0, [r7, #24]
 8003ac8:	f7ff fe1a 	bl	8003700 <_SendPacket>
  RECORD_END();
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f383 8811 	msr	BASEPRI, r3
}
 8003ad2:	bf00      	nop
 8003ad4:	3730      	adds	r7, #48	; 0x30
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200143d8 	.word	0x200143d8

08003ae0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003aee:	f3ef 8311 	mrs	r3, BASEPRI
 8003af2:	f04f 0120 	mov.w	r1, #32
 8003af6:	f381 8811 	msr	BASEPRI, r1
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	4832      	ldr	r0, [pc, #200]	; (8003bc8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003afe:	f7ff fd0c 	bl	800351a <_PreparePacket>
 8003b02:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b10:	e00b      	b.n	8003b2a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	1c59      	adds	r1, r3, #1
 8003b1a:	6379      	str	r1, [r7, #52]	; 0x34
 8003b1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	09db      	lsrs	r3, r3, #7
 8003b28:	633b      	str	r3, [r7, #48]	; 0x30
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b2e:	d8f0      	bhi.n	8003b12 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	637a      	str	r2, [r7, #52]	; 0x34
 8003b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b48:	e00b      	b.n	8003b62 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	1c59      	adds	r1, r3, #1
 8003b52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	09db      	lsrs	r3, r3, #7
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	2b7f      	cmp	r3, #127	; 0x7f
 8003b66:	d8f0      	bhi.n	8003b4a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	623b      	str	r3, [r7, #32]
 8003b80:	e00b      	b.n	8003b9a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	1c59      	adds	r1, r3, #1
 8003b8a:	6279      	str	r1, [r7, #36]	; 0x24
 8003b8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	09db      	lsrs	r3, r3, #7
 8003b98:	623b      	str	r3, [r7, #32]
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8003b9e:	d8f0      	bhi.n	8003b82 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ba6:	6a3a      	ldr	r2, [r7, #32]
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	6979      	ldr	r1, [r7, #20]
 8003bb4:	69b8      	ldr	r0, [r7, #24]
 8003bb6:	f7ff fda3 	bl	8003700 <_SendPacket>
  RECORD_END();
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f383 8811 	msr	BASEPRI, r3
}
 8003bc0:	bf00      	nop
 8003bc2:	3738      	adds	r7, #56	; 0x38
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	200143d8 	.word	0x200143d8

08003bcc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b090      	sub	sp, #64	; 0x40
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003bda:	f3ef 8311 	mrs	r3, BASEPRI
 8003bde:	f04f 0120 	mov.w	r1, #32
 8003be2:	f381 8811 	msr	BASEPRI, r1
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	4840      	ldr	r0, [pc, #256]	; (8003cec <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003bea:	f7ff fc96 	bl	800351a <_PreparePacket>
 8003bee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bfc:	e00b      	b.n	8003c16 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c04:	1c59      	adds	r1, r3, #1
 8003c06:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003c08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	09db      	lsrs	r3, r3, #7
 8003c14:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	2b7f      	cmp	r3, #127	; 0x7f
 8003c1a:	d8f0      	bhi.n	8003bfe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]
 8003c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	633b      	str	r3, [r7, #48]	; 0x30
 8003c34:	e00b      	b.n	8003c4e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3c:	1c59      	adds	r1, r3, #1
 8003c3e:	6379      	str	r1, [r7, #52]	; 0x34
 8003c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	09db      	lsrs	r3, r3, #7
 8003c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	2b7f      	cmp	r3, #127	; 0x7f
 8003c52:	d8f0      	bhi.n	8003c36 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	637a      	str	r2, [r7, #52]	; 0x34
 8003c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c6c:	e00b      	b.n	8003c86 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	1c59      	adds	r1, r3, #1
 8003c76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	09db      	lsrs	r3, r3, #7
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	2b7f      	cmp	r3, #127	; 0x7f
 8003c8a:	d8f0      	bhi.n	8003c6e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	e00b      	b.n	8003cbe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	1c59      	adds	r1, r3, #1
 8003cae:	6279      	str	r1, [r7, #36]	; 0x24
 8003cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	09db      	lsrs	r3, r3, #7
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8003cc2:	d8f0      	bhi.n	8003ca6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	627a      	str	r2, [r7, #36]	; 0x24
 8003cca:	6a3a      	ldr	r2, [r7, #32]
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	6979      	ldr	r1, [r7, #20]
 8003cd8:	69b8      	ldr	r0, [r7, #24]
 8003cda:	f7ff fd11 	bl	8003700 <_SendPacket>
  RECORD_END();
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f383 8811 	msr	BASEPRI, r3
}
 8003ce4:	bf00      	nop
 8003ce6:	3740      	adds	r7, #64	; 0x40
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	200143d8 	.word	0x200143d8

08003cf0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08c      	sub	sp, #48	; 0x30
 8003cf4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003cf6:	4b59      	ldr	r3, [pc, #356]	; (8003e5c <SEGGER_SYSVIEW_Start+0x16c>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8003d00:	f04f 0120 	mov.w	r1, #32
 8003d04:	f381 8811 	msr	BASEPRI, r1
 8003d08:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003d0a:	4b54      	ldr	r3, [pc, #336]	; (8003e5c <SEGGER_SYSVIEW_Start+0x16c>)
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	220a      	movs	r2, #10
 8003d10:	4953      	ldr	r1, [pc, #332]	; (8003e60 <SEGGER_SYSVIEW_Start+0x170>)
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fc fa64 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003d1e:	f7fe ff19 	bl	8002b54 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003d22:	200a      	movs	r0, #10
 8003d24:	f7ff fe28 	bl	8003978 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d28:	f3ef 8311 	mrs	r3, BASEPRI
 8003d2c:	f04f 0120 	mov.w	r1, #32
 8003d30:	f381 8811 	msr	BASEPRI, r1
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	484b      	ldr	r0, [pc, #300]	; (8003e64 <SEGGER_SYSVIEW_Start+0x174>)
 8003d38:	f7ff fbef 	bl	800351a <_PreparePacket>
 8003d3c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d46:	4b45      	ldr	r3, [pc, #276]	; (8003e5c <SEGGER_SYSVIEW_Start+0x16c>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4c:	e00b      	b.n	8003d66 <SEGGER_SYSVIEW_Start+0x76>
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d54:	1c59      	adds	r1, r3, #1
 8003d56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	09db      	lsrs	r3, r3, #7
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	2b7f      	cmp	r3, #127	; 0x7f
 8003d6a:	d8f0      	bhi.n	8003d4e <SEGGER_SYSVIEW_Start+0x5e>
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d80:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <SEGGER_SYSVIEW_Start+0x16c>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	623b      	str	r3, [r7, #32]
 8003d86:	e00b      	b.n	8003da0 <SEGGER_SYSVIEW_Start+0xb0>
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	1c59      	adds	r1, r3, #1
 8003d90:	6279      	str	r1, [r7, #36]	; 0x24
 8003d92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	09db      	lsrs	r3, r3, #7
 8003d9e:	623b      	str	r3, [r7, #32]
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	2b7f      	cmp	r3, #127	; 0x7f
 8003da4:	d8f0      	bhi.n	8003d88 <SEGGER_SYSVIEW_Start+0x98>
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	627a      	str	r2, [r7, #36]	; 0x24
 8003dac:	6a3a      	ldr	r2, [r7, #32]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <SEGGER_SYSVIEW_Start+0x16c>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	e00b      	b.n	8003dda <SEGGER_SYSVIEW_Start+0xea>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	1c59      	adds	r1, r3, #1
 8003dca:	61f9      	str	r1, [r7, #28]
 8003dcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	09db      	lsrs	r3, r3, #7
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8003dde:	d8f0      	bhi.n	8003dc2 <SEGGER_SYSVIEW_Start+0xd2>
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	61fa      	str	r2, [r7, #28]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	e00b      	b.n	8003e12 <SEGGER_SYSVIEW_Start+0x122>
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	1c59      	adds	r1, r3, #1
 8003e02:	6179      	str	r1, [r7, #20]
 8003e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	09db      	lsrs	r3, r3, #7
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b7f      	cmp	r3, #127	; 0x7f
 8003e16:	d8f0      	bhi.n	8003dfa <SEGGER_SYSVIEW_Start+0x10a>
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	617a      	str	r2, [r7, #20]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003e28:	2218      	movs	r2, #24
 8003e2a:	6839      	ldr	r1, [r7, #0]
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff fc67 	bl	8003700 <_SendPacket>
      RECORD_END();
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <SEGGER_SYSVIEW_Start+0x16c>)
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <SEGGER_SYSVIEW_Start+0x16c>)
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003e46:	f000 f9eb 	bl	8004220 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003e4a:	f000 f9b1 	bl	80041b0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003e4e:	f000 fc83 	bl	8004758 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003e52:	bf00      	nop
 8003e54:	3730      	adds	r7, #48	; 0x30
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200143a8 	.word	0x200143a8
 8003e60:	080056b4 	.word	0x080056b4
 8003e64:	200143d8 	.word	0x200143d8

08003e68 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e72:	f04f 0120 	mov.w	r1, #32
 8003e76:	f381 8811 	msr	BASEPRI, r1
 8003e7a:	607b      	str	r3, [r7, #4]
 8003e7c:	480b      	ldr	r0, [pc, #44]	; (8003eac <SEGGER_SYSVIEW_Stop+0x44>)
 8003e7e:	f7ff fb4c 	bl	800351a <_PreparePacket>
 8003e82:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003e84:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003e8c:	220b      	movs	r2, #11
 8003e8e:	6839      	ldr	r1, [r7, #0]
 8003e90:	6838      	ldr	r0, [r7, #0]
 8003e92:	f7ff fc35 	bl	8003700 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <SEGGER_SYSVIEW_Stop+0x48>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f383 8811 	msr	BASEPRI, r3
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	200143d8 	.word	0x200143d8
 8003eb0:	200143a8 	.word	0x200143a8

08003eb4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08c      	sub	sp, #48	; 0x30
 8003eb8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003eba:	f3ef 8311 	mrs	r3, BASEPRI
 8003ebe:	f04f 0120 	mov.w	r1, #32
 8003ec2:	f381 8811 	msr	BASEPRI, r1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	4845      	ldr	r0, [pc, #276]	; (8003fe0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003eca:	f7ff fb26 	bl	800351a <_PreparePacket>
 8003ece:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed8:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ede:	e00b      	b.n	8003ef8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee6:	1c59      	adds	r1, r3, #1
 8003ee8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	09db      	lsrs	r3, r3, #7
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	2b7f      	cmp	r3, #127	; 0x7f
 8003efc:	d8f0      	bhi.n	8003ee0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	4b34      	ldr	r3, [pc, #208]	; (8003fe4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	623b      	str	r3, [r7, #32]
 8003f18:	e00b      	b.n	8003f32 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	1c59      	adds	r1, r3, #1
 8003f22:	6279      	str	r1, [r7, #36]	; 0x24
 8003f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	09db      	lsrs	r3, r3, #7
 8003f30:	623b      	str	r3, [r7, #32]
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	2b7f      	cmp	r3, #127	; 0x7f
 8003f36:	d8f0      	bhi.n	8003f1a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	627a      	str	r2, [r7, #36]	; 0x24
 8003f3e:	6a3a      	ldr	r2, [r7, #32]
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	e00b      	b.n	8003f6c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	61f9      	str	r1, [r7, #28]
 8003f5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	09db      	lsrs	r3, r3, #7
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f70:	d8f0      	bhi.n	8003f54 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	61fa      	str	r2, [r7, #28]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	e00b      	b.n	8003fa4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	1c59      	adds	r1, r3, #1
 8003f94:	6179      	str	r1, [r7, #20]
 8003f96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	09db      	lsrs	r3, r3, #7
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8003fa8:	d8f0      	bhi.n	8003f8c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	617a      	str	r2, [r7, #20]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003fba:	2218      	movs	r2, #24
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	68b8      	ldr	r0, [r7, #8]
 8003fc0:	f7ff fb9e 	bl	8003700 <_SendPacket>
  RECORD_END();
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003fd2:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	4798      	blx	r3
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3730      	adds	r7, #48	; 0x30
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200143d8 	.word	0x200143d8
 8003fe4:	200143a8 	.word	0x200143a8

08003fe8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b092      	sub	sp, #72	; 0x48
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003ff0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ff4:	f04f 0120 	mov.w	r1, #32
 8003ff8:	f381 8811 	msr	BASEPRI, r1
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	486a      	ldr	r0, [pc, #424]	; (80041a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004000:	f7ff fa8b 	bl	800351a <_PreparePacket>
 8004004:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	647b      	str	r3, [r7, #68]	; 0x44
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b66      	ldr	r3, [pc, #408]	; (80041ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	643b      	str	r3, [r7, #64]	; 0x40
 800401a:	e00b      	b.n	8004034 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800401c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800401e:	b2da      	uxtb	r2, r3
 8004020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004022:	1c59      	adds	r1, r3, #1
 8004024:	6479      	str	r1, [r7, #68]	; 0x44
 8004026:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004030:	09db      	lsrs	r3, r3, #7
 8004032:	643b      	str	r3, [r7, #64]	; 0x40
 8004034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004036:	2b7f      	cmp	r3, #127	; 0x7f
 8004038:	d8f0      	bhi.n	800401c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800403a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	647a      	str	r2, [r7, #68]	; 0x44
 8004040:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004048:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	63bb      	str	r3, [r7, #56]	; 0x38
 8004054:	e00b      	b.n	800406e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	b2da      	uxtb	r2, r3
 800405a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405c:	1c59      	adds	r1, r3, #1
 800405e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	09db      	lsrs	r3, r3, #7
 800406c:	63bb      	str	r3, [r7, #56]	; 0x38
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	2b7f      	cmp	r3, #127	; 0x7f
 8004072:	d8f0      	bhi.n	8004056 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	63fa      	str	r2, [r7, #60]	; 0x3c
 800407a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004082:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	4619      	mov	r1, r3
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7ff f9f7 	bl	8003480 <_EncodeStr>
 8004092:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004094:	2209      	movs	r2, #9
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	6938      	ldr	r0, [r7, #16]
 800409a:	f7ff fb31 	bl	8003700 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b40      	ldr	r3, [pc, #256]	; (80041ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
 80040b2:	e00b      	b.n	80040cc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ba:	1c59      	adds	r1, r3, #1
 80040bc:	6379      	str	r1, [r7, #52]	; 0x34
 80040be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	09db      	lsrs	r3, r3, #7
 80040ca:	633b      	str	r3, [r7, #48]	; 0x30
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	2b7f      	cmp	r3, #127	; 0x7f
 80040d0:	d8f0      	bhi.n	80040b4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80040d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	637a      	str	r2, [r7, #52]	; 0x34
 80040d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ec:	e00b      	b.n	8004106 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	1c59      	adds	r1, r3, #1
 80040f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	09db      	lsrs	r3, r3, #7
 8004104:	62bb      	str	r3, [r7, #40]	; 0x28
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	2b7f      	cmp	r3, #127	; 0x7f
 800410a:	d8f0      	bhi.n	80040ee <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	623b      	str	r3, [r7, #32]
 8004126:	e00b      	b.n	8004140 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	b2da      	uxtb	r2, r3
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	1c59      	adds	r1, r3, #1
 8004130:	6279      	str	r1, [r7, #36]	; 0x24
 8004132:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	09db      	lsrs	r3, r3, #7
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	2b7f      	cmp	r3, #127	; 0x7f
 8004144:	d8f0      	bhi.n	8004128 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	627a      	str	r2, [r7, #36]	; 0x24
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e00b      	b.n	8004178 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	1c59      	adds	r1, r3, #1
 8004168:	61f9      	str	r1, [r7, #28]
 800416a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	09db      	lsrs	r3, r3, #7
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b7f      	cmp	r3, #127	; 0x7f
 800417c:	d8f0      	bhi.n	8004160 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	61fa      	str	r2, [r7, #28]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800418e:	2215      	movs	r2, #21
 8004190:	68f9      	ldr	r1, [r7, #12]
 8004192:	6938      	ldr	r0, [r7, #16]
 8004194:	f7ff fab4 	bl	8003700 <_SendPacket>
  RECORD_END();
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f383 8811 	msr	BASEPRI, r3
}
 800419e:	bf00      	nop
 80041a0:	3748      	adds	r7, #72	; 0x48
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200143d8 	.word	0x200143d8
 80041ac:	200143a8 	.word	0x200143a8

080041b0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80041b4:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80041c6:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4798      	blx	r3
  }
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	200143a8 	.word	0x200143a8

080041d8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80041e0:	f3ef 8311 	mrs	r3, BASEPRI
 80041e4:	f04f 0120 	mov.w	r1, #32
 80041e8:	f381 8811 	msr	BASEPRI, r1
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	480b      	ldr	r0, [pc, #44]	; (800421c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80041f0:	f7ff f993 	bl	800351a <_PreparePacket>
 80041f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80041f6:	2280      	movs	r2, #128	; 0x80
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	6938      	ldr	r0, [r7, #16]
 80041fc:	f7ff f940 	bl	8003480 <_EncodeStr>
 8004200:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004202:	220e      	movs	r2, #14
 8004204:	68f9      	ldr	r1, [r7, #12]
 8004206:	6938      	ldr	r0, [r7, #16]
 8004208:	f7ff fa7a 	bl	8003700 <_SendPacket>
  RECORD_END();
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f383 8811 	msr	BASEPRI, r3
}
 8004212:	bf00      	nop
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	200143d8 	.word	0x200143d8

08004220 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01a      	beq.n	8004264 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d015      	beq.n	8004264 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004238:	4b10      	ldr	r3, [pc, #64]	; (800427c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4798      	blx	r3
 8004240:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004244:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004246:	e9d7 0100 	ldrd	r0, r1, [r7]
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	000a      	movs	r2, r1
 8004254:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004256:	4613      	mov	r3, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4621      	mov	r1, r4
 800425c:	200d      	movs	r0, #13
 800425e:	f7ff fbe5 	bl	8003a2c <SEGGER_SYSVIEW_RecordU32x2>
 8004262:	e006      	b.n	8004272 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4619      	mov	r1, r3
 800426a:	200c      	movs	r0, #12
 800426c:	f7ff fba2 	bl	80039b4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop
 800427c:	200143a8 	.word	0x200143a8
 8004280:	e0001004 	.word	0xe0001004

08004284 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800428a:	f3ef 8311 	mrs	r3, BASEPRI
 800428e:	f04f 0120 	mov.w	r1, #32
 8004292:	f381 8811 	msr	BASEPRI, r1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	4819      	ldr	r0, [pc, #100]	; (8004300 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800429a:	f7ff f93e 	bl	800351a <_PreparePacket>
 800429e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80042a4:	4b17      	ldr	r3, [pc, #92]	; (8004304 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ac:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	e00b      	b.n	80042d0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	1c59      	adds	r1, r3, #1
 80042c0:	6179      	str	r1, [r7, #20]
 80042c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	09db      	lsrs	r3, r3, #7
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b7f      	cmp	r3, #127	; 0x7f
 80042d4:	d8f0      	bhi.n	80042b8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	617a      	str	r2, [r7, #20]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80042e6:	2202      	movs	r2, #2
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	68b8      	ldr	r0, [r7, #8]
 80042ec:	f7ff fa08 	bl	8003700 <_SendPacket>
  RECORD_END();
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f383 8811 	msr	BASEPRI, r3
}
 80042f6:	bf00      	nop
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	200143d8 	.word	0x200143d8
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800430e:	f3ef 8311 	mrs	r3, BASEPRI
 8004312:	f04f 0120 	mov.w	r1, #32
 8004316:	f381 8811 	msr	BASEPRI, r1
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	4807      	ldr	r0, [pc, #28]	; (800433c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800431e:	f7ff f8fc 	bl	800351a <_PreparePacket>
 8004322:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004324:	2203      	movs	r2, #3
 8004326:	6839      	ldr	r1, [r7, #0]
 8004328:	6838      	ldr	r0, [r7, #0]
 800432a:	f7ff f9e9 	bl	8003700 <_SendPacket>
  RECORD_END();
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f383 8811 	msr	BASEPRI, r3
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	200143d8 	.word	0x200143d8

08004340 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004346:	f3ef 8311 	mrs	r3, BASEPRI
 800434a:	f04f 0120 	mov.w	r1, #32
 800434e:	f381 8811 	msr	BASEPRI, r1
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	4807      	ldr	r0, [pc, #28]	; (8004374 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004356:	f7ff f8e0 	bl	800351a <_PreparePacket>
 800435a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800435c:	2212      	movs	r2, #18
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	6838      	ldr	r0, [r7, #0]
 8004362:	f7ff f9cd 	bl	8003700 <_SendPacket>
  RECORD_END();
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f383 8811 	msr	BASEPRI, r3
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200143d8 	.word	0x200143d8

08004378 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800437e:	f3ef 8311 	mrs	r3, BASEPRI
 8004382:	f04f 0120 	mov.w	r1, #32
 8004386:	f381 8811 	msr	BASEPRI, r1
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	4807      	ldr	r0, [pc, #28]	; (80043ac <SEGGER_SYSVIEW_OnIdle+0x34>)
 800438e:	f7ff f8c4 	bl	800351a <_PreparePacket>
 8004392:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004394:	2211      	movs	r2, #17
 8004396:	6839      	ldr	r1, [r7, #0]
 8004398:	6838      	ldr	r0, [r7, #0]
 800439a:	f7ff f9b1 	bl	8003700 <_SendPacket>
  RECORD_END();
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f383 8811 	msr	BASEPRI, r3
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	200143d8 	.word	0x200143d8

080043b0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80043b8:	f3ef 8311 	mrs	r3, BASEPRI
 80043bc:	f04f 0120 	mov.w	r1, #32
 80043c0:	f381 8811 	msr	BASEPRI, r1
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	4819      	ldr	r0, [pc, #100]	; (800442c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80043c8:	f7ff f8a7 	bl	800351a <_PreparePacket>
 80043cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80043d2:	4b17      	ldr	r3, [pc, #92]	; (8004430 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	61bb      	str	r3, [r7, #24]
 80043e4:	e00b      	b.n	80043fe <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	1c59      	adds	r1, r3, #1
 80043ee:	61f9      	str	r1, [r7, #28]
 80043f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	09db      	lsrs	r3, r3, #7
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b7f      	cmp	r3, #127	; 0x7f
 8004402:	d8f0      	bhi.n	80043e6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	61fa      	str	r2, [r7, #28]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004414:	2208      	movs	r2, #8
 8004416:	68f9      	ldr	r1, [r7, #12]
 8004418:	6938      	ldr	r0, [r7, #16]
 800441a:	f7ff f971 	bl	8003700 <_SendPacket>
  RECORD_END();
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f383 8811 	msr	BASEPRI, r3
}
 8004424:	bf00      	nop
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	200143d8 	.word	0x200143d8
 8004430:	200143a8 	.word	0x200143a8

08004434 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800443c:	f3ef 8311 	mrs	r3, BASEPRI
 8004440:	f04f 0120 	mov.w	r1, #32
 8004444:	f381 8811 	msr	BASEPRI, r1
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	4819      	ldr	r0, [pc, #100]	; (80044b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800444c:	f7ff f865 	bl	800351a <_PreparePacket>
 8004450:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004456:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	e00b      	b.n	8004482 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	1c59      	adds	r1, r3, #1
 8004472:	61f9      	str	r1, [r7, #28]
 8004474:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	09db      	lsrs	r3, r3, #7
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b7f      	cmp	r3, #127	; 0x7f
 8004486:	d8f0      	bhi.n	800446a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	61fa      	str	r2, [r7, #28]
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004498:	2204      	movs	r2, #4
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	6938      	ldr	r0, [r7, #16]
 800449e:	f7ff f92f 	bl	8003700 <_SendPacket>
  RECORD_END();
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f383 8811 	msr	BASEPRI, r3
}
 80044a8:	bf00      	nop
 80044aa:	3720      	adds	r7, #32
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	200143d8 	.word	0x200143d8
 80044b4:	200143a8 	.word	0x200143a8

080044b8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044c0:	f3ef 8311 	mrs	r3, BASEPRI
 80044c4:	f04f 0120 	mov.w	r1, #32
 80044c8:	f381 8811 	msr	BASEPRI, r1
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	4819      	ldr	r0, [pc, #100]	; (8004534 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80044d0:	f7ff f823 	bl	800351a <_PreparePacket>
 80044d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80044da:	4b17      	ldr	r3, [pc, #92]	; (8004538 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	e00b      	b.n	8004506 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	1c59      	adds	r1, r3, #1
 80044f6:	61f9      	str	r1, [r7, #28]
 80044f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	09db      	lsrs	r3, r3, #7
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b7f      	cmp	r3, #127	; 0x7f
 800450a:	d8f0      	bhi.n	80044ee <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	61fa      	str	r2, [r7, #28]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800451c:	2206      	movs	r2, #6
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	6938      	ldr	r0, [r7, #16]
 8004522:	f7ff f8ed 	bl	8003700 <_SendPacket>
  RECORD_END();
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f383 8811 	msr	BASEPRI, r3
}
 800452c:	bf00      	nop
 800452e:	3720      	adds	r7, #32
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	200143d8 	.word	0x200143d8
 8004538:	200143a8 	.word	0x200143a8

0800453c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004546:	f3ef 8311 	mrs	r3, BASEPRI
 800454a:	f04f 0120 	mov.w	r1, #32
 800454e:	f381 8811 	msr	BASEPRI, r1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	4827      	ldr	r0, [pc, #156]	; (80045f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004556:	f7fe ffe0 	bl	800351a <_PreparePacket>
 800455a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	e00b      	b.n	800458c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	b2da      	uxtb	r2, r3
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	1c59      	adds	r1, r3, #1
 800457c:	6279      	str	r1, [r7, #36]	; 0x24
 800457e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	09db      	lsrs	r3, r3, #7
 800458a:	623b      	str	r3, [r7, #32]
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	2b7f      	cmp	r3, #127	; 0x7f
 8004590:	d8f0      	bhi.n	8004574 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	627a      	str	r2, [r7, #36]	; 0x24
 8004598:	6a3a      	ldr	r2, [r7, #32]
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	e00b      	b.n	80045c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	1c59      	adds	r1, r3, #1
 80045b4:	61f9      	str	r1, [r7, #28]
 80045b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	09db      	lsrs	r3, r3, #7
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b7f      	cmp	r3, #127	; 0x7f
 80045c8:	d8f0      	bhi.n	80045ac <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	61fa      	str	r2, [r7, #28]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80045da:	2207      	movs	r2, #7
 80045dc:	68f9      	ldr	r1, [r7, #12]
 80045de:	6938      	ldr	r0, [r7, #16]
 80045e0:	f7ff f88e 	bl	8003700 <_SendPacket>
  RECORD_END();
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f383 8811 	msr	BASEPRI, r3
}
 80045ea:	bf00      	nop
 80045ec:	3728      	adds	r7, #40	; 0x28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	200143d8 	.word	0x200143d8
 80045f8:	200143a8 	.word	0x200143a8

080045fc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004604:	4b04      	ldr	r3, [pc, #16]	; (8004618 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	1ad3      	subs	r3, r2, r3
}
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	200143a8 	.word	0x200143a8

0800461c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	; 0x30
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004626:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d06d      	beq.n	800470a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800462e:	4b39      	ldr	r3, [pc, #228]	; (8004714 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004634:	2300      	movs	r3, #0
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
 8004638:	e008      	b.n	800464c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	3301      	adds	r3, #1
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004650:	429a      	cmp	r2, r3
 8004652:	d3f2      	bcc.n	800463a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004654:	e000      	b.n	8004658 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004656:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d055      	beq.n	800470a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800465e:	f3ef 8311 	mrs	r3, BASEPRI
 8004662:	f04f 0120 	mov.w	r1, #32
 8004666:	f381 8811 	msr	BASEPRI, r1
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	482a      	ldr	r0, [pc, #168]	; (8004718 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800466e:	f7fe ff54 	bl	800351a <_PreparePacket>
 8004672:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	623b      	str	r3, [r7, #32]
 8004680:	e00b      	b.n	800469a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	1c59      	adds	r1, r3, #1
 800468a:	6279      	str	r1, [r7, #36]	; 0x24
 800468c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	09db      	lsrs	r3, r3, #7
 8004698:	623b      	str	r3, [r7, #32]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	2b7f      	cmp	r3, #127	; 0x7f
 800469e:	d8f0      	bhi.n	8004682 <SEGGER_SYSVIEW_SendModule+0x66>
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	627a      	str	r2, [r7, #36]	; 0x24
 80046a6:	6a3a      	ldr	r2, [r7, #32]
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	61fb      	str	r3, [r7, #28]
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e00b      	b.n	80046d4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	61f9      	str	r1, [r7, #28]
 80046c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	09db      	lsrs	r3, r3, #7
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b7f      	cmp	r3, #127	; 0x7f
 80046d8:	d8f0      	bhi.n	80046bc <SEGGER_SYSVIEW_SendModule+0xa0>
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	61fa      	str	r2, [r7, #28]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2280      	movs	r2, #128	; 0x80
 80046f0:	4619      	mov	r1, r3
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7fe fec4 	bl	8003480 <_EncodeStr>
 80046f8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80046fa:	2216      	movs	r2, #22
 80046fc:	68f9      	ldr	r1, [r7, #12]
 80046fe:	6938      	ldr	r0, [r7, #16]
 8004700:	f7fe fffe 	bl	8003700 <_SendPacket>
      RECORD_END();
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800470a:	bf00      	nop
 800470c:	3730      	adds	r7, #48	; 0x30
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	200143d0 	.word	0x200143d0
 8004718:	200143d8 	.word	0x200143d8

0800471c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00f      	beq.n	800474a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800472a:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f2      	bne.n	8004730 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	200143d0 	.word	0x200143d0

08004758 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800475e:	f3ef 8311 	mrs	r3, BASEPRI
 8004762:	f04f 0120 	mov.w	r1, #32
 8004766:	f381 8811 	msr	BASEPRI, r1
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	4817      	ldr	r0, [pc, #92]	; (80047cc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800476e:	f7fe fed4 	bl	800351a <_PreparePacket>
 8004772:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	e00b      	b.n	800479c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	6179      	str	r1, [r7, #20]
 800478e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	09db      	lsrs	r3, r3, #7
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b7f      	cmp	r3, #127	; 0x7f
 80047a0:	d8f0      	bhi.n	8004784 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	617a      	str	r2, [r7, #20]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80047b2:	221b      	movs	r2, #27
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	68b8      	ldr	r0, [r7, #8]
 80047b8:	f7fe ffa2 	bl	8003700 <_SendPacket>
  RECORD_END();
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f383 8811 	msr	BASEPRI, r3
}
 80047c2:	bf00      	nop
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200143d8 	.word	0x200143d8
 80047d0:	200143d4 	.word	0x200143d4

080047d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047dc:	f3ef 8311 	mrs	r3, BASEPRI
 80047e0:	f04f 0120 	mov.w	r1, #32
 80047e4:	f381 8811 	msr	BASEPRI, r1
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	4827      	ldr	r0, [pc, #156]	; (8004888 <SEGGER_SYSVIEW_Warn+0xb4>)
 80047ec:	f7fe fe95 	bl	800351a <_PreparePacket>
 80047f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047f2:	2280      	movs	r2, #128	; 0x80
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	6938      	ldr	r0, [r7, #16]
 80047f8:	f7fe fe42 	bl	8003480 <_EncodeStr>
 80047fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
 8004802:	2301      	movs	r3, #1
 8004804:	623b      	str	r3, [r7, #32]
 8004806:	e00b      	b.n	8004820 <SEGGER_SYSVIEW_Warn+0x4c>
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	6279      	str	r1, [r7, #36]	; 0x24
 8004812:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	09db      	lsrs	r3, r3, #7
 800481e:	623b      	str	r3, [r7, #32]
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	2b7f      	cmp	r3, #127	; 0x7f
 8004824:	d8f0      	bhi.n	8004808 <SEGGER_SYSVIEW_Warn+0x34>
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	627a      	str	r2, [r7, #36]	; 0x24
 800482c:	6a3a      	ldr	r2, [r7, #32]
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	61fb      	str	r3, [r7, #28]
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	e00b      	b.n	8004858 <SEGGER_SYSVIEW_Warn+0x84>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	b2da      	uxtb	r2, r3
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	61f9      	str	r1, [r7, #28]
 800484a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	09db      	lsrs	r3, r3, #7
 8004856:	61bb      	str	r3, [r7, #24]
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b7f      	cmp	r3, #127	; 0x7f
 800485c:	d8f0      	bhi.n	8004840 <SEGGER_SYSVIEW_Warn+0x6c>
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	61fa      	str	r2, [r7, #28]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800486e:	221a      	movs	r2, #26
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	6938      	ldr	r0, [r7, #16]
 8004874:	f7fe ff44 	bl	8003700 <_SendPacket>
  RECORD_END();
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f383 8811 	msr	BASEPRI, r3
}
 800487e:	bf00      	nop
 8004880:	3728      	adds	r7, #40	; 0x28
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	200143d8 	.word	0x200143d8

0800488c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004892:	7e1b      	ldrb	r3, [r3, #24]
 8004894:	4619      	mov	r1, r3
 8004896:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004898:	460b      	mov	r3, r1
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	440b      	add	r3, r1
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	336c      	adds	r3, #108	; 0x6c
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80048a8:	7e1b      	ldrb	r3, [r3, #24]
 80048aa:	4618      	mov	r0, r3
 80048ac:	490d      	ldr	r1, [pc, #52]	; (80048e4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80048ae:	4603      	mov	r3, r0
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4403      	add	r3, r0
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	440b      	add	r3, r1
 80048b8:	3370      	adds	r3, #112	; 0x70
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d00b      	beq.n	80048d8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80048c2:	789b      	ldrb	r3, [r3, #2]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d107      	bne.n	80048d8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80048ce:	f7fe fe31 	bl	8003534 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80048d2:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80048d8:	4b01      	ldr	r3, [pc, #4]	; (80048e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80048da:	781b      	ldrb	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200143a8 	.word	0x200143a8
 80048e4:	20012ee8 	.word	0x20012ee8

080048e8 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	2000      	movs	r0, #0
 80048fc:	f7fe fca6 	bl	800324c <SEGGER_RTT_Write>
  return len;
 8004900:	683b      	ldr	r3, [r7, #0]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <configPLL>:
#include <stdint.h>
#include <PLLDriver.h>


/** Función de configuración del PLL según la frecuencia en MHz*/
void configPLL(uint16_t PLLFreqMHz){
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	80fb      	strh	r3, [r7, #6]

	// 0. Se verifica antes que todo que el HSI sea el oscilador usado por el PLL
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 8004916:	4b78      	ldr	r3, [pc, #480]	; (8004af8 <configPLL+0x1ec>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4a77      	ldr	r2, [pc, #476]	; (8004af8 <configPLL+0x1ec>)
 800491c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004920:	6053      	str	r3, [r2, #4]

	// 1. Seleccionamos el regulador para la frecuencia deseada
	if(PLLFreqMHz<=64){
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	2b40      	cmp	r3, #64	; 0x40
 8004926:	d806      	bhi.n	8004936 <configPLL+0x2a>
		PWR->CR |= (0x1 << PWR_CR_VOS_Pos);
 8004928:	4b74      	ldr	r3, [pc, #464]	; (8004afc <configPLL+0x1f0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a73      	ldr	r2, [pc, #460]	; (8004afc <configPLL+0x1f0>)
 800492e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e018      	b.n	8004968 <configPLL+0x5c>
	}
	else if((64<PLLFreqMHz)&&(PLLFreqMHz<=84)){
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d909      	bls.n	8004950 <configPLL+0x44>
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	2b54      	cmp	r3, #84	; 0x54
 8004940:	d806      	bhi.n	8004950 <configPLL+0x44>
		PWR->CR |= (0x2 << PWR_CR_VOS_Pos);
 8004942:	4b6e      	ldr	r3, [pc, #440]	; (8004afc <configPLL+0x1f0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a6d      	ldr	r2, [pc, #436]	; (8004afc <configPLL+0x1f0>)
 8004948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	e00b      	b.n	8004968 <configPLL+0x5c>
	}
	else if((84<PLLFreqMHz)&&(PLLFreqMHz<=100)){
 8004950:	88fb      	ldrh	r3, [r7, #6]
 8004952:	2b54      	cmp	r3, #84	; 0x54
 8004954:	d908      	bls.n	8004968 <configPLL+0x5c>
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	2b64      	cmp	r3, #100	; 0x64
 800495a:	d805      	bhi.n	8004968 <configPLL+0x5c>
		PWR->CR |= (0x3 << PWR_CR_VOS_Pos);
 800495c:	4b67      	ldr	r3, [pc, #412]	; (8004afc <configPLL+0x1f0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a66      	ldr	r2, [pc, #408]	; (8004afc <configPLL+0x1f0>)
 8004962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004966:	6013      	str	r3, [r2, #0]
	}

	/* 2. Cambiamos los registros necesarios para poder acceder a la memoria flash */

	// 2.1 Prefetch, Data e Instruction Cache adecuados
	FLASH->ACR |= FLASH_ACR_PRFTEN;
 8004968:	4b65      	ldr	r3, [pc, #404]	; (8004b00 <configPLL+0x1f4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a64      	ldr	r2, [pc, #400]	; (8004b00 <configPLL+0x1f4>)
 800496e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004972:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_ICEN;
 8004974:	4b62      	ldr	r3, [pc, #392]	; (8004b00 <configPLL+0x1f4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a61      	ldr	r2, [pc, #388]	; (8004b00 <configPLL+0x1f4>)
 800497a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800497e:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_DCEN;
 8004980:	4b5f      	ldr	r3, [pc, #380]	; (8004b00 <configPLL+0x1f4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a5e      	ldr	r2, [pc, #376]	; (8004b00 <configPLL+0x1f4>)
 8004986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800498a:	6013      	str	r3, [r2, #0]

	// 2.2 Configuramos la respectiva latencia para PLLFreqMHz con X Wait States para 2.7 a 3.6 Voltios
	FLASH->ACR &= ~ FLASH_ACR_LATENCY;
 800498c:	4b5c      	ldr	r3, [pc, #368]	; (8004b00 <configPLL+0x1f4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a5b      	ldr	r2, [pc, #364]	; (8004b00 <configPLL+0x1f4>)
 8004992:	f023 0307 	bic.w	r3, r3, #7
 8004996:	6013      	str	r3, [r2, #0]
	if((0<PLLFreqMHz)&&(PLLFreqMHz<=30)){
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <configPLL+0xa2>
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	2b1e      	cmp	r3, #30
 80049a2:	d804      	bhi.n	80049ae <configPLL+0xa2>
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 80049a4:	4b56      	ldr	r3, [pc, #344]	; (8004b00 <configPLL+0x1f4>)
 80049a6:	4a56      	ldr	r2, [pc, #344]	; (8004b00 <configPLL+0x1f4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	e027      	b.n	80049fe <configPLL+0xf2>
	}
	else if((30<PLLFreqMHz)&&(PLLFreqMHz<=64)){
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	2b1e      	cmp	r3, #30
 80049b2:	d909      	bls.n	80049c8 <configPLL+0xbc>
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	d806      	bhi.n	80049c8 <configPLL+0xbc>
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 80049ba:	4b51      	ldr	r3, [pc, #324]	; (8004b00 <configPLL+0x1f4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a50      	ldr	r2, [pc, #320]	; (8004b00 <configPLL+0x1f4>)
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e01a      	b.n	80049fe <configPLL+0xf2>
	}
	else if((64<PLLFreqMHz)&&(PLLFreqMHz<=90)){
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d909      	bls.n	80049e2 <configPLL+0xd6>
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	2b5a      	cmp	r3, #90	; 0x5a
 80049d2:	d806      	bhi.n	80049e2 <configPLL+0xd6>
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 80049d4:	4b4a      	ldr	r3, [pc, #296]	; (8004b00 <configPLL+0x1f4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a49      	ldr	r2, [pc, #292]	; (8004b00 <configPLL+0x1f4>)
 80049da:	f043 0302 	orr.w	r3, r3, #2
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e00d      	b.n	80049fe <configPLL+0xf2>
	}
	else if((90<PLLFreqMHz)&&(PLLFreqMHz<=100)){
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2b5a      	cmp	r3, #90	; 0x5a
 80049e6:	d909      	bls.n	80049fc <configPLL+0xf0>
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	2b64      	cmp	r3, #100	; 0x64
 80049ec:	d806      	bhi.n	80049fc <configPLL+0xf0>
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 80049ee:	4b44      	ldr	r3, [pc, #272]	; (8004b00 <configPLL+0x1f4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a43      	ldr	r2, [pc, #268]	; (8004b00 <configPLL+0x1f4>)
 80049f4:	f043 0303 	orr.w	r3, r3, #3
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e000      	b.n	80049fe <configPLL+0xf2>
	}
	else{
		__NOP();
 80049fc:	bf00      	nop
	}

	/* 3. Ahora escogemos los pre-escaler adecuados */

	// 3.2 Definimos cual va hacer el valor del PLLM, pre-escaler que divide la frecuencia que recibe el PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 80049fe:	4b3e      	ldr	r3, [pc, #248]	; (8004af8 <configPLL+0x1ec>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	4a3d      	ldr	r2, [pc, #244]	; (8004af8 <configPLL+0x1ec>)
 8004a04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a08:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos); // Escogemos 8 y al VCO le llegan 2MHz, 16/8=2
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <configPLL+0x1ec>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <configPLL+0x1ec>)
 8004a10:	f043 0308 	orr.w	r3, r3, #8
 8004a14:	6053      	str	r3, [r2, #4]

	// 3.3 Definimos cual va a ser el valor del PLLN, pre-escaler que multiplica lo que entra al VCO
	/* NOTA: Como dejamos el PLLM en 8, y el PLLP en 2, el valor del PLLN siempre será igual
	 * a la PLLFreqMHz deseada, limitando que no pasemos de 100 MHz*/
	if(PLLFreqMHz<=100){
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	2b64      	cmp	r3, #100	; 0x64
 8004a1a:	d810      	bhi.n	8004a3e <configPLL+0x132>
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 8004a1c:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <configPLL+0x1ec>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a35      	ldr	r2, [pc, #212]	; (8004af8 <configPLL+0x1ec>)
 8004a22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a2a:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (PLLFreqMHz <<  RCC_PLLCFGR_PLLN_Pos); // Con esto si usamos 80 del VCO salen 160 MHz
 8004a2c:	4b32      	ldr	r3, [pc, #200]	; (8004af8 <configPLL+0x1ec>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	0192      	lsls	r2, r2, #6
 8004a34:	4611      	mov	r1, r2
 8004a36:	4a30      	ldr	r2, [pc, #192]	; (8004af8 <configPLL+0x1ec>)
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6053      	str	r3, [r2, #4]
 8004a3c:	e000      	b.n	8004a40 <configPLL+0x134>
	}
	else{
		__NOP();
 8004a3e:	bf00      	nop
	}

	// 3.4 Definimos cual va a ser el valor del PLLP, pre-escaler que divide lo que sale del VCO y llega al SysClk
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 8004a40:	4b2d      	ldr	r3, [pc, #180]	; (8004af8 <configPLL+0x1ec>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4a2c      	ldr	r2, [pc, #176]	; (8004af8 <configPLL+0x1ec>)
 8004a46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a4a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b00 <<RCC_PLLCFGR_PLLP_Pos); 	// Con esto dividimos por 2 y obtenemos 80 MHz, 160/2=80
 8004a4c:	4b2a      	ldr	r3, [pc, #168]	; (8004af8 <configPLL+0x1ec>)
 8004a4e:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <configPLL+0x1ec>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	6053      	str	r3, [r2, #4]

	// 3.5 Ahora configuramos para AHB
	RCC->CFGR &= ~RCC_CFGR_HPRE;
 8004a54:	4b28      	ldr	r3, [pc, #160]	; (8004af8 <configPLL+0x1ec>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4a27      	ldr	r2, [pc, #156]	; (8004af8 <configPLL+0x1ec>)
 8004a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a5e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // Con esto para el bus AHB dividimos por 1, queda en 80 MHz, o lo mismo del PLLFreqMHz
 8004a60:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <configPLL+0x1ec>)
 8004a62:	4a25      	ldr	r2, [pc, #148]	; (8004af8 <configPLL+0x1ec>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	6093      	str	r3, [r2, #8]

	// 3.6 Para APB1
	if(PLLFreqMHz>50){
 8004a68:	88fb      	ldrh	r3, [r7, #6]
 8004a6a:	2b32      	cmp	r3, #50	; 0x32
 8004a6c:	d90c      	bls.n	8004a88 <configPLL+0x17c>
		RCC->CFGR &= ~RCC_CFGR_PPRE1;
 8004a6e:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <configPLL+0x1ec>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <configPLL+0x1ec>)
 8004a74:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004a78:	6093      	str	r3, [r2, #8]
		// Si escogemos que se divide por 2, dan 40 MHz, esto para no exceder el límite de 50MHz
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8004a7a:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <configPLL+0x1ec>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <configPLL+0x1ec>)
 8004a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a84:	6093      	str	r3, [r2, #8]
 8004a86:	e00e      	b.n	8004aa6 <configPLL+0x19a>
	}
	else if(PLLFreqMHz<=50){
 8004a88:	88fb      	ldrh	r3, [r7, #6]
 8004a8a:	2b32      	cmp	r3, #50	; 0x32
 8004a8c:	d80a      	bhi.n	8004aa4 <configPLL+0x198>
		RCC->CFGR &= ~RCC_CFGR_PPRE1;
 8004a8e:	4b1a      	ldr	r3, [pc, #104]	; (8004af8 <configPLL+0x1ec>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <configPLL+0x1ec>)
 8004a94:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004a98:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8004a9a:	4b17      	ldr	r3, [pc, #92]	; (8004af8 <configPLL+0x1ec>)
 8004a9c:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <configPLL+0x1ec>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	6093      	str	r3, [r2, #8]
 8004aa2:	e000      	b.n	8004aa6 <configPLL+0x19a>
	}
	else{
		__NOP();
 8004aa4:	bf00      	nop
	}

	// 3.7 Para APB2
	// No se divide para valores en el registro menores a 4(binario), se queda en PLLFreqMHz, ya que admite hasta 100 MHz
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8004aa6:	4b14      	ldr	r3, [pc, #80]	; (8004af8 <configPLL+0x1ec>)
 8004aa8:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <configPLL+0x1ec>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	6093      	str	r3, [r2, #8]


	// 4. Ahora activamos el PLL
	RCC->CR |= RCC_CR_PLLON;
 8004aae:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <configPLL+0x1ec>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <configPLL+0x1ec>)
 8004ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab8:	6013      	str	r3, [r2, #0]

	// 5. Esperamos hasta que el hardware indique que el PLL esta desbloqueado
	while( !(RCC->CR & RCC_CR_PLLRDY)){
 8004aba:	e000      	b.n	8004abe <configPLL+0x1b2>
		__NOP();
 8004abc:	bf00      	nop
	while( !(RCC->CR & RCC_CR_PLLRDY)){
 8004abe:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <configPLL+0x1ec>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f8      	beq.n	8004abc <configPLL+0x1b0>
	}

	/* 6. Ahora convertimos nuestro PLL en nuestro System Clock, solo si la PLLFreqMHz no supera los 100MHz
	 * de lo contrario se queda con el HSI */
	if(PLLFreqMHz<=100){
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	2b64      	cmp	r3, #100	; 0x64
 8004ace:	d80c      	bhi.n	8004aea <configPLL+0x1de>
		RCC->CFGR &= ~RCC_CFGR_SW;
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <configPLL+0x1ec>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <configPLL+0x1ec>)
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_SW_1;
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <configPLL+0x1ec>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <configPLL+0x1ec>)
 8004ae2:	f043 0302 	orr.w	r3, r3, #2
 8004ae6:	6093      	str	r3, [r2, #8]
	}
	else{
		__NOP();
	}

}
 8004ae8:	e000      	b.n	8004aec <configPLL+0x1e0>
		__NOP();
 8004aea:	bf00      	nop
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40007000 	.word	0x40007000
 8004b00:	40023c00 	.word	0x40023c00

08004b04 <__errno>:
 8004b04:	4b01      	ldr	r3, [pc, #4]	; (8004b0c <__errno+0x8>)
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000014 	.word	0x20000014

08004b10 <__libc_init_array>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	4d0d      	ldr	r5, [pc, #52]	; (8004b48 <__libc_init_array+0x38>)
 8004b14:	4c0d      	ldr	r4, [pc, #52]	; (8004b4c <__libc_init_array+0x3c>)
 8004b16:	1b64      	subs	r4, r4, r5
 8004b18:	10a4      	asrs	r4, r4, #2
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	42a6      	cmp	r6, r4
 8004b1e:	d109      	bne.n	8004b34 <__libc_init_array+0x24>
 8004b20:	4d0b      	ldr	r5, [pc, #44]	; (8004b50 <__libc_init_array+0x40>)
 8004b22:	4c0c      	ldr	r4, [pc, #48]	; (8004b54 <__libc_init_array+0x44>)
 8004b24:	f000 fd2a 	bl	800557c <_init>
 8004b28:	1b64      	subs	r4, r4, r5
 8004b2a:	10a4      	asrs	r4, r4, #2
 8004b2c:	2600      	movs	r6, #0
 8004b2e:	42a6      	cmp	r6, r4
 8004b30:	d105      	bne.n	8004b3e <__libc_init_array+0x2e>
 8004b32:	bd70      	pop	{r4, r5, r6, pc}
 8004b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b38:	4798      	blx	r3
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7ee      	b.n	8004b1c <__libc_init_array+0xc>
 8004b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b42:	4798      	blx	r3
 8004b44:	3601      	adds	r6, #1
 8004b46:	e7f2      	b.n	8004b2e <__libc_init_array+0x1e>
 8004b48:	08005724 	.word	0x08005724
 8004b4c:	08005724 	.word	0x08005724
 8004b50:	08005724 	.word	0x08005724
 8004b54:	08005728 	.word	0x08005728

08004b58 <memcmp>:
 8004b58:	b510      	push	{r4, lr}
 8004b5a:	3901      	subs	r1, #1
 8004b5c:	4402      	add	r2, r0
 8004b5e:	4290      	cmp	r0, r2
 8004b60:	d101      	bne.n	8004b66 <memcmp+0xe>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e005      	b.n	8004b72 <memcmp+0x1a>
 8004b66:	7803      	ldrb	r3, [r0, #0]
 8004b68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	d001      	beq.n	8004b74 <memcmp+0x1c>
 8004b70:	1b18      	subs	r0, r3, r4
 8004b72:	bd10      	pop	{r4, pc}
 8004b74:	3001      	adds	r0, #1
 8004b76:	e7f2      	b.n	8004b5e <memcmp+0x6>

08004b78 <memcpy>:
 8004b78:	440a      	add	r2, r1
 8004b7a:	4291      	cmp	r1, r2
 8004b7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004b80:	d100      	bne.n	8004b84 <memcpy+0xc>
 8004b82:	4770      	bx	lr
 8004b84:	b510      	push	{r4, lr}
 8004b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b8e:	4291      	cmp	r1, r2
 8004b90:	d1f9      	bne.n	8004b86 <memcpy+0xe>
 8004b92:	bd10      	pop	{r4, pc}

08004b94 <memset>:
 8004b94:	4402      	add	r2, r0
 8004b96:	4603      	mov	r3, r0
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d100      	bne.n	8004b9e <memset+0xa>
 8004b9c:	4770      	bx	lr
 8004b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba2:	e7f9      	b.n	8004b98 <memset+0x4>

08004ba4 <_puts_r>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	460e      	mov	r6, r1
 8004ba8:	4605      	mov	r5, r0
 8004baa:	b118      	cbz	r0, 8004bb4 <_puts_r+0x10>
 8004bac:	6983      	ldr	r3, [r0, #24]
 8004bae:	b90b      	cbnz	r3, 8004bb4 <_puts_r+0x10>
 8004bb0:	f000 fa48 	bl	8005044 <__sinit>
 8004bb4:	69ab      	ldr	r3, [r5, #24]
 8004bb6:	68ac      	ldr	r4, [r5, #8]
 8004bb8:	b913      	cbnz	r3, 8004bc0 <_puts_r+0x1c>
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 fa42 	bl	8005044 <__sinit>
 8004bc0:	4b2c      	ldr	r3, [pc, #176]	; (8004c74 <_puts_r+0xd0>)
 8004bc2:	429c      	cmp	r4, r3
 8004bc4:	d120      	bne.n	8004c08 <_puts_r+0x64>
 8004bc6:	686c      	ldr	r4, [r5, #4]
 8004bc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bca:	07db      	lsls	r3, r3, #31
 8004bcc:	d405      	bmi.n	8004bda <_puts_r+0x36>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	0598      	lsls	r0, r3, #22
 8004bd2:	d402      	bmi.n	8004bda <_puts_r+0x36>
 8004bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bd6:	f000 fad3 	bl	8005180 <__retarget_lock_acquire_recursive>
 8004bda:	89a3      	ldrh	r3, [r4, #12]
 8004bdc:	0719      	lsls	r1, r3, #28
 8004bde:	d51d      	bpl.n	8004c1c <_puts_r+0x78>
 8004be0:	6923      	ldr	r3, [r4, #16]
 8004be2:	b1db      	cbz	r3, 8004c1c <_puts_r+0x78>
 8004be4:	3e01      	subs	r6, #1
 8004be6:	68a3      	ldr	r3, [r4, #8]
 8004be8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bec:	3b01      	subs	r3, #1
 8004bee:	60a3      	str	r3, [r4, #8]
 8004bf0:	bb39      	cbnz	r1, 8004c42 <_puts_r+0x9e>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da38      	bge.n	8004c68 <_puts_r+0xc4>
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	210a      	movs	r1, #10
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f000 f848 	bl	8004c90 <__swbuf_r>
 8004c00:	3001      	adds	r0, #1
 8004c02:	d011      	beq.n	8004c28 <_puts_r+0x84>
 8004c04:	250a      	movs	r5, #10
 8004c06:	e011      	b.n	8004c2c <_puts_r+0x88>
 8004c08:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <_puts_r+0xd4>)
 8004c0a:	429c      	cmp	r4, r3
 8004c0c:	d101      	bne.n	8004c12 <_puts_r+0x6e>
 8004c0e:	68ac      	ldr	r4, [r5, #8]
 8004c10:	e7da      	b.n	8004bc8 <_puts_r+0x24>
 8004c12:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <_puts_r+0xd8>)
 8004c14:	429c      	cmp	r4, r3
 8004c16:	bf08      	it	eq
 8004c18:	68ec      	ldreq	r4, [r5, #12]
 8004c1a:	e7d5      	b.n	8004bc8 <_puts_r+0x24>
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f000 f888 	bl	8004d34 <__swsetup_r>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d0dd      	beq.n	8004be4 <_puts_r+0x40>
 8004c28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c2e:	07da      	lsls	r2, r3, #31
 8004c30:	d405      	bmi.n	8004c3e <_puts_r+0x9a>
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	059b      	lsls	r3, r3, #22
 8004c36:	d402      	bmi.n	8004c3e <_puts_r+0x9a>
 8004c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c3a:	f000 faa2 	bl	8005182 <__retarget_lock_release_recursive>
 8004c3e:	4628      	mov	r0, r5
 8004c40:	bd70      	pop	{r4, r5, r6, pc}
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	da04      	bge.n	8004c50 <_puts_r+0xac>
 8004c46:	69a2      	ldr	r2, [r4, #24]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	dc06      	bgt.n	8004c5a <_puts_r+0xb6>
 8004c4c:	290a      	cmp	r1, #10
 8004c4e:	d004      	beq.n	8004c5a <_puts_r+0xb6>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	6022      	str	r2, [r4, #0]
 8004c56:	7019      	strb	r1, [r3, #0]
 8004c58:	e7c5      	b.n	8004be6 <_puts_r+0x42>
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 f817 	bl	8004c90 <__swbuf_r>
 8004c62:	3001      	adds	r0, #1
 8004c64:	d1bf      	bne.n	8004be6 <_puts_r+0x42>
 8004c66:	e7df      	b.n	8004c28 <_puts_r+0x84>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	250a      	movs	r5, #10
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	6022      	str	r2, [r4, #0]
 8004c70:	701d      	strb	r5, [r3, #0]
 8004c72:	e7db      	b.n	8004c2c <_puts_r+0x88>
 8004c74:	080056e4 	.word	0x080056e4
 8004c78:	08005704 	.word	0x08005704
 8004c7c:	080056c4 	.word	0x080056c4

08004c80 <puts>:
 8004c80:	4b02      	ldr	r3, [pc, #8]	; (8004c8c <puts+0xc>)
 8004c82:	4601      	mov	r1, r0
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	f7ff bf8d 	b.w	8004ba4 <_puts_r>
 8004c8a:	bf00      	nop
 8004c8c:	20000014 	.word	0x20000014

08004c90 <__swbuf_r>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	460e      	mov	r6, r1
 8004c94:	4614      	mov	r4, r2
 8004c96:	4605      	mov	r5, r0
 8004c98:	b118      	cbz	r0, 8004ca2 <__swbuf_r+0x12>
 8004c9a:	6983      	ldr	r3, [r0, #24]
 8004c9c:	b90b      	cbnz	r3, 8004ca2 <__swbuf_r+0x12>
 8004c9e:	f000 f9d1 	bl	8005044 <__sinit>
 8004ca2:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <__swbuf_r+0x98>)
 8004ca4:	429c      	cmp	r4, r3
 8004ca6:	d12b      	bne.n	8004d00 <__swbuf_r+0x70>
 8004ca8:	686c      	ldr	r4, [r5, #4]
 8004caa:	69a3      	ldr	r3, [r4, #24]
 8004cac:	60a3      	str	r3, [r4, #8]
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	071a      	lsls	r2, r3, #28
 8004cb2:	d52f      	bpl.n	8004d14 <__swbuf_r+0x84>
 8004cb4:	6923      	ldr	r3, [r4, #16]
 8004cb6:	b36b      	cbz	r3, 8004d14 <__swbuf_r+0x84>
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	6820      	ldr	r0, [r4, #0]
 8004cbc:	1ac0      	subs	r0, r0, r3
 8004cbe:	6963      	ldr	r3, [r4, #20]
 8004cc0:	b2f6      	uxtb	r6, r6
 8004cc2:	4283      	cmp	r3, r0
 8004cc4:	4637      	mov	r7, r6
 8004cc6:	dc04      	bgt.n	8004cd2 <__swbuf_r+0x42>
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f000 f926 	bl	8004f1c <_fflush_r>
 8004cd0:	bb30      	cbnz	r0, 8004d20 <__swbuf_r+0x90>
 8004cd2:	68a3      	ldr	r3, [r4, #8]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	60a3      	str	r3, [r4, #8]
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	6022      	str	r2, [r4, #0]
 8004cde:	701e      	strb	r6, [r3, #0]
 8004ce0:	6963      	ldr	r3, [r4, #20]
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	4283      	cmp	r3, r0
 8004ce6:	d004      	beq.n	8004cf2 <__swbuf_r+0x62>
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	07db      	lsls	r3, r3, #31
 8004cec:	d506      	bpl.n	8004cfc <__swbuf_r+0x6c>
 8004cee:	2e0a      	cmp	r6, #10
 8004cf0:	d104      	bne.n	8004cfc <__swbuf_r+0x6c>
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f000 f911 	bl	8004f1c <_fflush_r>
 8004cfa:	b988      	cbnz	r0, 8004d20 <__swbuf_r+0x90>
 8004cfc:	4638      	mov	r0, r7
 8004cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d00:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <__swbuf_r+0x9c>)
 8004d02:	429c      	cmp	r4, r3
 8004d04:	d101      	bne.n	8004d0a <__swbuf_r+0x7a>
 8004d06:	68ac      	ldr	r4, [r5, #8]
 8004d08:	e7cf      	b.n	8004caa <__swbuf_r+0x1a>
 8004d0a:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <__swbuf_r+0xa0>)
 8004d0c:	429c      	cmp	r4, r3
 8004d0e:	bf08      	it	eq
 8004d10:	68ec      	ldreq	r4, [r5, #12]
 8004d12:	e7ca      	b.n	8004caa <__swbuf_r+0x1a>
 8004d14:	4621      	mov	r1, r4
 8004d16:	4628      	mov	r0, r5
 8004d18:	f000 f80c 	bl	8004d34 <__swsetup_r>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d0cb      	beq.n	8004cb8 <__swbuf_r+0x28>
 8004d20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004d24:	e7ea      	b.n	8004cfc <__swbuf_r+0x6c>
 8004d26:	bf00      	nop
 8004d28:	080056e4 	.word	0x080056e4
 8004d2c:	08005704 	.word	0x08005704
 8004d30:	080056c4 	.word	0x080056c4

08004d34 <__swsetup_r>:
 8004d34:	4b32      	ldr	r3, [pc, #200]	; (8004e00 <__swsetup_r+0xcc>)
 8004d36:	b570      	push	{r4, r5, r6, lr}
 8004d38:	681d      	ldr	r5, [r3, #0]
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	b125      	cbz	r5, 8004d4a <__swsetup_r+0x16>
 8004d40:	69ab      	ldr	r3, [r5, #24]
 8004d42:	b913      	cbnz	r3, 8004d4a <__swsetup_r+0x16>
 8004d44:	4628      	mov	r0, r5
 8004d46:	f000 f97d 	bl	8005044 <__sinit>
 8004d4a:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <__swsetup_r+0xd0>)
 8004d4c:	429c      	cmp	r4, r3
 8004d4e:	d10f      	bne.n	8004d70 <__swsetup_r+0x3c>
 8004d50:	686c      	ldr	r4, [r5, #4]
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d58:	0719      	lsls	r1, r3, #28
 8004d5a:	d42c      	bmi.n	8004db6 <__swsetup_r+0x82>
 8004d5c:	06dd      	lsls	r5, r3, #27
 8004d5e:	d411      	bmi.n	8004d84 <__swsetup_r+0x50>
 8004d60:	2309      	movs	r3, #9
 8004d62:	6033      	str	r3, [r6, #0]
 8004d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d6e:	e03e      	b.n	8004dee <__swsetup_r+0xba>
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <__swsetup_r+0xd4>)
 8004d72:	429c      	cmp	r4, r3
 8004d74:	d101      	bne.n	8004d7a <__swsetup_r+0x46>
 8004d76:	68ac      	ldr	r4, [r5, #8]
 8004d78:	e7eb      	b.n	8004d52 <__swsetup_r+0x1e>
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <__swsetup_r+0xd8>)
 8004d7c:	429c      	cmp	r4, r3
 8004d7e:	bf08      	it	eq
 8004d80:	68ec      	ldreq	r4, [r5, #12]
 8004d82:	e7e6      	b.n	8004d52 <__swsetup_r+0x1e>
 8004d84:	0758      	lsls	r0, r3, #29
 8004d86:	d512      	bpl.n	8004dae <__swsetup_r+0x7a>
 8004d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d8a:	b141      	cbz	r1, 8004d9e <__swsetup_r+0x6a>
 8004d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d90:	4299      	cmp	r1, r3
 8004d92:	d002      	beq.n	8004d9a <__swsetup_r+0x66>
 8004d94:	4630      	mov	r0, r6
 8004d96:	f000 fa5b 	bl	8005250 <_free_r>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	2300      	movs	r3, #0
 8004da8:	6063      	str	r3, [r4, #4]
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	f043 0308 	orr.w	r3, r3, #8
 8004db4:	81a3      	strh	r3, [r4, #12]
 8004db6:	6923      	ldr	r3, [r4, #16]
 8004db8:	b94b      	cbnz	r3, 8004dce <__swsetup_r+0x9a>
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc4:	d003      	beq.n	8004dce <__swsetup_r+0x9a>
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f000 fa01 	bl	80051d0 <__smakebuf_r>
 8004dce:	89a0      	ldrh	r0, [r4, #12]
 8004dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dd4:	f010 0301 	ands.w	r3, r0, #1
 8004dd8:	d00a      	beq.n	8004df0 <__swsetup_r+0xbc>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60a3      	str	r3, [r4, #8]
 8004dde:	6963      	ldr	r3, [r4, #20]
 8004de0:	425b      	negs	r3, r3
 8004de2:	61a3      	str	r3, [r4, #24]
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	b943      	cbnz	r3, 8004dfa <__swsetup_r+0xc6>
 8004de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004dec:	d1ba      	bne.n	8004d64 <__swsetup_r+0x30>
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
 8004df0:	0781      	lsls	r1, r0, #30
 8004df2:	bf58      	it	pl
 8004df4:	6963      	ldrpl	r3, [r4, #20]
 8004df6:	60a3      	str	r3, [r4, #8]
 8004df8:	e7f4      	b.n	8004de4 <__swsetup_r+0xb0>
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e7f7      	b.n	8004dee <__swsetup_r+0xba>
 8004dfe:	bf00      	nop
 8004e00:	20000014 	.word	0x20000014
 8004e04:	080056e4 	.word	0x080056e4
 8004e08:	08005704 	.word	0x08005704
 8004e0c:	080056c4 	.word	0x080056c4

08004e10 <__sflush_r>:
 8004e10:	898a      	ldrh	r2, [r1, #12]
 8004e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e16:	4605      	mov	r5, r0
 8004e18:	0710      	lsls	r0, r2, #28
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	d458      	bmi.n	8004ed0 <__sflush_r+0xc0>
 8004e1e:	684b      	ldr	r3, [r1, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	dc05      	bgt.n	8004e30 <__sflush_r+0x20>
 8004e24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	dc02      	bgt.n	8004e30 <__sflush_r+0x20>
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e32:	2e00      	cmp	r6, #0
 8004e34:	d0f9      	beq.n	8004e2a <__sflush_r+0x1a>
 8004e36:	2300      	movs	r3, #0
 8004e38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e3c:	682f      	ldr	r7, [r5, #0]
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	d032      	beq.n	8004ea8 <__sflush_r+0x98>
 8004e42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	075a      	lsls	r2, r3, #29
 8004e48:	d505      	bpl.n	8004e56 <__sflush_r+0x46>
 8004e4a:	6863      	ldr	r3, [r4, #4]
 8004e4c:	1ac0      	subs	r0, r0, r3
 8004e4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e50:	b10b      	cbz	r3, 8004e56 <__sflush_r+0x46>
 8004e52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e54:	1ac0      	subs	r0, r0, r3
 8004e56:	2300      	movs	r3, #0
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e5c:	6a21      	ldr	r1, [r4, #32]
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b0      	blx	r6
 8004e62:	1c43      	adds	r3, r0, #1
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	d106      	bne.n	8004e76 <__sflush_r+0x66>
 8004e68:	6829      	ldr	r1, [r5, #0]
 8004e6a:	291d      	cmp	r1, #29
 8004e6c:	d82c      	bhi.n	8004ec8 <__sflush_r+0xb8>
 8004e6e:	4a2a      	ldr	r2, [pc, #168]	; (8004f18 <__sflush_r+0x108>)
 8004e70:	40ca      	lsrs	r2, r1
 8004e72:	07d6      	lsls	r6, r2, #31
 8004e74:	d528      	bpl.n	8004ec8 <__sflush_r+0xb8>
 8004e76:	2200      	movs	r2, #0
 8004e78:	6062      	str	r2, [r4, #4]
 8004e7a:	04d9      	lsls	r1, r3, #19
 8004e7c:	6922      	ldr	r2, [r4, #16]
 8004e7e:	6022      	str	r2, [r4, #0]
 8004e80:	d504      	bpl.n	8004e8c <__sflush_r+0x7c>
 8004e82:	1c42      	adds	r2, r0, #1
 8004e84:	d101      	bne.n	8004e8a <__sflush_r+0x7a>
 8004e86:	682b      	ldr	r3, [r5, #0]
 8004e88:	b903      	cbnz	r3, 8004e8c <__sflush_r+0x7c>
 8004e8a:	6560      	str	r0, [r4, #84]	; 0x54
 8004e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e8e:	602f      	str	r7, [r5, #0]
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d0ca      	beq.n	8004e2a <__sflush_r+0x1a>
 8004e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	d002      	beq.n	8004ea2 <__sflush_r+0x92>
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 f9d7 	bl	8005250 <_free_r>
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ea6:	e7c1      	b.n	8004e2c <__sflush_r+0x1c>
 8004ea8:	6a21      	ldr	r1, [r4, #32]
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b0      	blx	r6
 8004eb0:	1c41      	adds	r1, r0, #1
 8004eb2:	d1c7      	bne.n	8004e44 <__sflush_r+0x34>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0c4      	beq.n	8004e44 <__sflush_r+0x34>
 8004eba:	2b1d      	cmp	r3, #29
 8004ebc:	d001      	beq.n	8004ec2 <__sflush_r+0xb2>
 8004ebe:	2b16      	cmp	r3, #22
 8004ec0:	d101      	bne.n	8004ec6 <__sflush_r+0xb6>
 8004ec2:	602f      	str	r7, [r5, #0]
 8004ec4:	e7b1      	b.n	8004e2a <__sflush_r+0x1a>
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ecc:	81a3      	strh	r3, [r4, #12]
 8004ece:	e7ad      	b.n	8004e2c <__sflush_r+0x1c>
 8004ed0:	690f      	ldr	r7, [r1, #16]
 8004ed2:	2f00      	cmp	r7, #0
 8004ed4:	d0a9      	beq.n	8004e2a <__sflush_r+0x1a>
 8004ed6:	0793      	lsls	r3, r2, #30
 8004ed8:	680e      	ldr	r6, [r1, #0]
 8004eda:	bf08      	it	eq
 8004edc:	694b      	ldreq	r3, [r1, #20]
 8004ede:	600f      	str	r7, [r1, #0]
 8004ee0:	bf18      	it	ne
 8004ee2:	2300      	movne	r3, #0
 8004ee4:	eba6 0807 	sub.w	r8, r6, r7
 8004ee8:	608b      	str	r3, [r1, #8]
 8004eea:	f1b8 0f00 	cmp.w	r8, #0
 8004eee:	dd9c      	ble.n	8004e2a <__sflush_r+0x1a>
 8004ef0:	6a21      	ldr	r1, [r4, #32]
 8004ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ef4:	4643      	mov	r3, r8
 8004ef6:	463a      	mov	r2, r7
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b0      	blx	r6
 8004efc:	2800      	cmp	r0, #0
 8004efe:	dc06      	bgt.n	8004f0e <__sflush_r+0xfe>
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f0c:	e78e      	b.n	8004e2c <__sflush_r+0x1c>
 8004f0e:	4407      	add	r7, r0
 8004f10:	eba8 0800 	sub.w	r8, r8, r0
 8004f14:	e7e9      	b.n	8004eea <__sflush_r+0xda>
 8004f16:	bf00      	nop
 8004f18:	20400001 	.word	0x20400001

08004f1c <_fflush_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	690b      	ldr	r3, [r1, #16]
 8004f20:	4605      	mov	r5, r0
 8004f22:	460c      	mov	r4, r1
 8004f24:	b913      	cbnz	r3, 8004f2c <_fflush_r+0x10>
 8004f26:	2500      	movs	r5, #0
 8004f28:	4628      	mov	r0, r5
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	b118      	cbz	r0, 8004f36 <_fflush_r+0x1a>
 8004f2e:	6983      	ldr	r3, [r0, #24]
 8004f30:	b90b      	cbnz	r3, 8004f36 <_fflush_r+0x1a>
 8004f32:	f000 f887 	bl	8005044 <__sinit>
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <_fflush_r+0x6c>)
 8004f38:	429c      	cmp	r4, r3
 8004f3a:	d11b      	bne.n	8004f74 <_fflush_r+0x58>
 8004f3c:	686c      	ldr	r4, [r5, #4]
 8004f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0ef      	beq.n	8004f26 <_fflush_r+0xa>
 8004f46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f48:	07d0      	lsls	r0, r2, #31
 8004f4a:	d404      	bmi.n	8004f56 <_fflush_r+0x3a>
 8004f4c:	0599      	lsls	r1, r3, #22
 8004f4e:	d402      	bmi.n	8004f56 <_fflush_r+0x3a>
 8004f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f52:	f000 f915 	bl	8005180 <__retarget_lock_acquire_recursive>
 8004f56:	4628      	mov	r0, r5
 8004f58:	4621      	mov	r1, r4
 8004f5a:	f7ff ff59 	bl	8004e10 <__sflush_r>
 8004f5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f60:	07da      	lsls	r2, r3, #31
 8004f62:	4605      	mov	r5, r0
 8004f64:	d4e0      	bmi.n	8004f28 <_fflush_r+0xc>
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	059b      	lsls	r3, r3, #22
 8004f6a:	d4dd      	bmi.n	8004f28 <_fflush_r+0xc>
 8004f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f6e:	f000 f908 	bl	8005182 <__retarget_lock_release_recursive>
 8004f72:	e7d9      	b.n	8004f28 <_fflush_r+0xc>
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <_fflush_r+0x70>)
 8004f76:	429c      	cmp	r4, r3
 8004f78:	d101      	bne.n	8004f7e <_fflush_r+0x62>
 8004f7a:	68ac      	ldr	r4, [r5, #8]
 8004f7c:	e7df      	b.n	8004f3e <_fflush_r+0x22>
 8004f7e:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <_fflush_r+0x74>)
 8004f80:	429c      	cmp	r4, r3
 8004f82:	bf08      	it	eq
 8004f84:	68ec      	ldreq	r4, [r5, #12]
 8004f86:	e7da      	b.n	8004f3e <_fflush_r+0x22>
 8004f88:	080056e4 	.word	0x080056e4
 8004f8c:	08005704 	.word	0x08005704
 8004f90:	080056c4 	.word	0x080056c4

08004f94 <std>:
 8004f94:	2300      	movs	r3, #0
 8004f96:	b510      	push	{r4, lr}
 8004f98:	4604      	mov	r4, r0
 8004f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fa2:	6083      	str	r3, [r0, #8]
 8004fa4:	8181      	strh	r1, [r0, #12]
 8004fa6:	6643      	str	r3, [r0, #100]	; 0x64
 8004fa8:	81c2      	strh	r2, [r0, #14]
 8004faa:	6183      	str	r3, [r0, #24]
 8004fac:	4619      	mov	r1, r3
 8004fae:	2208      	movs	r2, #8
 8004fb0:	305c      	adds	r0, #92	; 0x5c
 8004fb2:	f7ff fdef 	bl	8004b94 <memset>
 8004fb6:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <std+0x38>)
 8004fb8:	6263      	str	r3, [r4, #36]	; 0x24
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <std+0x3c>)
 8004fbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <std+0x40>)
 8004fc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <std+0x44>)
 8004fc4:	6224      	str	r4, [r4, #32]
 8004fc6:	6323      	str	r3, [r4, #48]	; 0x30
 8004fc8:	bd10      	pop	{r4, pc}
 8004fca:	bf00      	nop
 8004fcc:	08005431 	.word	0x08005431
 8004fd0:	08005453 	.word	0x08005453
 8004fd4:	0800548b 	.word	0x0800548b
 8004fd8:	080054af 	.word	0x080054af

08004fdc <_cleanup_r>:
 8004fdc:	4901      	ldr	r1, [pc, #4]	; (8004fe4 <_cleanup_r+0x8>)
 8004fde:	f000 b8af 	b.w	8005140 <_fwalk_reent>
 8004fe2:	bf00      	nop
 8004fe4:	08004f1d 	.word	0x08004f1d

08004fe8 <__sfmoreglue>:
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	2268      	movs	r2, #104	; 0x68
 8004fec:	1e4d      	subs	r5, r1, #1
 8004fee:	4355      	muls	r5, r2
 8004ff0:	460e      	mov	r6, r1
 8004ff2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ff6:	f000 f997 	bl	8005328 <_malloc_r>
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	b140      	cbz	r0, 8005010 <__sfmoreglue+0x28>
 8004ffe:	2100      	movs	r1, #0
 8005000:	e9c0 1600 	strd	r1, r6, [r0]
 8005004:	300c      	adds	r0, #12
 8005006:	60a0      	str	r0, [r4, #8]
 8005008:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800500c:	f7ff fdc2 	bl	8004b94 <memset>
 8005010:	4620      	mov	r0, r4
 8005012:	bd70      	pop	{r4, r5, r6, pc}

08005014 <__sfp_lock_acquire>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__sfp_lock_acquire+0x8>)
 8005016:	f000 b8b3 	b.w	8005180 <__retarget_lock_acquire_recursive>
 800501a:	bf00      	nop
 800501c:	200144bc 	.word	0x200144bc

08005020 <__sfp_lock_release>:
 8005020:	4801      	ldr	r0, [pc, #4]	; (8005028 <__sfp_lock_release+0x8>)
 8005022:	f000 b8ae 	b.w	8005182 <__retarget_lock_release_recursive>
 8005026:	bf00      	nop
 8005028:	200144bc 	.word	0x200144bc

0800502c <__sinit_lock_acquire>:
 800502c:	4801      	ldr	r0, [pc, #4]	; (8005034 <__sinit_lock_acquire+0x8>)
 800502e:	f000 b8a7 	b.w	8005180 <__retarget_lock_acquire_recursive>
 8005032:	bf00      	nop
 8005034:	200144bd 	.word	0x200144bd

08005038 <__sinit_lock_release>:
 8005038:	4801      	ldr	r0, [pc, #4]	; (8005040 <__sinit_lock_release+0x8>)
 800503a:	f000 b8a2 	b.w	8005182 <__retarget_lock_release_recursive>
 800503e:	bf00      	nop
 8005040:	200144bd 	.word	0x200144bd

08005044 <__sinit>:
 8005044:	b510      	push	{r4, lr}
 8005046:	4604      	mov	r4, r0
 8005048:	f7ff fff0 	bl	800502c <__sinit_lock_acquire>
 800504c:	69a3      	ldr	r3, [r4, #24]
 800504e:	b11b      	cbz	r3, 8005058 <__sinit+0x14>
 8005050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005054:	f7ff bff0 	b.w	8005038 <__sinit_lock_release>
 8005058:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800505c:	6523      	str	r3, [r4, #80]	; 0x50
 800505e:	4b13      	ldr	r3, [pc, #76]	; (80050ac <__sinit+0x68>)
 8005060:	4a13      	ldr	r2, [pc, #76]	; (80050b0 <__sinit+0x6c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	62a2      	str	r2, [r4, #40]	; 0x28
 8005066:	42a3      	cmp	r3, r4
 8005068:	bf04      	itt	eq
 800506a:	2301      	moveq	r3, #1
 800506c:	61a3      	streq	r3, [r4, #24]
 800506e:	4620      	mov	r0, r4
 8005070:	f000 f820 	bl	80050b4 <__sfp>
 8005074:	6060      	str	r0, [r4, #4]
 8005076:	4620      	mov	r0, r4
 8005078:	f000 f81c 	bl	80050b4 <__sfp>
 800507c:	60a0      	str	r0, [r4, #8]
 800507e:	4620      	mov	r0, r4
 8005080:	f000 f818 	bl	80050b4 <__sfp>
 8005084:	2200      	movs	r2, #0
 8005086:	60e0      	str	r0, [r4, #12]
 8005088:	2104      	movs	r1, #4
 800508a:	6860      	ldr	r0, [r4, #4]
 800508c:	f7ff ff82 	bl	8004f94 <std>
 8005090:	68a0      	ldr	r0, [r4, #8]
 8005092:	2201      	movs	r2, #1
 8005094:	2109      	movs	r1, #9
 8005096:	f7ff ff7d 	bl	8004f94 <std>
 800509a:	68e0      	ldr	r0, [r4, #12]
 800509c:	2202      	movs	r2, #2
 800509e:	2112      	movs	r1, #18
 80050a0:	f7ff ff78 	bl	8004f94 <std>
 80050a4:	2301      	movs	r3, #1
 80050a6:	61a3      	str	r3, [r4, #24]
 80050a8:	e7d2      	b.n	8005050 <__sinit+0xc>
 80050aa:	bf00      	nop
 80050ac:	080056c0 	.word	0x080056c0
 80050b0:	08004fdd 	.word	0x08004fdd

080050b4 <__sfp>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	4607      	mov	r7, r0
 80050b8:	f7ff ffac 	bl	8005014 <__sfp_lock_acquire>
 80050bc:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <__sfp+0x84>)
 80050be:	681e      	ldr	r6, [r3, #0]
 80050c0:	69b3      	ldr	r3, [r6, #24]
 80050c2:	b913      	cbnz	r3, 80050ca <__sfp+0x16>
 80050c4:	4630      	mov	r0, r6
 80050c6:	f7ff ffbd 	bl	8005044 <__sinit>
 80050ca:	3648      	adds	r6, #72	; 0x48
 80050cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	d503      	bpl.n	80050dc <__sfp+0x28>
 80050d4:	6833      	ldr	r3, [r6, #0]
 80050d6:	b30b      	cbz	r3, 800511c <__sfp+0x68>
 80050d8:	6836      	ldr	r6, [r6, #0]
 80050da:	e7f7      	b.n	80050cc <__sfp+0x18>
 80050dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050e0:	b9d5      	cbnz	r5, 8005118 <__sfp+0x64>
 80050e2:	4b16      	ldr	r3, [pc, #88]	; (800513c <__sfp+0x88>)
 80050e4:	60e3      	str	r3, [r4, #12]
 80050e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050ea:	6665      	str	r5, [r4, #100]	; 0x64
 80050ec:	f000 f847 	bl	800517e <__retarget_lock_init_recursive>
 80050f0:	f7ff ff96 	bl	8005020 <__sfp_lock_release>
 80050f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050fc:	6025      	str	r5, [r4, #0]
 80050fe:	61a5      	str	r5, [r4, #24]
 8005100:	2208      	movs	r2, #8
 8005102:	4629      	mov	r1, r5
 8005104:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005108:	f7ff fd44 	bl	8004b94 <memset>
 800510c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005110:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005114:	4620      	mov	r0, r4
 8005116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005118:	3468      	adds	r4, #104	; 0x68
 800511a:	e7d9      	b.n	80050d0 <__sfp+0x1c>
 800511c:	2104      	movs	r1, #4
 800511e:	4638      	mov	r0, r7
 8005120:	f7ff ff62 	bl	8004fe8 <__sfmoreglue>
 8005124:	4604      	mov	r4, r0
 8005126:	6030      	str	r0, [r6, #0]
 8005128:	2800      	cmp	r0, #0
 800512a:	d1d5      	bne.n	80050d8 <__sfp+0x24>
 800512c:	f7ff ff78 	bl	8005020 <__sfp_lock_release>
 8005130:	230c      	movs	r3, #12
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	e7ee      	b.n	8005114 <__sfp+0x60>
 8005136:	bf00      	nop
 8005138:	080056c0 	.word	0x080056c0
 800513c:	ffff0001 	.word	0xffff0001

08005140 <_fwalk_reent>:
 8005140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005144:	4606      	mov	r6, r0
 8005146:	4688      	mov	r8, r1
 8005148:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800514c:	2700      	movs	r7, #0
 800514e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005152:	f1b9 0901 	subs.w	r9, r9, #1
 8005156:	d505      	bpl.n	8005164 <_fwalk_reent+0x24>
 8005158:	6824      	ldr	r4, [r4, #0]
 800515a:	2c00      	cmp	r4, #0
 800515c:	d1f7      	bne.n	800514e <_fwalk_reent+0xe>
 800515e:	4638      	mov	r0, r7
 8005160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005164:	89ab      	ldrh	r3, [r5, #12]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d907      	bls.n	800517a <_fwalk_reent+0x3a>
 800516a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800516e:	3301      	adds	r3, #1
 8005170:	d003      	beq.n	800517a <_fwalk_reent+0x3a>
 8005172:	4629      	mov	r1, r5
 8005174:	4630      	mov	r0, r6
 8005176:	47c0      	blx	r8
 8005178:	4307      	orrs	r7, r0
 800517a:	3568      	adds	r5, #104	; 0x68
 800517c:	e7e9      	b.n	8005152 <_fwalk_reent+0x12>

0800517e <__retarget_lock_init_recursive>:
 800517e:	4770      	bx	lr

08005180 <__retarget_lock_acquire_recursive>:
 8005180:	4770      	bx	lr

08005182 <__retarget_lock_release_recursive>:
 8005182:	4770      	bx	lr

08005184 <__swhatbuf_r>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	460e      	mov	r6, r1
 8005188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800518c:	2900      	cmp	r1, #0
 800518e:	b096      	sub	sp, #88	; 0x58
 8005190:	4614      	mov	r4, r2
 8005192:	461d      	mov	r5, r3
 8005194:	da08      	bge.n	80051a8 <__swhatbuf_r+0x24>
 8005196:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	602a      	str	r2, [r5, #0]
 800519e:	061a      	lsls	r2, r3, #24
 80051a0:	d410      	bmi.n	80051c4 <__swhatbuf_r+0x40>
 80051a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a6:	e00e      	b.n	80051c6 <__swhatbuf_r+0x42>
 80051a8:	466a      	mov	r2, sp
 80051aa:	f000 f995 	bl	80054d8 <_fstat_r>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	dbf1      	blt.n	8005196 <__swhatbuf_r+0x12>
 80051b2:	9a01      	ldr	r2, [sp, #4]
 80051b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051bc:	425a      	negs	r2, r3
 80051be:	415a      	adcs	r2, r3
 80051c0:	602a      	str	r2, [r5, #0]
 80051c2:	e7ee      	b.n	80051a2 <__swhatbuf_r+0x1e>
 80051c4:	2340      	movs	r3, #64	; 0x40
 80051c6:	2000      	movs	r0, #0
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	b016      	add	sp, #88	; 0x58
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080051d0 <__smakebuf_r>:
 80051d0:	898b      	ldrh	r3, [r1, #12]
 80051d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051d4:	079d      	lsls	r5, r3, #30
 80051d6:	4606      	mov	r6, r0
 80051d8:	460c      	mov	r4, r1
 80051da:	d507      	bpl.n	80051ec <__smakebuf_r+0x1c>
 80051dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	6123      	str	r3, [r4, #16]
 80051e4:	2301      	movs	r3, #1
 80051e6:	6163      	str	r3, [r4, #20]
 80051e8:	b002      	add	sp, #8
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	ab01      	add	r3, sp, #4
 80051ee:	466a      	mov	r2, sp
 80051f0:	f7ff ffc8 	bl	8005184 <__swhatbuf_r>
 80051f4:	9900      	ldr	r1, [sp, #0]
 80051f6:	4605      	mov	r5, r0
 80051f8:	4630      	mov	r0, r6
 80051fa:	f000 f895 	bl	8005328 <_malloc_r>
 80051fe:	b948      	cbnz	r0, 8005214 <__smakebuf_r+0x44>
 8005200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005204:	059a      	lsls	r2, r3, #22
 8005206:	d4ef      	bmi.n	80051e8 <__smakebuf_r+0x18>
 8005208:	f023 0303 	bic.w	r3, r3, #3
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	81a3      	strh	r3, [r4, #12]
 8005212:	e7e3      	b.n	80051dc <__smakebuf_r+0xc>
 8005214:	4b0d      	ldr	r3, [pc, #52]	; (800524c <__smakebuf_r+0x7c>)
 8005216:	62b3      	str	r3, [r6, #40]	; 0x28
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	6020      	str	r0, [r4, #0]
 800521c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005220:	81a3      	strh	r3, [r4, #12]
 8005222:	9b00      	ldr	r3, [sp, #0]
 8005224:	6163      	str	r3, [r4, #20]
 8005226:	9b01      	ldr	r3, [sp, #4]
 8005228:	6120      	str	r0, [r4, #16]
 800522a:	b15b      	cbz	r3, 8005244 <__smakebuf_r+0x74>
 800522c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005230:	4630      	mov	r0, r6
 8005232:	f000 f963 	bl	80054fc <_isatty_r>
 8005236:	b128      	cbz	r0, 8005244 <__smakebuf_r+0x74>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	81a3      	strh	r3, [r4, #12]
 8005244:	89a0      	ldrh	r0, [r4, #12]
 8005246:	4305      	orrs	r5, r0
 8005248:	81a5      	strh	r5, [r4, #12]
 800524a:	e7cd      	b.n	80051e8 <__smakebuf_r+0x18>
 800524c:	08004fdd 	.word	0x08004fdd

08005250 <_free_r>:
 8005250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005252:	2900      	cmp	r1, #0
 8005254:	d044      	beq.n	80052e0 <_free_r+0x90>
 8005256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800525a:	9001      	str	r0, [sp, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f1a1 0404 	sub.w	r4, r1, #4
 8005262:	bfb8      	it	lt
 8005264:	18e4      	addlt	r4, r4, r3
 8005266:	f000 f96b 	bl	8005540 <__malloc_lock>
 800526a:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <_free_r+0x94>)
 800526c:	9801      	ldr	r0, [sp, #4]
 800526e:	6813      	ldr	r3, [r2, #0]
 8005270:	b933      	cbnz	r3, 8005280 <_free_r+0x30>
 8005272:	6063      	str	r3, [r4, #4]
 8005274:	6014      	str	r4, [r2, #0]
 8005276:	b003      	add	sp, #12
 8005278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800527c:	f000 b966 	b.w	800554c <__malloc_unlock>
 8005280:	42a3      	cmp	r3, r4
 8005282:	d908      	bls.n	8005296 <_free_r+0x46>
 8005284:	6825      	ldr	r5, [r4, #0]
 8005286:	1961      	adds	r1, r4, r5
 8005288:	428b      	cmp	r3, r1
 800528a:	bf01      	itttt	eq
 800528c:	6819      	ldreq	r1, [r3, #0]
 800528e:	685b      	ldreq	r3, [r3, #4]
 8005290:	1949      	addeq	r1, r1, r5
 8005292:	6021      	streq	r1, [r4, #0]
 8005294:	e7ed      	b.n	8005272 <_free_r+0x22>
 8005296:	461a      	mov	r2, r3
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	b10b      	cbz	r3, 80052a0 <_free_r+0x50>
 800529c:	42a3      	cmp	r3, r4
 800529e:	d9fa      	bls.n	8005296 <_free_r+0x46>
 80052a0:	6811      	ldr	r1, [r2, #0]
 80052a2:	1855      	adds	r5, r2, r1
 80052a4:	42a5      	cmp	r5, r4
 80052a6:	d10b      	bne.n	80052c0 <_free_r+0x70>
 80052a8:	6824      	ldr	r4, [r4, #0]
 80052aa:	4421      	add	r1, r4
 80052ac:	1854      	adds	r4, r2, r1
 80052ae:	42a3      	cmp	r3, r4
 80052b0:	6011      	str	r1, [r2, #0]
 80052b2:	d1e0      	bne.n	8005276 <_free_r+0x26>
 80052b4:	681c      	ldr	r4, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	6053      	str	r3, [r2, #4]
 80052ba:	4421      	add	r1, r4
 80052bc:	6011      	str	r1, [r2, #0]
 80052be:	e7da      	b.n	8005276 <_free_r+0x26>
 80052c0:	d902      	bls.n	80052c8 <_free_r+0x78>
 80052c2:	230c      	movs	r3, #12
 80052c4:	6003      	str	r3, [r0, #0]
 80052c6:	e7d6      	b.n	8005276 <_free_r+0x26>
 80052c8:	6825      	ldr	r5, [r4, #0]
 80052ca:	1961      	adds	r1, r4, r5
 80052cc:	428b      	cmp	r3, r1
 80052ce:	bf04      	itt	eq
 80052d0:	6819      	ldreq	r1, [r3, #0]
 80052d2:	685b      	ldreq	r3, [r3, #4]
 80052d4:	6063      	str	r3, [r4, #4]
 80052d6:	bf04      	itt	eq
 80052d8:	1949      	addeq	r1, r1, r5
 80052da:	6021      	streq	r1, [r4, #0]
 80052dc:	6054      	str	r4, [r2, #4]
 80052de:	e7ca      	b.n	8005276 <_free_r+0x26>
 80052e0:	b003      	add	sp, #12
 80052e2:	bd30      	pop	{r4, r5, pc}
 80052e4:	200144c0 	.word	0x200144c0

080052e8 <sbrk_aligned>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	4e0e      	ldr	r6, [pc, #56]	; (8005324 <sbrk_aligned+0x3c>)
 80052ec:	460c      	mov	r4, r1
 80052ee:	6831      	ldr	r1, [r6, #0]
 80052f0:	4605      	mov	r5, r0
 80052f2:	b911      	cbnz	r1, 80052fa <sbrk_aligned+0x12>
 80052f4:	f000 f88c 	bl	8005410 <_sbrk_r>
 80052f8:	6030      	str	r0, [r6, #0]
 80052fa:	4621      	mov	r1, r4
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f887 	bl	8005410 <_sbrk_r>
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	d00a      	beq.n	800531c <sbrk_aligned+0x34>
 8005306:	1cc4      	adds	r4, r0, #3
 8005308:	f024 0403 	bic.w	r4, r4, #3
 800530c:	42a0      	cmp	r0, r4
 800530e:	d007      	beq.n	8005320 <sbrk_aligned+0x38>
 8005310:	1a21      	subs	r1, r4, r0
 8005312:	4628      	mov	r0, r5
 8005314:	f000 f87c 	bl	8005410 <_sbrk_r>
 8005318:	3001      	adds	r0, #1
 800531a:	d101      	bne.n	8005320 <sbrk_aligned+0x38>
 800531c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005320:	4620      	mov	r0, r4
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	200144c4 	.word	0x200144c4

08005328 <_malloc_r>:
 8005328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800532c:	1ccd      	adds	r5, r1, #3
 800532e:	f025 0503 	bic.w	r5, r5, #3
 8005332:	3508      	adds	r5, #8
 8005334:	2d0c      	cmp	r5, #12
 8005336:	bf38      	it	cc
 8005338:	250c      	movcc	r5, #12
 800533a:	2d00      	cmp	r5, #0
 800533c:	4607      	mov	r7, r0
 800533e:	db01      	blt.n	8005344 <_malloc_r+0x1c>
 8005340:	42a9      	cmp	r1, r5
 8005342:	d905      	bls.n	8005350 <_malloc_r+0x28>
 8005344:	230c      	movs	r3, #12
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	2600      	movs	r6, #0
 800534a:	4630      	mov	r0, r6
 800534c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005350:	4e2e      	ldr	r6, [pc, #184]	; (800540c <_malloc_r+0xe4>)
 8005352:	f000 f8f5 	bl	8005540 <__malloc_lock>
 8005356:	6833      	ldr	r3, [r6, #0]
 8005358:	461c      	mov	r4, r3
 800535a:	bb34      	cbnz	r4, 80053aa <_malloc_r+0x82>
 800535c:	4629      	mov	r1, r5
 800535e:	4638      	mov	r0, r7
 8005360:	f7ff ffc2 	bl	80052e8 <sbrk_aligned>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	4604      	mov	r4, r0
 8005368:	d14d      	bne.n	8005406 <_malloc_r+0xde>
 800536a:	6834      	ldr	r4, [r6, #0]
 800536c:	4626      	mov	r6, r4
 800536e:	2e00      	cmp	r6, #0
 8005370:	d140      	bne.n	80053f4 <_malloc_r+0xcc>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	4631      	mov	r1, r6
 8005376:	4638      	mov	r0, r7
 8005378:	eb04 0803 	add.w	r8, r4, r3
 800537c:	f000 f848 	bl	8005410 <_sbrk_r>
 8005380:	4580      	cmp	r8, r0
 8005382:	d13a      	bne.n	80053fa <_malloc_r+0xd2>
 8005384:	6821      	ldr	r1, [r4, #0]
 8005386:	3503      	adds	r5, #3
 8005388:	1a6d      	subs	r5, r5, r1
 800538a:	f025 0503 	bic.w	r5, r5, #3
 800538e:	3508      	adds	r5, #8
 8005390:	2d0c      	cmp	r5, #12
 8005392:	bf38      	it	cc
 8005394:	250c      	movcc	r5, #12
 8005396:	4629      	mov	r1, r5
 8005398:	4638      	mov	r0, r7
 800539a:	f7ff ffa5 	bl	80052e8 <sbrk_aligned>
 800539e:	3001      	adds	r0, #1
 80053a0:	d02b      	beq.n	80053fa <_malloc_r+0xd2>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	442b      	add	r3, r5
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	e00e      	b.n	80053c8 <_malloc_r+0xa0>
 80053aa:	6822      	ldr	r2, [r4, #0]
 80053ac:	1b52      	subs	r2, r2, r5
 80053ae:	d41e      	bmi.n	80053ee <_malloc_r+0xc6>
 80053b0:	2a0b      	cmp	r2, #11
 80053b2:	d916      	bls.n	80053e2 <_malloc_r+0xba>
 80053b4:	1961      	adds	r1, r4, r5
 80053b6:	42a3      	cmp	r3, r4
 80053b8:	6025      	str	r5, [r4, #0]
 80053ba:	bf18      	it	ne
 80053bc:	6059      	strne	r1, [r3, #4]
 80053be:	6863      	ldr	r3, [r4, #4]
 80053c0:	bf08      	it	eq
 80053c2:	6031      	streq	r1, [r6, #0]
 80053c4:	5162      	str	r2, [r4, r5]
 80053c6:	604b      	str	r3, [r1, #4]
 80053c8:	4638      	mov	r0, r7
 80053ca:	f104 060b 	add.w	r6, r4, #11
 80053ce:	f000 f8bd 	bl	800554c <__malloc_unlock>
 80053d2:	f026 0607 	bic.w	r6, r6, #7
 80053d6:	1d23      	adds	r3, r4, #4
 80053d8:	1af2      	subs	r2, r6, r3
 80053da:	d0b6      	beq.n	800534a <_malloc_r+0x22>
 80053dc:	1b9b      	subs	r3, r3, r6
 80053de:	50a3      	str	r3, [r4, r2]
 80053e0:	e7b3      	b.n	800534a <_malloc_r+0x22>
 80053e2:	6862      	ldr	r2, [r4, #4]
 80053e4:	42a3      	cmp	r3, r4
 80053e6:	bf0c      	ite	eq
 80053e8:	6032      	streq	r2, [r6, #0]
 80053ea:	605a      	strne	r2, [r3, #4]
 80053ec:	e7ec      	b.n	80053c8 <_malloc_r+0xa0>
 80053ee:	4623      	mov	r3, r4
 80053f0:	6864      	ldr	r4, [r4, #4]
 80053f2:	e7b2      	b.n	800535a <_malloc_r+0x32>
 80053f4:	4634      	mov	r4, r6
 80053f6:	6876      	ldr	r6, [r6, #4]
 80053f8:	e7b9      	b.n	800536e <_malloc_r+0x46>
 80053fa:	230c      	movs	r3, #12
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	4638      	mov	r0, r7
 8005400:	f000 f8a4 	bl	800554c <__malloc_unlock>
 8005404:	e7a1      	b.n	800534a <_malloc_r+0x22>
 8005406:	6025      	str	r5, [r4, #0]
 8005408:	e7de      	b.n	80053c8 <_malloc_r+0xa0>
 800540a:	bf00      	nop
 800540c:	200144c0 	.word	0x200144c0

08005410 <_sbrk_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4d06      	ldr	r5, [pc, #24]	; (800542c <_sbrk_r+0x1c>)
 8005414:	2300      	movs	r3, #0
 8005416:	4604      	mov	r4, r0
 8005418:	4608      	mov	r0, r1
 800541a:	602b      	str	r3, [r5, #0]
 800541c:	f7fb f808 	bl	8000430 <_sbrk>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_sbrk_r+0x1a>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	b103      	cbz	r3, 800542a <_sbrk_r+0x1a>
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	200144c8 	.word	0x200144c8

08005430 <__sread>:
 8005430:	b510      	push	{r4, lr}
 8005432:	460c      	mov	r4, r1
 8005434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005438:	f000 f88e 	bl	8005558 <_read_r>
 800543c:	2800      	cmp	r0, #0
 800543e:	bfab      	itete	ge
 8005440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005442:	89a3      	ldrhlt	r3, [r4, #12]
 8005444:	181b      	addge	r3, r3, r0
 8005446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800544a:	bfac      	ite	ge
 800544c:	6563      	strge	r3, [r4, #84]	; 0x54
 800544e:	81a3      	strhlt	r3, [r4, #12]
 8005450:	bd10      	pop	{r4, pc}

08005452 <__swrite>:
 8005452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005456:	461f      	mov	r7, r3
 8005458:	898b      	ldrh	r3, [r1, #12]
 800545a:	05db      	lsls	r3, r3, #23
 800545c:	4605      	mov	r5, r0
 800545e:	460c      	mov	r4, r1
 8005460:	4616      	mov	r6, r2
 8005462:	d505      	bpl.n	8005470 <__swrite+0x1e>
 8005464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005468:	2302      	movs	r3, #2
 800546a:	2200      	movs	r2, #0
 800546c:	f000 f856 	bl	800551c <_lseek_r>
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800547a:	81a3      	strh	r3, [r4, #12]
 800547c:	4632      	mov	r2, r6
 800547e:	463b      	mov	r3, r7
 8005480:	4628      	mov	r0, r5
 8005482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005486:	f7ff ba2f 	b.w	80048e8 <_write_r>

0800548a <__sseek>:
 800548a:	b510      	push	{r4, lr}
 800548c:	460c      	mov	r4, r1
 800548e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005492:	f000 f843 	bl	800551c <_lseek_r>
 8005496:	1c43      	adds	r3, r0, #1
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	bf15      	itete	ne
 800549c:	6560      	strne	r0, [r4, #84]	; 0x54
 800549e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054a6:	81a3      	strheq	r3, [r4, #12]
 80054a8:	bf18      	it	ne
 80054aa:	81a3      	strhne	r3, [r4, #12]
 80054ac:	bd10      	pop	{r4, pc}

080054ae <__sclose>:
 80054ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b2:	f000 b801 	b.w	80054b8 <_close_r>
	...

080054b8 <_close_r>:
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4d06      	ldr	r5, [pc, #24]	; (80054d4 <_close_r+0x1c>)
 80054bc:	2300      	movs	r3, #0
 80054be:	4604      	mov	r4, r0
 80054c0:	4608      	mov	r0, r1
 80054c2:	602b      	str	r3, [r5, #0]
 80054c4:	f7fa ff7f 	bl	80003c6 <_close>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_close_r+0x1a>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_close_r+0x1a>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	200144c8 	.word	0x200144c8

080054d8 <_fstat_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d07      	ldr	r5, [pc, #28]	; (80054f8 <_fstat_r+0x20>)
 80054dc:	2300      	movs	r3, #0
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	602b      	str	r3, [r5, #0]
 80054e6:	f7fa ff7a 	bl	80003de <_fstat>
 80054ea:	1c43      	adds	r3, r0, #1
 80054ec:	d102      	bne.n	80054f4 <_fstat_r+0x1c>
 80054ee:	682b      	ldr	r3, [r5, #0]
 80054f0:	b103      	cbz	r3, 80054f4 <_fstat_r+0x1c>
 80054f2:	6023      	str	r3, [r4, #0]
 80054f4:	bd38      	pop	{r3, r4, r5, pc}
 80054f6:	bf00      	nop
 80054f8:	200144c8 	.word	0x200144c8

080054fc <_isatty_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4d06      	ldr	r5, [pc, #24]	; (8005518 <_isatty_r+0x1c>)
 8005500:	2300      	movs	r3, #0
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	f7fa ff79 	bl	80003fe <_isatty>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_isatty_r+0x1a>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_isatty_r+0x1a>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	200144c8 	.word	0x200144c8

0800551c <_lseek_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d07      	ldr	r5, [pc, #28]	; (800553c <_lseek_r+0x20>)
 8005520:	4604      	mov	r4, r0
 8005522:	4608      	mov	r0, r1
 8005524:	4611      	mov	r1, r2
 8005526:	2200      	movs	r2, #0
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fa ff72 	bl	8000414 <_lseek>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_lseek_r+0x1e>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_lseek_r+0x1e>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	200144c8 	.word	0x200144c8

08005540 <__malloc_lock>:
 8005540:	4801      	ldr	r0, [pc, #4]	; (8005548 <__malloc_lock+0x8>)
 8005542:	f7ff be1d 	b.w	8005180 <__retarget_lock_acquire_recursive>
 8005546:	bf00      	nop
 8005548:	200144bb 	.word	0x200144bb

0800554c <__malloc_unlock>:
 800554c:	4801      	ldr	r0, [pc, #4]	; (8005554 <__malloc_unlock+0x8>)
 800554e:	f7ff be18 	b.w	8005182 <__retarget_lock_release_recursive>
 8005552:	bf00      	nop
 8005554:	200144bb 	.word	0x200144bb

08005558 <_read_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d07      	ldr	r5, [pc, #28]	; (8005578 <_read_r+0x20>)
 800555c:	4604      	mov	r4, r0
 800555e:	4608      	mov	r0, r1
 8005560:	4611      	mov	r1, r2
 8005562:	2200      	movs	r2, #0
 8005564:	602a      	str	r2, [r5, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f7fa ff10 	bl	800038c <_read>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_read_r+0x1e>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_read_r+0x1e>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	200144c8 	.word	0x200144c8

0800557c <_init>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr

08005588 <_fini>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	bf00      	nop
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr
