
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005188  08005188  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005188  08005188  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005188  08005188  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001444c  20000070  08005200  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144bc  08005200  000244bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7fd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1a  00000000  00000000  0002c89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002f098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000126ca  00000000  00000000  0002fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c187  00000000  00000000  0004213a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064940  00000000  00000000  0004e2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b2c01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003320  00000000  00000000  000b2c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fe4 	.word	0x08004fe4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004fe4 	.word	0x08004fe4

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ed8 	.word	0x20012ed8

08000274 <main>:
/* Prototipos de funciones */
void vTaskOne( void * pvParameters );
void vTaskTwo( void * pvParameters );

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af02      	add	r7, sp, #8

	/* Activamos la unidad de punto flotante (FPU) */
	SCB->CPACR    |= (0xF << 20);
 800027a:	4b27      	ldr	r3, [pc, #156]	; (8000318 <main+0xa4>)
 800027c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000280:	4a25      	ldr	r2, [pc, #148]	; (8000318 <main+0xa4>)
 8000282:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000286:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Activamos del contador de Ticks */
	DWT->CTRL    |= (1 << 0);
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <main+0xa8>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a23      	ldr	r2, [pc, #140]	; (800031c <main+0xa8>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6013      	str	r3, [r2, #0]

	/* Necesario para el SEGGER*/
	vInitPrioGroupValue();
 8000296:	f001 fff7 	bl	8002288 <vInitPrioGroupValue>

	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 800029a:	f002 fb79 	bl	8002990 <SEGGER_SYSVIEW_Conf>
	/* Despues activamos el sistema */
	SEGGER_SYSVIEW_Start();
 800029e:	f003 fbe7 	bl	8003a70 <SEGGER_SYSVIEW_Start>

	BaseType_t xReturned;
	TaskHandle_t xHandleTask1 = NULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandleTask2 = NULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]

    xReturned = xTaskCreate(
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	2302      	movs	r3, #2
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <main+0xac>)
 80002b6:	22c8      	movs	r2, #200	; 0xc8
 80002b8:	491a      	ldr	r1, [pc, #104]	; (8000324 <main+0xb0>)
 80002ba:	481b      	ldr	r0, [pc, #108]	; (8000328 <main+0xb4>)
 80002bc:	f000 fcb8 	bl	8000c30 <xTaskCreate>
 80002c0:	6178      	str	r0, [r7, #20]
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-1",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask1 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d00a      	beq.n	80002de <main+0x6a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002cc:	f383 8811 	msr	BASEPRI, r3
 80002d0:	f3bf 8f6f 	isb	sy
 80002d4:	f3bf 8f4f 	dsb	sy
 80002d8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002da:	bf00      	nop
 80002dc:	e7fe      	b.n	80002dc <main+0x68>

    xReturned = xTaskCreate(
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	2302      	movs	r3, #2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <main+0xb8>)
 80002e8:	22c8      	movs	r2, #200	; 0xc8
 80002ea:	4911      	ldr	r1, [pc, #68]	; (8000330 <main+0xbc>)
 80002ec:	4811      	ldr	r0, [pc, #68]	; (8000334 <main+0xc0>)
 80002ee:	f000 fc9f 	bl	8000c30 <xTaskCreate>
 80002f2:	6178      	str	r0, [r7, #20]
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-2",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask2 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d00a      	beq.n	8000310 <main+0x9c>
        __asm volatile
 80002fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002fe:	f383 8811 	msr	BASEPRI, r3
 8000302:	f3bf 8f6f 	isb	sy
 8000306:	f3bf 8f4f 	dsb	sy
 800030a:	60fb      	str	r3, [r7, #12]
    }
 800030c:	bf00      	nop
 800030e:	e7fe      	b.n	800030e <main+0x9a>

    vTaskStartScheduler();
 8000310:	f000 fe08 	bl	8000f24 <vTaskStartScheduler>

    /* Loop forever */
	while(1){
 8000314:	e7fe      	b.n	8000314 <main+0xa0>
 8000316:	bf00      	nop
 8000318:	e000ed00 	.word	0xe000ed00
 800031c:	e0001000 	.word	0xe0001000
 8000320:	08004ffc 	.word	0x08004ffc
 8000324:	08005018 	.word	0x08005018
 8000328:	08000339 	.word	0x08000339
 800032c:	08005020 	.word	0x08005020
 8000330:	0800503c 	.word	0x0800503c
 8000334:	0800035d 	.word	0x0800035d

08000338 <vTaskOne>:
	}
}

/** Función que gobierna la tarea 1 */
void vTaskOne( void * pvParameters )
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]


    while(1)
    {
        /* Task code goes here. */
    	printf("%s\n", (char*)pvParameters);
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f004 f9d1 	bl	80046e8 <puts>
    	taskYIELD();
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <vTaskOne+0x20>)
 8000348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	f3bf 8f4f 	dsb	sy
 8000352:	f3bf 8f6f 	isb	sy
    	printf("%s\n", (char*)pvParameters);
 8000356:	e7f3      	b.n	8000340 <vTaskOne+0x8>
 8000358:	e000ed04 	.word	0xe000ed04

0800035c <vTaskTwo>:
    }
}

/** Función que gobierna la tarea 2 */
void vTaskTwo( void * pvParameters )
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]


    while(1)
    {
        /* Task code goes here. */
    	printf("%s\n", (char*)pvParameters);
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f004 f9bf 	bl	80046e8 <puts>
    	taskYIELD();
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <vTaskTwo+0x20>)
 800036c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	f3bf 8f4f 	dsb	sy
 8000376:	f3bf 8f6f 	isb	sy
    	printf("%s\n", (char*)pvParameters);
 800037a:	e7f3      	b.n	8000364 <vTaskTwo+0x8>
 800037c:	e000ed04 	.word	0xe000ed04

08000380 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	e00a      	b.n	80003a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000392:	f3af 8000 	nop.w
 8000396:	4601      	mov	r1, r0
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	1c5a      	adds	r2, r3, #1
 800039c:	60ba      	str	r2, [r7, #8]
 800039e:	b2ca      	uxtb	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	3301      	adds	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	697a      	ldr	r2, [r7, #20]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	dbf0      	blt.n	8000392 <_read+0x12>
	}

return len;
 80003b0:	687b      	ldr	r3, [r7, #4]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b083      	sub	sp, #12
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
	return -1;
 80003c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003e2:	605a      	str	r2, [r3, #4]
	return 0;
 80003e4:	2300      	movs	r3, #0
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <_isatty>:

int _isatty(int file)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b083      	sub	sp, #12
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
	return 1;
 80003fa:	2301      	movs	r3, #1
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
	return 0;
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800042c:	4a14      	ldr	r2, [pc, #80]	; (8000480 <_sbrk+0x5c>)
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <_sbrk+0x60>)
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <_sbrk+0x64>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d102      	bne.n	8000446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <_sbrk+0x64>)
 8000442:	4a12      	ldr	r2, [pc, #72]	; (800048c <_sbrk+0x68>)
 8000444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000446:	4b10      	ldr	r3, [pc, #64]	; (8000488 <_sbrk+0x64>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	693a      	ldr	r2, [r7, #16]
 8000450:	429a      	cmp	r2, r3
 8000452:	d207      	bcs.n	8000464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000454:	f004 f88a 	bl	800456c <__errno>
 8000458:	4603      	mov	r3, r0
 800045a:	220c      	movs	r2, #12
 800045c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800045e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000462:	e009      	b.n	8000478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <_sbrk+0x64>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <_sbrk+0x64>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4413      	add	r3, r2
 8000472:	4a05      	ldr	r2, [pc, #20]	; (8000488 <_sbrk+0x64>)
 8000474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000476:	68fb      	ldr	r3, [r7, #12]
}
 8000478:	4618      	mov	r0, r3
 800047a:	3718      	adds	r7, #24
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20020000 	.word	0x20020000
 8000484:	00000400 	.word	0x00000400
 8000488:	2000008c 	.word	0x2000008c
 800048c:	200144c0 	.word	0x200144c0

08000490 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000492:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000494:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <LoopForever+0x6>)
  ldr r1, =_edata
 800049a:	490d      	ldr	r1, [pc, #52]	; (80004d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800049c:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <LoopForever+0xe>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b0:	4c0a      	ldr	r4, [pc, #40]	; (80004dc <LoopForever+0x16>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004be:	f004 f85b 	bl	8004578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004c2:	f7ff fed7 	bl	8000274 <main>

080004c6 <LoopForever>:

LoopForever:
    b LoopForever
 80004c6:	e7fe      	b.n	80004c6 <LoopForever>
  ldr   r0, =_estack
 80004c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80004d4:	08005190 	.word	0x08005190
  ldr r2, =_sbss
 80004d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80004dc:	200144bc 	.word	0x200144bc

080004e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC_IRQHandler>

080004e2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f103 0208 	add.w	r2, r3, #8
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004fa:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f103 0208 	add.w	r2, r3, #8
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f103 0208 	add.w	r2, r3, #8
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000552:	d103      	bne.n	800055c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e00c      	b.n	8000576 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3308      	adds	r3, #8
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	e002      	b.n	800056a <vListInsert+0x2e>
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	68ba      	ldr	r2, [r7, #8]
 8000572:	429a      	cmp	r2, r3
 8000574:	d2f6      	bcs.n	8000564 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	601a      	str	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	6892      	ldr	r2, [r2, #8]
 80005c4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	6852      	ldr	r2, [r2, #4]
 80005ce:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d103      	bne.n	80005e2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1e5a      	subs	r2, r3, #1
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	681b      	ldr	r3, [r3, #0]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800060c:	2301      	movs	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d10a      	bne.n	8000630 <xQueueGenericReset+0x2e>
        __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	60fb      	str	r3, [r7, #12]
    }
 800062c:	bf00      	nop
 800062e:	e7fe      	b.n	800062e <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d052      	beq.n	80006dc <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800063a:	2b00      	cmp	r3, #0
 800063c:	d04e      	beq.n	80006dc <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000646:	2100      	movs	r1, #0
 8000648:	fba3 2302 	umull	r2, r3, r3, r2
 800064c:	2b00      	cmp	r3, #0
 800064e:	d000      	beq.n	8000652 <xQueueGenericReset+0x50>
 8000650:	2101      	movs	r1, #1
 8000652:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000654:	2b00      	cmp	r3, #0
 8000656:	d141      	bne.n	80006dc <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8000658:	f001 fe94 	bl	8002384 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000664:	6939      	ldr	r1, [r7, #16]
 8000666:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000668:	fb01 f303 	mul.w	r3, r1, r3
 800066c:	441a      	add	r2, r3
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	2200      	movs	r2, #0
 8000676:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000688:	3b01      	subs	r3, #1
 800068a:	6939      	ldr	r1, [r7, #16]
 800068c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800068e:	fb01 f303 	mul.w	r3, r1, r3
 8000692:	441a      	add	r2, r3
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	22ff      	movs	r2, #255	; 0xff
 800069c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	22ff      	movs	r2, #255	; 0xff
 80006a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d109      	bne.n	80006c2 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00f      	beq.n	80006d6 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	3310      	adds	r3, #16
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 ff84 	bl	80015c8 <xTaskRemoveFromEventList>
 80006c0:	e009      	b.n	80006d6 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3310      	adds	r3, #16
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff0b 	bl	80004e2 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	3324      	adds	r3, #36	; 0x24
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff06 	bl	80004e2 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80006d6:	f001 fe85 	bl	80023e4 <vPortExitCritical>
 80006da:	e001      	b.n	80006e0 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10a      	bne.n	80006fc <xQueueGenericReset+0xfa>
        __asm volatile
 80006e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ea:	f383 8811 	msr	BASEPRI, r3
 80006ee:	f3bf 8f6f 	isb	sy
 80006f2:	f3bf 8f4f 	dsb	sy
 80006f6:	60bb      	str	r3, [r7, #8]
    }
 80006f8:	bf00      	nop
 80006fa:	e7fe      	b.n	80006fa <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80006fc:	697b      	ldr	r3, [r7, #20]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000706:	b580      	push	{r7, lr}
 8000708:	b08a      	sub	sp, #40	; 0x28
 800070a:	af02      	add	r7, sp, #8
 800070c:	60f8      	str	r0, [r7, #12]
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	4613      	mov	r3, r2
 8000712:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d02e      	beq.n	800077c <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800071e:	2100      	movs	r1, #0
 8000720:	68ba      	ldr	r2, [r7, #8]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	fba3 2302 	umull	r2, r3, r3, r2
 8000728:	2b00      	cmp	r3, #0
 800072a:	d000      	beq.n	800072e <xQueueGenericCreate+0x28>
 800072c:	2101      	movs	r1, #1
 800072e:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000730:	2b00      	cmp	r3, #0
 8000732:	d123      	bne.n	800077c <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800073c:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000740:	d81c      	bhi.n	800077c <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	fb02 f303 	mul.w	r3, r2, r3
 800074a:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	3350      	adds	r3, #80	; 0x50
 8000750:	4618      	mov	r0, r3
 8000752:	f001 ff43 	bl	80025dc <pvPortMalloc>
 8000756:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d01c      	beq.n	8000798 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	3350      	adds	r3, #80	; 0x50
 8000766:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	4613      	mov	r3, r2
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	68b9      	ldr	r1, [r7, #8]
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f000 f814 	bl	80007a2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800077a:	e00d      	b.n	8000798 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10a      	bne.n	8000798 <xQueueGenericCreate+0x92>
        __asm volatile
 8000782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000786:	f383 8811 	msr	BASEPRI, r3
 800078a:	f3bf 8f6f 	isb	sy
 800078e:	f3bf 8f4f 	dsb	sy
 8000792:	613b      	str	r3, [r7, #16]
    }
 8000794:	bf00      	nop
 8000796:	e7fe      	b.n	8000796 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000798:	69fb      	ldr	r3, [r7, #28]
    }
 800079a:	4618      	mov	r0, r3
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d103      	bne.n	80007be <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e002      	b.n	80007c4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007d0:	2101      	movs	r1, #1
 80007d2:	69b8      	ldr	r0, [r7, #24]
 80007d4:	f7ff ff15 	bl	8000602 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	78fa      	ldrb	r2, [r7, #3]
 80007dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	68f9      	ldr	r1, [r7, #12]
 80007e6:	2073      	movs	r0, #115	; 0x73
 80007e8:	f003 f83a 	bl	8003860 <SEGGER_SYSVIEW_RecordU32x3>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b08f      	sub	sp, #60	; 0x3c
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10a      	bne.n	8000824 <xQueueReceive+0x30>
        __asm volatile
 800080e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000812:	f383 8811 	msr	BASEPRI, r3
 8000816:	f3bf 8f6f 	isb	sy
 800081a:	f3bf 8f4f 	dsb	sy
 800081e:	623b      	str	r3, [r7, #32]
    }
 8000820:	bf00      	nop
 8000822:	e7fe      	b.n	8000822 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d103      	bne.n	8000832 <xQueueReceive+0x3e>
 800082a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	2b00      	cmp	r3, #0
 8000830:	d101      	bne.n	8000836 <xQueueReceive+0x42>
 8000832:	2301      	movs	r3, #1
 8000834:	e000      	b.n	8000838 <xQueueReceive+0x44>
 8000836:	2300      	movs	r3, #0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10a      	bne.n	8000852 <xQueueReceive+0x5e>
        __asm volatile
 800083c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000840:	f383 8811 	msr	BASEPRI, r3
 8000844:	f3bf 8f6f 	isb	sy
 8000848:	f3bf 8f4f 	dsb	sy
 800084c:	61fb      	str	r3, [r7, #28]
    }
 800084e:	bf00      	nop
 8000850:	e7fe      	b.n	8000850 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000852:	f001 f8c5 	bl	80019e0 <xTaskGetSchedulerState>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <xQueueReceive+0x6e>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <xQueueReceive+0x72>
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <xQueueReceive+0x74>
 8000866:	2300      	movs	r3, #0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10a      	bne.n	8000882 <xQueueReceive+0x8e>
        __asm volatile
 800086c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	61bb      	str	r3, [r7, #24]
    }
 800087e:	bf00      	nop
 8000880:	e7fe      	b.n	8000880 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000882:	f001 fd7f 	bl	8002384 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800088a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d024      	beq.n	80008dc <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000892:	68b9      	ldr	r1, [r7, #8]
 8000894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000896:	f000 f8b3 	bl	8000a00 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089c:	4618      	mov	r0, r3
 800089e:	f003 fd0b 	bl	80042b8 <SEGGER_SYSVIEW_ShrinkId>
 80008a2:	4604      	mov	r4, r0
 80008a4:	2000      	movs	r0, #0
 80008a6:	f003 fd07 	bl	80042b8 <SEGGER_SYSVIEW_ShrinkId>
 80008aa:	4602      	mov	r2, r0
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2101      	movs	r1, #1
 80008b0:	9100      	str	r1, [sp, #0]
 80008b2:	4621      	mov	r1, r4
 80008b4:	205c      	movs	r0, #92	; 0x5c
 80008b6:	f003 f849 	bl	800394c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d004      	beq.n	80008d4 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008cc:	3310      	adds	r3, #16
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fe7a 	bl	80015c8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80008d4:	f001 fd86 	bl	80023e4 <vPortExitCritical>
                return pdPASS;
 80008d8:	2301      	movs	r3, #1
 80008da:	e08a      	b.n	80009f2 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d113      	bne.n	800090a <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80008e2:	f001 fd7f 	bl	80023e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80008e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 fce5 	bl	80042b8 <SEGGER_SYSVIEW_ShrinkId>
 80008ee:	4604      	mov	r4, r0
 80008f0:	2000      	movs	r0, #0
 80008f2:	f003 fce1 	bl	80042b8 <SEGGER_SYSVIEW_ShrinkId>
 80008f6:	4602      	mov	r2, r0
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2101      	movs	r1, #1
 80008fc:	9100      	str	r1, [sp, #0]
 80008fe:	4621      	mov	r1, r4
 8000900:	205c      	movs	r0, #92	; 0x5c
 8000902:	f003 f823 	bl	800394c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000906:	2300      	movs	r3, #0
 8000908:	e073      	b.n	80009f2 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090c:	2b00      	cmp	r3, #0
 800090e:	d106      	bne.n	800091e <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4618      	mov	r0, r3
 8000916:	f000 ff2f 	bl	8001778 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800091a:	2301      	movs	r3, #1
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800091e:	f001 fd61 	bl	80023e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000922:	f000 fb61 	bl	8000fe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000926:	f001 fd2d 	bl	8002384 <vPortEnterCritical>
 800092a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000930:	b25b      	sxtb	r3, r3
 8000932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000936:	d103      	bne.n	8000940 <xQueueReceive+0x14c>
 8000938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000946:	b25b      	sxtb	r3, r3
 8000948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800094c:	d103      	bne.n	8000956 <xQueueReceive+0x162>
 800094e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000956:	f001 fd45 	bl	80023e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800095a:	1d3a      	adds	r2, r7, #4
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f000 ff1e 	bl	80017a4 <xTaskCheckForTimeOut>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d124      	bne.n	80009b8 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800096e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000970:	f000 f8be 	bl	8000af0 <prvIsQueueEmpty>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d018      	beq.n	80009ac <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097c:	3324      	adds	r3, #36	; 0x24
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fdb4 	bl	80014f0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800098a:	f000 f85f 	bl	8000a4c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800098e:	f000 fb39 	bl	8001004 <xTaskResumeAll>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	f47f af74 	bne.w	8000882 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <xQueueReceive+0x208>)
 800099c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	f3bf 8f4f 	dsb	sy
 80009a6:	f3bf 8f6f 	isb	sy
 80009aa:	e76a      	b.n	8000882 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80009ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009ae:	f000 f84d 	bl	8000a4c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80009b2:	f000 fb27 	bl	8001004 <xTaskResumeAll>
 80009b6:	e764      	b.n	8000882 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80009b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009ba:	f000 f847 	bl	8000a4c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80009be:	f000 fb21 	bl	8001004 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009c4:	f000 f894 	bl	8000af0 <prvIsQueueEmpty>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f43f af59 	beq.w	8000882 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80009d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 fc70 	bl	80042b8 <SEGGER_SYSVIEW_ShrinkId>
 80009d8:	4604      	mov	r4, r0
 80009da:	2000      	movs	r0, #0
 80009dc:	f003 fc6c 	bl	80042b8 <SEGGER_SYSVIEW_ShrinkId>
 80009e0:	4602      	mov	r2, r0
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2101      	movs	r1, #1
 80009e6:	9100      	str	r1, [sp, #0]
 80009e8:	4621      	mov	r1, r4
 80009ea:	205c      	movs	r0, #92	; 0x5c
 80009ec:	f002 ffae 	bl	800394c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80009f0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3734      	adds	r7, #52	; 0x34
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	e000ed04 	.word	0xe000ed04

08000a00 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d018      	beq.n	8000a44 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68da      	ldr	r2, [r3, #12]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	441a      	add	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68da      	ldr	r2, [r3, #12]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d303      	bcc.n	8000a34 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68d9      	ldr	r1, [r3, #12]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	6838      	ldr	r0, [r7, #0]
 8000a40:	f003 fdce 	bl	80045e0 <memcpy>
    }
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000a54:	f001 fc96 	bl	8002384 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a5e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a60:	e011      	b.n	8000a86 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d012      	beq.n	8000a90 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3324      	adds	r3, #36	; 0x24
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fdaa 	bl	80015c8 <xTaskRemoveFromEventList>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000a7a:	f000 fef9 	bl	8001870 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	dce9      	bgt.n	8000a62 <prvUnlockQueue+0x16>
 8000a8e:	e000      	b.n	8000a92 <prvUnlockQueue+0x46>
                    break;
 8000a90:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	22ff      	movs	r2, #255	; 0xff
 8000a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000a9a:	f001 fca3 	bl	80023e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000a9e:	f001 fc71 	bl	8002384 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000aa8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000aaa:	e011      	b.n	8000ad0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d012      	beq.n	8000ada <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3310      	adds	r3, #16
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fd85 	bl	80015c8 <xTaskRemoveFromEventList>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000ac4:	f000 fed4 	bl	8001870 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	dce9      	bgt.n	8000aac <prvUnlockQueue+0x60>
 8000ad8:	e000      	b.n	8000adc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000ada:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000ae4:	f001 fc7e 	bl	80023e4 <vPortExitCritical>
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000af8:	f001 fc44 	bl	8002384 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000b04:	2301      	movs	r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	e001      	b.n	8000b0e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000b0e:	f001 fc69 	bl	80023e4 <vPortExitCritical>

    return xReturn;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10a      	bne.n	8000b46 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b34:	f383 8811 	msr	BASEPRI, r3
 8000b38:	f3bf 8f6f 	isb	sy
 8000b3c:	f3bf 8f4f 	dsb	sy
 8000b40:	60fb      	str	r3, [r7, #12]
    }
 8000b42:	bf00      	nop
 8000b44:	e7fe      	b.n	8000b44 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d024      	beq.n	8000b96 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e01e      	b.n	8000b90 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <vQueueAddToRegistry+0xa8>)
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	4413      	add	r3, r2
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d105      	bne.n	8000b6e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <vQueueAddToRegistry+0xa8>)
 8000b68:	4413      	add	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
                    break;
 8000b6c:	e013      	b.n	8000b96 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10a      	bne.n	8000b8a <vQueueAddToRegistry+0x6e>
 8000b74:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <vQueueAddToRegistry+0xa8>)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d104      	bne.n	8000b8a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <vQueueAddToRegistry+0xa8>)
 8000b86:	4413      	add	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d9dd      	bls.n	8000b52 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00f      	beq.n	8000bbc <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f003 fb84 	bl	80042b8 <SEGGER_SYSVIEW_ShrinkId>
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2071      	movs	r0, #113	; 0x71
 8000bb8:	f002 fdf8 	bl	80037ac <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000090 	.word	0x20000090

08000bc8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000bd8:	f001 fbd4 	bl	8002384 <vPortEnterCritical>
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be8:	d103      	bne.n	8000bf2 <vQueueWaitForMessageRestricted+0x2a>
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bfe:	d103      	bne.n	8000c08 <vQueueWaitForMessageRestricted+0x40>
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c08:	f001 fbec 	bl	80023e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d106      	bne.n	8000c22 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3324      	adds	r3, #36	; 0x24
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	68b9      	ldr	r1, [r7, #8]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fc8b 	bl	8001538 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff12 	bl	8000a4c <prvUnlockQueue>
    }
 8000c28:	bf00      	nop
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fcc9 	bl	80025dc <pvPortMalloc>
 8000c4a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d013      	beq.n	8000c7a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000c52:	2058      	movs	r0, #88	; 0x58
 8000c54:	f001 fcc2 	bl	80025dc <pvPortMalloc>
 8000c58:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d008      	beq.n	8000c72 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000c60:	2258      	movs	r2, #88	; 0x58
 8000c62:	2100      	movs	r1, #0
 8000c64:	69f8      	ldr	r0, [r7, #28]
 8000c66:	f003 fcc9 	bl	80045fc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8000c70:	e005      	b.n	8000c7e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f001 fd6c 	bl	8002750 <vPortFree>
 8000c78:	e001      	b.n	8000c7e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d013      	beq.n	8000cac <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c84:	88fa      	ldrh	r2, [r7, #6]
 8000c86:	2300      	movs	r3, #0
 8000c88:	9303      	str	r3, [sp, #12]
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	9302      	str	r3, [sp, #8]
 8000c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c90:	9301      	str	r3, [sp, #4]
 8000c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f000 f80e 	bl	8000cbc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000ca0:	69f8      	ldr	r0, [r7, #28]
 8000ca2:	f000 f899 	bl	8000dd8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	e002      	b.n	8000cb2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000cb2:	69bb      	ldr	r3, [r7, #24]
    }
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ccc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	21a5      	movs	r1, #165	; 0xa5
 8000cd6:	f003 fc91 	bl	80045fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	f023 0307 	bic.w	r3, r3, #7
 8000cf2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00a      	beq.n	8000d14 <prvInitialiseNewTask+0x58>
        __asm volatile
 8000cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d02:	f383 8811 	msr	BASEPRI, r3
 8000d06:	f3bf 8f6f 	isb	sy
 8000d0a:	f3bf 8f4f 	dsb	sy
 8000d0e:	617b      	str	r3, [r7, #20]
    }
 8000d10:	bf00      	nop
 8000d12:	e7fe      	b.n	8000d12 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d01e      	beq.n	8000d58 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e012      	b.n	8000d46 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	4413      	add	r3, r2
 8000d26:	7819      	ldrb	r1, [r3, #0]
 8000d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	3334      	adds	r3, #52	; 0x34
 8000d30:	460a      	mov	r2, r1
 8000d32:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	3301      	adds	r3, #1
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	2b09      	cmp	r3, #9
 8000d4a:	d9e9      	bls.n	8000d20 <prvInitialiseNewTask+0x64>
 8000d4c:	e000      	b.n	8000d50 <prvInitialiseNewTask+0x94>
            {
                break;
 8000d4e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	d90a      	bls.n	8000d74 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8000d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	613b      	str	r3, [r7, #16]
    }
 8000d70:	bf00      	nop
 8000d72:	e7fe      	b.n	8000d72 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d901      	bls.n	8000d7e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d88:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fbc7 	bl	8000522 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d96:	3318      	adds	r3, #24
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fbc2 	bl	8000522 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000da2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da6:	f1c3 0205 	rsb	r2, r3, #5
 8000daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	68f9      	ldr	r1, [r7, #12]
 8000db8:	69b8      	ldr	r0, [r7, #24]
 8000dba:	f001 f933 	bl	8002024 <pxPortInitialiseStack>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000de0:	f001 fad0 	bl	8002384 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000de4:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <prvAddNewTaskToReadyList+0x134>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <prvAddNewTaskToReadyList+0x134>)
 8000dec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000dee:	4b48      	ldr	r3, [pc, #288]	; (8000f10 <prvAddNewTaskToReadyList+0x138>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d109      	bne.n	8000e0a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000df6:	4a46      	ldr	r2, [pc, #280]	; (8000f10 <prvAddNewTaskToReadyList+0x138>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000dfc:	4b43      	ldr	r3, [pc, #268]	; (8000f0c <prvAddNewTaskToReadyList+0x134>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d110      	bne.n	8000e26 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000e04:	f000 fd52 	bl	80018ac <prvInitialiseTaskLists>
 8000e08:	e00d      	b.n	8000e26 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000e0a:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <prvAddNewTaskToReadyList+0x13c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d109      	bne.n	8000e26 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000e12:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <prvAddNewTaskToReadyList+0x138>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d802      	bhi.n	8000e26 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000e20:	4a3b      	ldr	r2, [pc, #236]	; (8000f10 <prvAddNewTaskToReadyList+0x138>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000e26:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <prvAddNewTaskToReadyList+0x140>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a3a      	ldr	r2, [pc, #232]	; (8000f18 <prvAddNewTaskToReadyList+0x140>)
 8000e2e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000e30:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <prvAddNewTaskToReadyList+0x140>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d016      	beq.n	8000e6c <prvAddNewTaskToReadyList+0x94>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 f973 	bl	800412c <SEGGER_SYSVIEW_OnTaskCreate>
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	461d      	mov	r5, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461c      	mov	r4, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	1ae3      	subs	r3, r4, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	462b      	mov	r3, r5
 8000e68:	f001 fe34 	bl	8002ad4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 f9e0 	bl	8004234 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	2201      	movs	r2, #1
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <prvAddNewTaskToReadyList+0x144>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <prvAddNewTaskToReadyList+0x144>)
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e8a:	4925      	ldr	r1, [pc, #148]	; (8000f20 <prvAddNewTaskToReadyList+0x148>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	3304      	adds	r3, #4
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	3204      	adds	r2, #4
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	1d1a      	adds	r2, r3, #4
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <prvAddNewTaskToReadyList+0x148>)
 8000eca:	441a      	add	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	615a      	str	r2, [r3, #20]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed4:	4912      	ldr	r1, [pc, #72]	; (8000f20 <prvAddNewTaskToReadyList+0x148>)
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	1c59      	adds	r1, r3, #1
 8000ee4:	480e      	ldr	r0, [pc, #56]	; (8000f20 <prvAddNewTaskToReadyList+0x148>)
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4403      	add	r3, r0
 8000ef0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000ef2:	f001 fa77 	bl	80023e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <prvAddNewTaskToReadyList+0x13c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <prvAddNewTaskToReadyList+0x138>)
 8000f00:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001a8 	.word	0x200001a8
 8000f10:	200000d0 	.word	0x200000d0
 8000f14:	200001b4 	.word	0x200001b4
 8000f18:	200001c4 	.word	0x200001c4
 8000f1c:	200001b0 	.word	0x200001b0
 8000f20:	200000d4 	.word	0x200000d4

08000f24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <vTaskStartScheduler+0xa4>)
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2300      	movs	r3, #0
 8000f34:	2282      	movs	r2, #130	; 0x82
 8000f36:	4925      	ldr	r1, [pc, #148]	; (8000fcc <vTaskStartScheduler+0xa8>)
 8000f38:	4825      	ldr	r0, [pc, #148]	; (8000fd0 <vTaskStartScheduler+0xac>)
 8000f3a:	f7ff fe79 	bl	8000c30 <xTaskCreate>
 8000f3e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d102      	bne.n	8000f4c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000f46:	f000 fde9 	bl	8001b1c <xTimerCreateTimerTask>
 8000f4a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d124      	bne.n	8000f9c <vTaskStartScheduler+0x78>
        __asm volatile
 8000f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f56:	f383 8811 	msr	BASEPRI, r3
 8000f5a:	f3bf 8f6f 	isb	sy
 8000f5e:	f3bf 8f4f 	dsb	sy
 8000f62:	60bb      	str	r3, [r7, #8]
    }
 8000f64:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <vTaskStartScheduler+0xb0>)
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f6c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <vTaskStartScheduler+0xb4>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <vTaskStartScheduler+0xb8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <vTaskStartScheduler+0xbc>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <vTaskStartScheduler+0xa4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d102      	bne.n	8000f8c <vTaskStartScheduler+0x68>
 8000f86:	f003 f8b5 	bl	80040f4 <SEGGER_SYSVIEW_OnIdle>
 8000f8a:	e004      	b.n	8000f96 <vTaskStartScheduler+0x72>
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <vTaskStartScheduler+0xbc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 f90d 	bl	80041b0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000f96:	f001 f8d5 	bl	8002144 <xPortStartScheduler>
 8000f9a:	e00e      	b.n	8000fba <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa2:	d10a      	bne.n	8000fba <vTaskStartScheduler+0x96>
        __asm volatile
 8000fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fa8:	f383 8811 	msr	BASEPRI, r3
 8000fac:	f3bf 8f6f 	isb	sy
 8000fb0:	f3bf 8f4f 	dsb	sy
 8000fb4:	607b      	str	r3, [r7, #4]
    }
 8000fb6:	bf00      	nop
 8000fb8:	e7fe      	b.n	8000fb8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <vTaskStartScheduler+0xc0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001cc 	.word	0x200001cc
 8000fcc:	08005044 	.word	0x08005044
 8000fd0:	08001889 	.word	0x08001889
 8000fd4:	200001c8 	.word	0x200001c8
 8000fd8:	200001b4 	.word	0x200001b4
 8000fdc:	200001ac 	.word	0x200001ac
 8000fe0:	200000d0 	.word	0x200000d0
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <vTaskSuspendAll+0x18>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a03      	ldr	r2, [pc, #12]	; (8001000 <vTaskSuspendAll+0x18>)
 8000ff4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	200001d0 	.word	0x200001d0

08001004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001012:	4b6d      	ldr	r3, [pc, #436]	; (80011c8 <xTaskResumeAll+0x1c4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10a      	bne.n	8001030 <xTaskResumeAll+0x2c>
        __asm volatile
 800101a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101e:	f383 8811 	msr	BASEPRI, r3
 8001022:	f3bf 8f6f 	isb	sy
 8001026:	f3bf 8f4f 	dsb	sy
 800102a:	607b      	str	r3, [r7, #4]
    }
 800102c:	bf00      	nop
 800102e:	e7fe      	b.n	800102e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001030:	f001 f9a8 	bl	8002384 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001034:	4b64      	ldr	r3, [pc, #400]	; (80011c8 <xTaskResumeAll+0x1c4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	4a63      	ldr	r2, [pc, #396]	; (80011c8 <xTaskResumeAll+0x1c4>)
 800103c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800103e:	4b62      	ldr	r3, [pc, #392]	; (80011c8 <xTaskResumeAll+0x1c4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 80b8 	bne.w	80011b8 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001048:	4b60      	ldr	r3, [pc, #384]	; (80011cc <xTaskResumeAll+0x1c8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80b3 	beq.w	80011b8 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001052:	e08e      	b.n	8001172 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001054:	4b5e      	ldr	r3, [pc, #376]	; (80011d0 <xTaskResumeAll+0x1cc>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	6a12      	ldr	r2, [r2, #32]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	69d2      	ldr	r2, [r2, #28]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3318      	adds	r3, #24
 800107e:	429a      	cmp	r2, r3
 8001080:	d103      	bne.n	800108a <xTaskResumeAll+0x86>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	6a1a      	ldr	r2, [r3, #32]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	2200      	movs	r2, #0
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	1e5a      	subs	r2, r3, #1
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	68d2      	ldr	r2, [r2, #12]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	6892      	ldr	r2, [r2, #8]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	3304      	adds	r3, #4
 80010bc:	429a      	cmp	r2, r3
 80010be:	d103      	bne.n	80010c8 <xTaskResumeAll+0xc4>
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1e5a      	subs	r2, r3, #1
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 f8aa 	bl	8004234 <SEGGER_SYSVIEW_OnTaskStartReady>
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	2201      	movs	r2, #1
 80010e6:	409a      	lsls	r2, r3
 80010e8:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <xTaskResumeAll+0x1d0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	4a39      	ldr	r2, [pc, #228]	; (80011d4 <xTaskResumeAll+0x1d0>)
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f6:	4938      	ldr	r1, [pc, #224]	; (80011d8 <xTaskResumeAll+0x1d4>)
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	3204      	adds	r2, #4
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	1d1a      	adds	r2, r3, #4
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4a28      	ldr	r2, [pc, #160]	; (80011d8 <xTaskResumeAll+0x1d4>)
 8001136:	441a      	add	r2, r3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	615a      	str	r2, [r3, #20]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001140:	4925      	ldr	r1, [pc, #148]	; (80011d8 <xTaskResumeAll+0x1d4>)
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	1c59      	adds	r1, r3, #1
 8001150:	4821      	ldr	r0, [pc, #132]	; (80011d8 <xTaskResumeAll+0x1d4>)
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4403      	add	r3, r0
 800115c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <xTaskResumeAll+0x1d8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	429a      	cmp	r2, r3
 800116a:	d302      	bcc.n	8001172 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <xTaskResumeAll+0x1dc>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <xTaskResumeAll+0x1cc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f47f af6c 	bne.w	8001054 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001182:	f000 fc11 	bl	80019a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <xTaskResumeAll+0x1e0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d010      	beq.n	80011b4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001192:	f000 f84b 	bl	800122c <xTaskIncrementTick>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <xTaskResumeAll+0x1dc>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f1      	bne.n	8001192 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <xTaskResumeAll+0x1e0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <xTaskResumeAll+0x1dc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80011b8:	f001 f914 	bl	80023e4 <vPortExitCritical>

    return xAlreadyYielded;
 80011bc:	697b      	ldr	r3, [r7, #20]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001d0 	.word	0x200001d0
 80011cc:	200001a8 	.word	0x200001a8
 80011d0:	20000168 	.word	0x20000168
 80011d4:	200001b0 	.word	0x200001b0
 80011d8:	200000d4 	.word	0x200000d4
 80011dc:	200000d0 	.word	0x200000d0
 80011e0:	200001bc 	.word	0x200001bc
 80011e4:	200001b8 	.word	0x200001b8

080011e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <xTaskGetTickCount+0x1c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200001ac 	.word	0x200001ac

08001208 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800120e:	f001 f9a5 	bl	800255c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <xTaskGetTickCountFromISR+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800121c:	683b      	ldr	r3, [r7, #0]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200001ac 	.word	0x200001ac

0800122c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001236:	4b70      	ldr	r3, [pc, #448]	; (80013f8 <xTaskIncrementTick+0x1cc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 80d1 	bne.w	80013e2 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001240:	4b6e      	ldr	r3, [pc, #440]	; (80013fc <xTaskIncrementTick+0x1d0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001248:	4a6c      	ldr	r2, [pc, #432]	; (80013fc <xTaskIncrementTick+0x1d0>)
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d120      	bne.n	8001296 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001254:	4b6a      	ldr	r3, [pc, #424]	; (8001400 <xTaskIncrementTick+0x1d4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00a      	beq.n	8001274 <xTaskIncrementTick+0x48>
        __asm volatile
 800125e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001262:	f383 8811 	msr	BASEPRI, r3
 8001266:	f3bf 8f6f 	isb	sy
 800126a:	f3bf 8f4f 	dsb	sy
 800126e:	607b      	str	r3, [r7, #4]
    }
 8001270:	bf00      	nop
 8001272:	e7fe      	b.n	8001272 <xTaskIncrementTick+0x46>
 8001274:	4b62      	ldr	r3, [pc, #392]	; (8001400 <xTaskIncrementTick+0x1d4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	4b62      	ldr	r3, [pc, #392]	; (8001404 <xTaskIncrementTick+0x1d8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a60      	ldr	r2, [pc, #384]	; (8001400 <xTaskIncrementTick+0x1d4>)
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4a60      	ldr	r2, [pc, #384]	; (8001404 <xTaskIncrementTick+0x1d8>)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b5f      	ldr	r3, [pc, #380]	; (8001408 <xTaskIncrementTick+0x1dc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a5e      	ldr	r2, [pc, #376]	; (8001408 <xTaskIncrementTick+0x1dc>)
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	f000 fb89 	bl	80019a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001296:	4b5d      	ldr	r3, [pc, #372]	; (800140c <xTaskIncrementTick+0x1e0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6a3a      	ldr	r2, [r7, #32]
 800129c:	429a      	cmp	r2, r3
 800129e:	f0c0 80a5 	bcc.w	80013ec <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012a2:	4b57      	ldr	r3, [pc, #348]	; (8001400 <xTaskIncrementTick+0x1d4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d104      	bne.n	80012b6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012ac:	4b57      	ldr	r3, [pc, #348]	; (800140c <xTaskIncrementTick+0x1e0>)
 80012ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b2:	601a      	str	r2, [r3, #0]
                    break;
 80012b4:	e09a      	b.n	80013ec <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012b6:	4b52      	ldr	r3, [pc, #328]	; (8001400 <xTaskIncrementTick+0x1d4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80012c6:	6a3a      	ldr	r2, [r7, #32]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d203      	bcs.n	80012d6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80012ce:	4a4f      	ldr	r2, [pc, #316]	; (800140c <xTaskIncrementTick+0x1e0>)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80012d4:	e08a      	b.n	80013ec <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	68d2      	ldr	r2, [r2, #12]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	6892      	ldr	r2, [r2, #8]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	3304      	adds	r3, #4
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d103      	bne.n	8001304 <xTaskIncrementTick+0xd8>
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	1e5a      	subs	r2, r3, #1
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	2b00      	cmp	r3, #0
 800131a:	d01e      	beq.n	800135a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	6a12      	ldr	r2, [r2, #32]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	69d2      	ldr	r2, [r2, #28]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	3318      	adds	r3, #24
 800133e:	429a      	cmp	r2, r3
 8001340:	d103      	bne.n	800134a <xTaskIncrementTick+0x11e>
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	6a1a      	ldr	r2, [r3, #32]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2200      	movs	r2, #0
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	1e5a      	subs	r2, r3, #1
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4618      	mov	r0, r3
 800135e:	f002 ff69 	bl	8004234 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	2201      	movs	r2, #1
 8001368:	409a      	lsls	r2, r3
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <xTaskIncrementTick+0x1e4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4313      	orrs	r3, r2
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <xTaskIncrementTick+0x1e4>)
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001378:	4926      	ldr	r1, [pc, #152]	; (8001414 <xTaskIncrementTick+0x1e8>)
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	3304      	adds	r3, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	3204      	adds	r2, #4
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	1d1a      	adds	r2, r3, #4
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <xTaskIncrementTick+0x1e8>)
 80013b8:	441a      	add	r2, r3
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c2:	4914      	ldr	r1, [pc, #80]	; (8001414 <xTaskIncrementTick+0x1e8>)
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	1c59      	adds	r1, r3, #1
 80013d2:	4810      	ldr	r0, [pc, #64]	; (8001414 <xTaskIncrementTick+0x1e8>)
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4403      	add	r3, r0
 80013de:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013e0:	e75f      	b.n	80012a2 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <xTaskIncrementTick+0x1ec>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <xTaskIncrementTick+0x1ec>)
 80013ea:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001d0 	.word	0x200001d0
 80013fc:	200001ac 	.word	0x200001ac
 8001400:	20000160 	.word	0x20000160
 8001404:	20000164 	.word	0x20000164
 8001408:	200001c0 	.word	0x200001c0
 800140c:	200001c8 	.word	0x200001c8
 8001410:	200001b0 	.word	0x200001b0
 8001414:	200000d4 	.word	0x200000d4
 8001418:	200001b8 	.word	0x200001b8

0800141c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <vTaskSwitchContext+0xbc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <vTaskSwitchContext+0xc0>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001430:	e04d      	b.n	80014ce <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <vTaskSwitchContext+0xc0>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <vTaskSwitchContext+0xc4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	fab3 f383 	clz	r3, r3
 8001444:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	f1c3 031f 	rsb	r3, r3, #31
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	4925      	ldr	r1, [pc, #148]	; (80014e4 <vTaskSwitchContext+0xc8>)
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10a      	bne.n	8001478 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001466:	f383 8811 	msr	BASEPRI, r3
 800146a:	f3bf 8f6f 	isb	sy
 800146e:	f3bf 8f4f 	dsb	sy
 8001472:	607b      	str	r3, [r7, #4]
    }
 8001474:	bf00      	nop
 8001476:	e7fe      	b.n	8001476 <vTaskSwitchContext+0x5a>
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4a18      	ldr	r2, [pc, #96]	; (80014e4 <vTaskSwitchContext+0xc8>)
 8001484:	4413      	add	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	3308      	adds	r3, #8
 800149a:	429a      	cmp	r2, r3
 800149c:	d104      	bne.n	80014a8 <vTaskSwitchContext+0x8c>
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <vTaskSwitchContext+0xcc>)
 80014b0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <vTaskSwitchContext+0xcc>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <vTaskSwitchContext+0xd0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d102      	bne.n	80014c4 <vTaskSwitchContext+0xa8>
 80014be:	f002 fe19 	bl	80040f4 <SEGGER_SYSVIEW_OnIdle>
}
 80014c2:	e004      	b.n	80014ce <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <vTaskSwitchContext+0xcc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fe71 	bl	80041b0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001d0 	.word	0x200001d0
 80014dc:	200001bc 	.word	0x200001bc
 80014e0:	200001b0 	.word	0x200001b0
 80014e4:	200000d4 	.word	0x200000d4
 80014e8:	200000d0 	.word	0x200000d0
 80014ec:	200001cc 	.word	0x200001cc

080014f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10a      	bne.n	8001516 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001504:	f383 8811 	msr	BASEPRI, r3
 8001508:	f3bf 8f6f 	isb	sy
 800150c:	f3bf 8f4f 	dsb	sy
 8001510:	60fb      	str	r3, [r7, #12]
    }
 8001512:	bf00      	nop
 8001514:	e7fe      	b.n	8001514 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <vTaskPlaceOnEventList+0x44>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3318      	adds	r3, #24
 800151c:	4619      	mov	r1, r3
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff f80c 	bl	800053c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001524:	2101      	movs	r1, #1
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	f000 fa78 	bl	8001a1c <prvAddCurrentTaskToDelayedList>
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200000d0 	.word	0x200000d0

08001538 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10a      	bne.n	8001560 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800154a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154e:	f383 8811 	msr	BASEPRI, r3
 8001552:	f3bf 8f6f 	isb	sy
 8001556:	f3bf 8f4f 	dsb	sy
 800155a:	613b      	str	r3, [r7, #16]
    }
 800155c:	bf00      	nop
 800155e:	e7fe      	b.n	800155e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	61da      	str	r2, [r3, #28]
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	6892      	ldr	r2, [r2, #8]
 8001576:	621a      	str	r2, [r3, #32]
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <vTaskPlaceOnEventListRestricted+0x8c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	3218      	adds	r2, #24
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f103 0218 	add.w	r2, r3, #24
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ac:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80015ae:	2024      	movs	r0, #36	; 0x24
 80015b0:	f002 f8a2 	bl	80036f8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	68b8      	ldr	r0, [r7, #8]
 80015b8:	f000 fa30 	bl	8001a1c <prvAddCurrentTaskToDelayedList>
    }
 80015bc:	bf00      	nop
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200000d0 	.word	0x200000d0

080015c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10a      	bne.n	80015f4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80015de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e2:	f383 8811 	msr	BASEPRI, r3
 80015e6:	f3bf 8f6f 	isb	sy
 80015ea:	f3bf 8f4f 	dsb	sy
 80015ee:	60fb      	str	r3, [r7, #12]
    }
 80015f0:	bf00      	nop
 80015f2:	e7fe      	b.n	80015f2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	6a3a      	ldr	r2, [r7, #32]
 8001600:	6a12      	ldr	r2, [r2, #32]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	69d2      	ldr	r2, [r2, #28]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	3318      	adds	r3, #24
 8001616:	429a      	cmp	r2, r3
 8001618:	d103      	bne.n	8001622 <xTaskRemoveFromEventList+0x5a>
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	6a1a      	ldr	r2, [r3, #32]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	1e5a      	subs	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001632:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <xTaskRemoveFromEventList+0x198>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d162      	bne.n	8001700 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	6a3a      	ldr	r2, [r7, #32]
 8001646:	68d2      	ldr	r2, [r2, #12]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	6a3a      	ldr	r2, [r7, #32]
 8001650:	6892      	ldr	r2, [r2, #8]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	3304      	adds	r3, #4
 800165c:	429a      	cmp	r2, r3
 800165e:	d103      	bne.n	8001668 <xTaskRemoveFromEventList+0xa0>
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	1e5a      	subs	r2, r3, #1
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fdda 	bl	8004234 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	2201      	movs	r2, #1
 8001686:	409a      	lsls	r2, r3
 8001688:	4b36      	ldr	r3, [pc, #216]	; (8001764 <xTaskRemoveFromEventList+0x19c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4313      	orrs	r3, r2
 800168e:	4a35      	ldr	r2, [pc, #212]	; (8001764 <xTaskRemoveFromEventList+0x19c>)
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001696:	4934      	ldr	r1, [pc, #208]	; (8001768 <xTaskRemoveFromEventList+0x1a0>)
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	3304      	adds	r3, #4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	6a3a      	ldr	r2, [r7, #32]
 80016bc:	3204      	adds	r2, #4
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	1d1a      	adds	r2, r3, #4
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4a24      	ldr	r2, [pc, #144]	; (8001768 <xTaskRemoveFromEventList+0x1a0>)
 80016d6:	441a      	add	r2, r3
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e0:	4921      	ldr	r1, [pc, #132]	; (8001768 <xTaskRemoveFromEventList+0x1a0>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	481d      	ldr	r0, [pc, #116]	; (8001768 <xTaskRemoveFromEventList+0x1a0>)
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4403      	add	r3, r0
 80016fc:	6019      	str	r1, [r3, #0]
 80016fe:	e01b      	b.n	8001738 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <xTaskRemoveFromEventList+0x1a4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	61da      	str	r2, [r3, #28]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	621a      	str	r2, [r3, #32]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	6a3a      	ldr	r2, [r7, #32]
 800171a:	3218      	adds	r2, #24
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	f103 0218 	add.w	r2, r3, #24
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <xTaskRemoveFromEventList+0x1a4>)
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <xTaskRemoveFromEventList+0x1a4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3301      	adds	r3, #1
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <xTaskRemoveFromEventList+0x1a4>)
 8001736:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <xTaskRemoveFromEventList+0x1a8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	429a      	cmp	r2, r3
 8001744:	d905      	bls.n	8001752 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001746:	2301      	movs	r3, #1
 8001748:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <xTaskRemoveFromEventList+0x1ac>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e001      	b.n	8001756 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001758:	4618      	mov	r0, r3
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200001d0 	.word	0x200001d0
 8001764:	200001b0 	.word	0x200001b0
 8001768:	200000d4 	.word	0x200000d4
 800176c:	20000168 	.word	0x20000168
 8001770:	200000d0 	.word	0x200000d0
 8001774:	200001bc 	.word	0x200001bc

08001778 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <vTaskInternalSetTimeOutState+0x24>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <vTaskInternalSetTimeOutState+0x28>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	605a      	str	r2, [r3, #4]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	200001c0 	.word	0x200001c0
 80017a0:	200001ac 	.word	0x200001ac

080017a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10a      	bne.n	80017ca <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80017b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b8:	f383 8811 	msr	BASEPRI, r3
 80017bc:	f3bf 8f6f 	isb	sy
 80017c0:	f3bf 8f4f 	dsb	sy
 80017c4:	613b      	str	r3, [r7, #16]
    }
 80017c6:	bf00      	nop
 80017c8:	e7fe      	b.n	80017c8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10a      	bne.n	80017e6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80017d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d4:	f383 8811 	msr	BASEPRI, r3
 80017d8:	f3bf 8f6f 	isb	sy
 80017dc:	f3bf 8f4f 	dsb	sy
 80017e0:	60fb      	str	r3, [r7, #12]
    }
 80017e2:	bf00      	nop
 80017e4:	e7fe      	b.n	80017e4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80017e6:	f000 fdcd 	bl	8002384 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <xTaskCheckForTimeOut+0xc4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001802:	d102      	bne.n	800180a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	e026      	b.n	8001858 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <xTaskCheckForTimeOut+0xc8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d00a      	beq.n	800182c <xTaskCheckForTimeOut+0x88>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	429a      	cmp	r2, r3
 800181e:	d305      	bcc.n	800182c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001820:	2301      	movs	r3, #1
 8001822:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e015      	b.n	8001858 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	429a      	cmp	r2, r3
 8001834:	d20b      	bcs.n	800184e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	1ad2      	subs	r2, r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ff98 	bl	8001778 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	e004      	b.n	8001858 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001854:	2301      	movs	r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001858:	f000 fdc4 	bl	80023e4 <vPortExitCritical>

    return xReturn;
 800185c:	69fb      	ldr	r3, [r7, #28]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200001ac 	.word	0x200001ac
 800186c:	200001c0 	.word	0x200001c0

08001870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <vTaskMissedYield+0x14>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	200001bc 	.word	0x200001bc

08001888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001890:	f000 f84c 	bl	800192c <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <prvIdleTask+0x20>)
 8001896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	f3bf 8f4f 	dsb	sy
 80018a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80018a4:	e7f4      	b.n	8001890 <prvIdleTask+0x8>
 80018a6:	bf00      	nop
 80018a8:	e000ed04 	.word	0xe000ed04

080018ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	e00c      	b.n	80018d2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <prvInitialiseTaskLists+0x60>)
 80018c4:	4413      	add	r3, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe0b 	bl	80004e2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3301      	adds	r3, #1
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d9ef      	bls.n	80018b8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <prvInitialiseTaskLists+0x64>)
 80018da:	f7fe fe02 	bl	80004e2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80018de:	480d      	ldr	r0, [pc, #52]	; (8001914 <prvInitialiseTaskLists+0x68>)
 80018e0:	f7fe fdff 	bl	80004e2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <prvInitialiseTaskLists+0x6c>)
 80018e6:	f7fe fdfc 	bl	80004e2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80018ea:	480c      	ldr	r0, [pc, #48]	; (800191c <prvInitialiseTaskLists+0x70>)
 80018ec:	f7fe fdf9 	bl	80004e2 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <prvInitialiseTaskLists+0x74>)
 80018f2:	f7fe fdf6 	bl	80004e2 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <prvInitialiseTaskLists+0x78>)
 80018f8:	4a05      	ldr	r2, [pc, #20]	; (8001910 <prvInitialiseTaskLists+0x64>)
 80018fa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <prvInitialiseTaskLists+0x7c>)
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <prvInitialiseTaskLists+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200000d4 	.word	0x200000d4
 8001910:	20000138 	.word	0x20000138
 8001914:	2000014c 	.word	0x2000014c
 8001918:	20000168 	.word	0x20000168
 800191c:	2000017c 	.word	0x2000017c
 8001920:	20000194 	.word	0x20000194
 8001924:	20000160 	.word	0x20000160
 8001928:	20000164 	.word	0x20000164

0800192c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001932:	e019      	b.n	8001968 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001934:	f000 fd26 	bl	8002384 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <prvCheckTasksWaitingTermination+0x50>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3304      	adds	r3, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe32 	bl	80005ae <uxListRemove>
                --uxCurrentNumberOfTasks;
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <prvCheckTasksWaitingTermination+0x54>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3b01      	subs	r3, #1
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <prvCheckTasksWaitingTermination+0x54>)
 8001952:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <prvCheckTasksWaitingTermination+0x58>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3b01      	subs	r3, #1
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <prvCheckTasksWaitingTermination+0x58>)
 800195c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800195e:	f000 fd41 	bl	80023e4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f810 	bl	8001988 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <prvCheckTasksWaitingTermination+0x58>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e1      	bne.n	8001934 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000017c 	.word	0x2000017c
 8001980:	200001a8 	.word	0x200001a8
 8001984:	20000190 	.word	0x20000190

08001988 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fedb 	bl	8002750 <vPortFree>
            vPortFree( pxTCB );
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fed8 	bl	8002750 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <prvResetNextTaskUnblockTime+0x30>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d104      	bne.n	80019c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <prvResetNextTaskUnblockTime+0x34>)
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80019be:	e005      	b.n	80019cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <prvResetNextTaskUnblockTime+0x30>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <prvResetNextTaskUnblockTime+0x34>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000160 	.word	0x20000160
 80019dc:	200001c8 	.word	0x200001c8

080019e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <xTaskGetSchedulerState+0x34>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d102      	bne.n	80019f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80019ee:	2301      	movs	r3, #1
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	e008      	b.n	8001a06 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <xTaskGetSchedulerState+0x38>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80019fc:	2302      	movs	r3, #2
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	e001      	b.n	8001a06 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001a06:	687b      	ldr	r3, [r7, #4]
    }
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	200001b4 	.word	0x200001b4
 8001a18:	200001d0 	.word	0x200001d0

08001a1c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a2c:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	3304      	adds	r3, #4
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fdbb 	bl	80005ae <uxListRemove>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10b      	bne.n	8001a56 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	2201      	movs	r2, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <prvAddCurrentTaskToDelayedList+0xec>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4013      	ands	r3, r2
 8001a52:	4a2d      	ldr	r2, [pc, #180]	; (8001b08 <prvAddCurrentTaskToDelayedList+0xec>)
 8001a54:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a5c:	d124      	bne.n	8001aa8 <prvAddCurrentTaskToDelayedList+0x8c>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d021      	beq.n	8001aa8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	6892      	ldr	r2, [r2, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	3204      	adds	r2, #4
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	1d1a      	adds	r2, r3, #4
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4a1a      	ldr	r2, [pc, #104]	; (8001b0c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001aa6:	e026      	b.n	8001af6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d209      	bcs.n	8001ad4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f7fe fd35 	bl	800053c <vListInsert>
}
 8001ad2:	e010      	b.n	8001af6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3304      	adds	r3, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f7fe fd2b 	bl	800053c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d202      	bcs.n	8001af6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001af0:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6013      	str	r3, [r2, #0]
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200001ac 	.word	0x200001ac
 8001b04:	200000d0 	.word	0x200000d0
 8001b08:	200001b0 	.word	0x200001b0
 8001b0c:	20000194 	.word	0x20000194
 8001b10:	20000164 	.word	0x20000164
 8001b14:	20000160 	.word	0x20000160
 8001b18:	200001c8 	.word	0x200001c8

08001b1c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001b26:	f000 fa47 	bl	8001fb8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <xTimerCreateTimerTask+0x54>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <xTimerCreateTimerTask+0x58>)
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	2302      	movs	r3, #2
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b40:	490d      	ldr	r1, [pc, #52]	; (8001b78 <xTimerCreateTimerTask+0x5c>)
 8001b42:	480e      	ldr	r0, [pc, #56]	; (8001b7c <xTimerCreateTimerTask+0x60>)
 8001b44:	f7ff f874 	bl	8000c30 <xTaskCreate>
 8001b48:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b54:	f383 8811 	msr	BASEPRI, r3
 8001b58:	f3bf 8f6f 	isb	sy
 8001b5c:	f3bf 8f4f 	dsb	sy
 8001b60:	603b      	str	r3, [r7, #0]
    }
 8001b62:	bf00      	nop
 8001b64:	e7fe      	b.n	8001b64 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001b66:	687b      	ldr	r3, [r7, #4]
    }
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000204 	.word	0x20000204
 8001b74:	20000208 	.word	0x20000208
 8001b78:	0800504c 	.word	0x0800504c
 8001b7c:	08001c25 	.word	0x08001c25

08001b80 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001b8c:	e008      	b.n	8001ba0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	4413      	add	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	699a      	ldr	r2, [r3, #24]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	18d1      	adds	r1, r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f8dd 	bl	8001d6c <prvInsertTimerInActiveList>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ea      	bne.n	8001b8e <prvReloadTimer+0xe>
        }
    }
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <prvProcessExpiredTimer+0x5c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fce6 	bl	80005ae <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f7ff ffc3 	bl	8001b80 <prvReloadTimer>
 8001bfa:	e008      	b.n	8001c0e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	4798      	blx	r3
    }
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200001fc 	.word	0x200001fc

08001c24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001c2c:	f107 0308 	add.w	r3, r7, #8
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f857 	bl	8001ce4 <prvGetNextExpireTime>
 8001c36:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f803 	bl	8001c48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001c42:	f000 f8d5 	bl	8001df0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001c46:	e7f1      	b.n	8001c2c <prvTimerTask+0x8>

08001c48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001c52:	f7ff f9c9 	bl	8000fe8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f866 	bl	8001d2c <prvSampleTimeNow>
 8001c60:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d130      	bne.n	8001cca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10a      	bne.n	8001c84 <prvProcessTimerOrBlockTask+0x3c>
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d806      	bhi.n	8001c84 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001c76:	f7ff f9c5 	bl	8001004 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001c7a:	68f9      	ldr	r1, [r7, #12]
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ffa1 	bl	8001bc4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001c82:	e024      	b.n	8001cce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d008      	beq.n	8001c9c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <prvProcessTimerOrBlockTask+0x90>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <prvProcessTimerOrBlockTask+0x50>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <prvProcessTimerOrBlockTask+0x52>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <prvProcessTimerOrBlockTask+0x94>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe ff8d 	bl	8000bc8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001cae:	f7ff f9a9 	bl	8001004 <xTaskResumeAll>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10a      	bne.n	8001cce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <prvProcessTimerOrBlockTask+0x98>)
 8001cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	f3bf 8f6f 	isb	sy
    }
 8001cc8:	e001      	b.n	8001cce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001cca:	f7ff f99b 	bl	8001004 <xTaskResumeAll>
    }
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000200 	.word	0x20000200
 8001cdc:	20000204 	.word	0x20000204
 8001ce0:	e000ed04 	.word	0xe000ed04

08001ce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001cec:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <prvGetNextExpireTime+0x44>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <prvGetNextExpireTime+0x16>
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	e000      	b.n	8001cfc <prvGetNextExpireTime+0x18>
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <prvGetNextExpireTime+0x44>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	e001      	b.n	8001d18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001d18:	68fb      	ldr	r3, [r7, #12]
    }
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	200001fc 	.word	0x200001fc

08001d2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001d34:	f7ff fa58 	bl	80011e8 <xTaskGetTickCount>
 8001d38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <prvSampleTimeNow+0x3c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d205      	bcs.n	8001d50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001d44:	f000 f912 	bl	8001f6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e002      	b.n	8001d56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <prvSampleTimeNow+0x3c>)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    }
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000020c 	.word	0x2000020c

08001d6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d812      	bhi.n	8001db8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	1ad2      	subs	r2, r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d302      	bcc.n	8001da6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001da0:	2301      	movs	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e01b      	b.n	8001dde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <prvInsertTimerInActiveList+0x7c>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3304      	adds	r3, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4610      	mov	r0, r2
 8001db2:	f7fe fbc3 	bl	800053c <vListInsert>
 8001db6:	e012      	b.n	8001dde <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d206      	bcs.n	8001dce <prvInsertTimerInActiveList+0x62>
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d302      	bcc.n	8001dce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	e007      	b.n	8001dde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <prvInsertTimerInActiveList+0x80>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4610      	mov	r0, r2
 8001dda:	f7fe fbaf 	bl	800053c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001dde:	697b      	ldr	r3, [r7, #20]
    }
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000200 	.word	0x20000200
 8001dec:	200001fc 	.word	0x200001fc

08001df0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001df6:	e0a6      	b.n	8001f46 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f2c0 80a2 	blt.w	8001f44 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d004      	beq.n	8001e16 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fbcc 	bl	80005ae <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff87 	bl	8001d2c <prvSampleTimeNow>
 8001e1e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	f200 808e 	bhi.w	8001f46 <prvProcessReceivedCommands+0x156>
 8001e2a:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <prvProcessReceivedCommands+0x40>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001e55 	.word	0x08001e55
 8001e34:	08001e55 	.word	0x08001e55
 8001e38:	08001ebd 	.word	0x08001ebd
 8001e3c:	08001ed1 	.word	0x08001ed1
 8001e40:	08001f1b 	.word	0x08001f1b
 8001e44:	08001e55 	.word	0x08001e55
 8001e48:	08001e55 	.word	0x08001e55
 8001e4c:	08001ebd 	.word	0x08001ebd
 8001e50:	08001ed1 	.word	0x08001ed1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	18d1      	adds	r1, r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	69f8      	ldr	r0, [r7, #28]
 8001e74:	f7ff ff7a 	bl	8001d6c <prvInsertTimerInActiveList>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d063      	beq.n	8001f46 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	4413      	add	r3, r2
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4619      	mov	r1, r3
 8001e98:	69f8      	ldr	r0, [r7, #28]
 8001e9a:	f7ff fe71 	bl	8001b80 <prvReloadTimer>
 8001e9e:	e008      	b.n	8001eb2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ea6:	f023 0301 	bic.w	r3, r3, #1
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	69f8      	ldr	r0, [r7, #28]
 8001eb8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001eba:	e044      	b.n	8001f46 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001ece:	e03a      	b.n	8001f46 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8001ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	617b      	str	r3, [r7, #20]
    }
 8001f02:	bf00      	nop
 8001f04:	e7fe      	b.n	8001f04 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	18d1      	adds	r1, r2, r3
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	69f8      	ldr	r0, [r7, #28]
 8001f14:	f7ff ff2a 	bl	8001d6c <prvInsertTimerInActiveList>
                        break;
 8001f18:	e015      	b.n	8001f46 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d103      	bne.n	8001f30 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8001f28:	69f8      	ldr	r0, [r7, #28]
 8001f2a:	f000 fc11 	bl	8002750 <vPortFree>
 8001f2e:	e00a      	b.n	8001f46 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f36:	f023 0301 	bic.w	r3, r3, #1
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001f42:	e000      	b.n	8001f46 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001f44:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <prvProcessReceivedCommands+0x178>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f107 0108 	add.w	r1, r7, #8
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fc4f 	bl	80007f4 <xQueueReceive>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f47f af4d 	bne.w	8001df8 <prvProcessReceivedCommands+0x8>
        }
    }
 8001f5e:	bf00      	nop
 8001f60:	bf00      	nop
 8001f62:	3720      	adds	r7, #32
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000204 	.word	0x20000204

08001f6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001f72:	e009      	b.n	8001f88 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <prvSwitchTimerLists+0x44>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001f7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f82:	6838      	ldr	r0, [r7, #0]
 8001f84:	f7ff fe1e 	bl	8001bc4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <prvSwitchTimerLists+0x44>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <prvSwitchTimerLists+0x44>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <prvSwitchTimerLists+0x48>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <prvSwitchTimerLists+0x44>)
 8001f9e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <prvSwitchTimerLists+0x48>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
    }
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200001fc 	.word	0x200001fc
 8001fb4:	20000200 	.word	0x20000200

08001fb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001fbc:	f000 f9e2 	bl	8002384 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <prvCheckForValidListAndQueue+0x54>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d11d      	bne.n	8002004 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001fc8:	4811      	ldr	r0, [pc, #68]	; (8002010 <prvCheckForValidListAndQueue+0x58>)
 8001fca:	f7fe fa8a 	bl	80004e2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001fce:	4811      	ldr	r0, [pc, #68]	; (8002014 <prvCheckForValidListAndQueue+0x5c>)
 8001fd0:	f7fe fa87 	bl	80004e2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <prvCheckForValidListAndQueue+0x60>)
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <prvCheckForValidListAndQueue+0x58>)
 8001fd8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <prvCheckForValidListAndQueue+0x64>)
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <prvCheckForValidListAndQueue+0x5c>)
 8001fde:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	210c      	movs	r1, #12
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f7fe fb8e 	bl	8000706 <xQueueGenericCreate>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <prvCheckForValidListAndQueue+0x54>)
 8001fee:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <prvCheckForValidListAndQueue+0x54>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <prvCheckForValidListAndQueue+0x54>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4908      	ldr	r1, [pc, #32]	; (8002020 <prvCheckForValidListAndQueue+0x68>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fd8c 	bl	8000b1c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002004:	f000 f9ee 	bl	80023e4 <vPortExitCritical>
    }
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000204 	.word	0x20000204
 8002010:	200001d4 	.word	0x200001d4
 8002014:	200001e8 	.word	0x200001e8
 8002018:	200001fc 	.word	0x200001fc
 800201c:	20000200 	.word	0x20000200
 8002020:	08005054 	.word	0x08005054

08002024 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3b04      	subs	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800203c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3b04      	subs	r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f023 0201 	bic.w	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3b04      	subs	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002054:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <pxPortInitialiseStack+0x64>)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3b14      	subs	r3, #20
 800205e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3b04      	subs	r3, #4
 800206a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f06f 0202 	mvn.w	r2, #2
 8002072:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3b20      	subs	r3, #32
 8002078:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	0800208d 	.word	0x0800208d

0800208c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <prvTaskExitError+0x54>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800209e:	d00a      	beq.n	80020b6 <prvTaskExitError+0x2a>
        __asm volatile
 80020a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a4:	f383 8811 	msr	BASEPRI, r3
 80020a8:	f3bf 8f6f 	isb	sy
 80020ac:	f3bf 8f4f 	dsb	sy
 80020b0:	60fb      	str	r3, [r7, #12]
    }
 80020b2:	bf00      	nop
 80020b4:	e7fe      	b.n	80020b4 <prvTaskExitError+0x28>
        __asm volatile
 80020b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	60bb      	str	r3, [r7, #8]
    }
 80020c8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80020ca:	bf00      	nop
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0fc      	beq.n	80020cc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	20000008 	.word	0x20000008
	...

080020f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <pxCurrentTCBConst2>)
 80020f2:	6819      	ldr	r1, [r3, #0]
 80020f4:	6808      	ldr	r0, [r1, #0]
 80020f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020fa:	f380 8809 	msr	PSP, r0
 80020fe:	f3bf 8f6f 	isb	sy
 8002102:	f04f 0000 	mov.w	r0, #0
 8002106:	f380 8811 	msr	BASEPRI, r0
 800210a:	4770      	bx	lr
 800210c:	f3af 8000 	nop.w

08002110 <pxCurrentTCBConst2>:
 8002110:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop

08002118 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002118:	4808      	ldr	r0, [pc, #32]	; (800213c <prvPortStartFirstTask+0x24>)
 800211a:	6800      	ldr	r0, [r0, #0]
 800211c:	6800      	ldr	r0, [r0, #0]
 800211e:	f380 8808 	msr	MSP, r0
 8002122:	f04f 0000 	mov.w	r0, #0
 8002126:	f380 8814 	msr	CONTROL, r0
 800212a:	b662      	cpsie	i
 800212c:	b661      	cpsie	f
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	df00      	svc	0
 8002138:	bf00      	nop
 800213a:	0000      	.short	0x0000
 800213c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop

08002144 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800214a:	4b46      	ldr	r3, [pc, #280]	; (8002264 <xPortStartScheduler+0x120>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a46      	ldr	r2, [pc, #280]	; (8002268 <xPortStartScheduler+0x124>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d10a      	bne.n	800216a <xPortStartScheduler+0x26>
        __asm volatile
 8002154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	613b      	str	r3, [r7, #16]
    }
 8002166:	bf00      	nop
 8002168:	e7fe      	b.n	8002168 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800216a:	4b3e      	ldr	r3, [pc, #248]	; (8002264 <xPortStartScheduler+0x120>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a3f      	ldr	r2, [pc, #252]	; (800226c <xPortStartScheduler+0x128>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d10a      	bne.n	800218a <xPortStartScheduler+0x46>
        __asm volatile
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	60fb      	str	r3, [r7, #12]
    }
 8002186:	bf00      	nop
 8002188:	e7fe      	b.n	8002188 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <xPortStartScheduler+0x12c>)
 800218c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	22ff      	movs	r2, #255	; 0xff
 800219a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b31      	ldr	r3, [pc, #196]	; (8002274 <xPortStartScheduler+0x130>)
 80021b0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <xPortStartScheduler+0x134>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021b8:	e009      	b.n	80021ce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80021ba:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <xPortStartScheduler+0x134>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3b01      	subs	r3, #1
 80021c0:	4a2d      	ldr	r2, [pc, #180]	; (8002278 <xPortStartScheduler+0x134>)
 80021c2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	2b80      	cmp	r3, #128	; 0x80
 80021d8:	d0ef      	beq.n	80021ba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80021da:	4b27      	ldr	r3, [pc, #156]	; (8002278 <xPortStartScheduler+0x134>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d00a      	beq.n	80021fc <xPortStartScheduler+0xb8>
        __asm volatile
 80021e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ea:	f383 8811 	msr	BASEPRI, r3
 80021ee:	f3bf 8f6f 	isb	sy
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	60bb      	str	r3, [r7, #8]
    }
 80021f8:	bf00      	nop
 80021fa:	e7fe      	b.n	80021fa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <xPortStartScheduler+0x134>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <xPortStartScheduler+0x134>)
 8002204:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <xPortStartScheduler+0x134>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800220e:	4a1a      	ldr	r2, [pc, #104]	; (8002278 <xPortStartScheduler+0x134>)
 8002210:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <xPortStartScheduler+0x138>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a17      	ldr	r2, [pc, #92]	; (800227c <xPortStartScheduler+0x138>)
 8002220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002224:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <xPortStartScheduler+0x138>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a14      	ldr	r2, [pc, #80]	; (800227c <xPortStartScheduler+0x138>)
 800222c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002230:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002232:	f000 f963 	bl	80024fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <xPortStartScheduler+0x13c>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800223c:	f000 f982 	bl	8002544 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <xPortStartScheduler+0x140>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0f      	ldr	r2, [pc, #60]	; (8002284 <xPortStartScheduler+0x140>)
 8002246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800224a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800224c:	f7ff ff64 	bl	8002118 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002250:	f7ff f8e4 	bl	800141c <vTaskSwitchContext>
    prvTaskExitError();
 8002254:	f7ff ff1a 	bl	800208c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00
 8002268:	410fc271 	.word	0x410fc271
 800226c:	410fc270 	.word	0x410fc270
 8002270:	e000e400 	.word	0xe000e400
 8002274:	20000210 	.word	0x20000210
 8002278:	20000214 	.word	0x20000214
 800227c:	e000ed20 	.word	0xe000ed20
 8002280:	20000008 	.word	0x20000008
 8002284:	e000ef34 	.word	0xe000ef34

08002288 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <vInitPrioGroupValue+0xe4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a37      	ldr	r2, [pc, #220]	; (8002370 <vInitPrioGroupValue+0xe8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d10a      	bne.n	80022ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	613b      	str	r3, [r7, #16]
    }
 80022aa:	bf00      	nop
 80022ac:	e7fe      	b.n	80022ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80022ae:	4b2f      	ldr	r3, [pc, #188]	; (800236c <vInitPrioGroupValue+0xe4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a30      	ldr	r2, [pc, #192]	; (8002374 <vInitPrioGroupValue+0xec>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d10a      	bne.n	80022ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	60fb      	str	r3, [r7, #12]
    }
 80022ca:	bf00      	nop
 80022cc:	e7fe      	b.n	80022cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <vInitPrioGroupValue+0xf0>)
 80022d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	22ff      	movs	r2, #255	; 0xff
 80022de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <vInitPrioGroupValue+0xf4>)
 80022f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <vInitPrioGroupValue+0xf8>)
 80022f8:	2207      	movs	r2, #7
 80022fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80022fc:	e009      	b.n	8002312 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <vInitPrioGroupValue+0xf8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3b01      	subs	r3, #1
 8002304:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <vInitPrioGroupValue+0xf8>)
 8002306:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	2b80      	cmp	r3, #128	; 0x80
 800231c:	d0ef      	beq.n	80022fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <vInitPrioGroupValue+0xf8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	d00a      	beq.n	8002340 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	60bb      	str	r3, [r7, #8]
    }
 800233c:	bf00      	nop
 800233e:	e7fe      	b.n	800233e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <vInitPrioGroupValue+0xf8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <vInitPrioGroupValue+0xf8>)
 8002348:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <vInitPrioGroupValue+0xf8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <vInitPrioGroupValue+0xf8>)
 8002354:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800235e:	bf00      	nop
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000ed00 	.word	0xe000ed00
 8002370:	410fc271 	.word	0x410fc271
 8002374:	410fc270 	.word	0x410fc270
 8002378:	e000e400 	.word	0xe000e400
 800237c:	20000210 	.word	0x20000210
 8002380:	20000214 	.word	0x20000214

08002384 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
        __asm volatile
 800238a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238e:	f383 8811 	msr	BASEPRI, r3
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	607b      	str	r3, [r7, #4]
    }
 800239c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <vPortEnterCritical+0x58>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3301      	adds	r3, #1
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <vPortEnterCritical+0x58>)
 80023a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <vPortEnterCritical+0x58>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d10f      	bne.n	80023d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <vPortEnterCritical+0x5c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80023ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	603b      	str	r3, [r7, #0]
    }
 80023cc:	bf00      	nop
 80023ce:	e7fe      	b.n	80023ce <vPortEnterCritical+0x4a>
    }
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	20000008 	.word	0x20000008
 80023e0:	e000ed04 	.word	0xe000ed04

080023e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <vPortExitCritical+0x50>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10a      	bne.n	8002408 <vPortExitCritical+0x24>
        __asm volatile
 80023f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	607b      	str	r3, [r7, #4]
    }
 8002404:	bf00      	nop
 8002406:	e7fe      	b.n	8002406 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <vPortExitCritical+0x50>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3b01      	subs	r3, #1
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <vPortExitCritical+0x50>)
 8002410:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <vPortExitCritical+0x50>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d105      	bne.n	8002426 <vPortExitCritical+0x42>
 800241a:	2300      	movs	r3, #0
 800241c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002424:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000008 	.word	0x20000008
	...

08002440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002440:	f3ef 8009 	mrs	r0, PSP
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <pxCurrentTCBConst>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	f01e 0f10 	tst.w	lr, #16
 8002450:	bf08      	it	eq
 8002452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800245a:	6010      	str	r0, [r2, #0]
 800245c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002464:	f380 8811 	msr	BASEPRI, r0
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f7fe ffd4 	bl	800141c <vTaskSwitchContext>
 8002474:	f04f 0000 	mov.w	r0, #0
 8002478:	f380 8811 	msr	BASEPRI, r0
 800247c:	bc09      	pop	{r0, r3}
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	6808      	ldr	r0, [r1, #0]
 8002482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002486:	f01e 0f10 	tst.w	lr, #16
 800248a:	bf08      	it	eq
 800248c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002490:	f380 8809 	msr	PSP, r0
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	f3af 8000 	nop.w

080024a0 <pxCurrentTCBConst>:
 80024a0:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop

080024a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
        __asm volatile
 80024ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	607b      	str	r3, [r7, #4]
    }
 80024c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80024c2:	f001 fd9d 	bl	8004000 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80024c6:	f7fe feb1 	bl	800122c <xTaskIncrementTick>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80024d0:	f001 fdf4 	bl	80040bc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <SysTick_Handler+0x50>)
 80024d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e001      	b.n	80024e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80024de:	f001 fdd1 	bl	8004084 <SEGGER_SYSVIEW_RecordExitISR>
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f383 8811 	msr	BASEPRI, r3
    }
 80024ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	e000ed04 	.word	0xe000ed04

080024fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <vPortSetupTimerInterrupt+0x34>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <vPortSetupTimerInterrupt+0x38>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <vPortSetupTimerInterrupt+0x3c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <vPortSetupTimerInterrupt+0x40>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	4a09      	ldr	r2, [pc, #36]	; (8002540 <vPortSetupTimerInterrupt+0x44>)
 800251a:	3b01      	subs	r3, #1
 800251c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <vPortSetupTimerInterrupt+0x34>)
 8002520:	2207      	movs	r2, #7
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e010 	.word	0xe000e010
 8002534:	e000e018 	.word	0xe000e018
 8002538:	20000000 	.word	0x20000000
 800253c:	10624dd3 	.word	0x10624dd3
 8002540:	e000e014 	.word	0xe000e014

08002544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002554 <vPortEnableVFP+0x10>
 8002548:	6801      	ldr	r1, [r0, #0]
 800254a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800254e:	6001      	str	r1, [r0, #0]
 8002550:	4770      	bx	lr
 8002552:	0000      	.short	0x0000
 8002554:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop

0800255c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002562:	f3ef 8305 	mrs	r3, IPSR
 8002566:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b0f      	cmp	r3, #15
 800256c:	d914      	bls.n	8002598 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <vPortValidateInterruptPriority+0x70>)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <vPortValidateInterruptPriority+0x74>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	7afa      	ldrb	r2, [r7, #11]
 800257e:	429a      	cmp	r2, r3
 8002580:	d20a      	bcs.n	8002598 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	607b      	str	r3, [r7, #4]
    }
 8002594:	bf00      	nop
 8002596:	e7fe      	b.n	8002596 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002598:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <vPortValidateInterruptPriority+0x78>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <vPortValidateInterruptPriority+0x7c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d90a      	bls.n	80025be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80025a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ac:	f383 8811 	msr	BASEPRI, r3
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	603b      	str	r3, [r7, #0]
    }
 80025ba:	bf00      	nop
 80025bc:	e7fe      	b.n	80025bc <vPortValidateInterruptPriority+0x60>
    }
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e3f0 	.word	0xe000e3f0
 80025d0:	20000210 	.word	0x20000210
 80025d4:	e000ed0c 	.word	0xe000ed0c
 80025d8:	20000214 	.word	0x20000214

080025dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	; 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80025e8:	f7fe fcfe 	bl	8000fe8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <pvPortMalloc+0x160>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80025f4:	f000 f908 	bl	8002808 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d012      	beq.n	8002624 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80025fe:	2208      	movs	r2, #8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	3308      	adds	r3, #8
 800260a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	43db      	mvns	r3, r3
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d804      	bhi.n	8002620 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	4413      	add	r3, r2
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	e001      	b.n	8002624 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db70      	blt.n	800270c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d06d      	beq.n	800270c <pvPortMalloc+0x130>
 8002630:	4b43      	ldr	r3, [pc, #268]	; (8002740 <pvPortMalloc+0x164>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d868      	bhi.n	800270c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800263a:	4b42      	ldr	r3, [pc, #264]	; (8002744 <pvPortMalloc+0x168>)
 800263c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <pvPortMalloc+0x168>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002644:	e004      	b.n	8002650 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d903      	bls.n	8002662 <pvPortMalloc+0x86>
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f1      	bne.n	8002646 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <pvPortMalloc+0x160>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	429a      	cmp	r2, r3
 800266a:	d04f      	beq.n	800270c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2208      	movs	r2, #8
 8002672:	4413      	add	r3, r2
 8002674:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	1ad2      	subs	r2, r2, r3
 8002686:	2308      	movs	r3, #8
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	429a      	cmp	r2, r3
 800268c:	d91f      	bls.n	80026ce <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <pvPortMalloc+0xda>
        __asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	613b      	str	r3, [r7, #16]
    }
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	1ad2      	subs	r2, r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80026c8:	6978      	ldr	r0, [r7, #20]
 80026ca:	f000 f8f9 	bl	80028c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <pvPortMalloc+0x164>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	4a19      	ldr	r2, [pc, #100]	; (8002740 <pvPortMalloc+0x164>)
 80026da:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <pvPortMalloc+0x164>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <pvPortMalloc+0x16c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d203      	bcs.n	80026f0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80026e8:	4b15      	ldr	r3, [pc, #84]	; (8002740 <pvPortMalloc+0x164>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a16      	ldr	r2, [pc, #88]	; (8002748 <pvPortMalloc+0x16c>)
 80026ee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <pvPortMalloc+0x170>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3301      	adds	r3, #1
 8002708:	4a10      	ldr	r2, [pc, #64]	; (800274c <pvPortMalloc+0x170>)
 800270a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800270c:	f7fe fc7a 	bl	8001004 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <pvPortMalloc+0x154>
        __asm volatile
 800271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	60fb      	str	r3, [r7, #12]
    }
 800272c:	bf00      	nop
 800272e:	e7fe      	b.n	800272e <pvPortMalloc+0x152>
    return pvReturn;
 8002730:	69fb      	ldr	r3, [r7, #28]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20012e20 	.word	0x20012e20
 8002740:	20012e24 	.word	0x20012e24
 8002744:	20012e18 	.word	0x20012e18
 8002748:	20012e28 	.word	0x20012e28
 800274c:	20012e2c 	.word	0x20012e2c

08002750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d049      	beq.n	80027f6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002762:	2308      	movs	r3, #8
 8002764:	425b      	negs	r3, r3
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4413      	add	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	db0a      	blt.n	800278e <vPortFree+0x3e>
        __asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	60fb      	str	r3, [r7, #12]
    }
 800278a:	bf00      	nop
 800278c:	e7fe      	b.n	800278c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <vPortFree+0x5c>
        __asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	60bb      	str	r3, [r7, #8]
    }
 80027a8:	bf00      	nop
 80027aa:	e7fe      	b.n	80027aa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	0fdb      	lsrs	r3, r3, #31
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01c      	beq.n	80027f6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d118      	bne.n	80027f6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80027d0:	f7fe fc0a 	bl	8000fe8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <vPortFree+0xb0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4413      	add	r3, r2
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <vPortFree+0xb0>)
 80027e0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80027e2:	6938      	ldr	r0, [r7, #16]
 80027e4:	f000 f86c 	bl	80028c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <vPortFree+0xb4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	4a05      	ldr	r2, [pc, #20]	; (8002804 <vPortFree+0xb4>)
 80027f0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80027f2:	f7fe fc07 	bl	8001004 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20012e24 	.word	0x20012e24
 8002804:	20012e30 	.word	0x20012e30

08002808 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800280e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002812:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <prvHeapInit+0xa4>)
 8002816:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3307      	adds	r3, #7
 8002826:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0307 	bic.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <prvHeapInit+0xa4>)
 8002838:	4413      	add	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002840:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <prvHeapInit+0xa8>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <prvHeapInit+0xa8>)
 8002848:	2200      	movs	r2, #0
 800284a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	4413      	add	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002854:	2208      	movs	r2, #8
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0307 	bic.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <prvHeapInit+0xac>)
 8002868:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <prvHeapInit+0xac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2200      	movs	r2, #0
 8002870:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <prvHeapInit+0xac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <prvHeapInit+0xac>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <prvHeapInit+0xb0>)
 8002896:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a07      	ldr	r2, [pc, #28]	; (80028bc <prvHeapInit+0xb4>)
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	20000218 	.word	0x20000218
 80028b0:	20012e18 	.word	0x20012e18
 80028b4:	20012e20 	.word	0x20012e20
 80028b8:	20012e28 	.word	0x20012e28
 80028bc:	20012e24 	.word	0x20012e24

080028c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80028c8:	4b28      	ldr	r3, [pc, #160]	; (800296c <prvInsertBlockIntoFreeList+0xac>)
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e002      	b.n	80028d4 <prvInsertBlockIntoFreeList+0x14>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d8f7      	bhi.n	80028ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4413      	add	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d108      	bne.n	8002902 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	441a      	add	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	441a      	add	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d118      	bne.n	8002948 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <prvInsertBlockIntoFreeList+0xb0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d00d      	beq.n	800293e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	441a      	add	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e008      	b.n	8002950 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <prvInsertBlockIntoFreeList+0xb0>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e003      	b.n	8002950 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d002      	beq.n	800295e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20012e18 	.word	0x20012e18
 8002970:	20012e20 	.word	0x20012e20

08002974 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002978:	4803      	ldr	r0, [pc, #12]	; (8002988 <_cbSendSystemDesc+0x14>)
 800297a:	f001 faeb 	bl	8003f54 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800297e:	4803      	ldr	r0, [pc, #12]	; (800298c <_cbSendSystemDesc+0x18>)
 8002980:	f001 fae8 	bl	8003f54 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	0800505c 	.word	0x0800505c
 800298c:	08005088 	.word	0x08005088

08002990 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <SEGGER_SYSVIEW_Conf+0x20>)
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SEGGER_SYSVIEW_Conf+0x20>)
 800299a:	6819      	ldr	r1, [r3, #0]
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <SEGGER_SYSVIEW_Conf+0x24>)
 800299e:	4a06      	ldr	r2, [pc, #24]	; (80029b8 <SEGGER_SYSVIEW_Conf+0x28>)
 80029a0:	f000 fe56 	bl	8003650 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80029a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80029a8:	f000 fe96 	bl	80036d8 <SEGGER_SYSVIEW_SetRAMBase>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000000 	.word	0x20000000
 80029b4:	08002975 	.word	0x08002975
 80029b8:	08005110 	.word	0x08005110

080029bc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80029bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029be:	b085      	sub	sp, #20
 80029c0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80029c2:	2300      	movs	r3, #0
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	e033      	b.n	8002a30 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80029c8:	491e      	ldr	r1, [pc, #120]	; (8002a44 <_cbSendTaskList+0x88>)
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	491a      	ldr	r1, [pc, #104]	; (8002a44 <_cbSendTaskList+0x88>)
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	4c16      	ldr	r4, [pc, #88]	; (8002a44 <_cbSendTaskList+0x88>)
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4423      	add	r3, r4
 80029f8:	3308      	adds	r3, #8
 80029fa:	681c      	ldr	r4, [r3, #0]
 80029fc:	4d11      	ldr	r5, [pc, #68]	; (8002a44 <_cbSendTaskList+0x88>)
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	442b      	add	r3, r5
 8002a0a:	330c      	adds	r3, #12
 8002a0c:	681d      	ldr	r5, [r3, #0]
 8002a0e:	4e0d      	ldr	r6, [pc, #52]	; (8002a44 <_cbSendTaskList+0x88>)
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4433      	add	r3, r6
 8002a1c:	3310      	adds	r3, #16
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	462b      	mov	r3, r5
 8002a24:	4622      	mov	r2, r4
 8002a26:	f000 f8bd 	bl	8002ba4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <_cbSendTaskList+0x8c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3c6      	bcc.n	80029c8 <_cbSendTaskList+0xc>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a44:	20012e34 	.word	0x20012e34
 8002a48:	20012ed4 	.word	0x20012ed4

08002a4c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002a54:	f7fe fbd8 	bl	8001208 <xTaskGetTickCountFromISR>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	469a      	mov	sl, r3
 8002a5e:	4693      	mov	fp, r2
 8002a60:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002a64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	f04f 0a00 	mov.w	sl, #0
 8002a70:	f04f 0b00 	mov.w	fp, #0
 8002a74:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002a78:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002a7c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002a80:	4652      	mov	r2, sl
 8002a82:	465b      	mov	r3, fp
 8002a84:	1a14      	subs	r4, r2, r0
 8002a86:	eb63 0501 	sbc.w	r5, r3, r1
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	00ab      	lsls	r3, r5, #2
 8002a94:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002a98:	00a2      	lsls	r2, r4, #2
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	eb14 0800 	adds.w	r8, r4, r0
 8002aa2:	eb45 0901 	adc.w	r9, r5, r1
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aba:	4690      	mov	r8, r2
 8002abc:	4699      	mov	r9, r3
 8002abe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002ad4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002ae2:	2205      	movs	r2, #5
 8002ae4:	492b      	ldr	r1, [pc, #172]	; (8002b94 <SYSVIEW_AddTask+0xc0>)
 8002ae6:	68b8      	ldr	r0, [r7, #8]
 8002ae8:	f001 fd6a 	bl	80045c0 <memcmp>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d04b      	beq.n	8002b8a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002af2:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b07      	cmp	r3, #7
 8002af8:	d903      	bls.n	8002b02 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002afa:	4828      	ldr	r0, [pc, #160]	; (8002b9c <SYSVIEW_AddTask+0xc8>)
 8002afc:	f001 fcc8 	bl	8004490 <SEGGER_SYSVIEW_Warn>
    return;
 8002b00:	e044      	b.n	8002b8c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4926      	ldr	r1, [pc, #152]	; (8002ba0 <SYSVIEW_AddTask+0xcc>)
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4921      	ldr	r1, [pc, #132]	; (8002ba0 <SYSVIEW_AddTask+0xcc>)
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3304      	adds	r3, #4
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	491b      	ldr	r1, [pc, #108]	; (8002ba0 <SYSVIEW_AddTask+0xcc>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4916      	ldr	r1, [pc, #88]	; (8002ba0 <SYSVIEW_AddTask+0xcc>)
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	330c      	adds	r3, #12
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4910      	ldr	r1, [pc, #64]	; (8002ba0 <SYSVIEW_AddTask+0xcc>)
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3310      	adds	r3, #16
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <SYSVIEW_AddTask+0xc4>)
 8002b76:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f80e 	bl	8002ba4 <SYSVIEW_SendTaskInfo>
 8002b88:	e000      	b.n	8002b8c <SYSVIEW_AddTask+0xb8>
    return;
 8002b8a:	bf00      	nop

}
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	08005098 	.word	0x08005098
 8002b98:	20012ed4 	.word	0x20012ed4
 8002b9c:	080050a0 	.word	0x080050a0
 8002ba0:	20012e34 	.word	0x20012e34

08002ba4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	2214      	movs	r2, #20
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 fd1e 	bl	80045fc <memset>
  TaskInfo.TaskID     = TaskID;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 f8c3 	bl	8003d64 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <_DoInit+0x98>)
 8002bf0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <_DoInit+0x9c>)
 8002c02:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <_DoInit+0xa0>)
 8002c08:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c10:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <_DoInit+0x9c>)
 8002c28:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <_DoInit+0xa4>)
 8002c2e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2210      	movs	r2, #16
 8002c34:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3307      	adds	r3, #7
 8002c4c:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <_DoInit+0xa8>)
 8002c4e:	6810      	ldr	r0, [r2, #0]
 8002c50:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002c52:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <_DoInit+0xac>)
 8002c5a:	6810      	ldr	r0, [r2, #0]
 8002c5c:	6018      	str	r0, [r3, #0]
 8002c5e:	8891      	ldrh	r1, [r2, #4]
 8002c60:	7992      	ldrb	r2, [r2, #6]
 8002c62:	8099      	strh	r1, [r3, #4]
 8002c64:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002c66:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002c70:	f3bf 8f5f 	dmb	sy
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	20012ed8 	.word	0x20012ed8
 8002c84:	080050f0 	.word	0x080050f0
 8002c88:	20012f80 	.word	0x20012f80
 8002c8c:	20013380 	.word	0x20013380
 8002c90:	080050fc 	.word	0x080050fc
 8002c94:	08005100 	.word	0x08005100

08002c98 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d905      	bls.n	8002cc8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	e007      	b.n	8002cd8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	69b9      	ldr	r1, [r7, #24]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	1acb      	subs	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	bf28      	it	cs
 8002ce6:	4613      	movcs	r3, r2
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8002cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	bf28      	it	cs
 8002cf2:	4613      	movcs	r3, r2
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	6978      	ldr	r0, [r7, #20]
 8002d06:	f001 fc6b 	bl	80045e0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002d0a:	6a3a      	ldr	r2, [r7, #32]
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	4413      	add	r3, r2
 8002d10:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	4413      	add	r3, r2
 8002d18:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	4413      	add	r3, r2
 8002d28:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d101      	bne.n	8002d38 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002d38:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1b2      	bne.n	8002cae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8002d48:	6a3b      	ldr	r3, [r7, #32]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3728      	adds	r7, #40	; 0x28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b088      	sub	sp, #32
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d911      	bls.n	8002d9a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	6938      	ldr	r0, [r7, #16]
 8002d86:	f001 fc2b 	bl	80045e0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002d8a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	441a      	add	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002d98:	e01f      	b.n	8002dda <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	4413      	add	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	6938      	ldr	r0, [r7, #16]
 8002dae:	f001 fc17 	bl	80045e0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6938      	ldr	r0, [r7, #16]
 8002dcc:	f001 fc08 	bl	80045e0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002dd0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	60da      	str	r2, [r3, #12]
}
 8002dda:	bf00      	nop
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002de2:	b480      	push	{r7}
 8002de4:	b087      	sub	sp, #28
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d808      	bhi.n	8002e10 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad2      	subs	r2, r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e004      	b.n	8002e1a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002e1a:	697b      	ldr	r3, [r7, #20]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	; 0x30
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002e34:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <SEGGER_RTT_ReadNoLock+0x108>)
 8002e36:	623b      	str	r3, [r7, #32]
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <SEGGER_RTT_ReadNoLock+0x1e>
 8002e42:	f7ff fed1 	bl	8002be8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	3360      	adds	r3, #96	; 0x60
 8002e52:	4a37      	ldr	r2, [pc, #220]	; (8002f30 <SEGGER_RTT_ReadNoLock+0x108>)
 8002e54:	4413      	add	r3, r2
 8002e56:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d92b      	bls.n	8002ecc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4293      	cmp	r3, r2
 8002e84:	bf28      	it	cs
 8002e86:	4613      	movcs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	4413      	add	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	6939      	ldr	r1, [r7, #16]
 8002e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e9a:	f001 fba1 	bl	80045e0 <memcpy>
    NumBytesRead += NumBytesRem;
 8002e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	4413      	add	r3, r2
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	4413      	add	r3, r2
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d101      	bne.n	8002ecc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	bf28      	it	cs
 8002edc:	4613      	movcs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d019      	beq.n	8002f1a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	4413      	add	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	6939      	ldr	r1, [r7, #16]
 8002ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ef6:	f001 fb73 	bl	80045e0 <memcpy>
    NumBytesRead += NumBytesRem;
 8002efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	4413      	add	r3, r2
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	4413      	add	r3, r2
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	4413      	add	r3, r2
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f24:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3730      	adds	r7, #48	; 0x30
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20012ed8 	.word	0x20012ed8

08002f34 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8002f52:	4413      	add	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d029      	beq.n	8002fb2 <SEGGER_RTT_WriteNoLock+0x7e>
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d82e      	bhi.n	8002fc0 <SEGGER_RTT_WriteNoLock+0x8c>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <SEGGER_RTT_WriteNoLock+0x38>
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d013      	beq.n	8002f92 <SEGGER_RTT_WriteNoLock+0x5e>
 8002f6a:	e029      	b.n	8002fc0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002f6c:	6978      	ldr	r0, [r7, #20]
 8002f6e:	f7ff ff38 	bl	8002de2 <_GetAvailWriteSpace>
 8002f72:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d202      	bcs.n	8002f82 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002f80:	e021      	b.n	8002fc6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	69b9      	ldr	r1, [r7, #24]
 8002f8a:	6978      	ldr	r0, [r7, #20]
 8002f8c:	f7ff fee1 	bl	8002d52 <_WriteNoCheck>
    break;
 8002f90:	e019      	b.n	8002fc6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff25 	bl	8002de2 <_GetAvailWriteSpace>
 8002f98:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	bf28      	it	cs
 8002fa2:	4613      	movcs	r3, r2
 8002fa4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	69b9      	ldr	r1, [r7, #24]
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f7ff fed1 	bl	8002d52 <_WriteNoCheck>
    break;
 8002fb0:	e009      	b.n	8002fc6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	69b9      	ldr	r1, [r7, #24]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff fe6e 	bl	8002c98 <_WriteBlocking>
 8002fbc:	61f8      	str	r0, [r7, #28]
    break;
 8002fbe:	e002      	b.n	8002fc6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
    break;
 8002fc4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20012ed8 	.word	0x20012ed8

08002fd4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <SEGGER_RTT_Write+0x48>)
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <SEGGER_RTT_Write+0x1e>
 8002fee:	f7ff fdfb 	bl	8002be8 <_DoInit>
  SEGGER_RTT_LOCK();
 8002ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ff6:	f04f 0120 	mov.w	r1, #32
 8002ffa:	f381 8811 	msr	BASEPRI, r1
 8002ffe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f7ff ff95 	bl	8002f34 <SEGGER_RTT_WriteNoLock>
 800300a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003012:	697b      	ldr	r3, [r7, #20]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20012ed8 	.word	0x20012ed8

08003020 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800302e:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <SEGGER_RTT_AllocUpBuffer+0x20>
 800303c:	f7ff fdd4 	bl	8002be8 <_DoInit>
  SEGGER_RTT_LOCK();
 8003040:	f3ef 8311 	mrs	r3, BASEPRI
 8003044:	f04f 0120 	mov.w	r1, #32
 8003048:	f381 8811 	msr	BASEPRI, r1
 800304c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800304e:	4b35      	ldr	r3, [pc, #212]	; (8003124 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003050:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003056:	6939      	ldr	r1, [r7, #16]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	3304      	adds	r3, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3301      	adds	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	429a      	cmp	r2, r3
 800307c:	dbeb      	blt.n	8003056 <SEGGER_RTT_AllocUpBuffer+0x36>
 800307e:	e000      	b.n	8003082 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003080:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	429a      	cmp	r2, r3
 800308a:	da3f      	bge.n	800310c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800308c:	6939      	ldr	r1, [r7, #16]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80030a0:	6939      	ldr	r1, [r7, #16]
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	3304      	adds	r3, #4
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80030b6:	6939      	ldr	r1, [r7, #16]
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	3320      	adds	r3, #32
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80030ca:	6939      	ldr	r1, [r7, #16]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	440b      	add	r3, r1
 80030d8:	3328      	adds	r3, #40	; 0x28
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80030de:	6939      	ldr	r1, [r7, #16]
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	3324      	adds	r3, #36	; 0x24
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80030f2:	6939      	ldr	r1, [r7, #16]
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	332c      	adds	r3, #44	; 0x2c
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003106:	f3bf 8f5f 	dmb	sy
 800310a:	e002      	b.n	8003112 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003110:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003118:	69fb      	ldr	r3, [r7, #28]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20012ed8 	.word	0x20012ed8

08003128 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003136:	4b33      	ldr	r3, [pc, #204]	; (8003204 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003144:	f7ff fd50 	bl	8002be8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003148:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800314a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	461a      	mov	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4293      	cmp	r3, r2
 8003156:	d24d      	bcs.n	80031f4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003158:	f3ef 8311 	mrs	r3, BASEPRI
 800315c:	f04f 0120 	mov.w	r1, #32
 8003160:	f381 8811 	msr	BASEPRI, r1
 8003164:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d031      	beq.n	80031d0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800316c:	6979      	ldr	r1, [r7, #20]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	3360      	adds	r3, #96	; 0x60
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003180:	6979      	ldr	r1, [r7, #20]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	440b      	add	r3, r1
 800318e:	3364      	adds	r3, #100	; 0x64
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003194:	6979      	ldr	r1, [r7, #20]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4613      	mov	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	3368      	adds	r3, #104	; 0x68
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80031a8:	6979      	ldr	r1, [r7, #20]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	3370      	adds	r3, #112	; 0x70
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80031bc:	6979      	ldr	r1, [r7, #20]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	336c      	adds	r3, #108	; 0x6c
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80031d0:	6979      	ldr	r1, [r7, #20]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	3374      	adds	r3, #116	; 0x74
 80031e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80031e4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	e002      	b.n	80031fa <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80031fa:	69fb      	ldr	r3, [r7, #28]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20012ed8 	.word	0x20012ed8

08003208 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003218:	e002      	b.n	8003220 <_EncodeStr+0x18>
    Len++;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3301      	adds	r3, #1
 800321e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4413      	add	r3, r2
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f6      	bne.n	800321a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d901      	bls.n	8003238 <_EncodeStr+0x30>
    Len = Limit;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2bfe      	cmp	r3, #254	; 0xfe
 800323c:	d806      	bhi.n	800324c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	60fa      	str	r2, [r7, #12]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e011      	b.n	8003270 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	60fa      	str	r2, [r7, #12]
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	60fa      	str	r2, [r7, #12]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	0a19      	lsrs	r1, r3, #8
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	60fa      	str	r2, [r7, #12]
 800326c:	b2ca      	uxtb	r2, r1
 800326e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003274:	e00a      	b.n	800328c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	1c53      	adds	r3, r2, #1
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1c59      	adds	r1, r3, #1
 8003280:	60f9      	str	r1, [r7, #12]
 8003282:	7812      	ldrb	r2, [r2, #0]
 8003284:	701a      	strb	r2, [r3, #0]
    n++;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	429a      	cmp	r2, r3
 8003292:	d3f0      	bcc.n	8003276 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003294:	68fb      	ldr	r3, [r7, #12]
}
 8003296:	4618      	mov	r0, r3
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80032c2:	4b36      	ldr	r3, [pc, #216]	; (800339c <_HandleIncomingPacket+0xe0>)
 80032c4:	7e1b      	ldrb	r3, [r3, #24]
 80032c6:	4618      	mov	r0, r3
 80032c8:	1cfb      	adds	r3, r7, #3
 80032ca:	2201      	movs	r2, #1
 80032cc:	4619      	mov	r1, r3
 80032ce:	f7ff fdab 	bl	8002e28 <SEGGER_RTT_ReadNoLock>
 80032d2:	4603      	mov	r3, r0
 80032d4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	dd54      	ble.n	8003386 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d032      	beq.n	8003348 <_HandleIncomingPacket+0x8c>
 80032e2:	2b80      	cmp	r3, #128	; 0x80
 80032e4:	dc42      	bgt.n	800336c <_HandleIncomingPacket+0xb0>
 80032e6:	2b07      	cmp	r3, #7
 80032e8:	dc16      	bgt.n	8003318 <_HandleIncomingPacket+0x5c>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	dd3e      	ble.n	800336c <_HandleIncomingPacket+0xb0>
 80032ee:	3b01      	subs	r3, #1
 80032f0:	2b06      	cmp	r3, #6
 80032f2:	d83b      	bhi.n	800336c <_HandleIncomingPacket+0xb0>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <_HandleIncomingPacket+0x40>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	0800331f 	.word	0x0800331f
 8003300:	08003325 	.word	0x08003325
 8003304:	0800332b 	.word	0x0800332b
 8003308:	08003331 	.word	0x08003331
 800330c:	08003337 	.word	0x08003337
 8003310:	0800333d 	.word	0x0800333d
 8003314:	08003343 	.word	0x08003343
 8003318:	2b7f      	cmp	r3, #127	; 0x7f
 800331a:	d036      	beq.n	800338a <_HandleIncomingPacket+0xce>
 800331c:	e026      	b.n	800336c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800331e:	f000 fba7 	bl	8003a70 <SEGGER_SYSVIEW_Start>
      break;
 8003322:	e037      	b.n	8003394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003324:	f000 fc5e 	bl	8003be4 <SEGGER_SYSVIEW_Stop>
      break;
 8003328:	e034      	b.n	8003394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800332a:	f000 fe37 	bl	8003f9c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800332e:	e031      	b.n	8003394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003330:	f000 fdfc 	bl	8003f2c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003334:	e02e      	b.n	8003394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003336:	f000 fc7b 	bl	8003c30 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800333a:	e02b      	b.n	8003394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800333c:	f001 f86a 	bl	8004414 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003340:	e028      	b.n	8003394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003342:	f001 f849 	bl	80043d8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003346:	e025      	b.n	8003394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003348:	4b14      	ldr	r3, [pc, #80]	; (800339c <_HandleIncomingPacket+0xe0>)
 800334a:	7e1b      	ldrb	r3, [r3, #24]
 800334c:	4618      	mov	r0, r3
 800334e:	1cfb      	adds	r3, r7, #3
 8003350:	2201      	movs	r2, #1
 8003352:	4619      	mov	r1, r3
 8003354:	f7ff fd68 	bl	8002e28 <SEGGER_RTT_ReadNoLock>
 8003358:	4603      	mov	r3, r0
 800335a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	dd15      	ble.n	800338e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 ffb7 	bl	80042d8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800336a:	e010      	b.n	800338e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	b25b      	sxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	da0e      	bge.n	8003392 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <_HandleIncomingPacket+0xe0>)
 8003376:	7e1b      	ldrb	r3, [r3, #24]
 8003378:	4618      	mov	r0, r3
 800337a:	1cfb      	adds	r3, r7, #3
 800337c:	2201      	movs	r2, #1
 800337e:	4619      	mov	r1, r3
 8003380:	f7ff fd52 	bl	8002e28 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003384:	e005      	b.n	8003392 <_HandleIncomingPacket+0xd6>
    }
  }
 8003386:	bf00      	nop
 8003388:	e004      	b.n	8003394 <_HandleIncomingPacket+0xd8>
      break;
 800338a:	bf00      	nop
 800338c:	e002      	b.n	8003394 <_HandleIncomingPacket+0xd8>
      break;
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <_HandleIncomingPacket+0xd8>
      break;
 8003392:	bf00      	nop
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20014398 	.word	0x20014398

080033a0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08c      	sub	sp, #48	; 0x30
 80033a4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80033a6:	2301      	movs	r3, #1
 80033a8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	3301      	adds	r3, #1
 80033ae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033b4:	4b31      	ldr	r3, [pc, #196]	; (800347c <_TrySendOverflowPacket+0xdc>)
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ba:	e00b      	b.n	80033d4 <_TrySendOverflowPacket+0x34>
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	1c59      	adds	r1, r3, #1
 80033c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80033c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	09db      	lsrs	r3, r3, #7
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	2b7f      	cmp	r3, #127	; 0x7f
 80033d8:	d8f0      	bhi.n	80033bc <_TrySendOverflowPacket+0x1c>
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80033ea:	4b25      	ldr	r3, [pc, #148]	; (8003480 <_TrySendOverflowPacket+0xe0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80033f0:	4b22      	ldr	r3, [pc, #136]	; (800347c <_TrySendOverflowPacket+0xdc>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	e00b      	b.n	800341c <_TrySendOverflowPacket+0x7c>
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	1c59      	adds	r1, r3, #1
 800340c:	6279      	str	r1, [r7, #36]	; 0x24
 800340e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	09db      	lsrs	r3, r3, #7
 800341a:	623b      	str	r3, [r7, #32]
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	2b7f      	cmp	r3, #127	; 0x7f
 8003420:	d8f0      	bhi.n	8003404 <_TrySendOverflowPacket+0x64>
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	627a      	str	r2, [r7, #36]	; 0x24
 8003428:	6a3a      	ldr	r2, [r7, #32]
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <_TrySendOverflowPacket+0xdc>)
 8003434:	785b      	ldrb	r3, [r3, #1]
 8003436:	4618      	mov	r0, r3
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	461a      	mov	r2, r3
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	4619      	mov	r1, r3
 8003444:	f7fc fecc 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003448:	4603      	mov	r3, r0
 800344a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <_TrySendOverflowPacket+0xdc>)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <_TrySendOverflowPacket+0xdc>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	3b01      	subs	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <_TrySendOverflowPacket+0xdc>)
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	e004      	b.n	8003470 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <_TrySendOverflowPacket+0xdc>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	3301      	adds	r3, #1
 800346c:	4a03      	ldr	r2, [pc, #12]	; (800347c <_TrySendOverflowPacket+0xdc>)
 800346e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003470:	693b      	ldr	r3, [r7, #16]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3730      	adds	r7, #48	; 0x30
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20014398 	.word	0x20014398
 8003480:	e0001004 	.word	0xe0001004

08003484 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003490:	4b6c      	ldr	r3, [pc, #432]	; (8003644 <_SendPacket+0x1c0>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d010      	beq.n	80034ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003498:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <_SendPacket+0x1c0>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a3 	beq.w	80035e8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80034a2:	4b68      	ldr	r3, [pc, #416]	; (8003644 <_SendPacket+0x1c0>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d109      	bne.n	80034be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80034aa:	f7ff ff79 	bl	80033a0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80034ae:	4b65      	ldr	r3, [pc, #404]	; (8003644 <_SendPacket+0x1c0>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	f040 809a 	bne.w	80035ec <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80034b8:	e001      	b.n	80034be <_SendPacket+0x3a>
    goto Send;
 80034ba:	bf00      	nop
 80034bc:	e000      	b.n	80034c0 <_SendPacket+0x3c>
Send:
 80034be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b1f      	cmp	r3, #31
 80034c4:	d809      	bhi.n	80034da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80034c6:	4b5f      	ldr	r3, [pc, #380]	; (8003644 <_SendPacket+0x1c0>)
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f040 808b 	bne.w	80035f0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b17      	cmp	r3, #23
 80034de:	d807      	bhi.n	80034f0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	e03d      	b.n	800356c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b7f      	cmp	r3, #127	; 0x7f
 80034fc:	d912      	bls.n	8003524 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	09da      	lsrs	r2, r3, #7
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3b01      	subs	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	3a01      	subs	r2, #1
 8003516:	60fa      	str	r2, [r7, #12]
 8003518:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800351c:	b2da      	uxtb	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e006      	b.n	8003532 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3b01      	subs	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b7f      	cmp	r3, #127	; 0x7f
 8003536:	d912      	bls.n	800355e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	09da      	lsrs	r2, r3, #7
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3b01      	subs	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	3a01      	subs	r2, #1
 8003550:	60fa      	str	r2, [r7, #12]
 8003552:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e006      	b.n	800356c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3b01      	subs	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800356c:	4b36      	ldr	r3, [pc, #216]	; (8003648 <_SendPacket+0x1c4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003572:	4b34      	ldr	r3, [pc, #208]	; (8003644 <_SendPacket+0x1c0>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	623b      	str	r3, [r7, #32]
 8003584:	e00b      	b.n	800359e <_SendPacket+0x11a>
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1c59      	adds	r1, r3, #1
 800358e:	6279      	str	r1, [r7, #36]	; 0x24
 8003590:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	09db      	lsrs	r3, r3, #7
 800359c:	623b      	str	r3, [r7, #32]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	2b7f      	cmp	r3, #127	; 0x7f
 80035a2:	d8f0      	bhi.n	8003586 <_SendPacket+0x102>
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	627a      	str	r2, [r7, #36]	; 0x24
 80035aa:	6a3a      	ldr	r2, [r7, #32]
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80035b4:	4b23      	ldr	r3, [pc, #140]	; (8003644 <_SendPacket+0x1c0>)
 80035b6:	785b      	ldrb	r3, [r3, #1]
 80035b8:	4618      	mov	r0, r3
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	f7fc fe0c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80035c8:	4603      	mov	r3, r0
 80035ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <_SendPacket+0x1c0>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	60d3      	str	r3, [r2, #12]
 80035d8:	e00b      	b.n	80035f2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <_SendPacket+0x1c0>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	3301      	adds	r3, #1
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b18      	ldr	r3, [pc, #96]	; (8003644 <_SendPacket+0x1c0>)
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e004      	b.n	80035f2 <_SendPacket+0x16e>
    goto SendDone;
 80035e8:	bf00      	nop
 80035ea:	e002      	b.n	80035f2 <_SendPacket+0x16e>
      goto SendDone;
 80035ec:	bf00      	nop
 80035ee:	e000      	b.n	80035f2 <_SendPacket+0x16e>
      goto SendDone;
 80035f0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <_SendPacket+0x1c0>)
 80035f4:	7e1b      	ldrb	r3, [r3, #24]
 80035f6:	4619      	mov	r1, r3
 80035f8:	4a14      	ldr	r2, [pc, #80]	; (800364c <_SendPacket+0x1c8>)
 80035fa:	460b      	mov	r3, r1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	440b      	add	r3, r1
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	336c      	adds	r3, #108	; 0x6c
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <_SendPacket+0x1c0>)
 800360a:	7e1b      	ldrb	r3, [r3, #24]
 800360c:	4618      	mov	r0, r3
 800360e:	490f      	ldr	r1, [pc, #60]	; (800364c <_SendPacket+0x1c8>)
 8003610:	4603      	mov	r3, r0
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4403      	add	r3, r0
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	440b      	add	r3, r1
 800361a:	3370      	adds	r3, #112	; 0x70
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d00b      	beq.n	800363a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <_SendPacket+0x1c0>)
 8003624:	789b      	ldrb	r3, [r3, #2]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <_SendPacket+0x1c0>)
 800362c:	2201      	movs	r2, #1
 800362e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003630:	f7ff fe44 	bl	80032bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <_SendPacket+0x1c0>)
 8003636:	2200      	movs	r2, #0
 8003638:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800363a:	bf00      	nop
 800363c:	3728      	adds	r7, #40	; 0x28
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20014398 	.word	0x20014398
 8003648:	e0001004 	.word	0xe0001004
 800364c:	20012ed8 	.word	0x20012ed8

08003650 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800365e:	2300      	movs	r3, #0
 8003660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003664:	4917      	ldr	r1, [pc, #92]	; (80036c4 <SEGGER_SYSVIEW_Init+0x74>)
 8003666:	4818      	ldr	r0, [pc, #96]	; (80036c8 <SEGGER_SYSVIEW_Init+0x78>)
 8003668:	f7ff fcda 	bl	8003020 <SEGGER_RTT_AllocUpBuffer>
 800366c:	4603      	mov	r3, r0
 800366e:	b2da      	uxtb	r2, r3
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <SEGGER_SYSVIEW_Init+0x7c>)
 8003672:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003674:	4b15      	ldr	r3, [pc, #84]	; (80036cc <SEGGER_SYSVIEW_Init+0x7c>)
 8003676:	785a      	ldrb	r2, [r3, #1]
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <SEGGER_SYSVIEW_Init+0x7c>)
 800367a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800367c:	4b13      	ldr	r3, [pc, #76]	; (80036cc <SEGGER_SYSVIEW_Init+0x7c>)
 800367e:	7e1b      	ldrb	r3, [r3, #24]
 8003680:	4618      	mov	r0, r3
 8003682:	2300      	movs	r3, #0
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2308      	movs	r3, #8
 8003688:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <SEGGER_SYSVIEW_Init+0x80>)
 800368a:	490f      	ldr	r1, [pc, #60]	; (80036c8 <SEGGER_SYSVIEW_Init+0x78>)
 800368c:	f7ff fd4c 	bl	8003128 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003690:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <SEGGER_SYSVIEW_Init+0x7c>)
 8003692:	2200      	movs	r2, #0
 8003694:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <SEGGER_SYSVIEW_Init+0x84>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <SEGGER_SYSVIEW_Init+0x7c>)
 800369c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800369e:	4a0b      	ldr	r2, [pc, #44]	; (80036cc <SEGGER_SYSVIEW_Init+0x7c>)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80036a4:	4a09      	ldr	r2, [pc, #36]	; (80036cc <SEGGER_SYSVIEW_Init+0x7c>)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80036aa:	4a08      	ldr	r2, [pc, #32]	; (80036cc <SEGGER_SYSVIEW_Init+0x7c>)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <SEGGER_SYSVIEW_Init+0x7c>)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <SEGGER_SYSVIEW_Init+0x7c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20013390 	.word	0x20013390
 80036c8:	08005108 	.word	0x08005108
 80036cc:	20014398 	.word	0x20014398
 80036d0:	20014390 	.word	0x20014390
 80036d4:	e0001004 	.word	0xe0001004

080036d8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80036e0:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6113      	str	r3, [r2, #16]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20014398 	.word	0x20014398

080036f8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003700:	f3ef 8311 	mrs	r3, BASEPRI
 8003704:	f04f 0120 	mov.w	r1, #32
 8003708:	f381 8811 	msr	BASEPRI, r1
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	4808      	ldr	r0, [pc, #32]	; (8003730 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003710:	f7ff fdc7 	bl	80032a2 <_PreparePacket>
 8003714:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	68b8      	ldr	r0, [r7, #8]
 800371c:	f7ff feb2 	bl	8003484 <_SendPacket>
  RECORD_END();
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f383 8811 	msr	BASEPRI, r3
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	200143c8 	.word	0x200143c8

08003734 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800373e:	f3ef 8311 	mrs	r3, BASEPRI
 8003742:	f04f 0120 	mov.w	r1, #32
 8003746:	f381 8811 	msr	BASEPRI, r1
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	4816      	ldr	r0, [pc, #88]	; (80037a8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800374e:	f7ff fda8 	bl	80032a2 <_PreparePacket>
 8003752:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e00b      	b.n	800377a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	1c59      	adds	r1, r3, #1
 800376a:	61f9      	str	r1, [r7, #28]
 800376c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	09db      	lsrs	r3, r3, #7
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b7f      	cmp	r3, #127	; 0x7f
 800377e:	d8f0      	bhi.n	8003762 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	61fa      	str	r2, [r7, #28]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	6938      	ldr	r0, [r7, #16]
 8003796:	f7ff fe75 	bl	8003484 <_SendPacket>
  RECORD_END();
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f383 8811 	msr	BASEPRI, r3
}
 80037a0:	bf00      	nop
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200143c8 	.word	0x200143c8

080037ac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08c      	sub	sp, #48	; 0x30
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80037b8:	f3ef 8311 	mrs	r3, BASEPRI
 80037bc:	f04f 0120 	mov.w	r1, #32
 80037c0:	f381 8811 	msr	BASEPRI, r1
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	4825      	ldr	r0, [pc, #148]	; (800385c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80037c8:	f7ff fd6b 	bl	80032a2 <_PreparePacket>
 80037cc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037da:	e00b      	b.n	80037f4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	1c59      	adds	r1, r3, #1
 80037e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80037e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	09db      	lsrs	r3, r3, #7
 80037f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	2b7f      	cmp	r3, #127	; 0x7f
 80037f8:	d8f0      	bhi.n	80037dc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	623b      	str	r3, [r7, #32]
 8003812:	e00b      	b.n	800382c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	1c59      	adds	r1, r3, #1
 800381c:	6279      	str	r1, [r7, #36]	; 0x24
 800381e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	09db      	lsrs	r3, r3, #7
 800382a:	623b      	str	r3, [r7, #32]
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2b7f      	cmp	r3, #127	; 0x7f
 8003830:	d8f0      	bhi.n	8003814 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	627a      	str	r2, [r7, #36]	; 0x24
 8003838:	6a3a      	ldr	r2, [r7, #32]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	6979      	ldr	r1, [r7, #20]
 8003846:	69b8      	ldr	r0, [r7, #24]
 8003848:	f7ff fe1c 	bl	8003484 <_SendPacket>
  RECORD_END();
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f383 8811 	msr	BASEPRI, r3
}
 8003852:	bf00      	nop
 8003854:	3730      	adds	r7, #48	; 0x30
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	200143c8 	.word	0x200143c8

08003860 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b08e      	sub	sp, #56	; 0x38
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800386e:	f3ef 8311 	mrs	r3, BASEPRI
 8003872:	f04f 0120 	mov.w	r1, #32
 8003876:	f381 8811 	msr	BASEPRI, r1
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	4832      	ldr	r0, [pc, #200]	; (8003948 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800387e:	f7ff fd10 	bl	80032a2 <_PreparePacket>
 8003882:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
 8003890:	e00b      	b.n	80038aa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	b2da      	uxtb	r2, r3
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	1c59      	adds	r1, r3, #1
 800389a:	6379      	str	r1, [r7, #52]	; 0x34
 800389c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	09db      	lsrs	r3, r3, #7
 80038a8:	633b      	str	r3, [r7, #48]	; 0x30
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	2b7f      	cmp	r3, #127	; 0x7f
 80038ae:	d8f0      	bhi.n	8003892 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	637a      	str	r2, [r7, #52]	; 0x34
 80038b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c8:	e00b      	b.n	80038e2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	1c59      	adds	r1, r3, #1
 80038d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80038d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	09db      	lsrs	r3, r3, #7
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	2b7f      	cmp	r3, #127	; 0x7f
 80038e6:	d8f0      	bhi.n	80038ca <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80038e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	e00b      	b.n	800391a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	1c59      	adds	r1, r3, #1
 800390a:	6279      	str	r1, [r7, #36]	; 0x24
 800390c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	09db      	lsrs	r3, r3, #7
 8003918:	623b      	str	r3, [r7, #32]
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	2b7f      	cmp	r3, #127	; 0x7f
 800391e:	d8f0      	bhi.n	8003902 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	627a      	str	r2, [r7, #36]	; 0x24
 8003926:	6a3a      	ldr	r2, [r7, #32]
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	6979      	ldr	r1, [r7, #20]
 8003934:	69b8      	ldr	r0, [r7, #24]
 8003936:	f7ff fda5 	bl	8003484 <_SendPacket>
  RECORD_END();
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f383 8811 	msr	BASEPRI, r3
}
 8003940:	bf00      	nop
 8003942:	3738      	adds	r7, #56	; 0x38
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200143c8 	.word	0x200143c8

0800394c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b090      	sub	sp, #64	; 0x40
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800395a:	f3ef 8311 	mrs	r3, BASEPRI
 800395e:	f04f 0120 	mov.w	r1, #32
 8003962:	f381 8811 	msr	BASEPRI, r1
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	4840      	ldr	r0, [pc, #256]	; (8003a6c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800396a:	f7ff fc9a 	bl	80032a2 <_PreparePacket>
 800396e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	63bb      	str	r3, [r7, #56]	; 0x38
 800397c:	e00b      	b.n	8003996 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	b2da      	uxtb	r2, r3
 8003982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003984:	1c59      	adds	r1, r3, #1
 8003986:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003988:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	09db      	lsrs	r3, r3, #7
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	2b7f      	cmp	r3, #127	; 0x7f
 800399a:	d8f0      	bhi.n	800397e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800399c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]
 80039a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
 80039b4:	e00b      	b.n	80039ce <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039bc:	1c59      	adds	r1, r3, #1
 80039be:	6379      	str	r1, [r7, #52]	; 0x34
 80039c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	09db      	lsrs	r3, r3, #7
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	2b7f      	cmp	r3, #127	; 0x7f
 80039d2:	d8f0      	bhi.n	80039b6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	637a      	str	r2, [r7, #52]	; 0x34
 80039da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ec:	e00b      	b.n	8003a06 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	1c59      	adds	r1, r3, #1
 80039f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	09db      	lsrs	r3, r3, #7
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	2b7f      	cmp	r3, #127	; 0x7f
 8003a0a:	d8f0      	bhi.n	80039ee <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	701a      	strb	r2, [r3, #0]
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a22:	623b      	str	r3, [r7, #32]
 8003a24:	e00b      	b.n	8003a3e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	1c59      	adds	r1, r3, #1
 8003a2e:	6279      	str	r1, [r7, #36]	; 0x24
 8003a30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	09db      	lsrs	r3, r3, #7
 8003a3c:	623b      	str	r3, [r7, #32]
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	2b7f      	cmp	r3, #127	; 0x7f
 8003a42:	d8f0      	bhi.n	8003a26 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	627a      	str	r2, [r7, #36]	; 0x24
 8003a4a:	6a3a      	ldr	r2, [r7, #32]
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	69b8      	ldr	r0, [r7, #24]
 8003a5a:	f7ff fd13 	bl	8003484 <_SendPacket>
  RECORD_END();
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f383 8811 	msr	BASEPRI, r3
}
 8003a64:	bf00      	nop
 8003a66:	3740      	adds	r7, #64	; 0x40
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	200143c8 	.word	0x200143c8

08003a70 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08c      	sub	sp, #48	; 0x30
 8003a74:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003a76:	4b58      	ldr	r3, [pc, #352]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x168>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8003a80:	f04f 0120 	mov.w	r1, #32
 8003a84:	f381 8811 	msr	BASEPRI, r1
 8003a88:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003a8a:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x168>)
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	220a      	movs	r2, #10
 8003a90:	4952      	ldr	r1, [pc, #328]	; (8003bdc <SEGGER_SYSVIEW_Start+0x16c>)
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fc fba4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003a9e:	200a      	movs	r0, #10
 8003aa0:	f7ff fe2a 	bl	80036f8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8003aa8:	f04f 0120 	mov.w	r1, #32
 8003aac:	f381 8811 	msr	BASEPRI, r1
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	484b      	ldr	r0, [pc, #300]	; (8003be0 <SEGGER_SYSVIEW_Start+0x170>)
 8003ab4:	f7ff fbf5 	bl	80032a2 <_PreparePacket>
 8003ab8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac2:	4b45      	ldr	r3, [pc, #276]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x168>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac8:	e00b      	b.n	8003ae2 <SEGGER_SYSVIEW_Start+0x72>
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	1c59      	adds	r1, r3, #1
 8003ad2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003ad4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	09db      	lsrs	r3, r3, #7
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ae6:	d8f0      	bhi.n	8003aca <SEGGER_SYSVIEW_Start+0x5a>
 8003ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x168>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	623b      	str	r3, [r7, #32]
 8003b02:	e00b      	b.n	8003b1c <SEGGER_SYSVIEW_Start+0xac>
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	6279      	str	r1, [r7, #36]	; 0x24
 8003b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	09db      	lsrs	r3, r3, #7
 8003b1a:	623b      	str	r3, [r7, #32]
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b20:	d8f0      	bhi.n	8003b04 <SEGGER_SYSVIEW_Start+0x94>
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	627a      	str	r2, [r7, #36]	; 0x24
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x168>)
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e00b      	b.n	8003b56 <SEGGER_SYSVIEW_Start+0xe6>
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	1c59      	adds	r1, r3, #1
 8003b46:	61f9      	str	r1, [r7, #28]
 8003b48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	09db      	lsrs	r3, r3, #7
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b7f      	cmp	r3, #127	; 0x7f
 8003b5a:	d8f0      	bhi.n	8003b3e <SEGGER_SYSVIEW_Start+0xce>
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	61fa      	str	r2, [r7, #28]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	e00b      	b.n	8003b8e <SEGGER_SYSVIEW_Start+0x11e>
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	1c59      	adds	r1, r3, #1
 8003b7e:	6179      	str	r1, [r7, #20]
 8003b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	09db      	lsrs	r3, r3, #7
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b7f      	cmp	r3, #127	; 0x7f
 8003b92:	d8f0      	bhi.n	8003b76 <SEGGER_SYSVIEW_Start+0x106>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	617a      	str	r2, [r7, #20]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003ba4:	2218      	movs	r2, #24
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fc6b 	bl	8003484 <_SendPacket>
      RECORD_END();
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x168>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <SEGGER_SYSVIEW_Start+0x168>)
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003bc2:	f000 f9eb 	bl	8003f9c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003bc6:	f000 f9b1 	bl	8003f2c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003bca:	f000 fc23 	bl	8004414 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003bce:	bf00      	nop
 8003bd0:	3730      	adds	r7, #48	; 0x30
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20014398 	.word	0x20014398
 8003bdc:	08005118 	.word	0x08005118
 8003be0:	200143c8 	.word	0x200143c8

08003be4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003bea:	f3ef 8311 	mrs	r3, BASEPRI
 8003bee:	f04f 0120 	mov.w	r1, #32
 8003bf2:	f381 8811 	msr	BASEPRI, r1
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	480b      	ldr	r0, [pc, #44]	; (8003c28 <SEGGER_SYSVIEW_Stop+0x44>)
 8003bfa:	f7ff fb52 	bl	80032a2 <_PreparePacket>
 8003bfe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003c00:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <SEGGER_SYSVIEW_Stop+0x48>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003c08:	220b      	movs	r2, #11
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	6838      	ldr	r0, [r7, #0]
 8003c0e:	f7ff fc39 	bl	8003484 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <SEGGER_SYSVIEW_Stop+0x48>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f383 8811 	msr	BASEPRI, r3
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200143c8 	.word	0x200143c8
 8003c2c:	20014398 	.word	0x20014398

08003c30 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08c      	sub	sp, #48	; 0x30
 8003c34:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c36:	f3ef 8311 	mrs	r3, BASEPRI
 8003c3a:	f04f 0120 	mov.w	r1, #32
 8003c3e:	f381 8811 	msr	BASEPRI, r1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	4845      	ldr	r0, [pc, #276]	; (8003d5c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003c46:	f7ff fb2c 	bl	80032a2 <_PreparePacket>
 8003c4a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c54:	4b42      	ldr	r3, [pc, #264]	; (8003d60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5a:	e00b      	b.n	8003c74 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c62:	1c59      	adds	r1, r3, #1
 8003c64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	09db      	lsrs	r3, r3, #7
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	2b7f      	cmp	r3, #127	; 0x7f
 8003c78:	d8f0      	bhi.n	8003c5c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	623b      	str	r3, [r7, #32]
 8003c94:	e00b      	b.n	8003cae <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	1c59      	adds	r1, r3, #1
 8003c9e:	6279      	str	r1, [r7, #36]	; 0x24
 8003ca0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	09db      	lsrs	r3, r3, #7
 8003cac:	623b      	str	r3, [r7, #32]
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8003cb2:	d8f0      	bhi.n	8003c96 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	627a      	str	r2, [r7, #36]	; 0x24
 8003cba:	6a3a      	ldr	r2, [r7, #32]
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e00b      	b.n	8003ce8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	1c59      	adds	r1, r3, #1
 8003cd8:	61f9      	str	r1, [r7, #28]
 8003cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	09db      	lsrs	r3, r3, #7
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b7f      	cmp	r3, #127	; 0x7f
 8003cec:	d8f0      	bhi.n	8003cd0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	61fa      	str	r2, [r7, #28]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e00b      	b.n	8003d20 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	1c59      	adds	r1, r3, #1
 8003d10:	6179      	str	r1, [r7, #20]
 8003d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	09db      	lsrs	r3, r3, #7
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b7f      	cmp	r3, #127	; 0x7f
 8003d24:	d8f0      	bhi.n	8003d08 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	617a      	str	r2, [r7, #20]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003d36:	2218      	movs	r2, #24
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	68b8      	ldr	r0, [r7, #8]
 8003d3c:	f7ff fba2 	bl	8003484 <_SendPacket>
  RECORD_END();
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	4798      	blx	r3
  }
}
 8003d54:	bf00      	nop
 8003d56:	3730      	adds	r7, #48	; 0x30
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	200143c8 	.word	0x200143c8
 8003d60:	20014398 	.word	0x20014398

08003d64 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b092      	sub	sp, #72	; 0x48
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003d6c:	f3ef 8311 	mrs	r3, BASEPRI
 8003d70:	f04f 0120 	mov.w	r1, #32
 8003d74:	f381 8811 	msr	BASEPRI, r1
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	486a      	ldr	r0, [pc, #424]	; (8003f24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003d7c:	f7ff fa91 	bl	80032a2 <_PreparePacket>
 8003d80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	647b      	str	r3, [r7, #68]	; 0x44
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b66      	ldr	r3, [pc, #408]	; (8003f28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	643b      	str	r3, [r7, #64]	; 0x40
 8003d96:	e00b      	b.n	8003db0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	6479      	str	r1, [r7, #68]	; 0x44
 8003da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	09db      	lsrs	r3, r3, #7
 8003dae:	643b      	str	r3, [r7, #64]	; 0x40
 8003db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db2:	2b7f      	cmp	r3, #127	; 0x7f
 8003db4:	d8f0      	bhi.n	8003d98 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	647a      	str	r2, [r7, #68]	; 0x44
 8003dbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dd0:	e00b      	b.n	8003dea <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd8:	1c59      	adds	r1, r3, #1
 8003dda:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003ddc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	09db      	lsrs	r3, r3, #7
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2b7f      	cmp	r3, #127	; 0x7f
 8003dee:	d8f0      	bhi.n	8003dd2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	4619      	mov	r1, r3
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7ff f9fd 	bl	8003208 <_EncodeStr>
 8003e0e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003e10:	2209      	movs	r2, #9
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	6938      	ldr	r0, [r7, #16]
 8003e16:	f7ff fb35 	bl	8003484 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b40      	ldr	r3, [pc, #256]	; (8003f28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2e:	e00b      	b.n	8003e48 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	1c59      	adds	r1, r3, #1
 8003e38:	6379      	str	r1, [r7, #52]	; 0x34
 8003e3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	09db      	lsrs	r3, r3, #7
 8003e46:	633b      	str	r3, [r7, #48]	; 0x30
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e4c:	d8f0      	bhi.n	8003e30 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	637a      	str	r2, [r7, #52]	; 0x34
 8003e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e68:	e00b      	b.n	8003e82 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	1c59      	adds	r1, r3, #1
 8003e72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	09db      	lsrs	r3, r3, #7
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	2b7f      	cmp	r3, #127	; 0x7f
 8003e86:	d8f0      	bhi.n	8003e6a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	623b      	str	r3, [r7, #32]
 8003ea2:	e00b      	b.n	8003ebc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	1c59      	adds	r1, r3, #1
 8003eac:	6279      	str	r1, [r7, #36]	; 0x24
 8003eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	09db      	lsrs	r3, r3, #7
 8003eba:	623b      	str	r3, [r7, #32]
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8003ec0:	d8f0      	bhi.n	8003ea4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	627a      	str	r2, [r7, #36]	; 0x24
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	e00b      	b.n	8003ef4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	1c59      	adds	r1, r3, #1
 8003ee4:	61f9      	str	r1, [r7, #28]
 8003ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	09db      	lsrs	r3, r3, #7
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ef8:	d8f0      	bhi.n	8003edc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	61fa      	str	r2, [r7, #28]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003f0a:	2215      	movs	r2, #21
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	6938      	ldr	r0, [r7, #16]
 8003f10:	f7ff fab8 	bl	8003484 <_SendPacket>
  RECORD_END();
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f383 8811 	msr	BASEPRI, r3
}
 8003f1a:	bf00      	nop
 8003f1c:	3748      	adds	r7, #72	; 0x48
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	200143c8 	.word	0x200143c8
 8003f28:	20014398 	.word	0x20014398

08003f2c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003f42:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4798      	blx	r3
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20014398 	.word	0x20014398

08003f54 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8003f60:	f04f 0120 	mov.w	r1, #32
 8003f64:	f381 8811 	msr	BASEPRI, r1
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	480b      	ldr	r0, [pc, #44]	; (8003f98 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003f6c:	f7ff f999 	bl	80032a2 <_PreparePacket>
 8003f70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	6938      	ldr	r0, [r7, #16]
 8003f78:	f7ff f946 	bl	8003208 <_EncodeStr>
 8003f7c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003f7e:	220e      	movs	r2, #14
 8003f80:	68f9      	ldr	r1, [r7, #12]
 8003f82:	6938      	ldr	r0, [r7, #16]
 8003f84:	f7ff fa7e 	bl	8003484 <_SendPacket>
  RECORD_END();
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f383 8811 	msr	BASEPRI, r3
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200143c8 	.word	0x200143c8

08003f9c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01a      	beq.n	8003fe0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d015      	beq.n	8003fe0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4798      	blx	r3
 8003fbc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003fc0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003fc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	000a      	movs	r2, r1
 8003fd0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	200d      	movs	r0, #13
 8003fda:	f7ff fbe7 	bl	80037ac <SEGGER_SYSVIEW_RecordU32x2>
 8003fde:	e006      	b.n	8003fee <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	200c      	movs	r0, #12
 8003fe8:	f7ff fba4 	bl	8003734 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd90      	pop	{r4, r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20014398 	.word	0x20014398
 8003ffc:	e0001004 	.word	0xe0001004

08004000 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004006:	f3ef 8311 	mrs	r3, BASEPRI
 800400a:	f04f 0120 	mov.w	r1, #32
 800400e:	f381 8811 	msr	BASEPRI, r1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	4819      	ldr	r0, [pc, #100]	; (800407c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004016:	f7ff f944 	bl	80032a2 <_PreparePacket>
 800401a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004020:	4b17      	ldr	r3, [pc, #92]	; (8004080 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004028:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	e00b      	b.n	800404c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	b2da      	uxtb	r2, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	1c59      	adds	r1, r3, #1
 800403c:	6179      	str	r1, [r7, #20]
 800403e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	09db      	lsrs	r3, r3, #7
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b7f      	cmp	r3, #127	; 0x7f
 8004050:	d8f0      	bhi.n	8004034 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	617a      	str	r2, [r7, #20]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004062:	2202      	movs	r2, #2
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	68b8      	ldr	r0, [r7, #8]
 8004068:	f7ff fa0c 	bl	8003484 <_SendPacket>
  RECORD_END();
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f383 8811 	msr	BASEPRI, r3
}
 8004072:	bf00      	nop
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	200143c8 	.word	0x200143c8
 8004080:	e000ed04 	.word	0xe000ed04

08004084 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800408a:	f3ef 8311 	mrs	r3, BASEPRI
 800408e:	f04f 0120 	mov.w	r1, #32
 8004092:	f381 8811 	msr	BASEPRI, r1
 8004096:	607b      	str	r3, [r7, #4]
 8004098:	4807      	ldr	r0, [pc, #28]	; (80040b8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800409a:	f7ff f902 	bl	80032a2 <_PreparePacket>
 800409e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80040a0:	2203      	movs	r2, #3
 80040a2:	6839      	ldr	r1, [r7, #0]
 80040a4:	6838      	ldr	r0, [r7, #0]
 80040a6:	f7ff f9ed 	bl	8003484 <_SendPacket>
  RECORD_END();
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f383 8811 	msr	BASEPRI, r3
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200143c8 	.word	0x200143c8

080040bc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040c2:	f3ef 8311 	mrs	r3, BASEPRI
 80040c6:	f04f 0120 	mov.w	r1, #32
 80040ca:	f381 8811 	msr	BASEPRI, r1
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	4807      	ldr	r0, [pc, #28]	; (80040f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80040d2:	f7ff f8e6 	bl	80032a2 <_PreparePacket>
 80040d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80040d8:	2212      	movs	r2, #18
 80040da:	6839      	ldr	r1, [r7, #0]
 80040dc:	6838      	ldr	r0, [r7, #0]
 80040de:	f7ff f9d1 	bl	8003484 <_SendPacket>
  RECORD_END();
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f383 8811 	msr	BASEPRI, r3
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200143c8 	.word	0x200143c8

080040f4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80040fa:	f3ef 8311 	mrs	r3, BASEPRI
 80040fe:	f04f 0120 	mov.w	r1, #32
 8004102:	f381 8811 	msr	BASEPRI, r1
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	4807      	ldr	r0, [pc, #28]	; (8004128 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800410a:	f7ff f8ca 	bl	80032a2 <_PreparePacket>
 800410e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004110:	2211      	movs	r2, #17
 8004112:	6839      	ldr	r1, [r7, #0]
 8004114:	6838      	ldr	r0, [r7, #0]
 8004116:	f7ff f9b5 	bl	8003484 <_SendPacket>
  RECORD_END();
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f383 8811 	msr	BASEPRI, r3
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	200143c8 	.word	0x200143c8

0800412c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004134:	f3ef 8311 	mrs	r3, BASEPRI
 8004138:	f04f 0120 	mov.w	r1, #32
 800413c:	f381 8811 	msr	BASEPRI, r1
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	4819      	ldr	r0, [pc, #100]	; (80041a8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004144:	f7ff f8ad 	bl	80032a2 <_PreparePacket>
 8004148:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800414e:	4b17      	ldr	r3, [pc, #92]	; (80041ac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	e00b      	b.n	800417a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	1c59      	adds	r1, r3, #1
 800416a:	61f9      	str	r1, [r7, #28]
 800416c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	09db      	lsrs	r3, r3, #7
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b7f      	cmp	r3, #127	; 0x7f
 800417e:	d8f0      	bhi.n	8004162 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	61fa      	str	r2, [r7, #28]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004190:	2208      	movs	r2, #8
 8004192:	68f9      	ldr	r1, [r7, #12]
 8004194:	6938      	ldr	r0, [r7, #16]
 8004196:	f7ff f975 	bl	8003484 <_SendPacket>
  RECORD_END();
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f383 8811 	msr	BASEPRI, r3
}
 80041a0:	bf00      	nop
 80041a2:	3720      	adds	r7, #32
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200143c8 	.word	0x200143c8
 80041ac:	20014398 	.word	0x20014398

080041b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041b8:	f3ef 8311 	mrs	r3, BASEPRI
 80041bc:	f04f 0120 	mov.w	r1, #32
 80041c0:	f381 8811 	msr	BASEPRI, r1
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	4819      	ldr	r0, [pc, #100]	; (800422c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80041c8:	f7ff f86b 	bl	80032a2 <_PreparePacket>
 80041cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	61fb      	str	r3, [r7, #28]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	e00b      	b.n	80041fe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	1c59      	adds	r1, r3, #1
 80041ee:	61f9      	str	r1, [r7, #28]
 80041f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	09db      	lsrs	r3, r3, #7
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b7f      	cmp	r3, #127	; 0x7f
 8004202:	d8f0      	bhi.n	80041e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	61fa      	str	r2, [r7, #28]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004214:	2204      	movs	r2, #4
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	6938      	ldr	r0, [r7, #16]
 800421a:	f7ff f933 	bl	8003484 <_SendPacket>
  RECORD_END();
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f383 8811 	msr	BASEPRI, r3
}
 8004224:	bf00      	nop
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	200143c8 	.word	0x200143c8
 8004230:	20014398 	.word	0x20014398

08004234 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800423c:	f3ef 8311 	mrs	r3, BASEPRI
 8004240:	f04f 0120 	mov.w	r1, #32
 8004244:	f381 8811 	msr	BASEPRI, r1
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	4819      	ldr	r0, [pc, #100]	; (80042b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800424c:	f7ff f829 	bl	80032a2 <_PreparePacket>
 8004250:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	e00b      	b.n	8004282 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	1c59      	adds	r1, r3, #1
 8004272:	61f9      	str	r1, [r7, #28]
 8004274:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	09db      	lsrs	r3, r3, #7
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b7f      	cmp	r3, #127	; 0x7f
 8004286:	d8f0      	bhi.n	800426a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	61fa      	str	r2, [r7, #28]
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004298:	2206      	movs	r2, #6
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	6938      	ldr	r0, [r7, #16]
 800429e:	f7ff f8f1 	bl	8003484 <_SendPacket>
  RECORD_END();
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f383 8811 	msr	BASEPRI, r3
}
 80042a8:	bf00      	nop
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	200143c8 	.word	0x200143c8
 80042b4:	20014398 	.word	0x20014398

080042b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	1ad3      	subs	r3, r2, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	20014398 	.word	0x20014398

080042d8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08c      	sub	sp, #48	; 0x30
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80042e2:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d06d      	beq.n	80043c6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80042ea:	4b39      	ldr	r3, [pc, #228]	; (80043d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80042f0:	2300      	movs	r3, #0
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f4:	e008      	b.n	8004308 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	3301      	adds	r3, #1
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430c:	429a      	cmp	r2, r3
 800430e:	d3f2      	bcc.n	80042f6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004310:	e000      	b.n	8004314 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004312:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d055      	beq.n	80043c6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800431a:	f3ef 8311 	mrs	r3, BASEPRI
 800431e:	f04f 0120 	mov.w	r1, #32
 8004322:	f381 8811 	msr	BASEPRI, r1
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	482a      	ldr	r0, [pc, #168]	; (80043d4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800432a:	f7fe ffba 	bl	80032a2 <_PreparePacket>
 800432e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	e00b      	b.n	8004356 <SEGGER_SYSVIEW_SendModule+0x7e>
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	1c59      	adds	r1, r3, #1
 8004346:	6279      	str	r1, [r7, #36]	; 0x24
 8004348:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	09db      	lsrs	r3, r3, #7
 8004354:	623b      	str	r3, [r7, #32]
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	2b7f      	cmp	r3, #127	; 0x7f
 800435a:	d8f0      	bhi.n	800433e <SEGGER_SYSVIEW_SendModule+0x66>
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	627a      	str	r2, [r7, #36]	; 0x24
 8004362:	6a3a      	ldr	r2, [r7, #32]
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	e00b      	b.n	8004390 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	b2da      	uxtb	r2, r3
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	1c59      	adds	r1, r3, #1
 8004380:	61f9      	str	r1, [r7, #28]
 8004382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	09db      	lsrs	r3, r3, #7
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b7f      	cmp	r3, #127	; 0x7f
 8004394:	d8f0      	bhi.n	8004378 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	61fa      	str	r2, [r7, #28]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2280      	movs	r2, #128	; 0x80
 80043ac:	4619      	mov	r1, r3
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7fe ff2a 	bl	8003208 <_EncodeStr>
 80043b4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80043b6:	2216      	movs	r2, #22
 80043b8:	68f9      	ldr	r1, [r7, #12]
 80043ba:	6938      	ldr	r0, [r7, #16]
 80043bc:	f7ff f862 	bl	8003484 <_SendPacket>
      RECORD_END();
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80043c6:	bf00      	nop
 80043c8:	3730      	adds	r7, #48	; 0x30
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	200143c0 	.word	0x200143c0
 80043d4:	200143c8 	.word	0x200143c8

080043d8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80043de:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00f      	beq.n	8004406 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f2      	bne.n	80043ec <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200143c0 	.word	0x200143c0

08004414 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800441a:	f3ef 8311 	mrs	r3, BASEPRI
 800441e:	f04f 0120 	mov.w	r1, #32
 8004422:	f381 8811 	msr	BASEPRI, r1
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	4817      	ldr	r0, [pc, #92]	; (8004488 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800442a:	f7fe ff3a 	bl	80032a2 <_PreparePacket>
 800442e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e00b      	b.n	8004458 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	b2da      	uxtb	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	1c59      	adds	r1, r3, #1
 8004448:	6179      	str	r1, [r7, #20]
 800444a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	09db      	lsrs	r3, r3, #7
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b7f      	cmp	r3, #127	; 0x7f
 800445c:	d8f0      	bhi.n	8004440 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	617a      	str	r2, [r7, #20]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800446e:	221b      	movs	r2, #27
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	68b8      	ldr	r0, [r7, #8]
 8004474:	f7ff f806 	bl	8003484 <_SendPacket>
  RECORD_END();
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f383 8811 	msr	BASEPRI, r3
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200143c8 	.word	0x200143c8
 800448c:	200143c4 	.word	0x200143c4

08004490 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004498:	f3ef 8311 	mrs	r3, BASEPRI
 800449c:	f04f 0120 	mov.w	r1, #32
 80044a0:	f381 8811 	msr	BASEPRI, r1
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	4827      	ldr	r0, [pc, #156]	; (8004544 <SEGGER_SYSVIEW_Warn+0xb4>)
 80044a8:	f7fe fefb 	bl	80032a2 <_PreparePacket>
 80044ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044ae:	2280      	movs	r2, #128	; 0x80
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	6938      	ldr	r0, [r7, #16]
 80044b4:	f7fe fea8 	bl	8003208 <_EncodeStr>
 80044b8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
 80044be:	2301      	movs	r3, #1
 80044c0:	623b      	str	r3, [r7, #32]
 80044c2:	e00b      	b.n	80044dc <SEGGER_SYSVIEW_Warn+0x4c>
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	1c59      	adds	r1, r3, #1
 80044cc:	6279      	str	r1, [r7, #36]	; 0x24
 80044ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	09db      	lsrs	r3, r3, #7
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2b7f      	cmp	r3, #127	; 0x7f
 80044e0:	d8f0      	bhi.n	80044c4 <SEGGER_SYSVIEW_Warn+0x34>
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	627a      	str	r2, [r7, #36]	; 0x24
 80044e8:	6a3a      	ldr	r2, [r7, #32]
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	2300      	movs	r3, #0
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	e00b      	b.n	8004514 <SEGGER_SYSVIEW_Warn+0x84>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	1c59      	adds	r1, r3, #1
 8004504:	61f9      	str	r1, [r7, #28]
 8004506:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	09db      	lsrs	r3, r3, #7
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b7f      	cmp	r3, #127	; 0x7f
 8004518:	d8f0      	bhi.n	80044fc <SEGGER_SYSVIEW_Warn+0x6c>
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	61fa      	str	r2, [r7, #28]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800452a:	221a      	movs	r2, #26
 800452c:	68f9      	ldr	r1, [r7, #12]
 800452e:	6938      	ldr	r0, [r7, #16]
 8004530:	f7fe ffa8 	bl	8003484 <_SendPacket>
  RECORD_END();
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f383 8811 	msr	BASEPRI, r3
}
 800453a:	bf00      	nop
 800453c:	3728      	adds	r7, #40	; 0x28
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	200143c8 	.word	0x200143c8

08004548 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	2000      	movs	r0, #0
 800455c:	f7fe fd3a 	bl	8002fd4 <SEGGER_RTT_Write>
  return len;
 8004560:	683b      	ldr	r3, [r7, #0]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <__errno>:
 800456c:	4b01      	ldr	r3, [pc, #4]	; (8004574 <__errno+0x8>)
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	2000000c 	.word	0x2000000c

08004578 <__libc_init_array>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	4d0d      	ldr	r5, [pc, #52]	; (80045b0 <__libc_init_array+0x38>)
 800457c:	4c0d      	ldr	r4, [pc, #52]	; (80045b4 <__libc_init_array+0x3c>)
 800457e:	1b64      	subs	r4, r4, r5
 8004580:	10a4      	asrs	r4, r4, #2
 8004582:	2600      	movs	r6, #0
 8004584:	42a6      	cmp	r6, r4
 8004586:	d109      	bne.n	800459c <__libc_init_array+0x24>
 8004588:	4d0b      	ldr	r5, [pc, #44]	; (80045b8 <__libc_init_array+0x40>)
 800458a:	4c0c      	ldr	r4, [pc, #48]	; (80045bc <__libc_init_array+0x44>)
 800458c:	f000 fd2a 	bl	8004fe4 <_init>
 8004590:	1b64      	subs	r4, r4, r5
 8004592:	10a4      	asrs	r4, r4, #2
 8004594:	2600      	movs	r6, #0
 8004596:	42a6      	cmp	r6, r4
 8004598:	d105      	bne.n	80045a6 <__libc_init_array+0x2e>
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a0:	4798      	blx	r3
 80045a2:	3601      	adds	r6, #1
 80045a4:	e7ee      	b.n	8004584 <__libc_init_array+0xc>
 80045a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045aa:	4798      	blx	r3
 80045ac:	3601      	adds	r6, #1
 80045ae:	e7f2      	b.n	8004596 <__libc_init_array+0x1e>
 80045b0:	08005188 	.word	0x08005188
 80045b4:	08005188 	.word	0x08005188
 80045b8:	08005188 	.word	0x08005188
 80045bc:	0800518c 	.word	0x0800518c

080045c0 <memcmp>:
 80045c0:	b510      	push	{r4, lr}
 80045c2:	3901      	subs	r1, #1
 80045c4:	4402      	add	r2, r0
 80045c6:	4290      	cmp	r0, r2
 80045c8:	d101      	bne.n	80045ce <memcmp+0xe>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e005      	b.n	80045da <memcmp+0x1a>
 80045ce:	7803      	ldrb	r3, [r0, #0]
 80045d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80045d4:	42a3      	cmp	r3, r4
 80045d6:	d001      	beq.n	80045dc <memcmp+0x1c>
 80045d8:	1b18      	subs	r0, r3, r4
 80045da:	bd10      	pop	{r4, pc}
 80045dc:	3001      	adds	r0, #1
 80045de:	e7f2      	b.n	80045c6 <memcmp+0x6>

080045e0 <memcpy>:
 80045e0:	440a      	add	r2, r1
 80045e2:	4291      	cmp	r1, r2
 80045e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80045e8:	d100      	bne.n	80045ec <memcpy+0xc>
 80045ea:	4770      	bx	lr
 80045ec:	b510      	push	{r4, lr}
 80045ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045f6:	4291      	cmp	r1, r2
 80045f8:	d1f9      	bne.n	80045ee <memcpy+0xe>
 80045fa:	bd10      	pop	{r4, pc}

080045fc <memset>:
 80045fc:	4402      	add	r2, r0
 80045fe:	4603      	mov	r3, r0
 8004600:	4293      	cmp	r3, r2
 8004602:	d100      	bne.n	8004606 <memset+0xa>
 8004604:	4770      	bx	lr
 8004606:	f803 1b01 	strb.w	r1, [r3], #1
 800460a:	e7f9      	b.n	8004600 <memset+0x4>

0800460c <_puts_r>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	460e      	mov	r6, r1
 8004610:	4605      	mov	r5, r0
 8004612:	b118      	cbz	r0, 800461c <_puts_r+0x10>
 8004614:	6983      	ldr	r3, [r0, #24]
 8004616:	b90b      	cbnz	r3, 800461c <_puts_r+0x10>
 8004618:	f000 fa48 	bl	8004aac <__sinit>
 800461c:	69ab      	ldr	r3, [r5, #24]
 800461e:	68ac      	ldr	r4, [r5, #8]
 8004620:	b913      	cbnz	r3, 8004628 <_puts_r+0x1c>
 8004622:	4628      	mov	r0, r5
 8004624:	f000 fa42 	bl	8004aac <__sinit>
 8004628:	4b2c      	ldr	r3, [pc, #176]	; (80046dc <_puts_r+0xd0>)
 800462a:	429c      	cmp	r4, r3
 800462c:	d120      	bne.n	8004670 <_puts_r+0x64>
 800462e:	686c      	ldr	r4, [r5, #4]
 8004630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004632:	07db      	lsls	r3, r3, #31
 8004634:	d405      	bmi.n	8004642 <_puts_r+0x36>
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	0598      	lsls	r0, r3, #22
 800463a:	d402      	bmi.n	8004642 <_puts_r+0x36>
 800463c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800463e:	f000 fad3 	bl	8004be8 <__retarget_lock_acquire_recursive>
 8004642:	89a3      	ldrh	r3, [r4, #12]
 8004644:	0719      	lsls	r1, r3, #28
 8004646:	d51d      	bpl.n	8004684 <_puts_r+0x78>
 8004648:	6923      	ldr	r3, [r4, #16]
 800464a:	b1db      	cbz	r3, 8004684 <_puts_r+0x78>
 800464c:	3e01      	subs	r6, #1
 800464e:	68a3      	ldr	r3, [r4, #8]
 8004650:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004654:	3b01      	subs	r3, #1
 8004656:	60a3      	str	r3, [r4, #8]
 8004658:	bb39      	cbnz	r1, 80046aa <_puts_r+0x9e>
 800465a:	2b00      	cmp	r3, #0
 800465c:	da38      	bge.n	80046d0 <_puts_r+0xc4>
 800465e:	4622      	mov	r2, r4
 8004660:	210a      	movs	r1, #10
 8004662:	4628      	mov	r0, r5
 8004664:	f000 f848 	bl	80046f8 <__swbuf_r>
 8004668:	3001      	adds	r0, #1
 800466a:	d011      	beq.n	8004690 <_puts_r+0x84>
 800466c:	250a      	movs	r5, #10
 800466e:	e011      	b.n	8004694 <_puts_r+0x88>
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <_puts_r+0xd4>)
 8004672:	429c      	cmp	r4, r3
 8004674:	d101      	bne.n	800467a <_puts_r+0x6e>
 8004676:	68ac      	ldr	r4, [r5, #8]
 8004678:	e7da      	b.n	8004630 <_puts_r+0x24>
 800467a:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <_puts_r+0xd8>)
 800467c:	429c      	cmp	r4, r3
 800467e:	bf08      	it	eq
 8004680:	68ec      	ldreq	r4, [r5, #12]
 8004682:	e7d5      	b.n	8004630 <_puts_r+0x24>
 8004684:	4621      	mov	r1, r4
 8004686:	4628      	mov	r0, r5
 8004688:	f000 f888 	bl	800479c <__swsetup_r>
 800468c:	2800      	cmp	r0, #0
 800468e:	d0dd      	beq.n	800464c <_puts_r+0x40>
 8004690:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004696:	07da      	lsls	r2, r3, #31
 8004698:	d405      	bmi.n	80046a6 <_puts_r+0x9a>
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	059b      	lsls	r3, r3, #22
 800469e:	d402      	bmi.n	80046a6 <_puts_r+0x9a>
 80046a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a2:	f000 faa2 	bl	8004bea <__retarget_lock_release_recursive>
 80046a6:	4628      	mov	r0, r5
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	da04      	bge.n	80046b8 <_puts_r+0xac>
 80046ae:	69a2      	ldr	r2, [r4, #24]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	dc06      	bgt.n	80046c2 <_puts_r+0xb6>
 80046b4:	290a      	cmp	r1, #10
 80046b6:	d004      	beq.n	80046c2 <_puts_r+0xb6>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	6022      	str	r2, [r4, #0]
 80046be:	7019      	strb	r1, [r3, #0]
 80046c0:	e7c5      	b.n	800464e <_puts_r+0x42>
 80046c2:	4622      	mov	r2, r4
 80046c4:	4628      	mov	r0, r5
 80046c6:	f000 f817 	bl	80046f8 <__swbuf_r>
 80046ca:	3001      	adds	r0, #1
 80046cc:	d1bf      	bne.n	800464e <_puts_r+0x42>
 80046ce:	e7df      	b.n	8004690 <_puts_r+0x84>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	250a      	movs	r5, #10
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	6022      	str	r2, [r4, #0]
 80046d8:	701d      	strb	r5, [r3, #0]
 80046da:	e7db      	b.n	8004694 <_puts_r+0x88>
 80046dc:	08005148 	.word	0x08005148
 80046e0:	08005168 	.word	0x08005168
 80046e4:	08005128 	.word	0x08005128

080046e8 <puts>:
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <puts+0xc>)
 80046ea:	4601      	mov	r1, r0
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	f7ff bf8d 	b.w	800460c <_puts_r>
 80046f2:	bf00      	nop
 80046f4:	2000000c 	.word	0x2000000c

080046f8 <__swbuf_r>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	460e      	mov	r6, r1
 80046fc:	4614      	mov	r4, r2
 80046fe:	4605      	mov	r5, r0
 8004700:	b118      	cbz	r0, 800470a <__swbuf_r+0x12>
 8004702:	6983      	ldr	r3, [r0, #24]
 8004704:	b90b      	cbnz	r3, 800470a <__swbuf_r+0x12>
 8004706:	f000 f9d1 	bl	8004aac <__sinit>
 800470a:	4b21      	ldr	r3, [pc, #132]	; (8004790 <__swbuf_r+0x98>)
 800470c:	429c      	cmp	r4, r3
 800470e:	d12b      	bne.n	8004768 <__swbuf_r+0x70>
 8004710:	686c      	ldr	r4, [r5, #4]
 8004712:	69a3      	ldr	r3, [r4, #24]
 8004714:	60a3      	str	r3, [r4, #8]
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	071a      	lsls	r2, r3, #28
 800471a:	d52f      	bpl.n	800477c <__swbuf_r+0x84>
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	b36b      	cbz	r3, 800477c <__swbuf_r+0x84>
 8004720:	6923      	ldr	r3, [r4, #16]
 8004722:	6820      	ldr	r0, [r4, #0]
 8004724:	1ac0      	subs	r0, r0, r3
 8004726:	6963      	ldr	r3, [r4, #20]
 8004728:	b2f6      	uxtb	r6, r6
 800472a:	4283      	cmp	r3, r0
 800472c:	4637      	mov	r7, r6
 800472e:	dc04      	bgt.n	800473a <__swbuf_r+0x42>
 8004730:	4621      	mov	r1, r4
 8004732:	4628      	mov	r0, r5
 8004734:	f000 f926 	bl	8004984 <_fflush_r>
 8004738:	bb30      	cbnz	r0, 8004788 <__swbuf_r+0x90>
 800473a:	68a3      	ldr	r3, [r4, #8]
 800473c:	3b01      	subs	r3, #1
 800473e:	60a3      	str	r3, [r4, #8]
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	6022      	str	r2, [r4, #0]
 8004746:	701e      	strb	r6, [r3, #0]
 8004748:	6963      	ldr	r3, [r4, #20]
 800474a:	3001      	adds	r0, #1
 800474c:	4283      	cmp	r3, r0
 800474e:	d004      	beq.n	800475a <__swbuf_r+0x62>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	07db      	lsls	r3, r3, #31
 8004754:	d506      	bpl.n	8004764 <__swbuf_r+0x6c>
 8004756:	2e0a      	cmp	r6, #10
 8004758:	d104      	bne.n	8004764 <__swbuf_r+0x6c>
 800475a:	4621      	mov	r1, r4
 800475c:	4628      	mov	r0, r5
 800475e:	f000 f911 	bl	8004984 <_fflush_r>
 8004762:	b988      	cbnz	r0, 8004788 <__swbuf_r+0x90>
 8004764:	4638      	mov	r0, r7
 8004766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <__swbuf_r+0x9c>)
 800476a:	429c      	cmp	r4, r3
 800476c:	d101      	bne.n	8004772 <__swbuf_r+0x7a>
 800476e:	68ac      	ldr	r4, [r5, #8]
 8004770:	e7cf      	b.n	8004712 <__swbuf_r+0x1a>
 8004772:	4b09      	ldr	r3, [pc, #36]	; (8004798 <__swbuf_r+0xa0>)
 8004774:	429c      	cmp	r4, r3
 8004776:	bf08      	it	eq
 8004778:	68ec      	ldreq	r4, [r5, #12]
 800477a:	e7ca      	b.n	8004712 <__swbuf_r+0x1a>
 800477c:	4621      	mov	r1, r4
 800477e:	4628      	mov	r0, r5
 8004780:	f000 f80c 	bl	800479c <__swsetup_r>
 8004784:	2800      	cmp	r0, #0
 8004786:	d0cb      	beq.n	8004720 <__swbuf_r+0x28>
 8004788:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800478c:	e7ea      	b.n	8004764 <__swbuf_r+0x6c>
 800478e:	bf00      	nop
 8004790:	08005148 	.word	0x08005148
 8004794:	08005168 	.word	0x08005168
 8004798:	08005128 	.word	0x08005128

0800479c <__swsetup_r>:
 800479c:	4b32      	ldr	r3, [pc, #200]	; (8004868 <__swsetup_r+0xcc>)
 800479e:	b570      	push	{r4, r5, r6, lr}
 80047a0:	681d      	ldr	r5, [r3, #0]
 80047a2:	4606      	mov	r6, r0
 80047a4:	460c      	mov	r4, r1
 80047a6:	b125      	cbz	r5, 80047b2 <__swsetup_r+0x16>
 80047a8:	69ab      	ldr	r3, [r5, #24]
 80047aa:	b913      	cbnz	r3, 80047b2 <__swsetup_r+0x16>
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f97d 	bl	8004aac <__sinit>
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <__swsetup_r+0xd0>)
 80047b4:	429c      	cmp	r4, r3
 80047b6:	d10f      	bne.n	80047d8 <__swsetup_r+0x3c>
 80047b8:	686c      	ldr	r4, [r5, #4]
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047c0:	0719      	lsls	r1, r3, #28
 80047c2:	d42c      	bmi.n	800481e <__swsetup_r+0x82>
 80047c4:	06dd      	lsls	r5, r3, #27
 80047c6:	d411      	bmi.n	80047ec <__swsetup_r+0x50>
 80047c8:	2309      	movs	r3, #9
 80047ca:	6033      	str	r3, [r6, #0]
 80047cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047d6:	e03e      	b.n	8004856 <__swsetup_r+0xba>
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <__swsetup_r+0xd4>)
 80047da:	429c      	cmp	r4, r3
 80047dc:	d101      	bne.n	80047e2 <__swsetup_r+0x46>
 80047de:	68ac      	ldr	r4, [r5, #8]
 80047e0:	e7eb      	b.n	80047ba <__swsetup_r+0x1e>
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <__swsetup_r+0xd8>)
 80047e4:	429c      	cmp	r4, r3
 80047e6:	bf08      	it	eq
 80047e8:	68ec      	ldreq	r4, [r5, #12]
 80047ea:	e7e6      	b.n	80047ba <__swsetup_r+0x1e>
 80047ec:	0758      	lsls	r0, r3, #29
 80047ee:	d512      	bpl.n	8004816 <__swsetup_r+0x7a>
 80047f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047f2:	b141      	cbz	r1, 8004806 <__swsetup_r+0x6a>
 80047f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047f8:	4299      	cmp	r1, r3
 80047fa:	d002      	beq.n	8004802 <__swsetup_r+0x66>
 80047fc:	4630      	mov	r0, r6
 80047fe:	f000 fa5b 	bl	8004cb8 <_free_r>
 8004802:	2300      	movs	r3, #0
 8004804:	6363      	str	r3, [r4, #52]	; 0x34
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800480c:	81a3      	strh	r3, [r4, #12]
 800480e:	2300      	movs	r3, #0
 8004810:	6063      	str	r3, [r4, #4]
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f043 0308 	orr.w	r3, r3, #8
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	6923      	ldr	r3, [r4, #16]
 8004820:	b94b      	cbnz	r3, 8004836 <__swsetup_r+0x9a>
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482c:	d003      	beq.n	8004836 <__swsetup_r+0x9a>
 800482e:	4621      	mov	r1, r4
 8004830:	4630      	mov	r0, r6
 8004832:	f000 fa01 	bl	8004c38 <__smakebuf_r>
 8004836:	89a0      	ldrh	r0, [r4, #12]
 8004838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800483c:	f010 0301 	ands.w	r3, r0, #1
 8004840:	d00a      	beq.n	8004858 <__swsetup_r+0xbc>
 8004842:	2300      	movs	r3, #0
 8004844:	60a3      	str	r3, [r4, #8]
 8004846:	6963      	ldr	r3, [r4, #20]
 8004848:	425b      	negs	r3, r3
 800484a:	61a3      	str	r3, [r4, #24]
 800484c:	6923      	ldr	r3, [r4, #16]
 800484e:	b943      	cbnz	r3, 8004862 <__swsetup_r+0xc6>
 8004850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004854:	d1ba      	bne.n	80047cc <__swsetup_r+0x30>
 8004856:	bd70      	pop	{r4, r5, r6, pc}
 8004858:	0781      	lsls	r1, r0, #30
 800485a:	bf58      	it	pl
 800485c:	6963      	ldrpl	r3, [r4, #20]
 800485e:	60a3      	str	r3, [r4, #8]
 8004860:	e7f4      	b.n	800484c <__swsetup_r+0xb0>
 8004862:	2000      	movs	r0, #0
 8004864:	e7f7      	b.n	8004856 <__swsetup_r+0xba>
 8004866:	bf00      	nop
 8004868:	2000000c 	.word	0x2000000c
 800486c:	08005148 	.word	0x08005148
 8004870:	08005168 	.word	0x08005168
 8004874:	08005128 	.word	0x08005128

08004878 <__sflush_r>:
 8004878:	898a      	ldrh	r2, [r1, #12]
 800487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	0710      	lsls	r0, r2, #28
 8004882:	460c      	mov	r4, r1
 8004884:	d458      	bmi.n	8004938 <__sflush_r+0xc0>
 8004886:	684b      	ldr	r3, [r1, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	dc05      	bgt.n	8004898 <__sflush_r+0x20>
 800488c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	dc02      	bgt.n	8004898 <__sflush_r+0x20>
 8004892:	2000      	movs	r0, #0
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800489a:	2e00      	cmp	r6, #0
 800489c:	d0f9      	beq.n	8004892 <__sflush_r+0x1a>
 800489e:	2300      	movs	r3, #0
 80048a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048a4:	682f      	ldr	r7, [r5, #0]
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	d032      	beq.n	8004910 <__sflush_r+0x98>
 80048aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	075a      	lsls	r2, r3, #29
 80048b0:	d505      	bpl.n	80048be <__sflush_r+0x46>
 80048b2:	6863      	ldr	r3, [r4, #4]
 80048b4:	1ac0      	subs	r0, r0, r3
 80048b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048b8:	b10b      	cbz	r3, 80048be <__sflush_r+0x46>
 80048ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048bc:	1ac0      	subs	r0, r0, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	4602      	mov	r2, r0
 80048c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048c4:	6a21      	ldr	r1, [r4, #32]
 80048c6:	4628      	mov	r0, r5
 80048c8:	47b0      	blx	r6
 80048ca:	1c43      	adds	r3, r0, #1
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	d106      	bne.n	80048de <__sflush_r+0x66>
 80048d0:	6829      	ldr	r1, [r5, #0]
 80048d2:	291d      	cmp	r1, #29
 80048d4:	d82c      	bhi.n	8004930 <__sflush_r+0xb8>
 80048d6:	4a2a      	ldr	r2, [pc, #168]	; (8004980 <__sflush_r+0x108>)
 80048d8:	40ca      	lsrs	r2, r1
 80048da:	07d6      	lsls	r6, r2, #31
 80048dc:	d528      	bpl.n	8004930 <__sflush_r+0xb8>
 80048de:	2200      	movs	r2, #0
 80048e0:	6062      	str	r2, [r4, #4]
 80048e2:	04d9      	lsls	r1, r3, #19
 80048e4:	6922      	ldr	r2, [r4, #16]
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	d504      	bpl.n	80048f4 <__sflush_r+0x7c>
 80048ea:	1c42      	adds	r2, r0, #1
 80048ec:	d101      	bne.n	80048f2 <__sflush_r+0x7a>
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	b903      	cbnz	r3, 80048f4 <__sflush_r+0x7c>
 80048f2:	6560      	str	r0, [r4, #84]	; 0x54
 80048f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048f6:	602f      	str	r7, [r5, #0]
 80048f8:	2900      	cmp	r1, #0
 80048fa:	d0ca      	beq.n	8004892 <__sflush_r+0x1a>
 80048fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004900:	4299      	cmp	r1, r3
 8004902:	d002      	beq.n	800490a <__sflush_r+0x92>
 8004904:	4628      	mov	r0, r5
 8004906:	f000 f9d7 	bl	8004cb8 <_free_r>
 800490a:	2000      	movs	r0, #0
 800490c:	6360      	str	r0, [r4, #52]	; 0x34
 800490e:	e7c1      	b.n	8004894 <__sflush_r+0x1c>
 8004910:	6a21      	ldr	r1, [r4, #32]
 8004912:	2301      	movs	r3, #1
 8004914:	4628      	mov	r0, r5
 8004916:	47b0      	blx	r6
 8004918:	1c41      	adds	r1, r0, #1
 800491a:	d1c7      	bne.n	80048ac <__sflush_r+0x34>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0c4      	beq.n	80048ac <__sflush_r+0x34>
 8004922:	2b1d      	cmp	r3, #29
 8004924:	d001      	beq.n	800492a <__sflush_r+0xb2>
 8004926:	2b16      	cmp	r3, #22
 8004928:	d101      	bne.n	800492e <__sflush_r+0xb6>
 800492a:	602f      	str	r7, [r5, #0]
 800492c:	e7b1      	b.n	8004892 <__sflush_r+0x1a>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	e7ad      	b.n	8004894 <__sflush_r+0x1c>
 8004938:	690f      	ldr	r7, [r1, #16]
 800493a:	2f00      	cmp	r7, #0
 800493c:	d0a9      	beq.n	8004892 <__sflush_r+0x1a>
 800493e:	0793      	lsls	r3, r2, #30
 8004940:	680e      	ldr	r6, [r1, #0]
 8004942:	bf08      	it	eq
 8004944:	694b      	ldreq	r3, [r1, #20]
 8004946:	600f      	str	r7, [r1, #0]
 8004948:	bf18      	it	ne
 800494a:	2300      	movne	r3, #0
 800494c:	eba6 0807 	sub.w	r8, r6, r7
 8004950:	608b      	str	r3, [r1, #8]
 8004952:	f1b8 0f00 	cmp.w	r8, #0
 8004956:	dd9c      	ble.n	8004892 <__sflush_r+0x1a>
 8004958:	6a21      	ldr	r1, [r4, #32]
 800495a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800495c:	4643      	mov	r3, r8
 800495e:	463a      	mov	r2, r7
 8004960:	4628      	mov	r0, r5
 8004962:	47b0      	blx	r6
 8004964:	2800      	cmp	r0, #0
 8004966:	dc06      	bgt.n	8004976 <__sflush_r+0xfe>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496e:	81a3      	strh	r3, [r4, #12]
 8004970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004974:	e78e      	b.n	8004894 <__sflush_r+0x1c>
 8004976:	4407      	add	r7, r0
 8004978:	eba8 0800 	sub.w	r8, r8, r0
 800497c:	e7e9      	b.n	8004952 <__sflush_r+0xda>
 800497e:	bf00      	nop
 8004980:	20400001 	.word	0x20400001

08004984 <_fflush_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	690b      	ldr	r3, [r1, #16]
 8004988:	4605      	mov	r5, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b913      	cbnz	r3, 8004994 <_fflush_r+0x10>
 800498e:	2500      	movs	r5, #0
 8004990:	4628      	mov	r0, r5
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	b118      	cbz	r0, 800499e <_fflush_r+0x1a>
 8004996:	6983      	ldr	r3, [r0, #24]
 8004998:	b90b      	cbnz	r3, 800499e <_fflush_r+0x1a>
 800499a:	f000 f887 	bl	8004aac <__sinit>
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <_fflush_r+0x6c>)
 80049a0:	429c      	cmp	r4, r3
 80049a2:	d11b      	bne.n	80049dc <_fflush_r+0x58>
 80049a4:	686c      	ldr	r4, [r5, #4]
 80049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <_fflush_r+0xa>
 80049ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049b0:	07d0      	lsls	r0, r2, #31
 80049b2:	d404      	bmi.n	80049be <_fflush_r+0x3a>
 80049b4:	0599      	lsls	r1, r3, #22
 80049b6:	d402      	bmi.n	80049be <_fflush_r+0x3a>
 80049b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ba:	f000 f915 	bl	8004be8 <__retarget_lock_acquire_recursive>
 80049be:	4628      	mov	r0, r5
 80049c0:	4621      	mov	r1, r4
 80049c2:	f7ff ff59 	bl	8004878 <__sflush_r>
 80049c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049c8:	07da      	lsls	r2, r3, #31
 80049ca:	4605      	mov	r5, r0
 80049cc:	d4e0      	bmi.n	8004990 <_fflush_r+0xc>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	059b      	lsls	r3, r3, #22
 80049d2:	d4dd      	bmi.n	8004990 <_fflush_r+0xc>
 80049d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049d6:	f000 f908 	bl	8004bea <__retarget_lock_release_recursive>
 80049da:	e7d9      	b.n	8004990 <_fflush_r+0xc>
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <_fflush_r+0x70>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	d101      	bne.n	80049e6 <_fflush_r+0x62>
 80049e2:	68ac      	ldr	r4, [r5, #8]
 80049e4:	e7df      	b.n	80049a6 <_fflush_r+0x22>
 80049e6:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <_fflush_r+0x74>)
 80049e8:	429c      	cmp	r4, r3
 80049ea:	bf08      	it	eq
 80049ec:	68ec      	ldreq	r4, [r5, #12]
 80049ee:	e7da      	b.n	80049a6 <_fflush_r+0x22>
 80049f0:	08005148 	.word	0x08005148
 80049f4:	08005168 	.word	0x08005168
 80049f8:	08005128 	.word	0x08005128

080049fc <std>:
 80049fc:	2300      	movs	r3, #0
 80049fe:	b510      	push	{r4, lr}
 8004a00:	4604      	mov	r4, r0
 8004a02:	e9c0 3300 	strd	r3, r3, [r0]
 8004a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a0a:	6083      	str	r3, [r0, #8]
 8004a0c:	8181      	strh	r1, [r0, #12]
 8004a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a10:	81c2      	strh	r2, [r0, #14]
 8004a12:	6183      	str	r3, [r0, #24]
 8004a14:	4619      	mov	r1, r3
 8004a16:	2208      	movs	r2, #8
 8004a18:	305c      	adds	r0, #92	; 0x5c
 8004a1a:	f7ff fdef 	bl	80045fc <memset>
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <std+0x38>)
 8004a20:	6263      	str	r3, [r4, #36]	; 0x24
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <std+0x3c>)
 8004a24:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <std+0x40>)
 8004a28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <std+0x44>)
 8004a2c:	6224      	str	r4, [r4, #32]
 8004a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	bf00      	nop
 8004a34:	08004e99 	.word	0x08004e99
 8004a38:	08004ebb 	.word	0x08004ebb
 8004a3c:	08004ef3 	.word	0x08004ef3
 8004a40:	08004f17 	.word	0x08004f17

08004a44 <_cleanup_r>:
 8004a44:	4901      	ldr	r1, [pc, #4]	; (8004a4c <_cleanup_r+0x8>)
 8004a46:	f000 b8af 	b.w	8004ba8 <_fwalk_reent>
 8004a4a:	bf00      	nop
 8004a4c:	08004985 	.word	0x08004985

08004a50 <__sfmoreglue>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	2268      	movs	r2, #104	; 0x68
 8004a54:	1e4d      	subs	r5, r1, #1
 8004a56:	4355      	muls	r5, r2
 8004a58:	460e      	mov	r6, r1
 8004a5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a5e:	f000 f997 	bl	8004d90 <_malloc_r>
 8004a62:	4604      	mov	r4, r0
 8004a64:	b140      	cbz	r0, 8004a78 <__sfmoreglue+0x28>
 8004a66:	2100      	movs	r1, #0
 8004a68:	e9c0 1600 	strd	r1, r6, [r0]
 8004a6c:	300c      	adds	r0, #12
 8004a6e:	60a0      	str	r0, [r4, #8]
 8004a70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a74:	f7ff fdc2 	bl	80045fc <memset>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}

08004a7c <__sfp_lock_acquire>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__sfp_lock_acquire+0x8>)
 8004a7e:	f000 b8b3 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004a82:	bf00      	nop
 8004a84:	200144ac 	.word	0x200144ac

08004a88 <__sfp_lock_release>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__sfp_lock_release+0x8>)
 8004a8a:	f000 b8ae 	b.w	8004bea <__retarget_lock_release_recursive>
 8004a8e:	bf00      	nop
 8004a90:	200144ac 	.word	0x200144ac

08004a94 <__sinit_lock_acquire>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__sinit_lock_acquire+0x8>)
 8004a96:	f000 b8a7 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	200144ad 	.word	0x200144ad

08004aa0 <__sinit_lock_release>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__sinit_lock_release+0x8>)
 8004aa2:	f000 b8a2 	b.w	8004bea <__retarget_lock_release_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	200144ad 	.word	0x200144ad

08004aac <__sinit>:
 8004aac:	b510      	push	{r4, lr}
 8004aae:	4604      	mov	r4, r0
 8004ab0:	f7ff fff0 	bl	8004a94 <__sinit_lock_acquire>
 8004ab4:	69a3      	ldr	r3, [r4, #24]
 8004ab6:	b11b      	cbz	r3, 8004ac0 <__sinit+0x14>
 8004ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004abc:	f7ff bff0 	b.w	8004aa0 <__sinit_lock_release>
 8004ac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ac4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ac6:	4b13      	ldr	r3, [pc, #76]	; (8004b14 <__sinit+0x68>)
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <__sinit+0x6c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ace:	42a3      	cmp	r3, r4
 8004ad0:	bf04      	itt	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	61a3      	streq	r3, [r4, #24]
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f000 f820 	bl	8004b1c <__sfp>
 8004adc:	6060      	str	r0, [r4, #4]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 f81c 	bl	8004b1c <__sfp>
 8004ae4:	60a0      	str	r0, [r4, #8]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f000 f818 	bl	8004b1c <__sfp>
 8004aec:	2200      	movs	r2, #0
 8004aee:	60e0      	str	r0, [r4, #12]
 8004af0:	2104      	movs	r1, #4
 8004af2:	6860      	ldr	r0, [r4, #4]
 8004af4:	f7ff ff82 	bl	80049fc <std>
 8004af8:	68a0      	ldr	r0, [r4, #8]
 8004afa:	2201      	movs	r2, #1
 8004afc:	2109      	movs	r1, #9
 8004afe:	f7ff ff7d 	bl	80049fc <std>
 8004b02:	68e0      	ldr	r0, [r4, #12]
 8004b04:	2202      	movs	r2, #2
 8004b06:	2112      	movs	r1, #18
 8004b08:	f7ff ff78 	bl	80049fc <std>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	61a3      	str	r3, [r4, #24]
 8004b10:	e7d2      	b.n	8004ab8 <__sinit+0xc>
 8004b12:	bf00      	nop
 8004b14:	08005124 	.word	0x08005124
 8004b18:	08004a45 	.word	0x08004a45

08004b1c <__sfp>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	4607      	mov	r7, r0
 8004b20:	f7ff ffac 	bl	8004a7c <__sfp_lock_acquire>
 8004b24:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <__sfp+0x84>)
 8004b26:	681e      	ldr	r6, [r3, #0]
 8004b28:	69b3      	ldr	r3, [r6, #24]
 8004b2a:	b913      	cbnz	r3, 8004b32 <__sfp+0x16>
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f7ff ffbd 	bl	8004aac <__sinit>
 8004b32:	3648      	adds	r6, #72	; 0x48
 8004b34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	d503      	bpl.n	8004b44 <__sfp+0x28>
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	b30b      	cbz	r3, 8004b84 <__sfp+0x68>
 8004b40:	6836      	ldr	r6, [r6, #0]
 8004b42:	e7f7      	b.n	8004b34 <__sfp+0x18>
 8004b44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b48:	b9d5      	cbnz	r5, 8004b80 <__sfp+0x64>
 8004b4a:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <__sfp+0x88>)
 8004b4c:	60e3      	str	r3, [r4, #12]
 8004b4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b52:	6665      	str	r5, [r4, #100]	; 0x64
 8004b54:	f000 f847 	bl	8004be6 <__retarget_lock_init_recursive>
 8004b58:	f7ff ff96 	bl	8004a88 <__sfp_lock_release>
 8004b5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b64:	6025      	str	r5, [r4, #0]
 8004b66:	61a5      	str	r5, [r4, #24]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b70:	f7ff fd44 	bl	80045fc <memset>
 8004b74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b80:	3468      	adds	r4, #104	; 0x68
 8004b82:	e7d9      	b.n	8004b38 <__sfp+0x1c>
 8004b84:	2104      	movs	r1, #4
 8004b86:	4638      	mov	r0, r7
 8004b88:	f7ff ff62 	bl	8004a50 <__sfmoreglue>
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	6030      	str	r0, [r6, #0]
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d1d5      	bne.n	8004b40 <__sfp+0x24>
 8004b94:	f7ff ff78 	bl	8004a88 <__sfp_lock_release>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	e7ee      	b.n	8004b7c <__sfp+0x60>
 8004b9e:	bf00      	nop
 8004ba0:	08005124 	.word	0x08005124
 8004ba4:	ffff0001 	.word	0xffff0001

08004ba8 <_fwalk_reent>:
 8004ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bac:	4606      	mov	r6, r0
 8004bae:	4688      	mov	r8, r1
 8004bb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bb4:	2700      	movs	r7, #0
 8004bb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bba:	f1b9 0901 	subs.w	r9, r9, #1
 8004bbe:	d505      	bpl.n	8004bcc <_fwalk_reent+0x24>
 8004bc0:	6824      	ldr	r4, [r4, #0]
 8004bc2:	2c00      	cmp	r4, #0
 8004bc4:	d1f7      	bne.n	8004bb6 <_fwalk_reent+0xe>
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bcc:	89ab      	ldrh	r3, [r5, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d907      	bls.n	8004be2 <_fwalk_reent+0x3a>
 8004bd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	d003      	beq.n	8004be2 <_fwalk_reent+0x3a>
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4630      	mov	r0, r6
 8004bde:	47c0      	blx	r8
 8004be0:	4307      	orrs	r7, r0
 8004be2:	3568      	adds	r5, #104	; 0x68
 8004be4:	e7e9      	b.n	8004bba <_fwalk_reent+0x12>

08004be6 <__retarget_lock_init_recursive>:
 8004be6:	4770      	bx	lr

08004be8 <__retarget_lock_acquire_recursive>:
 8004be8:	4770      	bx	lr

08004bea <__retarget_lock_release_recursive>:
 8004bea:	4770      	bx	lr

08004bec <__swhatbuf_r>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	460e      	mov	r6, r1
 8004bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf4:	2900      	cmp	r1, #0
 8004bf6:	b096      	sub	sp, #88	; 0x58
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	461d      	mov	r5, r3
 8004bfc:	da08      	bge.n	8004c10 <__swhatbuf_r+0x24>
 8004bfe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	602a      	str	r2, [r5, #0]
 8004c06:	061a      	lsls	r2, r3, #24
 8004c08:	d410      	bmi.n	8004c2c <__swhatbuf_r+0x40>
 8004c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c0e:	e00e      	b.n	8004c2e <__swhatbuf_r+0x42>
 8004c10:	466a      	mov	r2, sp
 8004c12:	f000 f995 	bl	8004f40 <_fstat_r>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	dbf1      	blt.n	8004bfe <__swhatbuf_r+0x12>
 8004c1a:	9a01      	ldr	r2, [sp, #4]
 8004c1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c24:	425a      	negs	r2, r3
 8004c26:	415a      	adcs	r2, r3
 8004c28:	602a      	str	r2, [r5, #0]
 8004c2a:	e7ee      	b.n	8004c0a <__swhatbuf_r+0x1e>
 8004c2c:	2340      	movs	r3, #64	; 0x40
 8004c2e:	2000      	movs	r0, #0
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	b016      	add	sp, #88	; 0x58
 8004c34:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c38 <__smakebuf_r>:
 8004c38:	898b      	ldrh	r3, [r1, #12]
 8004c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c3c:	079d      	lsls	r5, r3, #30
 8004c3e:	4606      	mov	r6, r0
 8004c40:	460c      	mov	r4, r1
 8004c42:	d507      	bpl.n	8004c54 <__smakebuf_r+0x1c>
 8004c44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	6123      	str	r3, [r4, #16]
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	6163      	str	r3, [r4, #20]
 8004c50:	b002      	add	sp, #8
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	ab01      	add	r3, sp, #4
 8004c56:	466a      	mov	r2, sp
 8004c58:	f7ff ffc8 	bl	8004bec <__swhatbuf_r>
 8004c5c:	9900      	ldr	r1, [sp, #0]
 8004c5e:	4605      	mov	r5, r0
 8004c60:	4630      	mov	r0, r6
 8004c62:	f000 f895 	bl	8004d90 <_malloc_r>
 8004c66:	b948      	cbnz	r0, 8004c7c <__smakebuf_r+0x44>
 8004c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6c:	059a      	lsls	r2, r3, #22
 8004c6e:	d4ef      	bmi.n	8004c50 <__smakebuf_r+0x18>
 8004c70:	f023 0303 	bic.w	r3, r3, #3
 8004c74:	f043 0302 	orr.w	r3, r3, #2
 8004c78:	81a3      	strh	r3, [r4, #12]
 8004c7a:	e7e3      	b.n	8004c44 <__smakebuf_r+0xc>
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <__smakebuf_r+0x7c>)
 8004c7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	6020      	str	r0, [r4, #0]
 8004c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c88:	81a3      	strh	r3, [r4, #12]
 8004c8a:	9b00      	ldr	r3, [sp, #0]
 8004c8c:	6163      	str	r3, [r4, #20]
 8004c8e:	9b01      	ldr	r3, [sp, #4]
 8004c90:	6120      	str	r0, [r4, #16]
 8004c92:	b15b      	cbz	r3, 8004cac <__smakebuf_r+0x74>
 8004c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f000 f963 	bl	8004f64 <_isatty_r>
 8004c9e:	b128      	cbz	r0, 8004cac <__smakebuf_r+0x74>
 8004ca0:	89a3      	ldrh	r3, [r4, #12]
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	81a3      	strh	r3, [r4, #12]
 8004cac:	89a0      	ldrh	r0, [r4, #12]
 8004cae:	4305      	orrs	r5, r0
 8004cb0:	81a5      	strh	r5, [r4, #12]
 8004cb2:	e7cd      	b.n	8004c50 <__smakebuf_r+0x18>
 8004cb4:	08004a45 	.word	0x08004a45

08004cb8 <_free_r>:
 8004cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cba:	2900      	cmp	r1, #0
 8004cbc:	d044      	beq.n	8004d48 <_free_r+0x90>
 8004cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cc2:	9001      	str	r0, [sp, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cca:	bfb8      	it	lt
 8004ccc:	18e4      	addlt	r4, r4, r3
 8004cce:	f000 f96b 	bl	8004fa8 <__malloc_lock>
 8004cd2:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <_free_r+0x94>)
 8004cd4:	9801      	ldr	r0, [sp, #4]
 8004cd6:	6813      	ldr	r3, [r2, #0]
 8004cd8:	b933      	cbnz	r3, 8004ce8 <_free_r+0x30>
 8004cda:	6063      	str	r3, [r4, #4]
 8004cdc:	6014      	str	r4, [r2, #0]
 8004cde:	b003      	add	sp, #12
 8004ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ce4:	f000 b966 	b.w	8004fb4 <__malloc_unlock>
 8004ce8:	42a3      	cmp	r3, r4
 8004cea:	d908      	bls.n	8004cfe <_free_r+0x46>
 8004cec:	6825      	ldr	r5, [r4, #0]
 8004cee:	1961      	adds	r1, r4, r5
 8004cf0:	428b      	cmp	r3, r1
 8004cf2:	bf01      	itttt	eq
 8004cf4:	6819      	ldreq	r1, [r3, #0]
 8004cf6:	685b      	ldreq	r3, [r3, #4]
 8004cf8:	1949      	addeq	r1, r1, r5
 8004cfa:	6021      	streq	r1, [r4, #0]
 8004cfc:	e7ed      	b.n	8004cda <_free_r+0x22>
 8004cfe:	461a      	mov	r2, r3
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	b10b      	cbz	r3, 8004d08 <_free_r+0x50>
 8004d04:	42a3      	cmp	r3, r4
 8004d06:	d9fa      	bls.n	8004cfe <_free_r+0x46>
 8004d08:	6811      	ldr	r1, [r2, #0]
 8004d0a:	1855      	adds	r5, r2, r1
 8004d0c:	42a5      	cmp	r5, r4
 8004d0e:	d10b      	bne.n	8004d28 <_free_r+0x70>
 8004d10:	6824      	ldr	r4, [r4, #0]
 8004d12:	4421      	add	r1, r4
 8004d14:	1854      	adds	r4, r2, r1
 8004d16:	42a3      	cmp	r3, r4
 8004d18:	6011      	str	r1, [r2, #0]
 8004d1a:	d1e0      	bne.n	8004cde <_free_r+0x26>
 8004d1c:	681c      	ldr	r4, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	6053      	str	r3, [r2, #4]
 8004d22:	4421      	add	r1, r4
 8004d24:	6011      	str	r1, [r2, #0]
 8004d26:	e7da      	b.n	8004cde <_free_r+0x26>
 8004d28:	d902      	bls.n	8004d30 <_free_r+0x78>
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	6003      	str	r3, [r0, #0]
 8004d2e:	e7d6      	b.n	8004cde <_free_r+0x26>
 8004d30:	6825      	ldr	r5, [r4, #0]
 8004d32:	1961      	adds	r1, r4, r5
 8004d34:	428b      	cmp	r3, r1
 8004d36:	bf04      	itt	eq
 8004d38:	6819      	ldreq	r1, [r3, #0]
 8004d3a:	685b      	ldreq	r3, [r3, #4]
 8004d3c:	6063      	str	r3, [r4, #4]
 8004d3e:	bf04      	itt	eq
 8004d40:	1949      	addeq	r1, r1, r5
 8004d42:	6021      	streq	r1, [r4, #0]
 8004d44:	6054      	str	r4, [r2, #4]
 8004d46:	e7ca      	b.n	8004cde <_free_r+0x26>
 8004d48:	b003      	add	sp, #12
 8004d4a:	bd30      	pop	{r4, r5, pc}
 8004d4c:	200144b0 	.word	0x200144b0

08004d50 <sbrk_aligned>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	4e0e      	ldr	r6, [pc, #56]	; (8004d8c <sbrk_aligned+0x3c>)
 8004d54:	460c      	mov	r4, r1
 8004d56:	6831      	ldr	r1, [r6, #0]
 8004d58:	4605      	mov	r5, r0
 8004d5a:	b911      	cbnz	r1, 8004d62 <sbrk_aligned+0x12>
 8004d5c:	f000 f88c 	bl	8004e78 <_sbrk_r>
 8004d60:	6030      	str	r0, [r6, #0]
 8004d62:	4621      	mov	r1, r4
 8004d64:	4628      	mov	r0, r5
 8004d66:	f000 f887 	bl	8004e78 <_sbrk_r>
 8004d6a:	1c43      	adds	r3, r0, #1
 8004d6c:	d00a      	beq.n	8004d84 <sbrk_aligned+0x34>
 8004d6e:	1cc4      	adds	r4, r0, #3
 8004d70:	f024 0403 	bic.w	r4, r4, #3
 8004d74:	42a0      	cmp	r0, r4
 8004d76:	d007      	beq.n	8004d88 <sbrk_aligned+0x38>
 8004d78:	1a21      	subs	r1, r4, r0
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f000 f87c 	bl	8004e78 <_sbrk_r>
 8004d80:	3001      	adds	r0, #1
 8004d82:	d101      	bne.n	8004d88 <sbrk_aligned+0x38>
 8004d84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004d88:	4620      	mov	r0, r4
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	200144b4 	.word	0x200144b4

08004d90 <_malloc_r>:
 8004d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d94:	1ccd      	adds	r5, r1, #3
 8004d96:	f025 0503 	bic.w	r5, r5, #3
 8004d9a:	3508      	adds	r5, #8
 8004d9c:	2d0c      	cmp	r5, #12
 8004d9e:	bf38      	it	cc
 8004da0:	250c      	movcc	r5, #12
 8004da2:	2d00      	cmp	r5, #0
 8004da4:	4607      	mov	r7, r0
 8004da6:	db01      	blt.n	8004dac <_malloc_r+0x1c>
 8004da8:	42a9      	cmp	r1, r5
 8004daa:	d905      	bls.n	8004db8 <_malloc_r+0x28>
 8004dac:	230c      	movs	r3, #12
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	2600      	movs	r6, #0
 8004db2:	4630      	mov	r0, r6
 8004db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004db8:	4e2e      	ldr	r6, [pc, #184]	; (8004e74 <_malloc_r+0xe4>)
 8004dba:	f000 f8f5 	bl	8004fa8 <__malloc_lock>
 8004dbe:	6833      	ldr	r3, [r6, #0]
 8004dc0:	461c      	mov	r4, r3
 8004dc2:	bb34      	cbnz	r4, 8004e12 <_malloc_r+0x82>
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	f7ff ffc2 	bl	8004d50 <sbrk_aligned>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	4604      	mov	r4, r0
 8004dd0:	d14d      	bne.n	8004e6e <_malloc_r+0xde>
 8004dd2:	6834      	ldr	r4, [r6, #0]
 8004dd4:	4626      	mov	r6, r4
 8004dd6:	2e00      	cmp	r6, #0
 8004dd8:	d140      	bne.n	8004e5c <_malloc_r+0xcc>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	4631      	mov	r1, r6
 8004dde:	4638      	mov	r0, r7
 8004de0:	eb04 0803 	add.w	r8, r4, r3
 8004de4:	f000 f848 	bl	8004e78 <_sbrk_r>
 8004de8:	4580      	cmp	r8, r0
 8004dea:	d13a      	bne.n	8004e62 <_malloc_r+0xd2>
 8004dec:	6821      	ldr	r1, [r4, #0]
 8004dee:	3503      	adds	r5, #3
 8004df0:	1a6d      	subs	r5, r5, r1
 8004df2:	f025 0503 	bic.w	r5, r5, #3
 8004df6:	3508      	adds	r5, #8
 8004df8:	2d0c      	cmp	r5, #12
 8004dfa:	bf38      	it	cc
 8004dfc:	250c      	movcc	r5, #12
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4638      	mov	r0, r7
 8004e02:	f7ff ffa5 	bl	8004d50 <sbrk_aligned>
 8004e06:	3001      	adds	r0, #1
 8004e08:	d02b      	beq.n	8004e62 <_malloc_r+0xd2>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	442b      	add	r3, r5
 8004e0e:	6023      	str	r3, [r4, #0]
 8004e10:	e00e      	b.n	8004e30 <_malloc_r+0xa0>
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	1b52      	subs	r2, r2, r5
 8004e16:	d41e      	bmi.n	8004e56 <_malloc_r+0xc6>
 8004e18:	2a0b      	cmp	r2, #11
 8004e1a:	d916      	bls.n	8004e4a <_malloc_r+0xba>
 8004e1c:	1961      	adds	r1, r4, r5
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	6025      	str	r5, [r4, #0]
 8004e22:	bf18      	it	ne
 8004e24:	6059      	strne	r1, [r3, #4]
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	bf08      	it	eq
 8004e2a:	6031      	streq	r1, [r6, #0]
 8004e2c:	5162      	str	r2, [r4, r5]
 8004e2e:	604b      	str	r3, [r1, #4]
 8004e30:	4638      	mov	r0, r7
 8004e32:	f104 060b 	add.w	r6, r4, #11
 8004e36:	f000 f8bd 	bl	8004fb4 <__malloc_unlock>
 8004e3a:	f026 0607 	bic.w	r6, r6, #7
 8004e3e:	1d23      	adds	r3, r4, #4
 8004e40:	1af2      	subs	r2, r6, r3
 8004e42:	d0b6      	beq.n	8004db2 <_malloc_r+0x22>
 8004e44:	1b9b      	subs	r3, r3, r6
 8004e46:	50a3      	str	r3, [r4, r2]
 8004e48:	e7b3      	b.n	8004db2 <_malloc_r+0x22>
 8004e4a:	6862      	ldr	r2, [r4, #4]
 8004e4c:	42a3      	cmp	r3, r4
 8004e4e:	bf0c      	ite	eq
 8004e50:	6032      	streq	r2, [r6, #0]
 8004e52:	605a      	strne	r2, [r3, #4]
 8004e54:	e7ec      	b.n	8004e30 <_malloc_r+0xa0>
 8004e56:	4623      	mov	r3, r4
 8004e58:	6864      	ldr	r4, [r4, #4]
 8004e5a:	e7b2      	b.n	8004dc2 <_malloc_r+0x32>
 8004e5c:	4634      	mov	r4, r6
 8004e5e:	6876      	ldr	r6, [r6, #4]
 8004e60:	e7b9      	b.n	8004dd6 <_malloc_r+0x46>
 8004e62:	230c      	movs	r3, #12
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	4638      	mov	r0, r7
 8004e68:	f000 f8a4 	bl	8004fb4 <__malloc_unlock>
 8004e6c:	e7a1      	b.n	8004db2 <_malloc_r+0x22>
 8004e6e:	6025      	str	r5, [r4, #0]
 8004e70:	e7de      	b.n	8004e30 <_malloc_r+0xa0>
 8004e72:	bf00      	nop
 8004e74:	200144b0 	.word	0x200144b0

08004e78 <_sbrk_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	; (8004e94 <_sbrk_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fb face 	bl	8000424 <_sbrk>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_sbrk_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_sbrk_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	200144b8 	.word	0x200144b8

08004e98 <__sread>:
 8004e98:	b510      	push	{r4, lr}
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea0:	f000 f88e 	bl	8004fc0 <_read_r>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	bfab      	itete	ge
 8004ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8004eac:	181b      	addge	r3, r3, r0
 8004eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004eb2:	bfac      	ite	ge
 8004eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004eb6:	81a3      	strhlt	r3, [r4, #12]
 8004eb8:	bd10      	pop	{r4, pc}

08004eba <__swrite>:
 8004eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebe:	461f      	mov	r7, r3
 8004ec0:	898b      	ldrh	r3, [r1, #12]
 8004ec2:	05db      	lsls	r3, r3, #23
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	4616      	mov	r6, r2
 8004eca:	d505      	bpl.n	8004ed8 <__swrite+0x1e>
 8004ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f000 f856 	bl	8004f84 <_lseek_r>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ee2:	81a3      	strh	r3, [r4, #12]
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	4628      	mov	r0, r5
 8004eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eee:	f7ff bb2b 	b.w	8004548 <_write_r>

08004ef2 <__sseek>:
 8004ef2:	b510      	push	{r4, lr}
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004efa:	f000 f843 	bl	8004f84 <_lseek_r>
 8004efe:	1c43      	adds	r3, r0, #1
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	bf15      	itete	ne
 8004f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f0e:	81a3      	strheq	r3, [r4, #12]
 8004f10:	bf18      	it	ne
 8004f12:	81a3      	strhne	r3, [r4, #12]
 8004f14:	bd10      	pop	{r4, pc}

08004f16 <__sclose>:
 8004f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1a:	f000 b801 	b.w	8004f20 <_close_r>
	...

08004f20 <_close_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d06      	ldr	r5, [pc, #24]	; (8004f3c <_close_r+0x1c>)
 8004f24:	2300      	movs	r3, #0
 8004f26:	4604      	mov	r4, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	f7fb fa45 	bl	80003ba <_close>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_close_r+0x1a>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_close_r+0x1a>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	200144b8 	.word	0x200144b8

08004f40 <_fstat_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4d07      	ldr	r5, [pc, #28]	; (8004f60 <_fstat_r+0x20>)
 8004f44:	2300      	movs	r3, #0
 8004f46:	4604      	mov	r4, r0
 8004f48:	4608      	mov	r0, r1
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	602b      	str	r3, [r5, #0]
 8004f4e:	f7fb fa40 	bl	80003d2 <_fstat>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	d102      	bne.n	8004f5c <_fstat_r+0x1c>
 8004f56:	682b      	ldr	r3, [r5, #0]
 8004f58:	b103      	cbz	r3, 8004f5c <_fstat_r+0x1c>
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	bd38      	pop	{r3, r4, r5, pc}
 8004f5e:	bf00      	nop
 8004f60:	200144b8 	.word	0x200144b8

08004f64 <_isatty_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d06      	ldr	r5, [pc, #24]	; (8004f80 <_isatty_r+0x1c>)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	f7fb fa3f 	bl	80003f2 <_isatty>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_isatty_r+0x1a>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_isatty_r+0x1a>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	200144b8 	.word	0x200144b8

08004f84 <_lseek_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d07      	ldr	r5, [pc, #28]	; (8004fa4 <_lseek_r+0x20>)
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4608      	mov	r0, r1
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	602a      	str	r2, [r5, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f7fb fa38 	bl	8000408 <_lseek>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_lseek_r+0x1e>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_lseek_r+0x1e>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	200144b8 	.word	0x200144b8

08004fa8 <__malloc_lock>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__malloc_lock+0x8>)
 8004faa:	f7ff be1d 	b.w	8004be8 <__retarget_lock_acquire_recursive>
 8004fae:	bf00      	nop
 8004fb0:	200144ab 	.word	0x200144ab

08004fb4 <__malloc_unlock>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__malloc_unlock+0x8>)
 8004fb6:	f7ff be18 	b.w	8004bea <__retarget_lock_release_recursive>
 8004fba:	bf00      	nop
 8004fbc:	200144ab 	.word	0x200144ab

08004fc0 <_read_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4d07      	ldr	r5, [pc, #28]	; (8004fe0 <_read_r+0x20>)
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	4608      	mov	r0, r1
 8004fc8:	4611      	mov	r1, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	602a      	str	r2, [r5, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f7fb f9d6 	bl	8000380 <_read>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_read_r+0x1e>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_read_r+0x1e>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	200144b8 	.word	0x200144b8

08004fe4 <_init>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	bf00      	nop
 8004fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fea:	bc08      	pop	{r3}
 8004fec:	469e      	mov	lr, r3
 8004fee:	4770      	bx	lr

08004ff0 <_fini>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	bf00      	nop
 8004ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff6:	bc08      	pop	{r3}
 8004ff8:	469e      	mov	lr, r3
 8004ffa:	4770      	bx	lr
