
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800a0b0  0800a0b0  0001a0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a68c  0800a68c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a68c  0800a68c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a68c  0800a68c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a68c  0800a68c  0001a68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a690  0800a690  0001a690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014454  200001e8  0800a87c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001463c  0800a87c  0002463c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d102  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e6  00000000  00000000  0002d31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002f400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002ff78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c88  00000000  00000000  000309c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d107  00000000  00000000  00043650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065a3e  00000000  00000000  00050757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6195  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004468  00000000  00000000  000b61e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a098 	.word	0x0800a098

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a098 	.word	0x0800a098

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20013058 	.word	0x20013058

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2uiz>:
 8000c58:	004a      	lsls	r2, r1, #1
 8000c5a:	d211      	bcs.n	8000c80 <__aeabi_d2uiz+0x28>
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d211      	bcs.n	8000c86 <__aeabi_d2uiz+0x2e>
 8000c62:	d50d      	bpl.n	8000c80 <__aeabi_d2uiz+0x28>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d40e      	bmi.n	8000c8c <__aeabi_d2uiz+0x34>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c8a:	d102      	bne.n	8000c92 <__aeabi_d2uiz+0x3a>
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c90:	4770      	bx	lr
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2f>:
 8000c98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ca0:	bf24      	itt	cs
 8000ca2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ca6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000caa:	d90d      	bls.n	8000cc8 <__aeabi_d2f+0x30>
 8000cac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ccc:	d121      	bne.n	8000d12 <__aeabi_d2f+0x7a>
 8000cce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cd2:	bfbc      	itt	lt
 8000cd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cd8:	4770      	bxlt	lr
 8000cda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ce2:	f1c2 0218 	rsb	r2, r2, #24
 8000ce6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cee:	fa20 f002 	lsr.w	r0, r0, r2
 8000cf2:	bf18      	it	ne
 8000cf4:	f040 0001 	orrne.w	r0, r0, #1
 8000cf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d04:	ea40 000c 	orr.w	r0, r0, ip
 8000d08:	fa23 f302 	lsr.w	r3, r3, r2
 8000d0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d10:	e7cc      	b.n	8000cac <__aeabi_d2f+0x14>
 8000d12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d16:	d107      	bne.n	8000d28 <__aeabi_d2f+0x90>
 8000d18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d1c:	bf1e      	ittt	ne
 8000d1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d26:	4770      	bxne	lr
 8000d28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff ff23 	bl	8000b8c <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc99 	bl	80006a8 <__aeabi_dmul>
 8000d76:	f7ff ff6f 	bl	8000c58 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fc1a 	bl	80005b4 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc90 	bl	80006a8 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fad2 	bl	8000338 <__aeabi_dsub>
 8000d94:	f7ff ff60 	bl	8000c58 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <main>:
/* Prototipos de funciones */
void vTaskOne( void * pvParameters );
void vTaskTwo( void * pvParameters );

int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af02      	add	r7, sp, #8

	/* Activamos la unidad de punto flotante (FPU) */
	SCB->CPACR    |= (0xF << 20);
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <main+0xac>)
 8000dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db0:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <main+0xac>)
 8000db2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Activamos del contador de Ticks */
	DWT->CTRL    |= (1 << 0);
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <main+0xb0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a25      	ldr	r2, [pc, #148]	; (8000e54 <main+0xb0>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6013      	str	r3, [r2, #0]

	configPLL(100);
 8000dc6:	2064      	movs	r0, #100	; 0x64
 8000dc8:	f004 fb58 	bl	800547c <configPLL>

	/* Necesario para el SEGGER*/
	vInitPrioGroupValue();
 8000dcc:	f001 fec4 	bl	8002b58 <vInitPrioGroupValue>

	/* */
	SEGGER_UART_init(500000);
 8000dd0:	4821      	ldr	r0, [pc, #132]	; (8000e58 <main+0xb4>)
 8000dd2:	f002 fc1b 	bl	800360c <SEGGER_UART_init>

	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 8000dd6:	f002 fa43 	bl	8003260 <SEGGER_SYSVIEW_Conf>
	/* Despues activamos el sistema */
	//SEGGER_SYSVIEW_Start();

	BaseType_t xReturned;
	TaskHandle_t xHandleTask1 = NULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandleTask2 = NULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]

    xReturned = xTaskCreate(
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	2302      	movs	r3, #2
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <main+0xb8>)
 8000dee:	22c8      	movs	r2, #200	; 0xc8
 8000df0:	491b      	ldr	r1, [pc, #108]	; (8000e60 <main+0xbc>)
 8000df2:	481c      	ldr	r0, [pc, #112]	; (8000e64 <main+0xc0>)
 8000df4:	f000 fd00 	bl	80017f8 <xTaskCreate>
 8000df8:	6178      	str	r0, [r7, #20]
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-1",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask1 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d00a      	beq.n	8000e16 <main+0x72>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e04:	f383 8811 	msr	BASEPRI, r3
 8000e08:	f3bf 8f6f 	isb	sy
 8000e0c:	f3bf 8f4f 	dsb	sy
 8000e10:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000e12:	bf00      	nop
 8000e14:	e7fe      	b.n	8000e14 <main+0x70>

    xReturned = xTaskCreate(
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <main+0xc4>)
 8000e20:	22c8      	movs	r2, #200	; 0xc8
 8000e22:	4912      	ldr	r1, [pc, #72]	; (8000e6c <main+0xc8>)
 8000e24:	4812      	ldr	r0, [pc, #72]	; (8000e70 <main+0xcc>)
 8000e26:	f000 fce7 	bl	80017f8 <xTaskCreate>
 8000e2a:	6178      	str	r0, [r7, #20]
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    "Hola Mundo desde la Tarea-2",    /* Parameter passed into the task. */
                    2, /* Priority at which the task is created. */
                    &xHandleTask2 );      /* Used to pass out the created task's handle. */

    configASSERT(xReturned == pdPASS);
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d00a      	beq.n	8000e48 <main+0xa4>
        __asm volatile
 8000e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e36:	f383 8811 	msr	BASEPRI, r3
 8000e3a:	f3bf 8f6f 	isb	sy
 8000e3e:	f3bf 8f4f 	dsb	sy
 8000e42:	60fb      	str	r3, [r7, #12]
    }
 8000e44:	bf00      	nop
 8000e46:	e7fe      	b.n	8000e46 <main+0xa2>

    vTaskStartScheduler();
 8000e48:	f000 fe2c 	bl	8001aa4 <vTaskStartScheduler>

    /* Loop forever */
	while(1){
 8000e4c:	e7fe      	b.n	8000e4c <main+0xa8>
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	e0001000 	.word	0xe0001000
 8000e58:	0007a120 	.word	0x0007a120
 8000e5c:	0800a0b0 	.word	0x0800a0b0
 8000e60:	0800a0cc 	.word	0x0800a0cc
 8000e64:	08000e75 	.word	0x08000e75
 8000e68:	0800a0d4 	.word	0x0800a0d4
 8000e6c:	0800a0f0 	.word	0x0800a0f0
 8000e70:	08000e99 	.word	0x08000e99

08000e74 <vTaskOne>:
	}
}

/** Función que gobierna la tarea 1 */
void vTaskOne( void * pvParameters )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]


    while(1)
    {
        /* Task code goes here. */
    	printf("%s\n", (char*)pvParameters);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f005 fb31 	bl	80064e4 <puts>
    	taskYIELD();
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <vTaskOne+0x20>)
 8000e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	f3bf 8f4f 	dsb	sy
 8000e8e:	f3bf 8f6f 	isb	sy
    	printf("%s\n", (char*)pvParameters);
 8000e92:	e7f3      	b.n	8000e7c <vTaskOne+0x8>
 8000e94:	e000ed04 	.word	0xe000ed04

08000e98 <vTaskTwo>:
    }
}

/** Función que gobierna la tarea 2 */
void vTaskTwo( void * pvParameters )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]


    while(1)
    {
        /* Task code goes here. */
    	printf("%s\n", (char*)pvParameters);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f005 fb1f 	bl	80064e4 <puts>
    	taskYIELD();
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <vTaskTwo+0x20>)
 8000ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	f3bf 8f4f 	dsb	sy
 8000eb2:	f3bf 8f6f 	isb	sy
    	printf("%s\n", (char*)pvParameters);
 8000eb6:	e7f3      	b.n	8000ea0 <vTaskTwo+0x8>
 8000eb8:	e000ed04 	.word	0xe000ed04

08000ebc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	return 1;
 8000ec0:	2301      	movs	r3, #1
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_kill>:

int _kill(int pid, int sig)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ed6:	f004 fbcd 	bl	8005674 <__errno>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2216      	movs	r2, #22
 8000ede:	601a      	str	r2, [r3, #0]
	return -1;
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <_exit>:

void _exit (int status)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ffe7 	bl	8000ecc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000efe:	e7fe      	b.n	8000efe <_exit+0x12>

08000f00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	e00a      	b.n	8000f28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f12:	f3af 8000 	nop.w
 8000f16:	4601      	mov	r1, r0
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	60ba      	str	r2, [r7, #8]
 8000f1e:	b2ca      	uxtb	r2, r1
 8000f20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	dbf0      	blt.n	8000f12 <_read+0x12>
	}

return len;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
	return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f62:	605a      	str	r2, [r3, #4]
	return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <_isatty>:

int _isatty(int file)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
	return 1;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
	return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fac:	4a14      	ldr	r2, [pc, #80]	; (8001000 <_sbrk+0x5c>)
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <_sbrk+0x60>)
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <_sbrk+0x64>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <_sbrk+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d207      	bcs.n	8000fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd4:	f004 fb4e 	bl	8005674 <__errno>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	220c      	movs	r2, #12
 8000fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe2:	e009      	b.n	8000ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <_sbrk+0x64>)
 8000ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20020000 	.word	0x20020000
 8001004:	00000400 	.word	0x00000400
 8001008:	20000204 	.word	0x20000204
 800100c:	20014640 	.word	0x20014640

08001010 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001012:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001014:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <LoopForever+0x6>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	; (8001050 <LoopForever+0xa>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <LoopForever+0xe>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	; (800105c <LoopForever+0x16>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800103e:	f004 fb1f 	bl	8005680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001042:	f7ff feaf 	bl	8000da4 <main>

08001046 <LoopForever>:

LoopForever:
    b LoopForever
 8001046:	e7fe      	b.n	8001046 <LoopForever>
  ldr   r0, =_estack
 8001048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001054:	0800a694 	.word	0x0800a694
  ldr r2, =_sbss
 8001058:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800105c:	2001463c 	.word	0x2001463c

08001060 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>

08001062 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f103 0208 	add.w	r2, r3, #8
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800107a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f103 0208 	add.w	r2, r3, #8
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f103 0208 	add.w	r2, r3, #8
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	601a      	str	r2, [r3, #0]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800111a:	d103      	bne.n	8001124 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	e00c      	b.n	800113e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3308      	adds	r3, #8
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	e002      	b.n	8001132 <vListInsert+0x2e>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	429a      	cmp	r2, r3
 800113c:	d2f6      	bcs.n	800112c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001176:	b480      	push	{r7}
 8001178:	b085      	sub	sp, #20
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	6892      	ldr	r2, [r2, #8]
 800118c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6852      	ldr	r2, [r2, #4]
 8001196:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d103      	bne.n	80011aa <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	1e5a      	subs	r2, r3, #1
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10a      	bne.n	80011f8 <xQueueGenericReset+0x2e>
        __asm volatile
 80011e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011e6:	f383 8811 	msr	BASEPRI, r3
 80011ea:	f3bf 8f6f 	isb	sy
 80011ee:	f3bf 8f4f 	dsb	sy
 80011f2:	60fb      	str	r3, [r7, #12]
    }
 80011f4:	bf00      	nop
 80011f6:	e7fe      	b.n	80011f6 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d052      	beq.n	80012a4 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001202:	2b00      	cmp	r3, #0
 8001204:	d04e      	beq.n	80012a4 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120e:	2100      	movs	r1, #0
 8001210:	fba3 2302 	umull	r2, r3, r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d000      	beq.n	800121a <xQueueGenericReset+0x50>
 8001218:	2101      	movs	r1, #1
 800121a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800121c:	2b00      	cmp	r3, #0
 800121e:	d141      	bne.n	80012a4 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8001220:	f001 fd18 	bl	8002c54 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122c:	6939      	ldr	r1, [r7, #16]
 800122e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001230:	fb01 f303 	mul.w	r3, r1, r3
 8001234:	441a      	add	r2, r3
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	2200      	movs	r2, #0
 800123e:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001250:	3b01      	subs	r3, #1
 8001252:	6939      	ldr	r1, [r7, #16]
 8001254:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001256:	fb01 f303 	mul.w	r3, r1, r3
 800125a:	441a      	add	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	22ff      	movs	r2, #255	; 0xff
 8001264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	22ff      	movs	r2, #255	; 0xff
 800126c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00f      	beq.n	800129e <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	3310      	adds	r3, #16
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fe88 	bl	8001f98 <xTaskRemoveFromEventList>
 8001288:	e009      	b.n	800129e <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	3310      	adds	r3, #16
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fee7 	bl	8001062 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	3324      	adds	r3, #36	; 0x24
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fee2 	bl	8001062 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800129e:	f001 fd09 	bl	8002cb4 <vPortExitCritical>
 80012a2:	e001      	b.n	80012a8 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10a      	bne.n	80012c4 <xQueueGenericReset+0xfa>
        __asm volatile
 80012ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b2:	f383 8811 	msr	BASEPRI, r3
 80012b6:	f3bf 8f6f 	isb	sy
 80012ba:	f3bf 8f4f 	dsb	sy
 80012be:	60bb      	str	r3, [r7, #8]
    }
 80012c0:	bf00      	nop
 80012c2:	e7fe      	b.n	80012c2 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80012c4:	697b      	ldr	r3, [r7, #20]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b08a      	sub	sp, #40	; 0x28
 80012d2:	af02      	add	r7, sp, #8
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	4613      	mov	r3, r2
 80012da:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d02e      	beq.n	8001344 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80012e6:	2100      	movs	r1, #0
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	fba3 2302 	umull	r2, r3, r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d000      	beq.n	80012f6 <xQueueGenericCreate+0x28>
 80012f4:	2101      	movs	r1, #1
 80012f6:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d123      	bne.n	8001344 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001304:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001308:	d81c      	bhi.n	8001344 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	3350      	adds	r3, #80	; 0x50
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fdc7 	bl	8002eac <pvPortMalloc>
 800131e:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d01c      	beq.n	8001360 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3350      	adds	r3, #80	; 0x50
 800132e:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001330:	79fa      	ldrb	r2, [r7, #7]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	68b9      	ldr	r1, [r7, #8]
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f000 f814 	bl	800136a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001342:	e00d      	b.n	8001360 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10a      	bne.n	8001360 <xQueueGenericCreate+0x92>
        __asm volatile
 800134a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800134e:	f383 8811 	msr	BASEPRI, r3
 8001352:	f3bf 8f6f 	isb	sy
 8001356:	f3bf 8f4f 	dsb	sy
 800135a:	613b      	str	r3, [r7, #16]
    }
 800135c:	bf00      	nop
 800135e:	e7fe      	b.n	800135e <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001360:	69fb      	ldr	r3, [r7, #28]
    }
 8001362:	4618      	mov	r0, r3
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d103      	bne.n	8001386 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e002      	b.n	800138c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001398:	2101      	movs	r1, #1
 800139a:	69b8      	ldr	r0, [r7, #24]
 800139c:	f7ff ff15 	bl	80011ca <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	78fa      	ldrb	r2, [r7, #3]
 80013a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	68f9      	ldr	r1, [r7, #12]
 80013ae:	2073      	movs	r0, #115	; 0x73
 80013b0:	f003 f94e 	bl	8004650 <SEGGER_SYSVIEW_RecordU32x3>
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b08f      	sub	sp, #60	; 0x3c
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10a      	bne.n	80013ec <xQueueReceive+0x30>
        __asm volatile
 80013d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013da:	f383 8811 	msr	BASEPRI, r3
 80013de:	f3bf 8f6f 	isb	sy
 80013e2:	f3bf 8f4f 	dsb	sy
 80013e6:	623b      	str	r3, [r7, #32]
    }
 80013e8:	bf00      	nop
 80013ea:	e7fe      	b.n	80013ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <xQueueReceive+0x3e>
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <xQueueReceive+0x42>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <xQueueReceive+0x44>
 80013fe:	2300      	movs	r3, #0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10a      	bne.n	800141a <xQueueReceive+0x5e>
        __asm volatile
 8001404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001408:	f383 8811 	msr	BASEPRI, r3
 800140c:	f3bf 8f6f 	isb	sy
 8001410:	f3bf 8f4f 	dsb	sy
 8001414:	61fb      	str	r3, [r7, #28]
    }
 8001416:	bf00      	nop
 8001418:	e7fe      	b.n	8001418 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800141a:	f000 ff57 	bl	80022cc <xTaskGetSchedulerState>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <xQueueReceive+0x6e>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <xQueueReceive+0x72>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <xQueueReceive+0x74>
 800142e:	2300      	movs	r3, #0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10a      	bne.n	800144a <xQueueReceive+0x8e>
        __asm volatile
 8001434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001438:	f383 8811 	msr	BASEPRI, r3
 800143c:	f3bf 8f6f 	isb	sy
 8001440:	f3bf 8f4f 	dsb	sy
 8001444:	61bb      	str	r3, [r7, #24]
    }
 8001446:	bf00      	nop
 8001448:	e7fe      	b.n	8001448 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800144a:	f001 fc03 	bl	8002c54 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2b00      	cmp	r3, #0
 8001458:	d024      	beq.n	80014a4 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800145e:	f000 f8b3 	bl	80015c8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fe81 	bl	800516c <SEGGER_SYSVIEW_ShrinkId>
 800146a:	4604      	mov	r4, r0
 800146c:	2000      	movs	r0, #0
 800146e:	f003 fe7d 	bl	800516c <SEGGER_SYSVIEW_ShrinkId>
 8001472:	4602      	mov	r2, r0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2101      	movs	r1, #1
 8001478:	9100      	str	r1, [sp, #0]
 800147a:	4621      	mov	r1, r4
 800147c:	205c      	movs	r0, #92	; 0x5c
 800147e:	f003 f95d 	bl	800473c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001494:	3310      	adds	r3, #16
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fd7e 	bl	8001f98 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800149c:	f001 fc0a 	bl	8002cb4 <vPortExitCritical>
                return pdPASS;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e08a      	b.n	80015ba <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d113      	bne.n	80014d2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80014aa:	f001 fc03 	bl	8002cb4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80014ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 fe5b 	bl	800516c <SEGGER_SYSVIEW_ShrinkId>
 80014b6:	4604      	mov	r4, r0
 80014b8:	2000      	movs	r0, #0
 80014ba:	f003 fe57 	bl	800516c <SEGGER_SYSVIEW_ShrinkId>
 80014be:	4602      	mov	r2, r0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2101      	movs	r1, #1
 80014c4:	9100      	str	r1, [sp, #0]
 80014c6:	4621      	mov	r1, r4
 80014c8:	205c      	movs	r0, #92	; 0x5c
 80014ca:	f003 f937 	bl	800473c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e073      	b.n	80015ba <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d106      	bne.n	80014e6 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fdc1 	bl	8002064 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80014e6:	f001 fbe5 	bl	8002cb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80014ea:	f000 fb3d 	bl	8001b68 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80014ee:	f001 fbb1 	bl	8002c54 <vPortEnterCritical>
 80014f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014fe:	d103      	bne.n	8001508 <xQueueReceive+0x14c>
 8001500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800150e:	b25b      	sxtb	r3, r3
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001514:	d103      	bne.n	800151e <xQueueReceive+0x162>
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800151e:	f001 fbc9 	bl	8002cb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001522:	1d3a      	adds	r2, r7, #4
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fdb0 	bl	8002090 <xTaskCheckForTimeOut>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d124      	bne.n	8001580 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001538:	f000 f8be 	bl	80016b8 <prvIsQueueEmpty>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d018      	beq.n	8001574 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	3324      	adds	r3, #36	; 0x24
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fcd2 	bl	8001ef4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001552:	f000 f85f 	bl	8001614 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001556:	f000 fb15 	bl	8001b84 <xTaskResumeAll>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	f47f af74 	bne.w	800144a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <xQueueReceive+0x208>)
 8001564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f3bf 8f4f 	dsb	sy
 800156e:	f3bf 8f6f 	isb	sy
 8001572:	e76a      	b.n	800144a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001576:	f000 f84d 	bl	8001614 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800157a:	f000 fb03 	bl	8001b84 <xTaskResumeAll>
 800157e:	e764      	b.n	800144a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001582:	f000 f847 	bl	8001614 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001586:	f000 fafd 	bl	8001b84 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800158a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800158c:	f000 f894 	bl	80016b8 <prvIsQueueEmpty>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	f43f af59 	beq.w	800144a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fde6 	bl	800516c <SEGGER_SYSVIEW_ShrinkId>
 80015a0:	4604      	mov	r4, r0
 80015a2:	2000      	movs	r0, #0
 80015a4:	f003 fde2 	bl	800516c <SEGGER_SYSVIEW_ShrinkId>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2101      	movs	r1, #1
 80015ae:	9100      	str	r1, [sp, #0]
 80015b0:	4621      	mov	r1, r4
 80015b2:	205c      	movs	r0, #92	; 0x5c
 80015b4:	f003 f8c2 	bl	800473c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80015b8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3734      	adds	r7, #52	; 0x34
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd90      	pop	{r4, r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000ed04 	.word	0xe000ed04

080015c8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d018      	beq.n	800160c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	441a      	add	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d303      	bcc.n	80015fc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68d9      	ldr	r1, [r3, #12]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	461a      	mov	r2, r3
 8001606:	6838      	ldr	r0, [r7, #0]
 8001608:	f004 f86e 	bl	80056e8 <memcpy>
    }
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800161c:	f001 fb1a 	bl	8002c54 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001626:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001628:	e011      	b.n	800164e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	2b00      	cmp	r3, #0
 8001630:	d012      	beq.n	8001658 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3324      	adds	r3, #36	; 0x24
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fcae 	bl	8001f98 <xTaskRemoveFromEventList>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001642:	f000 fd8b 	bl	800215c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	3b01      	subs	r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	dce9      	bgt.n	800162a <prvUnlockQueue+0x16>
 8001656:	e000      	b.n	800165a <prvUnlockQueue+0x46>
                    break;
 8001658:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	22ff      	movs	r2, #255	; 0xff
 800165e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001662:	f001 fb27 	bl	8002cb4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001666:	f001 faf5 	bl	8002c54 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001670:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001672:	e011      	b.n	8001698 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d012      	beq.n	80016a2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3310      	adds	r3, #16
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fc89 	bl	8001f98 <xTaskRemoveFromEventList>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800168c:	f000 fd66 	bl	800215c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001690:	7bbb      	ldrb	r3, [r7, #14]
 8001692:	3b01      	subs	r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800169c:	2b00      	cmp	r3, #0
 800169e:	dce9      	bgt.n	8001674 <prvUnlockQueue+0x60>
 80016a0:	e000      	b.n	80016a4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80016a2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	22ff      	movs	r2, #255	; 0xff
 80016a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80016ac:	f001 fb02 	bl	8002cb4 <vPortExitCritical>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80016c0:	f001 fac8 	bl	8002c54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e001      	b.n	80016d6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80016d6:	f001 faed 	bl	8002cb4 <vPortExitCritical>

    return xReturn;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10a      	bne.n	800170e <vQueueAddToRegistry+0x2a>
        __asm volatile
 80016f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fc:	f383 8811 	msr	BASEPRI, r3
 8001700:	f3bf 8f6f 	isb	sy
 8001704:	f3bf 8f4f 	dsb	sy
 8001708:	60fb      	str	r3, [r7, #12]
    }
 800170a:	bf00      	nop
 800170c:	e7fe      	b.n	800170c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d024      	beq.n	800175e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e01e      	b.n	8001758 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <vQueueAddToRegistry+0xa8>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4413      	add	r3, r2
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	d105      	bne.n	8001736 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <vQueueAddToRegistry+0xa8>)
 8001730:	4413      	add	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
                    break;
 8001734:	e013      	b.n	800175e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10a      	bne.n	8001752 <vQueueAddToRegistry+0x6e>
 800173c:	4a13      	ldr	r2, [pc, #76]	; (800178c <vQueueAddToRegistry+0xa8>)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d104      	bne.n	8001752 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <vQueueAddToRegistry+0xa8>)
 800174e:	4413      	add	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b07      	cmp	r3, #7
 800175c:	d9dd      	bls.n	800171a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00f      	beq.n	8001784 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fcfa 	bl	800516c <SEGGER_SYSVIEW_ShrinkId>
 8001778:	4601      	mov	r1, r0
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	2071      	movs	r0, #113	; 0x71
 8001780:	f002 ff0c 	bl	800459c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000208 	.word	0x20000208

08001790 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80017a0:	f001 fa58 	bl	8002c54 <vPortEnterCritical>
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017b0:	d103      	bne.n	80017ba <vQueueWaitForMessageRestricted+0x2a>
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c6:	d103      	bne.n	80017d0 <vQueueWaitForMessageRestricted+0x40>
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017d0:	f001 fa70 	bl	8002cb4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d106      	bne.n	80017ea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3324      	adds	r3, #36	; 0x24
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fba9 	bl	8001f3c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff12 	bl	8001614 <prvUnlockQueue>
    }
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af04      	add	r7, sp, #16
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4618      	mov	r0, r3
 800180e:	f001 fb4d 	bl	8002eac <pvPortMalloc>
 8001812:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00e      	beq.n	8001838 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800181a:	2058      	movs	r0, #88	; 0x58
 800181c:	f001 fb46 	bl	8002eac <pvPortMalloc>
 8001820:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
 800182e:	e005      	b.n	800183c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001830:	6978      	ldr	r0, [r7, #20]
 8001832:	f001 fbf5 	bl	8003020 <vPortFree>
 8001836:	e001      	b.n	800183c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d013      	beq.n	800186a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001842:	88fa      	ldrh	r2, [r7, #6]
 8001844:	2300      	movs	r3, #0
 8001846:	9303      	str	r3, [sp, #12]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68b9      	ldr	r1, [r7, #8]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f80e 	bl	800187a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800185e:	69f8      	ldr	r0, [r7, #28]
 8001860:	f000 f8a2 	bl	80019a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001864:	2301      	movs	r3, #1
 8001866:	61bb      	str	r3, [r7, #24]
 8001868:	e002      	b.n	8001870 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800186e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001870:	69bb      	ldr	r3, [r7, #24]
    }
 8001872:	4618      	mov	r0, r3
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b088      	sub	sp, #32
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	461a      	mov	r2, r3
 8001892:	21a5      	movs	r1, #165	; 0xa5
 8001894:	f003 ff36 	bl	8005704 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018a2:	3b01      	subs	r3, #1
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	f023 0307 	bic.w	r3, r3, #7
 80018b0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00a      	beq.n	80018d2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80018bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c0:	f383 8811 	msr	BASEPRI, r3
 80018c4:	f3bf 8f6f 	isb	sy
 80018c8:	f3bf 8f4f 	dsb	sy
 80018cc:	617b      	str	r3, [r7, #20]
    }
 80018ce:	bf00      	nop
 80018d0:	e7fe      	b.n	80018d0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01f      	beq.n	8001918 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	e012      	b.n	8001904 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	4413      	add	r3, r2
 80018e4:	7819      	ldrb	r1, [r3, #0]
 80018e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	4413      	add	r3, r2
 80018ec:	3334      	adds	r3, #52	; 0x34
 80018ee:	460a      	mov	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	4413      	add	r3, r2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3301      	adds	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	2b09      	cmp	r3, #9
 8001908:	d9e9      	bls.n	80018de <prvInitialiseNewTask+0x64>
 800190a:	e000      	b.n	800190e <prvInitialiseNewTask+0x94>
            {
                break;
 800190c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001916:	e003      	b.n	8001920 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	2b04      	cmp	r3, #4
 8001924:	d901      	bls.n	800192a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001926:	2304      	movs	r3, #4
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001934:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001938:	2200      	movs	r2, #0
 800193a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800193c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193e:	3304      	adds	r3, #4
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fbae 	bl	80010a2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001948:	3318      	adds	r3, #24
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fba9 	bl	80010a2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001954:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001958:	f1c3 0205 	rsb	r2, r3, #5
 800195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001968:	3350      	adds	r3, #80	; 0x50
 800196a:	2204      	movs	r2, #4
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fec8 	bl	8005704 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001976:	3354      	adds	r3, #84	; 0x54
 8001978:	2201      	movs	r2, #1
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fec1 	bl	8005704 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	68f9      	ldr	r1, [r7, #12]
 8001986:	69b8      	ldr	r0, [r7, #24]
 8001988:	f000 ffba 	bl	8002900 <pxPortInitialiseStack>
 800198c:	4602      	mov	r2, r0
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001990:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800199c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800199e:	bf00      	nop
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80019b0:	f001 f950 	bl	8002c54 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80019b4:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <prvAddNewTaskToReadyList+0xe4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	4a34      	ldr	r2, [pc, #208]	; (8001a8c <prvAddNewTaskToReadyList+0xe4>)
 80019bc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <prvAddNewTaskToReadyList+0xe8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80019c6:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <prvAddNewTaskToReadyList+0xe8>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <prvAddNewTaskToReadyList+0xe4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d110      	bne.n	80019f6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80019d4:	f000 fbe0 	bl	8002198 <prvInitialiseTaskLists>
 80019d8:	e00d      	b.n	80019f6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80019da:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <prvAddNewTaskToReadyList+0xec>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <prvAddNewTaskToReadyList+0xe8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d802      	bhi.n	80019f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80019f0:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <prvAddNewTaskToReadyList+0xe8>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <prvAddNewTaskToReadyList+0xf0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <prvAddNewTaskToReadyList+0xf0>)
 80019fe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <prvAddNewTaskToReadyList+0xf0>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d016      	beq.n	8001a3c <prvAddNewTaskToReadyList+0x94>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fa85 	bl	8004f20 <SEGGER_SYSVIEW_OnTaskCreate>
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	461d      	mov	r5, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	1ae3      	subs	r3, r4, r3
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	462b      	mov	r3, r5
 8001a38:	f001 fcb4 	bl	80033a4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 faf2 	bl	8005028 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	2201      	movs	r2, #1
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <prvAddNewTaskToReadyList+0xf4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <prvAddNewTaskToReadyList+0xf4>)
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <prvAddNewTaskToReadyList+0xf8>)
 8001a64:	441a      	add	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	f7ff fb25 	bl	80010bc <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001a72:	f001 f91f 	bl	8002cb4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <prvAddNewTaskToReadyList+0xec>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <prvAddNewTaskToReadyList+0xe8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000320 	.word	0x20000320
 8001a90:	20000248 	.word	0x20000248
 8001a94:	2000032c 	.word	0x2000032c
 8001a98:	2000033c 	.word	0x2000033c
 8001a9c:	20000328 	.word	0x20000328
 8001aa0:	2000024c 	.word	0x2000024c

08001aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001aaa:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <vTaskStartScheduler+0xa4>)
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2282      	movs	r2, #130	; 0x82
 8001ab6:	4925      	ldr	r1, [pc, #148]	; (8001b4c <vTaskStartScheduler+0xa8>)
 8001ab8:	4825      	ldr	r0, [pc, #148]	; (8001b50 <vTaskStartScheduler+0xac>)
 8001aba:	f7ff fe9d 	bl	80017f8 <xTaskCreate>
 8001abe:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d102      	bne.n	8001acc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001ac6:	f000 fc97 	bl	80023f8 <xTimerCreateTimerTask>
 8001aca:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d124      	bne.n	8001b1c <vTaskStartScheduler+0x78>
        __asm volatile
 8001ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad6:	f383 8811 	msr	BASEPRI, r3
 8001ada:	f3bf 8f6f 	isb	sy
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	60bb      	str	r3, [r7, #8]
    }
 8001ae4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <vTaskStartScheduler+0xb0>)
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <vTaskStartScheduler+0xb4>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <vTaskStartScheduler+0xb8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <vTaskStartScheduler+0xbc>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <vTaskStartScheduler+0xa4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d102      	bne.n	8001b0c <vTaskStartScheduler+0x68>
 8001b06:	f003 f9ef 	bl	8004ee8 <SEGGER_SYSVIEW_OnIdle>
 8001b0a:	e004      	b.n	8001b16 <vTaskStartScheduler+0x72>
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <vTaskStartScheduler+0xbc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 fa47 	bl	8004fa4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001b16:	f000 ff7d 	bl	8002a14 <xPortStartScheduler>
 8001b1a:	e00e      	b.n	8001b3a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b22:	d10a      	bne.n	8001b3a <vTaskStartScheduler+0x96>
        __asm volatile
 8001b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	607b      	str	r3, [r7, #4]
    }
 8001b36:	bf00      	nop
 8001b38:	e7fe      	b.n	8001b38 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <vTaskStartScheduler+0xc0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000344 	.word	0x20000344
 8001b4c:	0800a0f8 	.word	0x0800a0f8
 8001b50:	08002175 	.word	0x08002175
 8001b54:	20000340 	.word	0x20000340
 8001b58:	2000032c 	.word	0x2000032c
 8001b5c:	20000324 	.word	0x20000324
 8001b60:	20000248 	.word	0x20000248
 8001b64:	20000004 	.word	0x20000004

08001b68 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <vTaskSuspendAll+0x18>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <vTaskSuspendAll+0x18>)
 8001b74:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	20000348 	.word	0x20000348

08001b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <xTaskResumeAll+0x104>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10a      	bne.n	8001bb0 <xTaskResumeAll+0x2c>
        __asm volatile
 8001b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9e:	f383 8811 	msr	BASEPRI, r3
 8001ba2:	f3bf 8f6f 	isb	sy
 8001ba6:	f3bf 8f4f 	dsb	sy
 8001baa:	603b      	str	r3, [r7, #0]
    }
 8001bac:	bf00      	nop
 8001bae:	e7fe      	b.n	8001bae <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001bb0:	f001 f850 	bl	8002c54 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001bb4:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <xTaskResumeAll+0x104>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	4a33      	ldr	r2, [pc, #204]	; (8001c88 <xTaskResumeAll+0x104>)
 8001bbc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <xTaskResumeAll+0x104>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d159      	bne.n	8001c7a <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <xTaskResumeAll+0x108>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d055      	beq.n	8001c7a <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bce:	e032      	b.n	8001c36 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <xTaskResumeAll+0x10c>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3318      	adds	r3, #24
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff faca 	bl	8001176 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3304      	adds	r3, #4
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fac5 	bl	8001176 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fa1a 	bl	8005028 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <xTaskResumeAll+0x110>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	4a24      	ldr	r2, [pc, #144]	; (8001c94 <xTaskResumeAll+0x110>)
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <xTaskResumeAll+0x114>)
 8001c14:	441a      	add	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f7ff fa4d 	bl	80010bc <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <xTaskResumeAll+0x118>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d302      	bcc.n	8001c36 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <xTaskResumeAll+0x11c>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <xTaskResumeAll+0x10c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1c8      	bne.n	8001bd0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001c44:	f000 fb26 	bl	8002294 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <xTaskResumeAll+0x120>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d010      	beq.n	8001c76 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001c54:	f000 f84a 	bl	8001cec <xTaskIncrementTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <xTaskResumeAll+0x11c>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f1      	bne.n	8001c54 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <xTaskResumeAll+0x120>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <xTaskResumeAll+0x11c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001c7a:	f001 f81b 	bl	8002cb4 <vPortExitCritical>

    return xAlreadyYielded;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000348 	.word	0x20000348
 8001c8c:	20000320 	.word	0x20000320
 8001c90:	200002e0 	.word	0x200002e0
 8001c94:	20000328 	.word	0x20000328
 8001c98:	2000024c 	.word	0x2000024c
 8001c9c:	20000248 	.word	0x20000248
 8001ca0:	20000334 	.word	0x20000334
 8001ca4:	20000330 	.word	0x20000330

08001ca8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <xTaskGetTickCount+0x1c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000324 	.word	0x20000324

08001cc8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001cce:	f001 f8ad 	bl	8002e2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <xTaskGetTickCountFromISR+0x20>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001cdc:	683b      	ldr	r3, [r7, #0]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000324 	.word	0x20000324

08001cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cf6:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <xTaskIncrementTick+0x110>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d173      	bne.n	8001de6 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001cfe:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <xTaskIncrementTick+0x114>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3301      	adds	r3, #1
 8001d04:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001d06:	4a3e      	ldr	r2, [pc, #248]	; (8001e00 <xTaskIncrementTick+0x114>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d120      	bne.n	8001d54 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001d12:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <xTaskIncrementTick+0x118>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00a      	beq.n	8001d32 <xTaskIncrementTick+0x46>
        __asm volatile
 8001d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d20:	f383 8811 	msr	BASEPRI, r3
 8001d24:	f3bf 8f6f 	isb	sy
 8001d28:	f3bf 8f4f 	dsb	sy
 8001d2c:	603b      	str	r3, [r7, #0]
    }
 8001d2e:	bf00      	nop
 8001d30:	e7fe      	b.n	8001d30 <xTaskIncrementTick+0x44>
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <xTaskIncrementTick+0x118>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <xTaskIncrementTick+0x11c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a31      	ldr	r2, [pc, #196]	; (8001e04 <xTaskIncrementTick+0x118>)
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4a31      	ldr	r2, [pc, #196]	; (8001e08 <xTaskIncrementTick+0x11c>)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <xTaskIncrementTick+0x120>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	4a2f      	ldr	r2, [pc, #188]	; (8001e0c <xTaskIncrementTick+0x120>)
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	f000 faa0 	bl	8002294 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001d54:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <xTaskIncrementTick+0x124>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d348      	bcc.n	8001df0 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d5e:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <xTaskIncrementTick+0x118>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d104      	bne.n	8001d72 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d68:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <xTaskIncrementTick+0x124>)
 8001d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d6e:	601a      	str	r2, [r3, #0]
                    break;
 8001d70:	e03e      	b.n	8001df0 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <xTaskIncrementTick+0x118>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d203      	bcs.n	8001d92 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001d8a:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <xTaskIncrementTick+0x124>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001d90:	e02e      	b.n	8001df0 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3304      	adds	r3, #4
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f9ed 	bl	8001176 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	3318      	adds	r3, #24
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f9e4 	bl	8001176 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 f939 	bl	8005028 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	2201      	movs	r2, #1
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <xTaskIncrementTick+0x128>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <xTaskIncrementTick+0x128>)
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <xTaskIncrementTick+0x12c>)
 8001dd6:	441a      	add	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f7ff f96c 	bl	80010bc <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001de4:	e7bb      	b.n	8001d5e <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <xTaskIncrementTick+0x130>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3301      	adds	r3, #1
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <xTaskIncrementTick+0x130>)
 8001dee:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001df0:	697b      	ldr	r3, [r7, #20]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000348 	.word	0x20000348
 8001e00:	20000324 	.word	0x20000324
 8001e04:	200002d8 	.word	0x200002d8
 8001e08:	200002dc 	.word	0x200002dc
 8001e0c:	20000338 	.word	0x20000338
 8001e10:	20000340 	.word	0x20000340
 8001e14:	20000328 	.word	0x20000328
 8001e18:	2000024c 	.word	0x2000024c
 8001e1c:	20000330 	.word	0x20000330

08001e20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <vTaskSwitchContext+0xbc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ee0 <vTaskSwitchContext+0xc0>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001e34:	e04d      	b.n	8001ed2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <vTaskSwitchContext+0xc0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e3c:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <vTaskSwitchContext+0xc4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001e4a:	7afb      	ldrb	r3, [r7, #11]
 8001e4c:	f1c3 031f 	rsb	r3, r3, #31
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	4925      	ldr	r1, [pc, #148]	; (8001ee8 <vTaskSwitchContext+0xc8>)
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10a      	bne.n	8001e7c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6a:	f383 8811 	msr	BASEPRI, r3
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	607b      	str	r3, [r7, #4]
    }
 8001e78:	bf00      	nop
 8001e7a:	e7fe      	b.n	8001e7a <vTaskSwitchContext+0x5a>
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4a18      	ldr	r2, [pc, #96]	; (8001ee8 <vTaskSwitchContext+0xc8>)
 8001e88:	4413      	add	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	3308      	adds	r3, #8
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d104      	bne.n	8001eac <vTaskSwitchContext+0x8c>
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <vTaskSwitchContext+0xcc>)
 8001eb4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <vTaskSwitchContext+0xcc>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <vTaskSwitchContext+0xd0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d102      	bne.n	8001ec8 <vTaskSwitchContext+0xa8>
 8001ec2:	f003 f811 	bl	8004ee8 <SEGGER_SYSVIEW_OnIdle>
}
 8001ec6:	e004      	b.n	8001ed2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <vTaskSwitchContext+0xcc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f003 f869 	bl	8004fa4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000348 	.word	0x20000348
 8001ee0:	20000334 	.word	0x20000334
 8001ee4:	20000328 	.word	0x20000328
 8001ee8:	2000024c 	.word	0x2000024c
 8001eec:	20000248 	.word	0x20000248
 8001ef0:	20000344 	.word	0x20000344

08001ef4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10a      	bne.n	8001f1a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f08:	f383 8811 	msr	BASEPRI, r3
 8001f0c:	f3bf 8f6f 	isb	sy
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	60fb      	str	r3, [r7, #12]
    }
 8001f16:	bf00      	nop
 8001f18:	e7fe      	b.n	8001f18 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <vTaskPlaceOnEventList+0x44>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3318      	adds	r3, #24
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff f8ee 	bl	8001104 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f28:	2101      	movs	r1, #1
 8001f2a:	6838      	ldr	r0, [r7, #0]
 8001f2c:	f000 f9ec 	bl	8002308 <prvAddCurrentTaskToDelayedList>
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000248 	.word	0x20000248

08001f3c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10a      	bne.n	8001f64 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f52:	f383 8811 	msr	BASEPRI, r3
 8001f56:	f3bf 8f6f 	isb	sy
 8001f5a:	f3bf 8f4f 	dsb	sy
 8001f5e:	617b      	str	r3, [r7, #20]
    }
 8001f60:	bf00      	nop
 8001f62:	e7fe      	b.n	8001f62 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <vTaskPlaceOnEventListRestricted+0x58>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3318      	adds	r3, #24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff f8a5 	bl	80010bc <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001f7e:	2024      	movs	r0, #36	; 0x24
 8001f80:	f002 fab2 	bl	80044e8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	68b8      	ldr	r0, [r7, #8]
 8001f88:	f000 f9be 	bl	8002308 <prvAddCurrentTaskToDelayedList>
    }
 8001f8c:	bf00      	nop
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000248 	.word	0x20000248

08001f98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10a      	bne.n	8001fc4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb2:	f383 8811 	msr	BASEPRI, r3
 8001fb6:	f3bf 8f6f 	isb	sy
 8001fba:	f3bf 8f4f 	dsb	sy
 8001fbe:	60fb      	str	r3, [r7, #12]
    }
 8001fc0:	bf00      	nop
 8001fc2:	e7fe      	b.n	8001fc2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	3318      	adds	r3, #24
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff f8d4 	bl	8001176 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <xTaskRemoveFromEventList+0xb4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d120      	bne.n	8002018 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f8cb 	bl	8001176 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 f820 	bl	8005028 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	2201      	movs	r2, #1
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <xTaskRemoveFromEventList+0xb8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	4a16      	ldr	r2, [pc, #88]	; (8002050 <xTaskRemoveFromEventList+0xb8>)
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4a13      	ldr	r2, [pc, #76]	; (8002054 <xTaskRemoveFromEventList+0xbc>)
 8002008:	441a      	add	r2, r3
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	3304      	adds	r3, #4
 800200e:	4619      	mov	r1, r3
 8002010:	4610      	mov	r0, r2
 8002012:	f7ff f853 	bl	80010bc <vListInsertEnd>
 8002016:	e005      	b.n	8002024 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	3318      	adds	r3, #24
 800201c:	4619      	mov	r1, r3
 800201e:	480e      	ldr	r0, [pc, #56]	; (8002058 <xTaskRemoveFromEventList+0xc0>)
 8002020:	f7ff f84c 	bl	80010bc <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <xTaskRemoveFromEventList+0xc4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	429a      	cmp	r2, r3
 8002030:	d905      	bls.n	800203e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002032:	2301      	movs	r3, #1
 8002034:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <xTaskRemoveFromEventList+0xc8>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e001      	b.n	8002042 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002042:	697b      	ldr	r3, [r7, #20]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000348 	.word	0x20000348
 8002050:	20000328 	.word	0x20000328
 8002054:	2000024c 	.word	0x2000024c
 8002058:	200002e0 	.word	0x200002e0
 800205c:	20000248 	.word	0x20000248
 8002060:	20000334 	.word	0x20000334

08002064 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <vTaskInternalSetTimeOutState+0x24>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <vTaskInternalSetTimeOutState+0x28>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	605a      	str	r2, [r3, #4]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	20000338 	.word	0x20000338
 800208c:	20000324 	.word	0x20000324

08002090 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10a      	bne.n	80020b6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80020a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a4:	f383 8811 	msr	BASEPRI, r3
 80020a8:	f3bf 8f6f 	isb	sy
 80020ac:	f3bf 8f4f 	dsb	sy
 80020b0:	613b      	str	r3, [r7, #16]
    }
 80020b2:	bf00      	nop
 80020b4:	e7fe      	b.n	80020b4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10a      	bne.n	80020d2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80020bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c0:	f383 8811 	msr	BASEPRI, r3
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	f3bf 8f4f 	dsb	sy
 80020cc:	60fb      	str	r3, [r7, #12]
    }
 80020ce:	bf00      	nop
 80020d0:	e7fe      	b.n	80020d0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80020d2:	f000 fdbf 	bl	8002c54 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <xTaskCheckForTimeOut+0xc4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ee:	d102      	bne.n	80020f6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	e026      	b.n	8002144 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <xTaskCheckForTimeOut+0xc8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d00a      	beq.n	8002118 <xTaskCheckForTimeOut+0x88>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	429a      	cmp	r2, r3
 800210a:	d305      	bcc.n	8002118 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800210c:	2301      	movs	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e015      	b.n	8002144 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	429a      	cmp	r2, r3
 8002120:	d20b      	bcs.n	800213a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	1ad2      	subs	r2, r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ff98 	bl	8002064 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e004      	b.n	8002144 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002140:	2301      	movs	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002144:	f000 fdb6 	bl	8002cb4 <vPortExitCritical>

    return xReturn;
 8002148:	69fb      	ldr	r3, [r7, #28]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000324 	.word	0x20000324
 8002158:	20000338 	.word	0x20000338

0800215c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <vTaskMissedYield+0x14>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	20000334 	.word	0x20000334

08002174 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800217c:	f000 f84c 	bl	8002218 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <prvIdleTask+0x20>)
 8002182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002190:	e7f4      	b.n	800217c <prvIdleTask+0x8>
 8002192:	bf00      	nop
 8002194:	e000ed04 	.word	0xe000ed04

08002198 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	e00c      	b.n	80021be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <prvInitialiseTaskLists+0x60>)
 80021b0:	4413      	add	r3, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe ff55 	bl	8001062 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3301      	adds	r3, #1
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d9ef      	bls.n	80021a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80021c4:	480d      	ldr	r0, [pc, #52]	; (80021fc <prvInitialiseTaskLists+0x64>)
 80021c6:	f7fe ff4c 	bl	8001062 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80021ca:	480d      	ldr	r0, [pc, #52]	; (8002200 <prvInitialiseTaskLists+0x68>)
 80021cc:	f7fe ff49 	bl	8001062 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <prvInitialiseTaskLists+0x6c>)
 80021d2:	f7fe ff46 	bl	8001062 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80021d6:	480c      	ldr	r0, [pc, #48]	; (8002208 <prvInitialiseTaskLists+0x70>)
 80021d8:	f7fe ff43 	bl	8001062 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80021dc:	480b      	ldr	r0, [pc, #44]	; (800220c <prvInitialiseTaskLists+0x74>)
 80021de:	f7fe ff40 	bl	8001062 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <prvInitialiseTaskLists+0x78>)
 80021e4:	4a05      	ldr	r2, [pc, #20]	; (80021fc <prvInitialiseTaskLists+0x64>)
 80021e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <prvInitialiseTaskLists+0x7c>)
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <prvInitialiseTaskLists+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000024c 	.word	0x2000024c
 80021fc:	200002b0 	.word	0x200002b0
 8002200:	200002c4 	.word	0x200002c4
 8002204:	200002e0 	.word	0x200002e0
 8002208:	200002f4 	.word	0x200002f4
 800220c:	2000030c 	.word	0x2000030c
 8002210:	200002d8 	.word	0x200002d8
 8002214:	200002dc 	.word	0x200002dc

08002218 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800221e:	e019      	b.n	8002254 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002220:	f000 fd18 	bl	8002c54 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <prvCheckTasksWaitingTermination+0x50>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe ffa0 	bl	8001176 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <prvCheckTasksWaitingTermination+0x54>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3b01      	subs	r3, #1
 800223c:	4a0b      	ldr	r2, [pc, #44]	; (800226c <prvCheckTasksWaitingTermination+0x54>)
 800223e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <prvCheckTasksWaitingTermination+0x58>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3b01      	subs	r3, #1
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <prvCheckTasksWaitingTermination+0x58>)
 8002248:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800224a:	f000 fd33 	bl	8002cb4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f810 	bl	8002274 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <prvCheckTasksWaitingTermination+0x58>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1e1      	bne.n	8002220 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200002f4 	.word	0x200002f4
 800226c:	20000320 	.word	0x20000320
 8002270:	20000308 	.word	0x20000308

08002274 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fecd 	bl	8003020 <vPortFree>
                vPortFree( pxTCB );
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 feca 	bl	8003020 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <prvResetNextTaskUnblockTime+0x30>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d104      	bne.n	80022ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <prvResetNextTaskUnblockTime+0x34>)
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80022aa:	e005      	b.n	80022b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <prvResetNextTaskUnblockTime+0x30>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <prvResetNextTaskUnblockTime+0x34>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	200002d8 	.word	0x200002d8
 80022c8:	20000340 	.word	0x20000340

080022cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <xTaskGetSchedulerState+0x34>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80022da:	2301      	movs	r3, #1
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	e008      	b.n	80022f2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <xTaskGetSchedulerState+0x38>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80022e8:	2302      	movs	r3, #2
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	e001      	b.n	80022f2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80022f2:	687b      	ldr	r3, [r7, #4]
    }
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	2000032c 	.word	0x2000032c
 8002304:	20000348 	.word	0x20000348

08002308 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002312:	4b32      	ldr	r3, [pc, #200]	; (80023dc <prvAddCurrentTaskToDelayedList+0xd4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002318:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3304      	adds	r3, #4
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe ff29 	bl	8001176 <uxListRemove>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10b      	bne.n	8002342 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800232a:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	2201      	movs	r2, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4013      	ands	r3, r2
 800233e:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002340:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002348:	d110      	bne.n	800236c <prvAddCurrentTaskToDelayedList+0x64>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00d      	beq.n	800236c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002350:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	211b      	movs	r1, #27
 8002356:	4618      	mov	r0, r3
 8002358:	f002 fea8 	bl	80050ac <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3304      	adds	r3, #4
 8002362:	4619      	mov	r1, r3
 8002364:	4820      	ldr	r0, [pc, #128]	; (80023e8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002366:	f7fe fea9 	bl	80010bc <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800236a:	e032      	b.n	80023d2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	429a      	cmp	r2, r3
 8002382:	d20f      	bcs.n	80023a4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2104      	movs	r1, #4
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fe8e 	bl	80050ac <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <prvAddCurrentTaskToDelayedList+0xe4>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3304      	adds	r3, #4
 800239a:	4619      	mov	r1, r3
 800239c:	4610      	mov	r0, r2
 800239e:	f7fe feb1 	bl	8001104 <vListInsert>
}
 80023a2:	e016      	b.n	80023d2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80023a4:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2104      	movs	r1, #4
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 fe7e 	bl	80050ac <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3304      	adds	r3, #4
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f7fe fea1 	bl	8001104 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <prvAddCurrentTaskToDelayedList+0xec>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d202      	bcs.n	80023d2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80023cc:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <prvAddCurrentTaskToDelayedList+0xec>)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	6013      	str	r3, [r2, #0]
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000324 	.word	0x20000324
 80023e0:	20000248 	.word	0x20000248
 80023e4:	20000328 	.word	0x20000328
 80023e8:	2000030c 	.word	0x2000030c
 80023ec:	200002dc 	.word	0x200002dc
 80023f0:	200002d8 	.word	0x200002d8
 80023f4:	20000340 	.word	0x20000340

080023f8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002402:	f000 fa47 	bl	8002894 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <xTimerCreateTimerTask+0x54>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <xTimerCreateTimerTask+0x58>)
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	2302      	movs	r3, #2
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2300      	movs	r3, #0
 8002418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800241c:	490d      	ldr	r1, [pc, #52]	; (8002454 <xTimerCreateTimerTask+0x5c>)
 800241e:	480e      	ldr	r0, [pc, #56]	; (8002458 <xTimerCreateTimerTask+0x60>)
 8002420:	f7ff f9ea 	bl	80017f8 <xTaskCreate>
 8002424:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	603b      	str	r3, [r7, #0]
    }
 800243e:	bf00      	nop
 8002440:	e7fe      	b.n	8002440 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002442:	687b      	ldr	r3, [r7, #4]
    }
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	2000037c 	.word	0x2000037c
 8002450:	20000380 	.word	0x20000380
 8002454:	0800a100 	.word	0x0800a100
 8002458:	08002501 	.word	0x08002501

0800245c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002468:	e008      	b.n	800247c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	4413      	add	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	18d1      	adds	r1, r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f8dd 	bl	8002648 <prvInsertTimerInActiveList>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ea      	bne.n	800246a <prvReloadTimer+0xe>
        }
    }
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <prvProcessExpiredTimer+0x5c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3304      	adds	r3, #4
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fe5c 	bl	8001176 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff ffc3 	bl	800245c <prvReloadTimer>
 80024d6:	e008      	b.n	80024ea <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	4798      	blx	r3
    }
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000374 	.word	0x20000374

08002500 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002508:	f107 0308 	add.w	r3, r7, #8
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f857 	bl	80025c0 <prvGetNextExpireTime>
 8002512:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4619      	mov	r1, r3
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f803 	bl	8002524 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800251e:	f000 f8d5 	bl	80026cc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002522:	e7f1      	b.n	8002508 <prvTimerTask+0x8>

08002524 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800252e:	f7ff fb1b 	bl	8001b68 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002532:	f107 0308 	add.w	r3, r7, #8
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f866 	bl	8002608 <prvSampleTimeNow>
 800253c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d130      	bne.n	80025a6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <prvProcessTimerOrBlockTask+0x3c>
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	429a      	cmp	r2, r3
 8002550:	d806      	bhi.n	8002560 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002552:	f7ff fb17 	bl	8001b84 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ffa1 	bl	80024a0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800255e:	e024      	b.n	80025aa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <prvProcessTimerOrBlockTask+0x90>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <prvProcessTimerOrBlockTask+0x50>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <prvProcessTimerOrBlockTask+0x52>
 8002574:	2300      	movs	r3, #0
 8002576:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <prvProcessTimerOrBlockTask+0x94>)
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	f7ff f903 	bl	8001790 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800258a:	f7ff fafb 	bl	8001b84 <xTaskResumeAll>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <prvProcessTimerOrBlockTask+0x98>)
 8002596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	f3bf 8f6f 	isb	sy
    }
 80025a4:	e001      	b.n	80025aa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80025a6:	f7ff faed 	bl	8001b84 <xTaskResumeAll>
    }
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000378 	.word	0x20000378
 80025b8:	2000037c 	.word	0x2000037c
 80025bc:	e000ed04 	.word	0xe000ed04

080025c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <prvGetNextExpireTime+0x44>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <prvGetNextExpireTime+0x16>
 80025d2:	2201      	movs	r2, #1
 80025d4:	e000      	b.n	80025d8 <prvGetNextExpireTime+0x18>
 80025d6:	2200      	movs	r2, #0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <prvGetNextExpireTime+0x44>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	e001      	b.n	80025f4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80025f4:	68fb      	ldr	r3, [r7, #12]
    }
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000374 	.word	0x20000374

08002608 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002610:	f7ff fb4a 	bl	8001ca8 <xTaskGetTickCount>
 8002614:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <prvSampleTimeNow+0x3c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d205      	bcs.n	800262c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002620:	f000 f912 	bl	8002848 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e002      	b.n	8002632 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002632:	4a04      	ldr	r2, [pc, #16]	; (8002644 <prvSampleTimeNow+0x3c>)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002638:	68fb      	ldr	r3, [r7, #12]
    }
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000384 	.word	0x20000384

08002648 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	d812      	bhi.n	8002694 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	1ad2      	subs	r2, r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	429a      	cmp	r2, r3
 800267a:	d302      	bcc.n	8002682 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800267c:	2301      	movs	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e01b      	b.n	80026ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <prvInsertTimerInActiveList+0x7c>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3304      	adds	r3, #4
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f7fe fd39 	bl	8001104 <vListInsert>
 8002692:	e012      	b.n	80026ba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d206      	bcs.n	80026aa <prvInsertTimerInActiveList+0x62>
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d302      	bcc.n	80026aa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80026a4:	2301      	movs	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	e007      	b.n	80026ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <prvInsertTimerInActiveList+0x80>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3304      	adds	r3, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f7fe fd25 	bl	8001104 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80026ba:	697b      	ldr	r3, [r7, #20]
    }
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000378 	.word	0x20000378
 80026c8:	20000374 	.word	0x20000374

080026cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026d2:	e0a6      	b.n	8002822 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f2c0 80a2 	blt.w	8002820 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d004      	beq.n	80026f2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	3304      	adds	r3, #4
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe fd42 	bl	8001176 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff87 	bl	8002608 <prvSampleTimeNow>
 80026fa:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	3b01      	subs	r3, #1
 8002700:	2b08      	cmp	r3, #8
 8002702:	f200 808e 	bhi.w	8002822 <prvProcessReceivedCommands+0x156>
 8002706:	a201      	add	r2, pc, #4	; (adr r2, 800270c <prvProcessReceivedCommands+0x40>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	08002731 	.word	0x08002731
 8002710:	08002731 	.word	0x08002731
 8002714:	08002799 	.word	0x08002799
 8002718:	080027ad 	.word	0x080027ad
 800271c:	080027f7 	.word	0x080027f7
 8002720:	08002731 	.word	0x08002731
 8002724:	08002731 	.word	0x08002731
 8002728:	08002799 	.word	0x08002799
 800272c:	080027ad 	.word	0x080027ad
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	b2da      	uxtb	r2, r3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	18d1      	adds	r1, r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	69f8      	ldr	r0, [r7, #28]
 8002750:	f7ff ff7a 	bl	8002648 <prvInsertTimerInActiveList>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d063      	beq.n	8002822 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d009      	beq.n	800277c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	4413      	add	r3, r2
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4619      	mov	r1, r3
 8002774:	69f8      	ldr	r0, [r7, #28]
 8002776:	f7ff fe71 	bl	800245c <prvReloadTimer>
 800277a:	e008      	b.n	800278e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	b2da      	uxtb	r2, r3
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	69f8      	ldr	r0, [r7, #28]
 8002794:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002796:	e044      	b.n	8002822 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80027aa:	e03a      	b.n	8002822 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	617b      	str	r3, [r7, #20]
    }
 80027de:	bf00      	nop
 80027e0:	e7fe      	b.n	80027e0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	18d1      	adds	r1, r2, r3
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	69f8      	ldr	r0, [r7, #28]
 80027f0:	f7ff ff2a 	bl	8002648 <prvInsertTimerInActiveList>
                        break;
 80027f4:	e015      	b.n	8002822 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d103      	bne.n	800280c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002804:	69f8      	ldr	r0, [r7, #28]
 8002806:	f000 fc0b 	bl	8003020 <vPortFree>
 800280a:	e00a      	b.n	8002822 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800281e:	e000      	b.n	8002822 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002820:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <prvProcessReceivedCommands+0x178>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f107 0108 	add.w	r1, r7, #8
 800282a:	2200      	movs	r2, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fdc5 	bl	80013bc <xQueueReceive>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f af4d 	bne.w	80026d4 <prvProcessReceivedCommands+0x8>
        }
    }
 800283a:	bf00      	nop
 800283c:	bf00      	nop
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	2000037c 	.word	0x2000037c

08002848 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800284e:	e009      	b.n	8002864 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <prvSwitchTimerLists+0x44>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800285a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800285e:	6838      	ldr	r0, [r7, #0]
 8002860:	f7ff fe1e 	bl	80024a0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <prvSwitchTimerLists+0x44>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <prvSwitchTimerLists+0x44>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <prvSwitchTimerLists+0x48>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a04      	ldr	r2, [pc, #16]	; (800288c <prvSwitchTimerLists+0x44>)
 800287a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <prvSwitchTimerLists+0x48>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
    }
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000374 	.word	0x20000374
 8002890:	20000378 	.word	0x20000378

08002894 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002898:	f000 f9dc 	bl	8002c54 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800289c:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <prvCheckForValidListAndQueue+0x54>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11d      	bne.n	80028e0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80028a4:	4811      	ldr	r0, [pc, #68]	; (80028ec <prvCheckForValidListAndQueue+0x58>)
 80028a6:	f7fe fbdc 	bl	8001062 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80028aa:	4811      	ldr	r0, [pc, #68]	; (80028f0 <prvCheckForValidListAndQueue+0x5c>)
 80028ac:	f7fe fbd9 	bl	8001062 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <prvCheckForValidListAndQueue+0x60>)
 80028b2:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <prvCheckForValidListAndQueue+0x58>)
 80028b4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <prvCheckForValidListAndQueue+0x64>)
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <prvCheckForValidListAndQueue+0x5c>)
 80028ba:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80028bc:	2200      	movs	r2, #0
 80028be:	210c      	movs	r1, #12
 80028c0:	200a      	movs	r0, #10
 80028c2:	f7fe fd04 	bl	80012ce <xQueueGenericCreate>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <prvCheckForValidListAndQueue+0x54>)
 80028ca:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <prvCheckForValidListAndQueue+0x54>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <prvCheckForValidListAndQueue+0x54>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4908      	ldr	r1, [pc, #32]	; (80028fc <prvCheckForValidListAndQueue+0x68>)
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe ff02 	bl	80016e4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80028e0:	f000 f9e8 	bl	8002cb4 <vPortExitCritical>
    }
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	2000037c 	.word	0x2000037c
 80028ec:	2000034c 	.word	0x2000034c
 80028f0:	20000360 	.word	0x20000360
 80028f4:	20000374 	.word	0x20000374
 80028f8:	20000378 	.word	0x20000378
 80028fc:	0800a108 	.word	0x0800a108

08002900 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3b04      	subs	r3, #4
 8002910:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002918:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3b04      	subs	r3, #4
 800291e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f023 0201 	bic.w	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3b04      	subs	r3, #4
 800292e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002930:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <pxPortInitialiseStack+0x64>)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3b14      	subs	r3, #20
 800293a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3b04      	subs	r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f06f 0202 	mvn.w	r2, #2
 800294e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	3b20      	subs	r3, #32
 8002954:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002956:	68fb      	ldr	r3, [r7, #12]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	08002969 	.word	0x08002969

08002968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <prvTaskExitError+0x54>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800297a:	d00a      	beq.n	8002992 <prvTaskExitError+0x2a>
        __asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	60fb      	str	r3, [r7, #12]
    }
 800298e:	bf00      	nop
 8002990:	e7fe      	b.n	8002990 <prvTaskExitError+0x28>
        __asm volatile
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	60bb      	str	r3, [r7, #8]
    }
 80029a4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80029a6:	bf00      	nop
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0fc      	beq.n	80029a8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	20000008 	.word	0x20000008

080029c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <pxCurrentTCBConst2>)
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	6808      	ldr	r0, [r1, #0]
 80029c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ca:	f380 8809 	msr	PSP, r0
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f04f 0000 	mov.w	r0, #0
 80029d6:	f380 8811 	msr	BASEPRI, r0
 80029da:	4770      	bx	lr
 80029dc:	f3af 8000 	nop.w

080029e0 <pxCurrentTCBConst2>:
 80029e0:	20000248 	.word	0x20000248
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop

080029e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80029e8:	4808      	ldr	r0, [pc, #32]	; (8002a0c <prvPortStartFirstTask+0x24>)
 80029ea:	6800      	ldr	r0, [r0, #0]
 80029ec:	6800      	ldr	r0, [r0, #0]
 80029ee:	f380 8808 	msr	MSP, r0
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f380 8814 	msr	CONTROL, r0
 80029fa:	b662      	cpsie	i
 80029fc:	b661      	cpsie	f
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	df00      	svc	0
 8002a08:	bf00      	nop
 8002a0a:	0000      	.short	0x0000
 8002a0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop

08002a14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a1a:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <xPortStartScheduler+0x120>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a46      	ldr	r2, [pc, #280]	; (8002b38 <xPortStartScheduler+0x124>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10a      	bne.n	8002a3a <xPortStartScheduler+0x26>
        __asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	613b      	str	r3, [r7, #16]
    }
 8002a36:	bf00      	nop
 8002a38:	e7fe      	b.n	8002a38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a3a:	4b3e      	ldr	r3, [pc, #248]	; (8002b34 <xPortStartScheduler+0x120>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a3f      	ldr	r2, [pc, #252]	; (8002b3c <xPortStartScheduler+0x128>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d10a      	bne.n	8002a5a <xPortStartScheduler+0x46>
        __asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	60fb      	str	r3, [r7, #12]
    }
 8002a56:	bf00      	nop
 8002a58:	e7fe      	b.n	8002a58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a5a:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <xPortStartScheduler+0x12c>)
 8002a5c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	22ff      	movs	r2, #255	; 0xff
 8002a6a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <xPortStartScheduler+0x130>)
 8002a80:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a82:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <xPortStartScheduler+0x134>)
 8002a84:	2207      	movs	r2, #7
 8002a86:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a88:	e009      	b.n	8002a9e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8002a8a:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <xPortStartScheduler+0x134>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	4a2d      	ldr	r2, [pc, #180]	; (8002b48 <xPortStartScheduler+0x134>)
 8002a92:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa6:	2b80      	cmp	r3, #128	; 0x80
 8002aa8:	d0ef      	beq.n	8002a8a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002aaa:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <xPortStartScheduler+0x134>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d00a      	beq.n	8002acc <xPortStartScheduler+0xb8>
        __asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	60bb      	str	r3, [r7, #8]
    }
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <xPortStartScheduler+0x134>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <xPortStartScheduler+0x134>)
 8002ad4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <xPortStartScheduler+0x134>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ade:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <xPortStartScheduler+0x134>)
 8002ae0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <xPortStartScheduler+0x138>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <xPortStartScheduler+0x138>)
 8002af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002af4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <xPortStartScheduler+0x138>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <xPortStartScheduler+0x138>)
 8002afc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002b00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002b02:	f000 f963 	bl	8002dcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <xPortStartScheduler+0x13c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002b0c:	f000 f982 	bl	8002e14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <xPortStartScheduler+0x140>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <xPortStartScheduler+0x140>)
 8002b16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002b1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002b1c:	f7ff ff64 	bl	80029e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002b20:	f7ff f97e 	bl	8001e20 <vTaskSwitchContext>
    prvTaskExitError();
 8002b24:	f7ff ff20 	bl	8002968 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	e000ed00 	.word	0xe000ed00
 8002b38:	410fc271 	.word	0x410fc271
 8002b3c:	410fc270 	.word	0x410fc270
 8002b40:	e000e400 	.word	0xe000e400
 8002b44:	20000388 	.word	0x20000388
 8002b48:	2000038c 	.word	0x2000038c
 8002b4c:	e000ed20 	.word	0xe000ed20
 8002b50:	20000008 	.word	0x20000008
 8002b54:	e000ef34 	.word	0xe000ef34

08002b58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b5e:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <vInitPrioGroupValue+0xe4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a37      	ldr	r2, [pc, #220]	; (8002c40 <vInitPrioGroupValue+0xe8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d10a      	bne.n	8002b7e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	613b      	str	r3, [r7, #16]
    }
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <vInitPrioGroupValue+0xe4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a30      	ldr	r2, [pc, #192]	; (8002c44 <vInitPrioGroupValue+0xec>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d10a      	bne.n	8002b9e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	60fb      	str	r3, [r7, #12]
    }
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b9e:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <vInitPrioGroupValue+0xf0>)
 8002ba0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	22ff      	movs	r2, #255	; 0xff
 8002bae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <vInitPrioGroupValue+0xf4>)
 8002bc4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002bc6:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <vInitPrioGroupValue+0xf8>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bcc:	e009      	b.n	8002be2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <vInitPrioGroupValue+0xf8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <vInitPrioGroupValue+0xf8>)
 8002bd6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d0ef      	beq.n	8002bce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002bee:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <vInitPrioGroupValue+0xf8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f1c3 0307 	rsb	r3, r3, #7
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d00a      	beq.n	8002c10 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	60bb      	str	r3, [r7, #8]
    }
 8002c0c:	bf00      	nop
 8002c0e:	e7fe      	b.n	8002c0e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <vInitPrioGroupValue+0xf8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <vInitPrioGroupValue+0xf8>)
 8002c18:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <vInitPrioGroupValue+0xf8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c22:	4a0b      	ldr	r2, [pc, #44]	; (8002c50 <vInitPrioGroupValue+0xf8>)
 8002c24:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000ed00 	.word	0xe000ed00
 8002c40:	410fc271 	.word	0x410fc271
 8002c44:	410fc270 	.word	0x410fc270
 8002c48:	e000e400 	.word	0xe000e400
 8002c4c:	20000388 	.word	0x20000388
 8002c50:	2000038c 	.word	0x2000038c

08002c54 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
        __asm volatile
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	607b      	str	r3, [r7, #4]
    }
 8002c6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <vPortEnterCritical+0x58>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	4a0d      	ldr	r2, [pc, #52]	; (8002cac <vPortEnterCritical+0x58>)
 8002c76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <vPortEnterCritical+0x58>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d10f      	bne.n	8002ca0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <vPortEnterCritical+0x5c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	603b      	str	r3, [r7, #0]
    }
 8002c9c:	bf00      	nop
 8002c9e:	e7fe      	b.n	8002c9e <vPortEnterCritical+0x4a>
    }
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	20000008 	.word	0x20000008
 8002cb0:	e000ed04 	.word	0xe000ed04

08002cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <vPortExitCritical+0x50>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <vPortExitCritical+0x24>
        __asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	607b      	str	r3, [r7, #4]
    }
 8002cd4:	bf00      	nop
 8002cd6:	e7fe      	b.n	8002cd6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <vPortExitCritical+0x50>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <vPortExitCritical+0x50>)
 8002ce0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <vPortExitCritical+0x50>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <vPortExitCritical+0x42>
 8002cea:	2300      	movs	r3, #0
 8002cec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002cf4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000008 	.word	0x20000008
	...

08002d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002d10:	f3ef 8009 	mrs	r0, PSP
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <pxCurrentTCBConst>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	f01e 0f10 	tst.w	lr, #16
 8002d20:	bf08      	it	eq
 8002d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2a:	6010      	str	r0, [r2, #0]
 8002d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d34:	f380 8811 	msr	BASEPRI, r0
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f7ff f86e 	bl	8001e20 <vTaskSwitchContext>
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f380 8811 	msr	BASEPRI, r0
 8002d4c:	bc09      	pop	{r0, r3}
 8002d4e:	6819      	ldr	r1, [r3, #0]
 8002d50:	6808      	ldr	r0, [r1, #0]
 8002d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d56:	f01e 0f10 	tst.w	lr, #16
 8002d5a:	bf08      	it	eq
 8002d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d60:	f380 8809 	msr	PSP, r0
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	f3af 8000 	nop.w

08002d70 <pxCurrentTCBConst>:
 8002d70:	20000248 	.word	0x20000248
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop

08002d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	607b      	str	r3, [r7, #4]
    }
 8002d90:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002d92:	f002 f82f 	bl	8004df4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002d96:	f7fe ffa9 	bl	8001cec <xTaskIncrementTick>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002da0:	f002 f886 	bl	8004eb0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002da4:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <SysTick_Handler+0x50>)
 8002da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e001      	b.n	8002db2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002dae:	f002 f863 	bl	8004e78 <SEGGER_SYSVIEW_RecordExitISR>
 8002db2:	2300      	movs	r3, #0
 8002db4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f383 8811 	msr	BASEPRI, r3
    }
 8002dbc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <vPortSetupTimerInterrupt+0x34>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <vPortSetupTimerInterrupt+0x38>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <vPortSetupTimerInterrupt+0x3c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <vPortSetupTimerInterrupt+0x40>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	099b      	lsrs	r3, r3, #6
 8002de8:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <vPortSetupTimerInterrupt+0x44>)
 8002dea:	3b01      	subs	r3, #1
 8002dec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <vPortSetupTimerInterrupt+0x34>)
 8002df0:	2207      	movs	r2, #7
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e010 	.word	0xe000e010
 8002e04:	e000e018 	.word	0xe000e018
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	10624dd3 	.word	0x10624dd3
 8002e10:	e000e014 	.word	0xe000e014

08002e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e24 <vPortEnableVFP+0x10>
 8002e18:	6801      	ldr	r1, [r0, #0]
 8002e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e1e:	6001      	str	r1, [r0, #0]
 8002e20:	4770      	bx	lr
 8002e22:	0000      	.short	0x0000
 8002e24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop

08002e2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002e32:	f3ef 8305 	mrs	r3, IPSR
 8002e36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d914      	bls.n	8002e68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <vPortValidateInterruptPriority+0x70>)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <vPortValidateInterruptPriority+0x74>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	7afa      	ldrb	r2, [r7, #11]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d20a      	bcs.n	8002e68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	607b      	str	r3, [r7, #4]
    }
 8002e64:	bf00      	nop
 8002e66:	e7fe      	b.n	8002e66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <vPortValidateInterruptPriority+0x78>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e70:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <vPortValidateInterruptPriority+0x7c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d90a      	bls.n	8002e8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	603b      	str	r3, [r7, #0]
    }
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <vPortValidateInterruptPriority+0x60>
    }
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000e3f0 	.word	0xe000e3f0
 8002ea0:	20000388 	.word	0x20000388
 8002ea4:	e000ed0c 	.word	0xe000ed0c
 8002ea8:	2000038c 	.word	0x2000038c

08002eac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	; 0x28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002eb8:	f7fe fe56 	bl	8001b68 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002ebc:	4b53      	ldr	r3, [pc, #332]	; (800300c <pvPortMalloc+0x160>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002ec4:	f000 f908 	bl	80030d8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d012      	beq.n	8002ef4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002ece:	2208      	movs	r2, #8
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	3308      	adds	r3, #8
 8002eda:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d804      	bhi.n	8002ef0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	4413      	add	r3, r2
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	e001      	b.n	8002ef4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	db70      	blt.n	8002fdc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d06d      	beq.n	8002fdc <pvPortMalloc+0x130>
 8002f00:	4b43      	ldr	r3, [pc, #268]	; (8003010 <pvPortMalloc+0x164>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d868      	bhi.n	8002fdc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002f0a:	4b42      	ldr	r3, [pc, #264]	; (8003014 <pvPortMalloc+0x168>)
 8002f0c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002f0e:	4b41      	ldr	r3, [pc, #260]	; (8003014 <pvPortMalloc+0x168>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f14:	e004      	b.n	8002f20 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d903      	bls.n	8002f32 <pvPortMalloc+0x86>
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f1      	bne.n	8002f16 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f32:	4b36      	ldr	r3, [pc, #216]	; (800300c <pvPortMalloc+0x160>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d04f      	beq.n	8002fdc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2208      	movs	r2, #8
 8002f42:	4413      	add	r3, r2
 8002f44:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1ad2      	subs	r2, r2, r3
 8002f56:	2308      	movs	r3, #8
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d91f      	bls.n	8002f9e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <pvPortMalloc+0xda>
        __asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	613b      	str	r3, [r7, #16]
    }
 8002f82:	bf00      	nop
 8002f84:	e7fe      	b.n	8002f84 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	1ad2      	subs	r2, r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f98:	6978      	ldr	r0, [r7, #20]
 8002f9a:	f000 f8f9 	bl	8003190 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <pvPortMalloc+0x164>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	4a19      	ldr	r2, [pc, #100]	; (8003010 <pvPortMalloc+0x164>)
 8002faa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fac:	4b18      	ldr	r3, [pc, #96]	; (8003010 <pvPortMalloc+0x164>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <pvPortMalloc+0x16c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d203      	bcs.n	8002fc0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002fb8:	4b15      	ldr	r3, [pc, #84]	; (8003010 <pvPortMalloc+0x164>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a16      	ldr	r2, [pc, #88]	; (8003018 <pvPortMalloc+0x16c>)
 8002fbe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <pvPortMalloc+0x170>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a10      	ldr	r2, [pc, #64]	; (800301c <pvPortMalloc+0x170>)
 8002fda:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002fdc:	f7fe fdd2 	bl	8001b84 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <pvPortMalloc+0x154>
        __asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	60fb      	str	r3, [r7, #12]
    }
 8002ffc:	bf00      	nop
 8002ffe:	e7fe      	b.n	8002ffe <pvPortMalloc+0x152>
    return pvReturn;
 8003000:	69fb      	ldr	r3, [r7, #28]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3728      	adds	r7, #40	; 0x28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20012f98 	.word	0x20012f98
 8003010:	20012f9c 	.word	0x20012f9c
 8003014:	20012f90 	.word	0x20012f90
 8003018:	20012fa0 	.word	0x20012fa0
 800301c:	20012fa4 	.word	0x20012fa4

08003020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d049      	beq.n	80030c6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003032:	2308      	movs	r3, #8
 8003034:	425b      	negs	r3, r3
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4413      	add	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	db0a      	blt.n	800305e <vPortFree+0x3e>
        __asm volatile
 8003048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	60fb      	str	r3, [r7, #12]
    }
 800305a:	bf00      	nop
 800305c:	e7fe      	b.n	800305c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <vPortFree+0x5c>
        __asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	60bb      	str	r3, [r7, #8]
    }
 8003078:	bf00      	nop
 800307a:	e7fe      	b.n	800307a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0fdb      	lsrs	r3, r3, #31
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01c      	beq.n	80030c6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d118      	bne.n	80030c6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80030a0:	f7fe fd62 	bl	8001b68 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <vPortFree+0xb0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4413      	add	r3, r2
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <vPortFree+0xb0>)
 80030b0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030b2:	6938      	ldr	r0, [r7, #16]
 80030b4:	f000 f86c 	bl	8003190 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <vPortFree+0xb4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <vPortFree+0xb4>)
 80030c0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80030c2:	f7fe fd5f 	bl	8001b84 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20012f9c 	.word	0x20012f9c
 80030d4:	20012fa8 	.word	0x20012fa8

080030d8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80030de:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80030e2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <prvHeapInit+0xa4>)
 80030e6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00c      	beq.n	800310c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3307      	adds	r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0307 	bic.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	4a1d      	ldr	r2, [pc, #116]	; (800317c <prvHeapInit+0xa4>)
 8003108:	4413      	add	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003110:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <prvHeapInit+0xa8>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <prvHeapInit+0xa8>)
 8003118:	2200      	movs	r2, #0
 800311a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	4413      	add	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003124:	2208      	movs	r2, #8
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0307 	bic.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a13      	ldr	r2, [pc, #76]	; (8003184 <prvHeapInit+0xac>)
 8003138:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <prvHeapInit+0xac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <prvHeapInit+0xac>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <prvHeapInit+0xac>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4a08      	ldr	r2, [pc, #32]	; (8003188 <prvHeapInit+0xb0>)
 8003166:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a07      	ldr	r2, [pc, #28]	; (800318c <prvHeapInit+0xb4>)
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	20000390 	.word	0x20000390
 8003180:	20012f90 	.word	0x20012f90
 8003184:	20012f98 	.word	0x20012f98
 8003188:	20012fa0 	.word	0x20012fa0
 800318c:	20012f9c 	.word	0x20012f9c

08003190 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003198:	4b28      	ldr	r3, [pc, #160]	; (800323c <prvInsertBlockIntoFreeList+0xac>)
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	e002      	b.n	80031a4 <prvInsertBlockIntoFreeList+0x14>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d8f7      	bhi.n	800319e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	4413      	add	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d108      	bne.n	80031d2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	441a      	add	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	441a      	add	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d118      	bne.n	8003218 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <prvInsertBlockIntoFreeList+0xb0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d00d      	beq.n	800320e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	441a      	add	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e008      	b.n	8003220 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800320e:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <prvInsertBlockIntoFreeList+0xb0>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e003      	b.n	8003220 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	d002      	beq.n	800322e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20012f90 	.word	0x20012f90
 8003240:	20012f98 	.word	0x20012f98

08003244 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003248:	4803      	ldr	r0, [pc, #12]	; (8003258 <_cbSendSystemDesc+0x14>)
 800324a:	f001 fd7d 	bl	8004d48 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800324e:	4803      	ldr	r0, [pc, #12]	; (800325c <_cbSendSystemDesc+0x18>)
 8003250:	f001 fd7a 	bl	8004d48 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	0800a110 	.word	0x0800a110
 800325c:	0800a13c 	.word	0x0800a13c

08003260 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <SEGGER_SYSVIEW_Conf+0x20>)
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <SEGGER_SYSVIEW_Conf+0x20>)
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <SEGGER_SYSVIEW_Conf+0x24>)
 800326e:	4a06      	ldr	r2, [pc, #24]	; (8003288 <SEGGER_SYSVIEW_Conf+0x28>)
 8003270:	f001 f8e6 	bl	8004440 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003274:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003278:	f001 f926 	bl	80044c8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000000 	.word	0x20000000
 8003284:	08003245 	.word	0x08003245
 8003288:	0800a1c4 	.word	0x0800a1c4

0800328c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800328c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328e:	b085      	sub	sp, #20
 8003290:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	e033      	b.n	8003300 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003298:	491e      	ldr	r1, [pc, #120]	; (8003314 <_cbSendTaskList+0x88>)
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	491a      	ldr	r1, [pc, #104]	; (8003314 <_cbSendTaskList+0x88>)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	3304      	adds	r3, #4
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	4c16      	ldr	r4, [pc, #88]	; (8003314 <_cbSendTaskList+0x88>)
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4423      	add	r3, r4
 80032c8:	3308      	adds	r3, #8
 80032ca:	681c      	ldr	r4, [r3, #0]
 80032cc:	4d11      	ldr	r5, [pc, #68]	; (8003314 <_cbSendTaskList+0x88>)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	442b      	add	r3, r5
 80032da:	330c      	adds	r3, #12
 80032dc:	681d      	ldr	r5, [r3, #0]
 80032de:	4e0d      	ldr	r6, [pc, #52]	; (8003314 <_cbSendTaskList+0x88>)
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4433      	add	r3, r6
 80032ec:	3310      	adds	r3, #16
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	462b      	mov	r3, r5
 80032f4:	4622      	mov	r2, r4
 80032f6:	f000 f8bd 	bl	8003474 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3301      	adds	r3, #1
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <_cbSendTaskList+0x8c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d3c6      	bcc.n	8003298 <_cbSendTaskList+0xc>
  }
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003314:	20012fac 	.word	0x20012fac
 8003318:	2001304c 	.word	0x2001304c

0800331c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800331c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003324:	f7fe fcd0 	bl	8001cc8 <xTaskGetTickCountFromISR>
 8003328:	4603      	mov	r3, r0
 800332a:	2200      	movs	r2, #0
 800332c:	469a      	mov	sl, r3
 800332e:	4693      	mov	fp, r2
 8003330:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003334:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	f04f 0a00 	mov.w	sl, #0
 8003340:	f04f 0b00 	mov.w	fp, #0
 8003344:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003348:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800334c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003350:	4652      	mov	r2, sl
 8003352:	465b      	mov	r3, fp
 8003354:	1a14      	subs	r4, r2, r0
 8003356:	eb63 0501 	sbc.w	r5, r3, r1
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	00ab      	lsls	r3, r5, #2
 8003364:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003368:	00a2      	lsls	r2, r4, #2
 800336a:	4614      	mov	r4, r2
 800336c:	461d      	mov	r5, r3
 800336e:	eb14 0800 	adds.w	r8, r4, r0
 8003372:	eb45 0901 	adc.w	r9, r5, r1
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338a:	4690      	mov	r8, r2
 800338c:	4699      	mov	r9, r3
 800338e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003392:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080033a4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80033b2:	2205      	movs	r2, #5
 80033b4:	492b      	ldr	r1, [pc, #172]	; (8003464 <SYSVIEW_AddTask+0xc0>)
 80033b6:	68b8      	ldr	r0, [r7, #8]
 80033b8:	f002 f986 	bl	80056c8 <memcmp>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d04b      	beq.n	800345a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80033c2:	4b29      	ldr	r3, [pc, #164]	; (8003468 <SYSVIEW_AddTask+0xc4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b07      	cmp	r3, #7
 80033c8:	d903      	bls.n	80033d2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80033ca:	4828      	ldr	r0, [pc, #160]	; (800346c <SYSVIEW_AddTask+0xc8>)
 80033cc:	f001 ffba 	bl	8005344 <SEGGER_SYSVIEW_Warn>
    return;
 80033d0:	e044      	b.n	800345c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80033d2:	4b25      	ldr	r3, [pc, #148]	; (8003468 <SYSVIEW_AddTask+0xc4>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4926      	ldr	r1, [pc, #152]	; (8003470 <SYSVIEW_AddTask+0xcc>)
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <SYSVIEW_AddTask+0xc4>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4921      	ldr	r1, [pc, #132]	; (8003470 <SYSVIEW_AddTask+0xcc>)
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	3304      	adds	r3, #4
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <SYSVIEW_AddTask+0xc4>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	491b      	ldr	r1, [pc, #108]	; (8003470 <SYSVIEW_AddTask+0xcc>)
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3308      	adds	r3, #8
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <SYSVIEW_AddTask+0xc4>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4916      	ldr	r1, [pc, #88]	; (8003470 <SYSVIEW_AddTask+0xcc>)
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	330c      	adds	r3, #12
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <SYSVIEW_AddTask+0xc4>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4910      	ldr	r1, [pc, #64]	; (8003470 <SYSVIEW_AddTask+0xcc>)
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3310      	adds	r3, #16
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <SYSVIEW_AddTask+0xc4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	4a08      	ldr	r2, [pc, #32]	; (8003468 <SYSVIEW_AddTask+0xc4>)
 8003446:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f80e 	bl	8003474 <SYSVIEW_SendTaskInfo>
 8003458:	e000      	b.n	800345c <SYSVIEW_AddTask+0xb8>
    return;
 800345a:	bf00      	nop

}
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	0800a14c 	.word	0x0800a14c
 8003468:	2001304c 	.word	0x2001304c
 800346c:	0800a154 	.word	0x0800a154
 8003470:	20012fac 	.word	0x20012fac

08003474 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	2214      	movs	r2, #20
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f002 f93a 	bl	8005704 <memset>
  TaskInfo.TaskID     = TaskID;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 fb55 	bl	8004b58 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80034ae:	bf00      	nop
 80034b0:	3728      	adds	r7, #40	; 0x28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	db0b      	blt.n	80034e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	f003 021f 	and.w	r2, r3, #31
 80034d0:	4907      	ldr	r1, [pc, #28]	; (80034f0 <__NVIC_EnableIRQ+0x38>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2001      	movs	r0, #1
 80034da:	fa00 f202 	lsl.w	r2, r0, r2
 80034de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000e100 	.word	0xe000e100

080034f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	6039      	str	r1, [r7, #0]
 80034fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	2b00      	cmp	r3, #0
 8003506:	db0a      	blt.n	800351e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	b2da      	uxtb	r2, r3
 800350c:	490c      	ldr	r1, [pc, #48]	; (8003540 <__NVIC_SetPriority+0x4c>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	0112      	lsls	r2, r2, #4
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	440b      	add	r3, r1
 8003518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800351c:	e00a      	b.n	8003534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4908      	ldr	r1, [pc, #32]	; (8003544 <__NVIC_SetPriority+0x50>)
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	3b04      	subs	r3, #4
 800352c:	0112      	lsls	r2, r2, #4
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	440b      	add	r3, r1
 8003532:	761a      	strb	r2, [r3, #24]
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000e100 	.word	0xe000e100
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800354e:	f001 ff55 	bl	80053fc <SEGGER_SYSVIEW_IsStarted>
 8003552:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800355a:	f001 f981 	bl	8004860 <SEGGER_SYSVIEW_Start>
  }
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003572:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <_cbOnUARTRx+0x3c>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d806      	bhi.n	8003588 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <_cbOnUARTRx+0x3c>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <_cbOnUARTRx+0x3c>)
 8003584:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003586:	e009      	b.n	800359c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003588:	f7ff ffde 	bl	8003548 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <_cbOnUARTRx+0x3c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4618      	mov	r0, r3
 8003592:	1dfb      	adds	r3, r7, #7
 8003594:	2201      	movs	r2, #1
 8003596:	4619      	mov	r1, r3
 8003598:	f000 fbea 	bl	8003d70 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800359c:	bf00      	nop
}
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	2000000c 	.word	0x2000000c

080035a8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <_cbOnUARTTx+0x5c>)
 80035b2:	785b      	ldrb	r3, [r3, #1]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d80f      	bhi.n	80035d8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <_cbOnUARTTx+0x5c>)
 80035ba:	785b      	ldrb	r3, [r3, #1]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <_cbOnUARTTx+0x60>)
 80035c0:	5c9a      	ldrb	r2, [r3, r2]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <_cbOnUARTTx+0x5c>)
 80035c8:	785b      	ldrb	r3, [r3, #1]
 80035ca:	3301      	adds	r3, #1
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <_cbOnUARTTx+0x5c>)
 80035d0:	705a      	strb	r2, [r3, #1]
    r = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]
    goto Done;
 80035d6:	e00f      	b.n	80035f8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <_cbOnUARTTx+0x5c>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa19 	bl	8003a18 <SEGGER_RTT_ReadUpBufferNoLock>
 80035e6:	4603      	mov	r3, r0
 80035e8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da02      	bge.n	80035f6 <_cbOnUARTTx+0x4e>
    r = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e000      	b.n	80035f8 <_cbOnUARTTx+0x50>
  }
Done:
 80035f6:	bf00      	nop
  return r;
 80035f8:	68fb      	ldr	r3, [r7, #12]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	2000000c 	.word	0x2000000c
 8003608:	0800a1cc 	.word	0x0800a1cc

0800360c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003614:	4a04      	ldr	r2, [pc, #16]	; (8003628 <SEGGER_UART_init+0x1c>)
 8003616:	4905      	ldr	r1, [pc, #20]	; (800362c <SEGGER_UART_init+0x20>)
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f863 	bl	80036e4 <HIF_UART_Init>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	08003569 	.word	0x08003569
 800362c:	080035a9 	.word	0x080035a9

08003630 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003636:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <USART2_IRQHandler+0x80>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d011      	beq.n	800366a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <USART2_IRQHandler+0x84>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 030b 	and.w	r3, r3, #11
 8003654:	2b00      	cmp	r3, #0
 8003656:	d108      	bne.n	800366a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003658:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <USART2_IRQHandler+0x88>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003660:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <USART2_IRQHandler+0x88>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	79fa      	ldrb	r2, [r7, #7]
 8003666:	4610      	mov	r0, r2
 8003668:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01a      	beq.n	80036aa <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <USART2_IRQHandler+0x8c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <USART2_IRQHandler+0x8c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	1dfa      	adds	r2, r7, #7
 8003682:	4610      	mov	r0, r2
 8003684:	4798      	blx	r3
 8003686:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800368e:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <USART2_IRQHandler+0x90>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <USART2_IRQHandler+0x90>)
 8003694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e006      	b.n	80036aa <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <USART2_IRQHandler+0x80>)
 800369e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80036a0:	79fa      	ldrb	r2, [r7, #7]
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <USART2_IRQHandler+0x84>)
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e000      	b.n	80036aa <USART2_IRQHandler+0x7a>
      return;
 80036a8:	bf00      	nop
    }
  }
}
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40004400 	.word	0x40004400
 80036b4:	40004404 	.word	0x40004404
 80036b8:	20013050 	.word	0x20013050
 80036bc:	20013054 	.word	0x20013054
 80036c0:	4000440c 	.word	0x4000440c

080036c4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80036ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d2:	6013      	str	r3, [r2, #0]
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	4000440c 	.word	0x4000440c

080036e4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80036f0:	4b2e      	ldr	r3, [pc, #184]	; (80037ac <HIF_UART_Init+0xc8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2d      	ldr	r2, [pc, #180]	; (80037ac <HIF_UART_Init+0xc8>)
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fa:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80036fc:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HIF_UART_Init+0xcc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <HIF_UART_Init+0xcc>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003708:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <HIF_UART_Init+0xd0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003714:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800371c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800371e:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <HIF_UART_Init+0xd0>)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HIF_UART_Init+0xd4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003730:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003738:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800373a:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <HIF_UART_Init+0xd4>)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003740:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <HIF_UART_Init+0xd8>)
 8003742:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003746:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HIF_UART_Init+0xdc>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800374e:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HIF_UART_Init+0xe0>)
 8003750:	2280      	movs	r2, #128	; 0x80
 8003752:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800375a:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <HIF_UART_Init+0xe4>)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003762:	3301      	adds	r3, #1
 8003764:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003772:	d302      	bcc.n	800377a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003774:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003778:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	4a11      	ldr	r2, [pc, #68]	; (80037cc <HIF_UART_Init+0xe8>)
 8003786:	b29b      	uxth	r3, r3
 8003788:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800378a:	4a11      	ldr	r2, [pc, #68]	; (80037d0 <HIF_UART_Init+0xec>)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003790:	4a10      	ldr	r2, [pc, #64]	; (80037d4 <HIF_UART_Init+0xf0>)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003796:	2106      	movs	r1, #6
 8003798:	2026      	movs	r0, #38	; 0x26
 800379a:	f7ff feab 	bl	80034f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800379e:	2026      	movs	r0, #38	; 0x26
 80037a0:	f7ff fe8a 	bl	80034b8 <__NVIC_EnableIRQ>
}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023840 	.word	0x40023840
 80037b0:	40023830 	.word	0x40023830
 80037b4:	40020020 	.word	0x40020020
 80037b8:	40020000 	.word	0x40020000
 80037bc:	4000440c 	.word	0x4000440c
 80037c0:	40004410 	.word	0x40004410
 80037c4:	40004414 	.word	0x40004414
 80037c8:	05f5e100 	.word	0x05f5e100
 80037cc:	40004408 	.word	0x40004408
 80037d0:	20013050 	.word	0x20013050
 80037d4:	20013054 	.word	0x20013054

080037d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <_DoInit+0x98>)
 80037e0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2203      	movs	r2, #3
 80037e6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2203      	movs	r2, #3
 80037ec:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a20      	ldr	r2, [pc, #128]	; (8003874 <_DoInit+0x9c>)
 80037f2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a20      	ldr	r2, [pc, #128]	; (8003878 <_DoInit+0xa0>)
 80037f8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003800:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a17      	ldr	r2, [pc, #92]	; (8003874 <_DoInit+0x9c>)
 8003818:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a17      	ldr	r2, [pc, #92]	; (800387c <_DoInit+0xa4>)
 800381e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2210      	movs	r2, #16
 8003824:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3307      	adds	r3, #7
 800383c:	4a10      	ldr	r2, [pc, #64]	; (8003880 <_DoInit+0xa8>)
 800383e:	6810      	ldr	r0, [r2, #0]
 8003840:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003842:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a0e      	ldr	r2, [pc, #56]	; (8003884 <_DoInit+0xac>)
 800384a:	6810      	ldr	r0, [r2, #0]
 800384c:	6018      	str	r0, [r3, #0]
 800384e:	8891      	ldrh	r1, [r2, #4]
 8003850:	7992      	ldrb	r2, [r2, #6]
 8003852:	8099      	strh	r1, [r3, #4]
 8003854:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003856:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003860:	f3bf 8f5f 	dmb	sy
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	20013058 	.word	0x20013058
 8003874:	0800a1a4 	.word	0x0800a1a4
 8003878:	20013100 	.word	0x20013100
 800387c:	20013500 	.word	0x20013500
 8003880:	0800a1b0 	.word	0x0800a1b0
 8003884:	0800a1b4 	.word	0x0800a1b4

08003888 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003894:	2300      	movs	r3, #0
 8003896:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d905      	bls.n	80038b8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
 80038b6:	e007      	b.n	80038c8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	69b9      	ldr	r1, [r7, #24]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	1acb      	subs	r3, r1, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	3b01      	subs	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d2:	4293      	cmp	r3, r2
 80038d4:	bf28      	it	cs
 80038d6:	4613      	movcs	r3, r2
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4293      	cmp	r3, r2
 80038e0:	bf28      	it	cs
 80038e2:	4613      	movcs	r3, r2
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80038f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	6978      	ldr	r0, [r7, #20]
 80038f6:	f001 fef7 	bl	80056e8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80038fa:	6a3a      	ldr	r2, [r7, #32]
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	4413      	add	r3, r2
 8003900:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	4413      	add	r3, r2
 8003908:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	4413      	add	r3, r2
 8003918:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	429a      	cmp	r2, r3
 8003922:	d101      	bne.n	8003928 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003924:	2300      	movs	r3, #0
 8003926:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003928:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1b2      	bne.n	800389e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003938:	6a3b      	ldr	r3, [r7, #32]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3728      	adds	r7, #40	; 0x28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003942:	b580      	push	{r7, lr}
 8003944:	b088      	sub	sp, #32
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d911      	bls.n	800398a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	6938      	ldr	r0, [r7, #16]
 8003976:	f001 feb7 	bl	80056e8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800397a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	441a      	add	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003988:	e01f      	b.n	80039ca <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	4413      	add	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	6938      	ldr	r0, [r7, #16]
 800399e:	f001 fea3 	bl	80056e8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	4413      	add	r3, r2
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4619      	mov	r1, r3
 80039ba:	6938      	ldr	r0, [r7, #16]
 80039bc:	f001 fe94 	bl	80056e8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039c0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	60da      	str	r2, [r3, #12]
}
 80039ca:	bf00      	nop
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80039d2:	b480      	push	{r7}
 80039d4:	b087      	sub	sp, #28
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d808      	bhi.n	8003a00 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad2      	subs	r2, r2, r3
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	3b01      	subs	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e004      	b.n	8003a0a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003a0a:	697b      	ldr	r3, [r7, #20]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08c      	sub	sp, #48	; 0x30
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003a24:	4b3e      	ldr	r3, [pc, #248]	; (8003b20 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003a26:	623b      	str	r3, [r7, #32]
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003a32:	f7ff fed1 	bl	80037d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4a37      	ldr	r2, [pc, #220]	; (8003b20 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003a44:	4413      	add	r3, r2
 8003a46:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d92b      	bls.n	8003abc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4293      	cmp	r3, r2
 8003a74:	bf28      	it	cs
 8003a76:	4613      	movcs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	4413      	add	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	6939      	ldr	r1, [r7, #16]
 8003a88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a8a:	f001 fe2d 	bl	80056e8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	4413      	add	r3, r2
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	4413      	add	r3, r2
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d101      	bne.n	8003abc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bf28      	it	cs
 8003acc:	4613      	movcs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d019      	beq.n	8003b0a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	4413      	add	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	6939      	ldr	r1, [r7, #16]
 8003ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ae6:	f001 fdff 	bl	80056e8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	4413      	add	r3, r2
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	4413      	add	r3, r2
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	4413      	add	r3, r2
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b14:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3730      	adds	r7, #48	; 0x30
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20013058 	.word	0x20013058

08003b24 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003b30:	4b3e      	ldr	r3, [pc, #248]	; (8003c2c <SEGGER_RTT_ReadNoLock+0x108>)
 8003b32:	623b      	str	r3, [r7, #32]
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <SEGGER_RTT_ReadNoLock+0x1e>
 8003b3e:	f7ff fe4b 	bl	80037d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	3360      	adds	r3, #96	; 0x60
 8003b4e:	4a37      	ldr	r2, [pc, #220]	; (8003c2c <SEGGER_RTT_ReadNoLock+0x108>)
 8003b50:	4413      	add	r3, r2
 8003b52:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d92b      	bls.n	8003bc8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	bf28      	it	cs
 8003b82:	4613      	movcs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	4413      	add	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	6939      	ldr	r1, [r7, #16]
 8003b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b96:	f001 fda7 	bl	80056e8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d101      	bne.n	8003bc8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	bf28      	it	cs
 8003bd8:	4613      	movcs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d019      	beq.n	8003c16 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	4413      	add	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	6939      	ldr	r1, [r7, #16]
 8003bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bf2:	f001 fd79 	bl	80056e8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4413      	add	r3, r2
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4413      	add	r3, r2
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c20:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3730      	adds	r7, #48	; 0x30
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20013058 	.word	0x20013058

08003c30 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4613      	mov	r3, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	3360      	adds	r3, #96	; 0x60
 8003c4c:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d029      	beq.n	8003cae <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d82e      	bhi.n	8003cbc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d013      	beq.n	8003c8e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003c66:	e029      	b.n	8003cbc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003c68:	6978      	ldr	r0, [r7, #20]
 8003c6a:	f7ff feb2 	bl	80039d2 <_GetAvailWriteSpace>
 8003c6e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d202      	bcs.n	8003c7e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003c7c:	e021      	b.n	8003cc2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	69b9      	ldr	r1, [r7, #24]
 8003c86:	6978      	ldr	r0, [r7, #20]
 8003c88:	f7ff fe5b 	bl	8003942 <_WriteNoCheck>
    break;
 8003c8c:	e019      	b.n	8003cc2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7ff fe9f 	bl	80039d2 <_GetAvailWriteSpace>
 8003c94:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	bf28      	it	cs
 8003c9e:	4613      	movcs	r3, r2
 8003ca0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	69b9      	ldr	r1, [r7, #24]
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff fe4b 	bl	8003942 <_WriteNoCheck>
    break;
 8003cac:	e009      	b.n	8003cc2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	69b9      	ldr	r1, [r7, #24]
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f7ff fde8 	bl	8003888 <_WriteBlocking>
 8003cb8:	61f8      	str	r0, [r7, #28]
    break;
 8003cba:	e002      	b.n	8003cc2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
    break;
 8003cc0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20013058 	.word	0x20013058

08003cd0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <SEGGER_RTT_WriteNoLock+0x9c>)
 8003cee:	4413      	add	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d029      	beq.n	8003d4e <SEGGER_RTT_WriteNoLock+0x7e>
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d82e      	bhi.n	8003d5c <SEGGER_RTT_WriteNoLock+0x8c>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <SEGGER_RTT_WriteNoLock+0x38>
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d013      	beq.n	8003d2e <SEGGER_RTT_WriteNoLock+0x5e>
 8003d06:	e029      	b.n	8003d5c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003d08:	6978      	ldr	r0, [r7, #20]
 8003d0a:	f7ff fe62 	bl	80039d2 <_GetAvailWriteSpace>
 8003d0e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d202      	bcs.n	8003d1e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003d1c:	e021      	b.n	8003d62 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	69b9      	ldr	r1, [r7, #24]
 8003d26:	6978      	ldr	r0, [r7, #20]
 8003d28:	f7ff fe0b 	bl	8003942 <_WriteNoCheck>
    break;
 8003d2c:	e019      	b.n	8003d62 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f7ff fe4f 	bl	80039d2 <_GetAvailWriteSpace>
 8003d34:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	bf28      	it	cs
 8003d3e:	4613      	movcs	r3, r2
 8003d40:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	69b9      	ldr	r1, [r7, #24]
 8003d46:	6978      	ldr	r0, [r7, #20]
 8003d48:	f7ff fdfb 	bl	8003942 <_WriteNoCheck>
    break;
 8003d4c:	e009      	b.n	8003d62 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	69b9      	ldr	r1, [r7, #24]
 8003d52:	6978      	ldr	r0, [r7, #20]
 8003d54:	f7ff fd98 	bl	8003888 <_WriteBlocking>
 8003d58:	61f8      	str	r0, [r7, #28]
    break;
 8003d5a:	e002      	b.n	8003d62 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61fb      	str	r3, [r7, #28]
    break;
 8003d60:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003d62:	69fb      	ldr	r3, [r7, #28]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20013058 	.word	0x20013058

08003d70 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003d7c:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003d8a:	f7ff fd25 	bl	80037d8 <_DoInit>
  SEGGER_RTT_LOCK();
 8003d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d92:	f04f 0120 	mov.w	r1, #32
 8003d96:	f381 8811 	msr	BASEPRI, r1
 8003d9a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff ff45 	bl	8003c30 <SEGGER_RTT_WriteDownBufferNoLock>
 8003da6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003dae:	697b      	ldr	r3, [r7, #20]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20013058 	.word	0x20013058

08003dbc <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <SEGGER_RTT_Write+0x48>)
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <SEGGER_RTT_Write+0x1e>
 8003dd6:	f7ff fcff 	bl	80037d8 <_DoInit>
  SEGGER_RTT_LOCK();
 8003dda:	f3ef 8311 	mrs	r3, BASEPRI
 8003dde:	f04f 0120 	mov.w	r1, #32
 8003de2:	f381 8811 	msr	BASEPRI, r1
 8003de6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff ff6f 	bl	8003cd0 <SEGGER_RTT_WriteNoLock>
 8003df2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003dfa:	697b      	ldr	r3, [r7, #20]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20013058 	.word	0x20013058

08003e08 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e16:	4b3d      	ldr	r3, [pc, #244]	; (8003f0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003e24:	f7ff fcd8 	bl	80037d8 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e28:	f3ef 8311 	mrs	r3, BASEPRI
 8003e2c:	f04f 0120 	mov.w	r1, #32
 8003e30:	f381 8811 	msr	BASEPRI, r1
 8003e34:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e36:	4b35      	ldr	r3, [pc, #212]	; (8003f0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e38:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003e3e:	6939      	ldr	r1, [r7, #16]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	4613      	mov	r3, r2
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4413      	add	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3304      	adds	r3, #4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	dbeb      	blt.n	8003e3e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003e66:	e000      	b.n	8003e6a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003e68:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	da3f      	bge.n	8003ef4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003e74:	6939      	ldr	r1, [r7, #16]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e88:	6939      	ldr	r1, [r7, #16]
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	440b      	add	r3, r1
 8003e98:	3304      	adds	r3, #4
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003e9e:	6939      	ldr	r1, [r7, #16]
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	440b      	add	r3, r1
 8003eac:	3320      	adds	r3, #32
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003eb2:	6939      	ldr	r1, [r7, #16]
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3328      	adds	r3, #40	; 0x28
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003ec6:	6939      	ldr	r1, [r7, #16]
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3324      	adds	r3, #36	; 0x24
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003eda:	6939      	ldr	r1, [r7, #16]
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4413      	add	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	440b      	add	r3, r1
 8003ee8:	332c      	adds	r3, #44	; 0x2c
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003eee:	f3bf 8f5f 	dmb	sy
 8003ef2:	e002      	b.n	8003efa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ef8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003f00:	69fb      	ldr	r3, [r7, #28]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20013058 	.word	0x20013058

08003f10 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003f1e:	4b33      	ldr	r3, [pc, #204]	; (8003fec <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003f2c:	f7ff fc54 	bl	80037d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f30:	4b2e      	ldr	r3, [pc, #184]	; (8003fec <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003f32:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d24d      	bcs.n	8003fdc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003f40:	f3ef 8311 	mrs	r3, BASEPRI
 8003f44:	f04f 0120 	mov.w	r1, #32
 8003f48:	f381 8811 	msr	BASEPRI, r1
 8003f4c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d031      	beq.n	8003fb8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003f54:	6979      	ldr	r1, [r7, #20]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4413      	add	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	440b      	add	r3, r1
 8003f62:	3360      	adds	r3, #96	; 0x60
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	4413      	add	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	440b      	add	r3, r1
 8003f76:	3364      	adds	r3, #100	; 0x64
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003f7c:	6979      	ldr	r1, [r7, #20]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	440b      	add	r3, r1
 8003f8a:	3368      	adds	r3, #104	; 0x68
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003f90:	6979      	ldr	r1, [r7, #20]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3370      	adds	r3, #112	; 0x70
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	440b      	add	r3, r1
 8003fb2:	336c      	adds	r3, #108	; 0x6c
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4413      	add	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3374      	adds	r3, #116	; 0x74
 8003fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fca:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fcc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	e002      	b.n	8003fe2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fe0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20013058 	.word	0x20013058

08003ff0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004000:	e002      	b.n	8004008 <_EncodeStr+0x18>
    Len++;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	3301      	adds	r3, #1
 8004006:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4413      	add	r3, r2
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f6      	bne.n	8004002 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d901      	bls.n	8004020 <_EncodeStr+0x30>
    Len = Limit;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2bfe      	cmp	r3, #254	; 0xfe
 8004024:	d806      	bhi.n	8004034 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	60fa      	str	r2, [r7, #12]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e011      	b.n	8004058 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	60fa      	str	r2, [r7, #12]
 800403a:	22ff      	movs	r2, #255	; 0xff
 800403c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	60fa      	str	r2, [r7, #12]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	0a19      	lsrs	r1, r3, #8
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	60fa      	str	r2, [r7, #12]
 8004054:	b2ca      	uxtb	r2, r1
 8004056:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800405c:	e00a      	b.n	8004074 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	1c53      	adds	r3, r2, #1
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	60f9      	str	r1, [r7, #12]
 800406a:	7812      	ldrb	r2, [r2, #0]
 800406c:	701a      	strb	r2, [r3, #0]
    n++;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	3301      	adds	r3, #1
 8004072:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	429a      	cmp	r2, r3
 800407a:	d3f0      	bcc.n	800405e <_EncodeStr+0x6e>
  }
  return pPayload;
 800407c:	68fb      	ldr	r3, [r7, #12]
}
 800407e:	4618      	mov	r0, r3
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3304      	adds	r3, #4
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040aa:	4b36      	ldr	r3, [pc, #216]	; (8004184 <_HandleIncomingPacket+0xe0>)
 80040ac:	7e1b      	ldrb	r3, [r3, #24]
 80040ae:	4618      	mov	r0, r3
 80040b0:	1cfb      	adds	r3, r7, #3
 80040b2:	2201      	movs	r2, #1
 80040b4:	4619      	mov	r1, r3
 80040b6:	f7ff fd35 	bl	8003b24 <SEGGER_RTT_ReadNoLock>
 80040ba:	4603      	mov	r3, r0
 80040bc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	dd54      	ble.n	800416e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	2b80      	cmp	r3, #128	; 0x80
 80040c8:	d032      	beq.n	8004130 <_HandleIncomingPacket+0x8c>
 80040ca:	2b80      	cmp	r3, #128	; 0x80
 80040cc:	dc42      	bgt.n	8004154 <_HandleIncomingPacket+0xb0>
 80040ce:	2b07      	cmp	r3, #7
 80040d0:	dc16      	bgt.n	8004100 <_HandleIncomingPacket+0x5c>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	dd3e      	ble.n	8004154 <_HandleIncomingPacket+0xb0>
 80040d6:	3b01      	subs	r3, #1
 80040d8:	2b06      	cmp	r3, #6
 80040da:	d83b      	bhi.n	8004154 <_HandleIncomingPacket+0xb0>
 80040dc:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <_HandleIncomingPacket+0x40>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	08004107 	.word	0x08004107
 80040e8:	0800410d 	.word	0x0800410d
 80040ec:	08004113 	.word	0x08004113
 80040f0:	08004119 	.word	0x08004119
 80040f4:	0800411f 	.word	0x0800411f
 80040f8:	08004125 	.word	0x08004125
 80040fc:	0800412b 	.word	0x0800412b
 8004100:	2b7f      	cmp	r3, #127	; 0x7f
 8004102:	d036      	beq.n	8004172 <_HandleIncomingPacket+0xce>
 8004104:	e026      	b.n	8004154 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004106:	f000 fbab 	bl	8004860 <SEGGER_SYSVIEW_Start>
      break;
 800410a:	e037      	b.n	800417c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800410c:	f000 fc64 	bl	80049d8 <SEGGER_SYSVIEW_Stop>
      break;
 8004110:	e034      	b.n	800417c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004112:	f000 fe3d 	bl	8004d90 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004116:	e031      	b.n	800417c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004118:	f000 fe02 	bl	8004d20 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800411c:	e02e      	b.n	800417c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800411e:	f000 fc81 	bl	8004a24 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004122:	e02b      	b.n	800417c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004124:	f001 f8d0 	bl	80052c8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004128:	e028      	b.n	800417c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800412a:	f001 f8af 	bl	800528c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800412e:	e025      	b.n	800417c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004130:	4b14      	ldr	r3, [pc, #80]	; (8004184 <_HandleIncomingPacket+0xe0>)
 8004132:	7e1b      	ldrb	r3, [r3, #24]
 8004134:	4618      	mov	r0, r3
 8004136:	1cfb      	adds	r3, r7, #3
 8004138:	2201      	movs	r2, #1
 800413a:	4619      	mov	r1, r3
 800413c:	f7ff fcf2 	bl	8003b24 <SEGGER_RTT_ReadNoLock>
 8004140:	4603      	mov	r3, r0
 8004142:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	dd15      	ble.n	8004176 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	4618      	mov	r0, r3
 800414e:	f001 f81d 	bl	800518c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004152:	e010      	b.n	8004176 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	b25b      	sxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	da0e      	bge.n	800417a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <_HandleIncomingPacket+0xe0>)
 800415e:	7e1b      	ldrb	r3, [r3, #24]
 8004160:	4618      	mov	r0, r3
 8004162:	1cfb      	adds	r3, r7, #3
 8004164:	2201      	movs	r2, #1
 8004166:	4619      	mov	r1, r3
 8004168:	f7ff fcdc 	bl	8003b24 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800416c:	e005      	b.n	800417a <_HandleIncomingPacket+0xd6>
    }
  }
 800416e:	bf00      	nop
 8004170:	e004      	b.n	800417c <_HandleIncomingPacket+0xd8>
      break;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <_HandleIncomingPacket+0xd8>
      break;
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <_HandleIncomingPacket+0xd8>
      break;
 800417a:	bf00      	nop
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20014518 	.word	0x20014518

08004188 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b08c      	sub	sp, #48	; 0x30
 800418c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800418e:	2301      	movs	r3, #1
 8004190:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	3301      	adds	r3, #1
 8004196:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419c:	4b32      	ldr	r3, [pc, #200]	; (8004268 <_TrySendOverflowPacket+0xe0>)
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041a2:	e00b      	b.n	80041bc <_TrySendOverflowPacket+0x34>
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	1c59      	adds	r1, r3, #1
 80041ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80041ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	09db      	lsrs	r3, r3, #7
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80041bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041be:	2b7f      	cmp	r3, #127	; 0x7f
 80041c0:	d8f0      	bhi.n	80041a4 <_TrySendOverflowPacket+0x1c>
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041d2:	4b26      	ldr	r3, [pc, #152]	; (800426c <_TrySendOverflowPacket+0xe4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80041d8:	4b23      	ldr	r3, [pc, #140]	; (8004268 <_TrySendOverflowPacket+0xe0>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	623b      	str	r3, [r7, #32]
 80041ea:	e00b      	b.n	8004204 <_TrySendOverflowPacket+0x7c>
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	1c59      	adds	r1, r3, #1
 80041f4:	6279      	str	r1, [r7, #36]	; 0x24
 80041f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	09db      	lsrs	r3, r3, #7
 8004202:	623b      	str	r3, [r7, #32]
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	2b7f      	cmp	r3, #127	; 0x7f
 8004208:	d8f0      	bhi.n	80041ec <_TrySendOverflowPacket+0x64>
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	627a      	str	r2, [r7, #36]	; 0x24
 8004210:	6a3a      	ldr	r2, [r7, #32]
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <_TrySendOverflowPacket+0xe0>)
 800421c:	785b      	ldrb	r3, [r3, #1]
 800421e:	4618      	mov	r0, r3
 8004220:	1d3b      	adds	r3, r7, #4
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	461a      	mov	r2, r3
 8004228:	1d3b      	adds	r3, r7, #4
 800422a:	4619      	mov	r1, r3
 800422c:	f7fb ffd8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004230:	4603      	mov	r3, r0
 8004232:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004234:	f7ff fa46 	bl	80036c4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800423e:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <_TrySendOverflowPacket+0xe0>)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <_TrySendOverflowPacket+0xe0>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	3b01      	subs	r3, #1
 800424a:	b2da      	uxtb	r2, r3
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <_TrySendOverflowPacket+0xe0>)
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	e004      	b.n	800425c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <_TrySendOverflowPacket+0xe0>)
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	3301      	adds	r3, #1
 8004258:	4a03      	ldr	r2, [pc, #12]	; (8004268 <_TrySendOverflowPacket+0xe0>)
 800425a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800425c:	693b      	ldr	r3, [r7, #16]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3730      	adds	r7, #48	; 0x30
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20014518 	.word	0x20014518
 800426c:	e0001004 	.word	0xe0001004

08004270 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800427c:	4b6d      	ldr	r3, [pc, #436]	; (8004434 <_SendPacket+0x1c4>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d010      	beq.n	80042a6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004284:	4b6b      	ldr	r3, [pc, #428]	; (8004434 <_SendPacket+0x1c4>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80a5 	beq.w	80043d8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800428e:	4b69      	ldr	r3, [pc, #420]	; (8004434 <_SendPacket+0x1c4>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d109      	bne.n	80042aa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004296:	f7ff ff77 	bl	8004188 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800429a:	4b66      	ldr	r3, [pc, #408]	; (8004434 <_SendPacket+0x1c4>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	f040 809c 	bne.w	80043dc <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80042a4:	e001      	b.n	80042aa <_SendPacket+0x3a>
    goto Send;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <_SendPacket+0x3c>
Send:
 80042aa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b1f      	cmp	r3, #31
 80042b0:	d809      	bhi.n	80042c6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80042b2:	4b60      	ldr	r3, [pc, #384]	; (8004434 <_SendPacket+0x1c4>)
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f040 808d 	bne.w	80043e0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b17      	cmp	r3, #23
 80042ca:	d807      	bhi.n	80042dc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e03d      	b.n	8004358 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b7f      	cmp	r3, #127	; 0x7f
 80042e8:	d912      	bls.n	8004310 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	09da      	lsrs	r2, r3, #7
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	3a01      	subs	r2, #1
 8004302:	60fa      	str	r2, [r7, #12]
 8004304:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	e006      	b.n	800431e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b7f      	cmp	r3, #127	; 0x7f
 8004322:	d912      	bls.n	800434a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	09da      	lsrs	r2, r3, #7
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3b01      	subs	r3, #1
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	3a01      	subs	r2, #1
 800433c:	60fa      	str	r2, [r7, #12]
 800433e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	e006      	b.n	8004358 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3b01      	subs	r3, #1
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	b2da      	uxtb	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004358:	4b37      	ldr	r3, [pc, #220]	; (8004438 <_SendPacket+0x1c8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800435e:	4b35      	ldr	r3, [pc, #212]	; (8004434 <_SendPacket+0x1c4>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	623b      	str	r3, [r7, #32]
 8004370:	e00b      	b.n	800438a <_SendPacket+0x11a>
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	1c59      	adds	r1, r3, #1
 800437a:	6279      	str	r1, [r7, #36]	; 0x24
 800437c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	09db      	lsrs	r3, r3, #7
 8004388:	623b      	str	r3, [r7, #32]
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2b7f      	cmp	r3, #127	; 0x7f
 800438e:	d8f0      	bhi.n	8004372 <_SendPacket+0x102>
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	627a      	str	r2, [r7, #36]	; 0x24
 8004396:	6a3a      	ldr	r2, [r7, #32]
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80043a0:	4b24      	ldr	r3, [pc, #144]	; (8004434 <_SendPacket+0x1c4>)
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	4618      	mov	r0, r3
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	68f9      	ldr	r1, [r7, #12]
 80043b0:	f7fb ff16 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043b4:	4603      	mov	r3, r0
 80043b6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80043b8:	f7ff f984 	bl	80036c4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043c2:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <_SendPacket+0x1c4>)
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	60d3      	str	r3, [r2, #12]
 80043c8:	e00b      	b.n	80043e2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <_SendPacket+0x1c4>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	3301      	adds	r3, #1
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	4b18      	ldr	r3, [pc, #96]	; (8004434 <_SendPacket+0x1c4>)
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e004      	b.n	80043e2 <_SendPacket+0x172>
    goto SendDone;
 80043d8:	bf00      	nop
 80043da:	e002      	b.n	80043e2 <_SendPacket+0x172>
      goto SendDone;
 80043dc:	bf00      	nop
 80043de:	e000      	b.n	80043e2 <_SendPacket+0x172>
      goto SendDone;
 80043e0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <_SendPacket+0x1c4>)
 80043e4:	7e1b      	ldrb	r3, [r3, #24]
 80043e6:	4619      	mov	r1, r3
 80043e8:	4a14      	ldr	r2, [pc, #80]	; (800443c <_SendPacket+0x1cc>)
 80043ea:	460b      	mov	r3, r1
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	440b      	add	r3, r1
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	336c      	adds	r3, #108	; 0x6c
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <_SendPacket+0x1c4>)
 80043fa:	7e1b      	ldrb	r3, [r3, #24]
 80043fc:	4618      	mov	r0, r3
 80043fe:	490f      	ldr	r1, [pc, #60]	; (800443c <_SendPacket+0x1cc>)
 8004400:	4603      	mov	r3, r0
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	4403      	add	r3, r0
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	440b      	add	r3, r1
 800440a:	3370      	adds	r3, #112	; 0x70
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d00b      	beq.n	800442a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004412:	4b08      	ldr	r3, [pc, #32]	; (8004434 <_SendPacket+0x1c4>)
 8004414:	789b      	ldrb	r3, [r3, #2]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d107      	bne.n	800442a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <_SendPacket+0x1c4>)
 800441c:	2201      	movs	r2, #1
 800441e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004420:	f7ff fe40 	bl	80040a4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <_SendPacket+0x1c4>)
 8004426:	2200      	movs	r2, #0
 8004428:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800442a:	bf00      	nop
 800442c:	3728      	adds	r7, #40	; 0x28
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20014518 	.word	0x20014518
 8004438:	e0001004 	.word	0xe0001004
 800443c:	20013058 	.word	0x20013058

08004440 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800444e:	2300      	movs	r3, #0
 8004450:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004454:	4917      	ldr	r1, [pc, #92]	; (80044b4 <SEGGER_SYSVIEW_Init+0x74>)
 8004456:	4818      	ldr	r0, [pc, #96]	; (80044b8 <SEGGER_SYSVIEW_Init+0x78>)
 8004458:	f7ff fcd6 	bl	8003e08 <SEGGER_RTT_AllocUpBuffer>
 800445c:	4603      	mov	r3, r0
 800445e:	b2da      	uxtb	r2, r3
 8004460:	4b16      	ldr	r3, [pc, #88]	; (80044bc <SEGGER_SYSVIEW_Init+0x7c>)
 8004462:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004464:	4b15      	ldr	r3, [pc, #84]	; (80044bc <SEGGER_SYSVIEW_Init+0x7c>)
 8004466:	785a      	ldrb	r2, [r3, #1]
 8004468:	4b14      	ldr	r3, [pc, #80]	; (80044bc <SEGGER_SYSVIEW_Init+0x7c>)
 800446a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800446c:	4b13      	ldr	r3, [pc, #76]	; (80044bc <SEGGER_SYSVIEW_Init+0x7c>)
 800446e:	7e1b      	ldrb	r3, [r3, #24]
 8004470:	4618      	mov	r0, r3
 8004472:	2300      	movs	r3, #0
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	2308      	movs	r3, #8
 8004478:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <SEGGER_SYSVIEW_Init+0x80>)
 800447a:	490f      	ldr	r1, [pc, #60]	; (80044b8 <SEGGER_SYSVIEW_Init+0x78>)
 800447c:	f7ff fd48 	bl	8003f10 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004480:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <SEGGER_SYSVIEW_Init+0x7c>)
 8004482:	2200      	movs	r2, #0
 8004484:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004486:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <SEGGER_SYSVIEW_Init+0x84>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a0c      	ldr	r2, [pc, #48]	; (80044bc <SEGGER_SYSVIEW_Init+0x7c>)
 800448c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800448e:	4a0b      	ldr	r2, [pc, #44]	; (80044bc <SEGGER_SYSVIEW_Init+0x7c>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004494:	4a09      	ldr	r2, [pc, #36]	; (80044bc <SEGGER_SYSVIEW_Init+0x7c>)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800449a:	4a08      	ldr	r2, [pc, #32]	; (80044bc <SEGGER_SYSVIEW_Init+0x7c>)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80044a0:	4a06      	ldr	r2, [pc, #24]	; (80044bc <SEGGER_SYSVIEW_Init+0x7c>)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <SEGGER_SYSVIEW_Init+0x7c>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20013510 	.word	0x20013510
 80044b8:	0800a1bc 	.word	0x0800a1bc
 80044bc:	20014518 	.word	0x20014518
 80044c0:	20014510 	.word	0x20014510
 80044c4:	e0001004 	.word	0xe0001004

080044c8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80044d0:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6113      	str	r3, [r2, #16]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20014518 	.word	0x20014518

080044e8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80044f0:	f3ef 8311 	mrs	r3, BASEPRI
 80044f4:	f04f 0120 	mov.w	r1, #32
 80044f8:	f381 8811 	msr	BASEPRI, r1
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	4808      	ldr	r0, [pc, #32]	; (8004520 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004500:	f7ff fdc3 	bl	800408a <_PreparePacket>
 8004504:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	68b8      	ldr	r0, [r7, #8]
 800450c:	f7ff feb0 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f383 8811 	msr	BASEPRI, r3
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20014548 	.word	0x20014548

08004524 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800452e:	f3ef 8311 	mrs	r3, BASEPRI
 8004532:	f04f 0120 	mov.w	r1, #32
 8004536:	f381 8811 	msr	BASEPRI, r1
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	4816      	ldr	r0, [pc, #88]	; (8004598 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800453e:	f7ff fda4 	bl	800408a <_PreparePacket>
 8004542:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	e00b      	b.n	800456a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	1c59      	adds	r1, r3, #1
 800455a:	61f9      	str	r1, [r7, #28]
 800455c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	09db      	lsrs	r3, r3, #7
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b7f      	cmp	r3, #127	; 0x7f
 800456e:	d8f0      	bhi.n	8004552 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	61fa      	str	r2, [r7, #28]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68f9      	ldr	r1, [r7, #12]
 8004584:	6938      	ldr	r0, [r7, #16]
 8004586:	f7ff fe73 	bl	8004270 <_SendPacket>
  RECORD_END();
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f383 8811 	msr	BASEPRI, r3
}
 8004590:	bf00      	nop
 8004592:	3720      	adds	r7, #32
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	20014548 	.word	0x20014548

0800459c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800459c:	b580      	push	{r7, lr}
 800459e:	b08c      	sub	sp, #48	; 0x30
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80045a8:	f3ef 8311 	mrs	r3, BASEPRI
 80045ac:	f04f 0120 	mov.w	r1, #32
 80045b0:	f381 8811 	msr	BASEPRI, r1
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	4825      	ldr	r0, [pc, #148]	; (800464c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80045b8:	f7ff fd67 	bl	800408a <_PreparePacket>
 80045bc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ca:	e00b      	b.n	80045e4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	1c59      	adds	r1, r3, #1
 80045d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	09db      	lsrs	r3, r3, #7
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	2b7f      	cmp	r3, #127	; 0x7f
 80045e8:	d8f0      	bhi.n	80045cc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	623b      	str	r3, [r7, #32]
 8004602:	e00b      	b.n	800461c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	b2da      	uxtb	r2, r3
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	1c59      	adds	r1, r3, #1
 800460c:	6279      	str	r1, [r7, #36]	; 0x24
 800460e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	09db      	lsrs	r3, r3, #7
 800461a:	623b      	str	r3, [r7, #32]
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	2b7f      	cmp	r3, #127	; 0x7f
 8004620:	d8f0      	bhi.n	8004604 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	627a      	str	r2, [r7, #36]	; 0x24
 8004628:	6a3a      	ldr	r2, [r7, #32]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	6979      	ldr	r1, [r7, #20]
 8004636:	69b8      	ldr	r0, [r7, #24]
 8004638:	f7ff fe1a 	bl	8004270 <_SendPacket>
  RECORD_END();
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f383 8811 	msr	BASEPRI, r3
}
 8004642:	bf00      	nop
 8004644:	3730      	adds	r7, #48	; 0x30
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20014548 	.word	0x20014548

08004650 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	; 0x38
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800465e:	f3ef 8311 	mrs	r3, BASEPRI
 8004662:	f04f 0120 	mov.w	r1, #32
 8004666:	f381 8811 	msr	BASEPRI, r1
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	4832      	ldr	r0, [pc, #200]	; (8004738 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800466e:	f7ff fd0c 	bl	800408a <_PreparePacket>
 8004672:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	633b      	str	r3, [r7, #48]	; 0x30
 8004680:	e00b      	b.n	800469a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	b2da      	uxtb	r2, r3
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004688:	1c59      	adds	r1, r3, #1
 800468a:	6379      	str	r1, [r7, #52]	; 0x34
 800468c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	09db      	lsrs	r3, r3, #7
 8004698:	633b      	str	r3, [r7, #48]	; 0x30
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	2b7f      	cmp	r3, #127	; 0x7f
 800469e:	d8f0      	bhi.n	8004682 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	637a      	str	r2, [r7, #52]	; 0x34
 80046a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b8:	e00b      	b.n	80046d2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	1c59      	adds	r1, r3, #1
 80046c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	09db      	lsrs	r3, r3, #7
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	2b7f      	cmp	r3, #127	; 0x7f
 80046d6:	d8f0      	bhi.n	80046ba <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	e00b      	b.n	800470a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	1c59      	adds	r1, r3, #1
 80046fa:	6279      	str	r1, [r7, #36]	; 0x24
 80046fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	09db      	lsrs	r3, r3, #7
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	2b7f      	cmp	r3, #127	; 0x7f
 800470e:	d8f0      	bhi.n	80046f2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	627a      	str	r2, [r7, #36]	; 0x24
 8004716:	6a3a      	ldr	r2, [r7, #32]
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	6979      	ldr	r1, [r7, #20]
 8004724:	69b8      	ldr	r0, [r7, #24]
 8004726:	f7ff fda3 	bl	8004270 <_SendPacket>
  RECORD_END();
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f383 8811 	msr	BASEPRI, r3
}
 8004730:	bf00      	nop
 8004732:	3738      	adds	r7, #56	; 0x38
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20014548 	.word	0x20014548

0800473c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b090      	sub	sp, #64	; 0x40
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800474a:	f3ef 8311 	mrs	r3, BASEPRI
 800474e:	f04f 0120 	mov.w	r1, #32
 8004752:	f381 8811 	msr	BASEPRI, r1
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	4840      	ldr	r0, [pc, #256]	; (800485c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800475a:	f7ff fc96 	bl	800408a <_PreparePacket>
 800475e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	63bb      	str	r3, [r7, #56]	; 0x38
 800476c:	e00b      	b.n	8004786 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	b2da      	uxtb	r2, r3
 8004772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004774:	1c59      	adds	r1, r3, #1
 8004776:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004778:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004782:	09db      	lsrs	r3, r3, #7
 8004784:	63bb      	str	r3, [r7, #56]	; 0x38
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	2b7f      	cmp	r3, #127	; 0x7f
 800478a:	d8f0      	bhi.n	800476e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800478c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	633b      	str	r3, [r7, #48]	; 0x30
 80047a4:	e00b      	b.n	80047be <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ac:	1c59      	adds	r1, r3, #1
 80047ae:	6379      	str	r1, [r7, #52]	; 0x34
 80047b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	09db      	lsrs	r3, r3, #7
 80047bc:	633b      	str	r3, [r7, #48]	; 0x30
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	2b7f      	cmp	r3, #127	; 0x7f
 80047c2:	d8f0      	bhi.n	80047a6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	637a      	str	r2, [r7, #52]	; 0x34
 80047ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
 80047dc:	e00b      	b.n	80047f6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	1c59      	adds	r1, r3, #1
 80047e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80047e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	09db      	lsrs	r3, r3, #7
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	2b7f      	cmp	r3, #127	; 0x7f
 80047fa:	d8f0      	bhi.n	80047de <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
 8004810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004812:	623b      	str	r3, [r7, #32]
 8004814:	e00b      	b.n	800482e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	1c59      	adds	r1, r3, #1
 800481e:	6279      	str	r1, [r7, #36]	; 0x24
 8004820:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	09db      	lsrs	r3, r3, #7
 800482c:	623b      	str	r3, [r7, #32]
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2b7f      	cmp	r3, #127	; 0x7f
 8004832:	d8f0      	bhi.n	8004816 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	627a      	str	r2, [r7, #36]	; 0x24
 800483a:	6a3a      	ldr	r2, [r7, #32]
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	6979      	ldr	r1, [r7, #20]
 8004848:	69b8      	ldr	r0, [r7, #24]
 800484a:	f7ff fd11 	bl	8004270 <_SendPacket>
  RECORD_END();
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f383 8811 	msr	BASEPRI, r3
}
 8004854:	bf00      	nop
 8004856:	3740      	adds	r7, #64	; 0x40
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20014548 	.word	0x20014548

08004860 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b08c      	sub	sp, #48	; 0x30
 8004864:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004866:	4b59      	ldr	r3, [pc, #356]	; (80049cc <SEGGER_SYSVIEW_Start+0x16c>)
 8004868:	2201      	movs	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800486c:	f3ef 8311 	mrs	r3, BASEPRI
 8004870:	f04f 0120 	mov.w	r1, #32
 8004874:	f381 8811 	msr	BASEPRI, r1
 8004878:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800487a:	4b54      	ldr	r3, [pc, #336]	; (80049cc <SEGGER_SYSVIEW_Start+0x16c>)
 800487c:	785b      	ldrb	r3, [r3, #1]
 800487e:	220a      	movs	r2, #10
 8004880:	4953      	ldr	r1, [pc, #332]	; (80049d0 <SEGGER_SYSVIEW_Start+0x170>)
 8004882:	4618      	mov	r0, r3
 8004884:	f7fb fcac 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800488e:	f7fe ff19 	bl	80036c4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004892:	200a      	movs	r0, #10
 8004894:	f7ff fe28 	bl	80044e8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004898:	f3ef 8311 	mrs	r3, BASEPRI
 800489c:	f04f 0120 	mov.w	r1, #32
 80048a0:	f381 8811 	msr	BASEPRI, r1
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	484b      	ldr	r0, [pc, #300]	; (80049d4 <SEGGER_SYSVIEW_Start+0x174>)
 80048a8:	f7ff fbef 	bl	800408a <_PreparePacket>
 80048ac:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b6:	4b45      	ldr	r3, [pc, #276]	; (80049cc <SEGGER_SYSVIEW_Start+0x16c>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80048bc:	e00b      	b.n	80048d6 <SEGGER_SYSVIEW_Start+0x76>
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	1c59      	adds	r1, r3, #1
 80048c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	09db      	lsrs	r3, r3, #7
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	2b7f      	cmp	r3, #127	; 0x7f
 80048da:	d8f0      	bhi.n	80048be <SEGGER_SYSVIEW_Start+0x5e>
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
 80048f0:	4b36      	ldr	r3, [pc, #216]	; (80049cc <SEGGER_SYSVIEW_Start+0x16c>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	623b      	str	r3, [r7, #32]
 80048f6:	e00b      	b.n	8004910 <SEGGER_SYSVIEW_Start+0xb0>
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	1c59      	adds	r1, r3, #1
 8004900:	6279      	str	r1, [r7, #36]	; 0x24
 8004902:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	09db      	lsrs	r3, r3, #7
 800490e:	623b      	str	r3, [r7, #32]
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	2b7f      	cmp	r3, #127	; 0x7f
 8004914:	d8f0      	bhi.n	80048f8 <SEGGER_SYSVIEW_Start+0x98>
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	627a      	str	r2, [r7, #36]	; 0x24
 800491c:	6a3a      	ldr	r2, [r7, #32]
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	4b28      	ldr	r3, [pc, #160]	; (80049cc <SEGGER_SYSVIEW_Start+0x16c>)
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	e00b      	b.n	800494a <SEGGER_SYSVIEW_Start+0xea>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	1c59      	adds	r1, r3, #1
 800493a:	61f9      	str	r1, [r7, #28]
 800493c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	09db      	lsrs	r3, r3, #7
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b7f      	cmp	r3, #127	; 0x7f
 800494e:	d8f0      	bhi.n	8004932 <SEGGER_SYSVIEW_Start+0xd2>
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	61fa      	str	r2, [r7, #28]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	2300      	movs	r3, #0
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	e00b      	b.n	8004982 <SEGGER_SYSVIEW_Start+0x122>
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	1c59      	adds	r1, r3, #1
 8004972:	6179      	str	r1, [r7, #20]
 8004974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	09db      	lsrs	r3, r3, #7
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b7f      	cmp	r3, #127	; 0x7f
 8004986:	d8f0      	bhi.n	800496a <SEGGER_SYSVIEW_Start+0x10a>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	617a      	str	r2, [r7, #20]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004998:	2218      	movs	r2, #24
 800499a:	6839      	ldr	r1, [r7, #0]
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff fc67 	bl	8004270 <_SendPacket>
      RECORD_END();
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80049a8:	4b08      	ldr	r3, [pc, #32]	; (80049cc <SEGGER_SYSVIEW_Start+0x16c>)
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <SEGGER_SYSVIEW_Start+0x16c>)
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80049b6:	f000 f9eb 	bl	8004d90 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80049ba:	f000 f9b1 	bl	8004d20 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80049be:	f000 fc83 	bl	80052c8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80049c2:	bf00      	nop
 80049c4:	3730      	adds	r7, #48	; 0x30
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20014518 	.word	0x20014518
 80049d0:	0800a1d0 	.word	0x0800a1d0
 80049d4:	20014548 	.word	0x20014548

080049d8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049de:	f3ef 8311 	mrs	r3, BASEPRI
 80049e2:	f04f 0120 	mov.w	r1, #32
 80049e6:	f381 8811 	msr	BASEPRI, r1
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	480b      	ldr	r0, [pc, #44]	; (8004a1c <SEGGER_SYSVIEW_Stop+0x44>)
 80049ee:	f7ff fb4c 	bl	800408a <_PreparePacket>
 80049f2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80049f4:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <SEGGER_SYSVIEW_Stop+0x48>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80049fc:	220b      	movs	r2, #11
 80049fe:	6839      	ldr	r1, [r7, #0]
 8004a00:	6838      	ldr	r0, [r7, #0]
 8004a02:	f7ff fc35 	bl	8004270 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <SEGGER_SYSVIEW_Stop+0x48>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f383 8811 	msr	BASEPRI, r3
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20014548 	.word	0x20014548
 8004a20:	20014518 	.word	0x20014518

08004a24 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	; 0x30
 8004a28:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a2e:	f04f 0120 	mov.w	r1, #32
 8004a32:	f381 8811 	msr	BASEPRI, r1
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	4845      	ldr	r0, [pc, #276]	; (8004b50 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004a3a:	f7ff fb26 	bl	800408a <_PreparePacket>
 8004a3e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a48:	4b42      	ldr	r3, [pc, #264]	; (8004b54 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4e:	e00b      	b.n	8004a68 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	1c59      	adds	r1, r3, #1
 8004a58:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	09db      	lsrs	r3, r3, #7
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a6c:	d8f0      	bhi.n	8004a50 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
 8004a82:	4b34      	ldr	r3, [pc, #208]	; (8004b54 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	623b      	str	r3, [r7, #32]
 8004a88:	e00b      	b.n	8004aa2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	1c59      	adds	r1, r3, #1
 8004a92:	6279      	str	r1, [r7, #36]	; 0x24
 8004a94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	09db      	lsrs	r3, r3, #7
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8004aa6:	d8f0      	bhi.n	8004a8a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	627a      	str	r2, [r7, #36]	; 0x24
 8004aae:	6a3a      	ldr	r2, [r7, #32]
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	e00b      	b.n	8004adc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	1c59      	adds	r1, r3, #1
 8004acc:	61f9      	str	r1, [r7, #28]
 8004ace:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	09db      	lsrs	r3, r3, #7
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae0:	d8f0      	bhi.n	8004ac4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	61fa      	str	r2, [r7, #28]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	e00b      	b.n	8004b14 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1c59      	adds	r1, r3, #1
 8004b04:	6179      	str	r1, [r7, #20]
 8004b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	09db      	lsrs	r3, r3, #7
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b7f      	cmp	r3, #127	; 0x7f
 8004b18:	d8f0      	bhi.n	8004afc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	617a      	str	r2, [r7, #20]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004b2a:	2218      	movs	r2, #24
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	68b8      	ldr	r0, [r7, #8]
 8004b30:	f7ff fb9e 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004b42:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	4798      	blx	r3
  }
}
 8004b48:	bf00      	nop
 8004b4a:	3730      	adds	r7, #48	; 0x30
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20014548 	.word	0x20014548
 8004b54:	20014518 	.word	0x20014518

08004b58 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b092      	sub	sp, #72	; 0x48
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004b60:	f3ef 8311 	mrs	r3, BASEPRI
 8004b64:	f04f 0120 	mov.w	r1, #32
 8004b68:	f381 8811 	msr	BASEPRI, r1
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	486a      	ldr	r0, [pc, #424]	; (8004d18 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004b70:	f7ff fa8b 	bl	800408a <_PreparePacket>
 8004b74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b66      	ldr	r3, [pc, #408]	; (8004d1c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8a:	e00b      	b.n	8004ba4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b92:	1c59      	adds	r1, r3, #1
 8004b94:	6479      	str	r1, [r7, #68]	; 0x44
 8004b96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba0:	09db      	lsrs	r3, r3, #7
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ba8:	d8f0      	bhi.n	8004b8c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	647a      	str	r2, [r7, #68]	; 0x44
 8004bb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bc4:	e00b      	b.n	8004bde <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bcc:	1c59      	adds	r1, r3, #1
 8004bce:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004bd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	09db      	lsrs	r3, r3, #7
 8004bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	2b7f      	cmp	r3, #127	; 0x7f
 8004be2:	d8f0      	bhi.n	8004bc6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7ff f9f7 	bl	8003ff0 <_EncodeStr>
 8004c02:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004c04:	2209      	movs	r2, #9
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	6938      	ldr	r0, [r7, #16]
 8004c0a:	f7ff fb31 	bl	8004270 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b40      	ldr	r3, [pc, #256]	; (8004d1c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	633b      	str	r3, [r7, #48]	; 0x30
 8004c22:	e00b      	b.n	8004c3c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	1c59      	adds	r1, r3, #1
 8004c2c:	6379      	str	r1, [r7, #52]	; 0x34
 8004c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	09db      	lsrs	r3, r3, #7
 8004c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c40:	d8f0      	bhi.n	8004c24 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	637a      	str	r2, [r7, #52]	; 0x34
 8004c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5c:	e00b      	b.n	8004c76 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	1c59      	adds	r1, r3, #1
 8004c66:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	09db      	lsrs	r3, r3, #7
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	2b7f      	cmp	r3, #127	; 0x7f
 8004c7a:	d8f0      	bhi.n	8004c5e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	e00b      	b.n	8004cb0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	1c59      	adds	r1, r3, #1
 8004ca0:	6279      	str	r1, [r7, #36]	; 0x24
 8004ca2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	09db      	lsrs	r3, r3, #7
 8004cae:	623b      	str	r3, [r7, #32]
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cb4:	d8f0      	bhi.n	8004c98 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	627a      	str	r2, [r7, #36]	; 0x24
 8004cbc:	6a3a      	ldr	r2, [r7, #32]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	e00b      	b.n	8004ce8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	1c59      	adds	r1, r3, #1
 8004cd8:	61f9      	str	r1, [r7, #28]
 8004cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	09db      	lsrs	r3, r3, #7
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b7f      	cmp	r3, #127	; 0x7f
 8004cec:	d8f0      	bhi.n	8004cd0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	61fa      	str	r2, [r7, #28]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004cfe:	2215      	movs	r2, #21
 8004d00:	68f9      	ldr	r1, [r7, #12]
 8004d02:	6938      	ldr	r0, [r7, #16]
 8004d04:	f7ff fab4 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f383 8811 	msr	BASEPRI, r3
}
 8004d0e:	bf00      	nop
 8004d10:	3748      	adds	r7, #72	; 0x48
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20014548 	.word	0x20014548
 8004d1c:	20014518 	.word	0x20014518

08004d20 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004d24:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004d36:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4798      	blx	r3
  }
}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20014518 	.word	0x20014518

08004d48 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d50:	f3ef 8311 	mrs	r3, BASEPRI
 8004d54:	f04f 0120 	mov.w	r1, #32
 8004d58:	f381 8811 	msr	BASEPRI, r1
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	480b      	ldr	r0, [pc, #44]	; (8004d8c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004d60:	f7ff f993 	bl	800408a <_PreparePacket>
 8004d64:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d66:	2280      	movs	r2, #128	; 0x80
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	6938      	ldr	r0, [r7, #16]
 8004d6c:	f7ff f940 	bl	8003ff0 <_EncodeStr>
 8004d70:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004d72:	220e      	movs	r2, #14
 8004d74:	68f9      	ldr	r1, [r7, #12]
 8004d76:	6938      	ldr	r0, [r7, #16]
 8004d78:	f7ff fa7a 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f383 8811 	msr	BASEPRI, r3
}
 8004d82:	bf00      	nop
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20014548 	.word	0x20014548

08004d90 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01a      	beq.n	8004dd4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004d9e:	4b13      	ldr	r3, [pc, #76]	; (8004dec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d015      	beq.n	8004dd4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004da8:	4b10      	ldr	r3, [pc, #64]	; (8004dec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4798      	blx	r3
 8004db0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004db4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004db6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	000a      	movs	r2, r1
 8004dc4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4621      	mov	r1, r4
 8004dcc:	200d      	movs	r0, #13
 8004dce:	f7ff fbe5 	bl	800459c <SEGGER_SYSVIEW_RecordU32x2>
 8004dd2:	e006      	b.n	8004de2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	200c      	movs	r0, #12
 8004ddc:	f7ff fba2 	bl	8004524 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd90      	pop	{r4, r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20014518 	.word	0x20014518
 8004df0:	e0001004 	.word	0xe0001004

08004df4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8004dfe:	f04f 0120 	mov.w	r1, #32
 8004e02:	f381 8811 	msr	BASEPRI, r1
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	4819      	ldr	r0, [pc, #100]	; (8004e70 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004e0a:	f7ff f93e 	bl	800408a <_PreparePacket>
 8004e0e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004e14:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	e00b      	b.n	8004e40 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	6179      	str	r1, [r7, #20]
 8004e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	09db      	lsrs	r3, r3, #7
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b7f      	cmp	r3, #127	; 0x7f
 8004e44:	d8f0      	bhi.n	8004e28 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	617a      	str	r2, [r7, #20]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004e56:	2202      	movs	r2, #2
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	68b8      	ldr	r0, [r7, #8]
 8004e5c:	f7ff fa08 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f383 8811 	msr	BASEPRI, r3
}
 8004e66:	bf00      	nop
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20014548 	.word	0x20014548
 8004e74:	e000ed04 	.word	0xe000ed04

08004e78 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e82:	f04f 0120 	mov.w	r1, #32
 8004e86:	f381 8811 	msr	BASEPRI, r1
 8004e8a:	607b      	str	r3, [r7, #4]
 8004e8c:	4807      	ldr	r0, [pc, #28]	; (8004eac <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004e8e:	f7ff f8fc 	bl	800408a <_PreparePacket>
 8004e92:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004e94:	2203      	movs	r2, #3
 8004e96:	6839      	ldr	r1, [r7, #0]
 8004e98:	6838      	ldr	r0, [r7, #0]
 8004e9a:	f7ff f9e9 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f383 8811 	msr	BASEPRI, r3
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20014548 	.word	0x20014548

08004eb0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eba:	f04f 0120 	mov.w	r1, #32
 8004ebe:	f381 8811 	msr	BASEPRI, r1
 8004ec2:	607b      	str	r3, [r7, #4]
 8004ec4:	4807      	ldr	r0, [pc, #28]	; (8004ee4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004ec6:	f7ff f8e0 	bl	800408a <_PreparePacket>
 8004eca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004ecc:	2212      	movs	r2, #18
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	6838      	ldr	r0, [r7, #0]
 8004ed2:	f7ff f9cd 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f383 8811 	msr	BASEPRI, r3
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20014548 	.word	0x20014548

08004ee8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004eee:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef2:	f04f 0120 	mov.w	r1, #32
 8004ef6:	f381 8811 	msr	BASEPRI, r1
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	4807      	ldr	r0, [pc, #28]	; (8004f1c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004efe:	f7ff f8c4 	bl	800408a <_PreparePacket>
 8004f02:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004f04:	2211      	movs	r2, #17
 8004f06:	6839      	ldr	r1, [r7, #0]
 8004f08:	6838      	ldr	r0, [r7, #0]
 8004f0a:	f7ff f9b1 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f383 8811 	msr	BASEPRI, r3
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20014548 	.word	0x20014548

08004f20 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f28:	f3ef 8311 	mrs	r3, BASEPRI
 8004f2c:	f04f 0120 	mov.w	r1, #32
 8004f30:	f381 8811 	msr	BASEPRI, r1
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	4819      	ldr	r0, [pc, #100]	; (8004f9c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004f38:	f7ff f8a7 	bl	800408a <_PreparePacket>
 8004f3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f42:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	61bb      	str	r3, [r7, #24]
 8004f54:	e00b      	b.n	8004f6e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	1c59      	adds	r1, r3, #1
 8004f5e:	61f9      	str	r1, [r7, #28]
 8004f60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	09db      	lsrs	r3, r3, #7
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b7f      	cmp	r3, #127	; 0x7f
 8004f72:	d8f0      	bhi.n	8004f56 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	61fa      	str	r2, [r7, #28]
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004f84:	2208      	movs	r2, #8
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	6938      	ldr	r0, [r7, #16]
 8004f8a:	f7ff f971 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f383 8811 	msr	BASEPRI, r3
}
 8004f94:	bf00      	nop
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20014548 	.word	0x20014548
 8004fa0:	20014518 	.word	0x20014518

08004fa4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fac:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb0:	f04f 0120 	mov.w	r1, #32
 8004fb4:	f381 8811 	msr	BASEPRI, r1
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	4819      	ldr	r0, [pc, #100]	; (8005020 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004fbc:	f7ff f865 	bl	800408a <_PreparePacket>
 8004fc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004fc6:	4b17      	ldr	r3, [pc, #92]	; (8005024 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	e00b      	b.n	8004ff2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	61f9      	str	r1, [r7, #28]
 8004fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	09db      	lsrs	r3, r3, #7
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff6:	d8f0      	bhi.n	8004fda <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	61fa      	str	r2, [r7, #28]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005008:	2204      	movs	r2, #4
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	6938      	ldr	r0, [r7, #16]
 800500e:	f7ff f92f 	bl	8004270 <_SendPacket>
  RECORD_END();
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f383 8811 	msr	BASEPRI, r3
}
 8005018:	bf00      	nop
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20014548 	.word	0x20014548
 8005024:	20014518 	.word	0x20014518

08005028 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005030:	f3ef 8311 	mrs	r3, BASEPRI
 8005034:	f04f 0120 	mov.w	r1, #32
 8005038:	f381 8811 	msr	BASEPRI, r1
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	4819      	ldr	r0, [pc, #100]	; (80050a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005040:	f7ff f823 	bl	800408a <_PreparePacket>
 8005044:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800504a:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	e00b      	b.n	8005076 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	1c59      	adds	r1, r3, #1
 8005066:	61f9      	str	r1, [r7, #28]
 8005068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	09db      	lsrs	r3, r3, #7
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b7f      	cmp	r3, #127	; 0x7f
 800507a:	d8f0      	bhi.n	800505e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	61fa      	str	r2, [r7, #28]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800508c:	2206      	movs	r2, #6
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	6938      	ldr	r0, [r7, #16]
 8005092:	f7ff f8ed 	bl	8004270 <_SendPacket>
  RECORD_END();
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f383 8811 	msr	BASEPRI, r3
}
 800509c:	bf00      	nop
 800509e:	3720      	adds	r7, #32
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20014548 	.word	0x20014548
 80050a8:	20014518 	.word	0x20014518

080050ac <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80050b6:	f3ef 8311 	mrs	r3, BASEPRI
 80050ba:	f04f 0120 	mov.w	r1, #32
 80050be:	f381 8811 	msr	BASEPRI, r1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	4827      	ldr	r0, [pc, #156]	; (8005164 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80050c6:	f7fe ffe0 	bl	800408a <_PreparePacket>
 80050ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80050d0:	4b25      	ldr	r3, [pc, #148]	; (8005168 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	e00b      	b.n	80050fc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	1c59      	adds	r1, r3, #1
 80050ec:	6279      	str	r1, [r7, #36]	; 0x24
 80050ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	09db      	lsrs	r3, r3, #7
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005100:	d8f0      	bhi.n	80050e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	627a      	str	r2, [r7, #36]	; 0x24
 8005108:	6a3a      	ldr	r2, [r7, #32]
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	e00b      	b.n	8005134 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	b2da      	uxtb	r2, r3
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	1c59      	adds	r1, r3, #1
 8005124:	61f9      	str	r1, [r7, #28]
 8005126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	09db      	lsrs	r3, r3, #7
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b7f      	cmp	r3, #127	; 0x7f
 8005138:	d8f0      	bhi.n	800511c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	61fa      	str	r2, [r7, #28]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800514a:	2207      	movs	r2, #7
 800514c:	68f9      	ldr	r1, [r7, #12]
 800514e:	6938      	ldr	r0, [r7, #16]
 8005150:	f7ff f88e 	bl	8004270 <_SendPacket>
  RECORD_END();
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f383 8811 	msr	BASEPRI, r3
}
 800515a:	bf00      	nop
 800515c:	3728      	adds	r7, #40	; 0x28
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20014548 	.word	0x20014548
 8005168:	20014518 	.word	0x20014518

0800516c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005174:	4b04      	ldr	r3, [pc, #16]	; (8005188 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	1ad3      	subs	r3, r2, r3
}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	20014518 	.word	0x20014518

0800518c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b08c      	sub	sp, #48	; 0x30
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005196:	4b3b      	ldr	r3, [pc, #236]	; (8005284 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d06d      	beq.n	800527a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800519e:	4b39      	ldr	r3, [pc, #228]	; (8005284 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80051a4:	2300      	movs	r3, #0
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a8:	e008      	b.n	80051bc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d007      	beq.n	80051c6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	3301      	adds	r3, #1
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d3f2      	bcc.n	80051aa <SEGGER_SYSVIEW_SendModule+0x1e>
 80051c4:	e000      	b.n	80051c8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80051c6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d055      	beq.n	800527a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051ce:	f3ef 8311 	mrs	r3, BASEPRI
 80051d2:	f04f 0120 	mov.w	r1, #32
 80051d6:	f381 8811 	msr	BASEPRI, r1
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	482a      	ldr	r0, [pc, #168]	; (8005288 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80051de:	f7fe ff54 	bl	800408a <_PreparePacket>
 80051e2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	623b      	str	r3, [r7, #32]
 80051f0:	e00b      	b.n	800520a <SEGGER_SYSVIEW_SendModule+0x7e>
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	1c59      	adds	r1, r3, #1
 80051fa:	6279      	str	r1, [r7, #36]	; 0x24
 80051fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	09db      	lsrs	r3, r3, #7
 8005208:	623b      	str	r3, [r7, #32]
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	2b7f      	cmp	r3, #127	; 0x7f
 800520e:	d8f0      	bhi.n	80051f2 <SEGGER_SYSVIEW_SendModule+0x66>
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	627a      	str	r2, [r7, #36]	; 0x24
 8005216:	6a3a      	ldr	r2, [r7, #32]
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	e00b      	b.n	8005244 <SEGGER_SYSVIEW_SendModule+0xb8>
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	1c59      	adds	r1, r3, #1
 8005234:	61f9      	str	r1, [r7, #28]
 8005236:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	09db      	lsrs	r3, r3, #7
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b7f      	cmp	r3, #127	; 0x7f
 8005248:	d8f0      	bhi.n	800522c <SEGGER_SYSVIEW_SendModule+0xa0>
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	61fa      	str	r2, [r7, #28]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2280      	movs	r2, #128	; 0x80
 8005260:	4619      	mov	r1, r3
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7fe fec4 	bl	8003ff0 <_EncodeStr>
 8005268:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800526a:	2216      	movs	r2, #22
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	6938      	ldr	r0, [r7, #16]
 8005270:	f7fe fffe 	bl	8004270 <_SendPacket>
      RECORD_END();
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800527a:	bf00      	nop
 800527c:	3730      	adds	r7, #48	; 0x30
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20014540 	.word	0x20014540
 8005288:	20014548 	.word	0x20014548

0800528c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005292:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00f      	beq.n	80052ba <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f2      	bne.n	80052a0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20014540 	.word	0x20014540

080052c8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80052ce:	f3ef 8311 	mrs	r3, BASEPRI
 80052d2:	f04f 0120 	mov.w	r1, #32
 80052d6:	f381 8811 	msr	BASEPRI, r1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	4817      	ldr	r0, [pc, #92]	; (800533c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80052de:	f7fe fed4 	bl	800408a <_PreparePacket>
 80052e2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	4b14      	ldr	r3, [pc, #80]	; (8005340 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	e00b      	b.n	800530c <SEGGER_SYSVIEW_SendNumModules+0x44>
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	1c59      	adds	r1, r3, #1
 80052fc:	6179      	str	r1, [r7, #20]
 80052fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	09db      	lsrs	r3, r3, #7
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b7f      	cmp	r3, #127	; 0x7f
 8005310:	d8f0      	bhi.n	80052f4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	617a      	str	r2, [r7, #20]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005322:	221b      	movs	r2, #27
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	68b8      	ldr	r0, [r7, #8]
 8005328:	f7fe ffa2 	bl	8004270 <_SendPacket>
  RECORD_END();
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f383 8811 	msr	BASEPRI, r3
}
 8005332:	bf00      	nop
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20014548 	.word	0x20014548
 8005340:	20014544 	.word	0x20014544

08005344 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	; 0x28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800534c:	f3ef 8311 	mrs	r3, BASEPRI
 8005350:	f04f 0120 	mov.w	r1, #32
 8005354:	f381 8811 	msr	BASEPRI, r1
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	4827      	ldr	r0, [pc, #156]	; (80053f8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800535c:	f7fe fe95 	bl	800408a <_PreparePacket>
 8005360:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005362:	2280      	movs	r2, #128	; 0x80
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	6938      	ldr	r0, [r7, #16]
 8005368:	f7fe fe42 	bl	8003ff0 <_EncodeStr>
 800536c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
 8005372:	2301      	movs	r3, #1
 8005374:	623b      	str	r3, [r7, #32]
 8005376:	e00b      	b.n	8005390 <SEGGER_SYSVIEW_Warn+0x4c>
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	1c59      	adds	r1, r3, #1
 8005380:	6279      	str	r1, [r7, #36]	; 0x24
 8005382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	09db      	lsrs	r3, r3, #7
 800538e:	623b      	str	r3, [r7, #32]
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	2b7f      	cmp	r3, #127	; 0x7f
 8005394:	d8f0      	bhi.n	8005378 <SEGGER_SYSVIEW_Warn+0x34>
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	627a      	str	r2, [r7, #36]	; 0x24
 800539c:	6a3a      	ldr	r2, [r7, #32]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e00b      	b.n	80053c8 <SEGGER_SYSVIEW_Warn+0x84>
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	1c59      	adds	r1, r3, #1
 80053b8:	61f9      	str	r1, [r7, #28]
 80053ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	09db      	lsrs	r3, r3, #7
 80053c6:	61bb      	str	r3, [r7, #24]
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b7f      	cmp	r3, #127	; 0x7f
 80053cc:	d8f0      	bhi.n	80053b0 <SEGGER_SYSVIEW_Warn+0x6c>
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	61fa      	str	r2, [r7, #28]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80053de:	221a      	movs	r2, #26
 80053e0:	68f9      	ldr	r1, [r7, #12]
 80053e2:	6938      	ldr	r0, [r7, #16]
 80053e4:	f7fe ff44 	bl	8004270 <_SendPacket>
  RECORD_END();
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f383 8811 	msr	BASEPRI, r3
}
 80053ee:	bf00      	nop
 80053f0:	3728      	adds	r7, #40	; 0x28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20014548 	.word	0x20014548

080053fc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005400:	4b13      	ldr	r3, [pc, #76]	; (8005450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005402:	7e1b      	ldrb	r3, [r3, #24]
 8005404:	4619      	mov	r1, r3
 8005406:	4a13      	ldr	r2, [pc, #76]	; (8005454 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005408:	460b      	mov	r3, r1
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	440b      	add	r3, r1
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4413      	add	r3, r2
 8005412:	336c      	adds	r3, #108	; 0x6c
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005418:	7e1b      	ldrb	r3, [r3, #24]
 800541a:	4618      	mov	r0, r3
 800541c:	490d      	ldr	r1, [pc, #52]	; (8005454 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800541e:	4603      	mov	r3, r0
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	4403      	add	r3, r0
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	440b      	add	r3, r1
 8005428:	3370      	adds	r3, #112	; 0x70
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d00b      	beq.n	8005448 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005430:	4b07      	ldr	r3, [pc, #28]	; (8005450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005432:	789b      	ldrb	r3, [r3, #2]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d107      	bne.n	8005448 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800543a:	2201      	movs	r2, #1
 800543c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800543e:	f7fe fe31 	bl	80040a4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005442:	4b03      	ldr	r3, [pc, #12]	; (8005450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005444:	2200      	movs	r2, #0
 8005446:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005448:	4b01      	ldr	r3, [pc, #4]	; (8005450 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800544a:	781b      	ldrb	r3, [r3, #0]
}
 800544c:	4618      	mov	r0, r3
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20014518 	.word	0x20014518
 8005454:	20013058 	.word	0x20013058

08005458 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	2000      	movs	r0, #0
 800546c:	f7fe fca6 	bl	8003dbc <SEGGER_RTT_Write>
  return len;
 8005470:	683b      	ldr	r3, [r7, #0]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <configPLL>:
#include <stdint.h>
#include <PLLDriver.h>


/** Función de configuración del PLL según la frecuencia en MHz*/
void configPLL(uint16_t PLLFreqMHz){
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	80fb      	strh	r3, [r7, #6]

	// 0. Se verifica antes que todo que el HSI sea el oscilador usado por el PLL
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 8005486:	4b78      	ldr	r3, [pc, #480]	; (8005668 <configPLL+0x1ec>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4a77      	ldr	r2, [pc, #476]	; (8005668 <configPLL+0x1ec>)
 800548c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005490:	6053      	str	r3, [r2, #4]

	// 1. Seleccionamos el regulador para la frecuencia deseada
	if(PLLFreqMHz<=64){
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d806      	bhi.n	80054a6 <configPLL+0x2a>
		PWR->CR |= (0x1 << PWR_CR_VOS_Pos);
 8005498:	4b74      	ldr	r3, [pc, #464]	; (800566c <configPLL+0x1f0>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a73      	ldr	r2, [pc, #460]	; (800566c <configPLL+0x1f0>)
 800549e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	e018      	b.n	80054d8 <configPLL+0x5c>
	}
	else if((64<PLLFreqMHz)&&(PLLFreqMHz<=84)){
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	d909      	bls.n	80054c0 <configPLL+0x44>
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	2b54      	cmp	r3, #84	; 0x54
 80054b0:	d806      	bhi.n	80054c0 <configPLL+0x44>
		PWR->CR |= (0x2 << PWR_CR_VOS_Pos);
 80054b2:	4b6e      	ldr	r3, [pc, #440]	; (800566c <configPLL+0x1f0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a6d      	ldr	r2, [pc, #436]	; (800566c <configPLL+0x1f0>)
 80054b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e00b      	b.n	80054d8 <configPLL+0x5c>
	}
	else if((84<PLLFreqMHz)&&(PLLFreqMHz<=100)){
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	2b54      	cmp	r3, #84	; 0x54
 80054c4:	d908      	bls.n	80054d8 <configPLL+0x5c>
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	2b64      	cmp	r3, #100	; 0x64
 80054ca:	d805      	bhi.n	80054d8 <configPLL+0x5c>
		PWR->CR |= (0x3 << PWR_CR_VOS_Pos);
 80054cc:	4b67      	ldr	r3, [pc, #412]	; (800566c <configPLL+0x1f0>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a66      	ldr	r2, [pc, #408]	; (800566c <configPLL+0x1f0>)
 80054d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054d6:	6013      	str	r3, [r2, #0]
	}

	/* 2. Cambiamos los registros necesarios para poder acceder a la memoria flash */

	// 2.1 Prefetch, Data e Instruction Cache adecuados
	FLASH->ACR |= FLASH_ACR_PRFTEN;
 80054d8:	4b65      	ldr	r3, [pc, #404]	; (8005670 <configPLL+0x1f4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a64      	ldr	r2, [pc, #400]	; (8005670 <configPLL+0x1f4>)
 80054de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e2:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_ICEN;
 80054e4:	4b62      	ldr	r3, [pc, #392]	; (8005670 <configPLL+0x1f4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a61      	ldr	r2, [pc, #388]	; (8005670 <configPLL+0x1f4>)
 80054ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054ee:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_DCEN;
 80054f0:	4b5f      	ldr	r3, [pc, #380]	; (8005670 <configPLL+0x1f4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a5e      	ldr	r2, [pc, #376]	; (8005670 <configPLL+0x1f4>)
 80054f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054fa:	6013      	str	r3, [r2, #0]

	// 2.2 Configuramos la respectiva latencia para PLLFreqMHz con X Wait States para 2.7 a 3.6 Voltios
	FLASH->ACR &= ~ FLASH_ACR_LATENCY;
 80054fc:	4b5c      	ldr	r3, [pc, #368]	; (8005670 <configPLL+0x1f4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a5b      	ldr	r2, [pc, #364]	; (8005670 <configPLL+0x1f4>)
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	6013      	str	r3, [r2, #0]
	if((0<PLLFreqMHz)&&(PLLFreqMHz<=30)){
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <configPLL+0xa2>
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	2b1e      	cmp	r3, #30
 8005512:	d804      	bhi.n	800551e <configPLL+0xa2>
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8005514:	4b56      	ldr	r3, [pc, #344]	; (8005670 <configPLL+0x1f4>)
 8005516:	4a56      	ldr	r2, [pc, #344]	; (8005670 <configPLL+0x1f4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	e027      	b.n	800556e <configPLL+0xf2>
	}
	else if((30<PLLFreqMHz)&&(PLLFreqMHz<=64)){
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	2b1e      	cmp	r3, #30
 8005522:	d909      	bls.n	8005538 <configPLL+0xbc>
 8005524:	88fb      	ldrh	r3, [r7, #6]
 8005526:	2b40      	cmp	r3, #64	; 0x40
 8005528:	d806      	bhi.n	8005538 <configPLL+0xbc>
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 800552a:	4b51      	ldr	r3, [pc, #324]	; (8005670 <configPLL+0x1f4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a50      	ldr	r2, [pc, #320]	; (8005670 <configPLL+0x1f4>)
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	e01a      	b.n	800556e <configPLL+0xf2>
	}
	else if((64<PLLFreqMHz)&&(PLLFreqMHz<=90)){
 8005538:	88fb      	ldrh	r3, [r7, #6]
 800553a:	2b40      	cmp	r3, #64	; 0x40
 800553c:	d909      	bls.n	8005552 <configPLL+0xd6>
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	2b5a      	cmp	r3, #90	; 0x5a
 8005542:	d806      	bhi.n	8005552 <configPLL+0xd6>
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8005544:	4b4a      	ldr	r3, [pc, #296]	; (8005670 <configPLL+0x1f4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a49      	ldr	r2, [pc, #292]	; (8005670 <configPLL+0x1f4>)
 800554a:	f043 0302 	orr.w	r3, r3, #2
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	e00d      	b.n	800556e <configPLL+0xf2>
	}
	else if((90<PLLFreqMHz)&&(PLLFreqMHz<=100)){
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	2b5a      	cmp	r3, #90	; 0x5a
 8005556:	d909      	bls.n	800556c <configPLL+0xf0>
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	2b64      	cmp	r3, #100	; 0x64
 800555c:	d806      	bhi.n	800556c <configPLL+0xf0>
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 800555e:	4b44      	ldr	r3, [pc, #272]	; (8005670 <configPLL+0x1f4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a43      	ldr	r2, [pc, #268]	; (8005670 <configPLL+0x1f4>)
 8005564:	f043 0303 	orr.w	r3, r3, #3
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e000      	b.n	800556e <configPLL+0xf2>
	}
	else{
		__NOP();
 800556c:	bf00      	nop
	}

	/* 3. Ahora escogemos los pre-escaler adecuados */

	// 3.2 Definimos cual va hacer el valor del PLLM, pre-escaler que divide la frecuencia que recibe el PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 800556e:	4b3e      	ldr	r3, [pc, #248]	; (8005668 <configPLL+0x1ec>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4a3d      	ldr	r2, [pc, #244]	; (8005668 <configPLL+0x1ec>)
 8005574:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005578:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos); // Escogemos 8 y al VCO le llegan 2MHz, 16/8=2
 800557a:	4b3b      	ldr	r3, [pc, #236]	; (8005668 <configPLL+0x1ec>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4a3a      	ldr	r2, [pc, #232]	; (8005668 <configPLL+0x1ec>)
 8005580:	f043 0308 	orr.w	r3, r3, #8
 8005584:	6053      	str	r3, [r2, #4]

	// 3.3 Definimos cual va a ser el valor del PLLN, pre-escaler que multiplica lo que entra al VCO
	/* NOTA: Como dejamos el PLLM en 8, y el PLLP en 2, el valor del PLLN siempre será igual
	 * a la PLLFreqMHz deseada, limitando que no pasemos de 100 MHz*/
	if(PLLFreqMHz<=100){
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	2b64      	cmp	r3, #100	; 0x64
 800558a:	d810      	bhi.n	80055ae <configPLL+0x132>
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 800558c:	4b36      	ldr	r3, [pc, #216]	; (8005668 <configPLL+0x1ec>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a35      	ldr	r2, [pc, #212]	; (8005668 <configPLL+0x1ec>)
 8005592:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559a:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (PLLFreqMHz <<  RCC_PLLCFGR_PLLN_Pos); // Con esto si usamos 80 del VCO salen 160 MHz
 800559c:	4b32      	ldr	r3, [pc, #200]	; (8005668 <configPLL+0x1ec>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	0192      	lsls	r2, r2, #6
 80055a4:	4611      	mov	r1, r2
 80055a6:	4a30      	ldr	r2, [pc, #192]	; (8005668 <configPLL+0x1ec>)
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6053      	str	r3, [r2, #4]
 80055ac:	e000      	b.n	80055b0 <configPLL+0x134>
	}
	else{
		__NOP();
 80055ae:	bf00      	nop
	}

	// 3.4 Definimos cual va a ser el valor del PLLP, pre-escaler que divide lo que sale del VCO y llega al SysClk
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 80055b0:	4b2d      	ldr	r3, [pc, #180]	; (8005668 <configPLL+0x1ec>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	4a2c      	ldr	r2, [pc, #176]	; (8005668 <configPLL+0x1ec>)
 80055b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80055ba:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b00 <<RCC_PLLCFGR_PLLP_Pos); 	// Con esto dividimos por 2 y obtenemos 80 MHz, 160/2=80
 80055bc:	4b2a      	ldr	r3, [pc, #168]	; (8005668 <configPLL+0x1ec>)
 80055be:	4a2a      	ldr	r2, [pc, #168]	; (8005668 <configPLL+0x1ec>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	6053      	str	r3, [r2, #4]

	// 3.5 Ahora configuramos para AHB
	RCC->CFGR &= ~RCC_CFGR_HPRE;
 80055c4:	4b28      	ldr	r3, [pc, #160]	; (8005668 <configPLL+0x1ec>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a27      	ldr	r2, [pc, #156]	; (8005668 <configPLL+0x1ec>)
 80055ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ce:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // Con esto para el bus AHB dividimos por 1, queda en 80 MHz, o lo mismo del PLLFreqMHz
 80055d0:	4b25      	ldr	r3, [pc, #148]	; (8005668 <configPLL+0x1ec>)
 80055d2:	4a25      	ldr	r2, [pc, #148]	; (8005668 <configPLL+0x1ec>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	6093      	str	r3, [r2, #8]

	// 3.6 Para APB1
	if(PLLFreqMHz>50){
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	2b32      	cmp	r3, #50	; 0x32
 80055dc:	d90c      	bls.n	80055f8 <configPLL+0x17c>
		RCC->CFGR &= ~RCC_CFGR_PPRE1;
 80055de:	4b22      	ldr	r3, [pc, #136]	; (8005668 <configPLL+0x1ec>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	4a21      	ldr	r2, [pc, #132]	; (8005668 <configPLL+0x1ec>)
 80055e4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80055e8:	6093      	str	r3, [r2, #8]
		// Si escogemos que se divide por 2, dan 40 MHz, esto para no exceder el límite de 50MHz
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80055ea:	4b1f      	ldr	r3, [pc, #124]	; (8005668 <configPLL+0x1ec>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <configPLL+0x1ec>)
 80055f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055f4:	6093      	str	r3, [r2, #8]
 80055f6:	e00e      	b.n	8005616 <configPLL+0x19a>
	}
	else if(PLLFreqMHz<=50){
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	2b32      	cmp	r3, #50	; 0x32
 80055fc:	d80a      	bhi.n	8005614 <configPLL+0x198>
		RCC->CFGR &= ~RCC_CFGR_PPRE1;
 80055fe:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <configPLL+0x1ec>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	4a19      	ldr	r2, [pc, #100]	; (8005668 <configPLL+0x1ec>)
 8005604:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005608:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800560a:	4b17      	ldr	r3, [pc, #92]	; (8005668 <configPLL+0x1ec>)
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <configPLL+0x1ec>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	6093      	str	r3, [r2, #8]
 8005612:	e000      	b.n	8005616 <configPLL+0x19a>
	}
	else{
		__NOP();
 8005614:	bf00      	nop
	}

	// 3.7 Para APB2
	// No se divide para valores en el registro menores a 4(binario), se queda en PLLFreqMHz, ya que admite hasta 100 MHz
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8005616:	4b14      	ldr	r3, [pc, #80]	; (8005668 <configPLL+0x1ec>)
 8005618:	4a13      	ldr	r2, [pc, #76]	; (8005668 <configPLL+0x1ec>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	6093      	str	r3, [r2, #8]


	// 4. Ahora activamos el PLL
	RCC->CR |= RCC_CR_PLLON;
 800561e:	4b12      	ldr	r3, [pc, #72]	; (8005668 <configPLL+0x1ec>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a11      	ldr	r2, [pc, #68]	; (8005668 <configPLL+0x1ec>)
 8005624:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005628:	6013      	str	r3, [r2, #0]

	// 5. Esperamos hasta que el hardware indique que el PLL esta desbloqueado
	while( !(RCC->CR & RCC_CR_PLLRDY)){
 800562a:	e000      	b.n	800562e <configPLL+0x1b2>
		__NOP();
 800562c:	bf00      	nop
	while( !(RCC->CR & RCC_CR_PLLRDY)){
 800562e:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <configPLL+0x1ec>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f8      	beq.n	800562c <configPLL+0x1b0>
	}

	/* 6. Ahora convertimos nuestro PLL en nuestro System Clock, solo si la PLLFreqMHz no supera los 100MHz
	 * de lo contrario se queda con el HSI */
	if(PLLFreqMHz<=100){
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	2b64      	cmp	r3, #100	; 0x64
 800563e:	d80c      	bhi.n	800565a <configPLL+0x1de>
		RCC->CFGR &= ~RCC_CFGR_SW;
 8005640:	4b09      	ldr	r3, [pc, #36]	; (8005668 <configPLL+0x1ec>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	4a08      	ldr	r2, [pc, #32]	; (8005668 <configPLL+0x1ec>)
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_SW_1;
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <configPLL+0x1ec>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	4a05      	ldr	r2, [pc, #20]	; (8005668 <configPLL+0x1ec>)
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	6093      	str	r3, [r2, #8]
	}
	else{
		__NOP();
	}

}
 8005658:	e000      	b.n	800565c <configPLL+0x1e0>
		__NOP();
 800565a:	bf00      	nop
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40023800 	.word	0x40023800
 800566c:	40007000 	.word	0x40007000
 8005670:	40023c00 	.word	0x40023c00

08005674 <__errno>:
 8005674:	4b01      	ldr	r3, [pc, #4]	; (800567c <__errno+0x8>)
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000014 	.word	0x20000014

08005680 <__libc_init_array>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	4d0d      	ldr	r5, [pc, #52]	; (80056b8 <__libc_init_array+0x38>)
 8005684:	4c0d      	ldr	r4, [pc, #52]	; (80056bc <__libc_init_array+0x3c>)
 8005686:	1b64      	subs	r4, r4, r5
 8005688:	10a4      	asrs	r4, r4, #2
 800568a:	2600      	movs	r6, #0
 800568c:	42a6      	cmp	r6, r4
 800568e:	d109      	bne.n	80056a4 <__libc_init_array+0x24>
 8005690:	4d0b      	ldr	r5, [pc, #44]	; (80056c0 <__libc_init_array+0x40>)
 8005692:	4c0c      	ldr	r4, [pc, #48]	; (80056c4 <__libc_init_array+0x44>)
 8005694:	f004 fd00 	bl	800a098 <_init>
 8005698:	1b64      	subs	r4, r4, r5
 800569a:	10a4      	asrs	r4, r4, #2
 800569c:	2600      	movs	r6, #0
 800569e:	42a6      	cmp	r6, r4
 80056a0:	d105      	bne.n	80056ae <__libc_init_array+0x2e>
 80056a2:	bd70      	pop	{r4, r5, r6, pc}
 80056a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a8:	4798      	blx	r3
 80056aa:	3601      	adds	r6, #1
 80056ac:	e7ee      	b.n	800568c <__libc_init_array+0xc>
 80056ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b2:	4798      	blx	r3
 80056b4:	3601      	adds	r6, #1
 80056b6:	e7f2      	b.n	800569e <__libc_init_array+0x1e>
 80056b8:	0800a68c 	.word	0x0800a68c
 80056bc:	0800a68c 	.word	0x0800a68c
 80056c0:	0800a68c 	.word	0x0800a68c
 80056c4:	0800a690 	.word	0x0800a690

080056c8 <memcmp>:
 80056c8:	b510      	push	{r4, lr}
 80056ca:	3901      	subs	r1, #1
 80056cc:	4402      	add	r2, r0
 80056ce:	4290      	cmp	r0, r2
 80056d0:	d101      	bne.n	80056d6 <memcmp+0xe>
 80056d2:	2000      	movs	r0, #0
 80056d4:	e005      	b.n	80056e2 <memcmp+0x1a>
 80056d6:	7803      	ldrb	r3, [r0, #0]
 80056d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d001      	beq.n	80056e4 <memcmp+0x1c>
 80056e0:	1b18      	subs	r0, r3, r4
 80056e2:	bd10      	pop	{r4, pc}
 80056e4:	3001      	adds	r0, #1
 80056e6:	e7f2      	b.n	80056ce <memcmp+0x6>

080056e8 <memcpy>:
 80056e8:	440a      	add	r2, r1
 80056ea:	4291      	cmp	r1, r2
 80056ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80056f0:	d100      	bne.n	80056f4 <memcpy+0xc>
 80056f2:	4770      	bx	lr
 80056f4:	b510      	push	{r4, lr}
 80056f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056fe:	4291      	cmp	r1, r2
 8005700:	d1f9      	bne.n	80056f6 <memcpy+0xe>
 8005702:	bd10      	pop	{r4, pc}

08005704 <memset>:
 8005704:	4402      	add	r2, r0
 8005706:	4603      	mov	r3, r0
 8005708:	4293      	cmp	r3, r2
 800570a:	d100      	bne.n	800570e <memset+0xa>
 800570c:	4770      	bx	lr
 800570e:	f803 1b01 	strb.w	r1, [r3], #1
 8005712:	e7f9      	b.n	8005708 <memset+0x4>

08005714 <__cvt>:
 8005714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	ec55 4b10 	vmov	r4, r5, d0
 800571c:	2d00      	cmp	r5, #0
 800571e:	460e      	mov	r6, r1
 8005720:	4619      	mov	r1, r3
 8005722:	462b      	mov	r3, r5
 8005724:	bfbb      	ittet	lt
 8005726:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800572a:	461d      	movlt	r5, r3
 800572c:	2300      	movge	r3, #0
 800572e:	232d      	movlt	r3, #45	; 0x2d
 8005730:	700b      	strb	r3, [r1, #0]
 8005732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005734:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005738:	4691      	mov	r9, r2
 800573a:	f023 0820 	bic.w	r8, r3, #32
 800573e:	bfbc      	itt	lt
 8005740:	4622      	movlt	r2, r4
 8005742:	4614      	movlt	r4, r2
 8005744:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005748:	d005      	beq.n	8005756 <__cvt+0x42>
 800574a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800574e:	d100      	bne.n	8005752 <__cvt+0x3e>
 8005750:	3601      	adds	r6, #1
 8005752:	2102      	movs	r1, #2
 8005754:	e000      	b.n	8005758 <__cvt+0x44>
 8005756:	2103      	movs	r1, #3
 8005758:	ab03      	add	r3, sp, #12
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	ab02      	add	r3, sp, #8
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	ec45 4b10 	vmov	d0, r4, r5
 8005764:	4653      	mov	r3, sl
 8005766:	4632      	mov	r2, r6
 8005768:	f001 fee2 	bl	8007530 <_dtoa_r>
 800576c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005770:	4607      	mov	r7, r0
 8005772:	d102      	bne.n	800577a <__cvt+0x66>
 8005774:	f019 0f01 	tst.w	r9, #1
 8005778:	d022      	beq.n	80057c0 <__cvt+0xac>
 800577a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800577e:	eb07 0906 	add.w	r9, r7, r6
 8005782:	d110      	bne.n	80057a6 <__cvt+0x92>
 8005784:	783b      	ldrb	r3, [r7, #0]
 8005786:	2b30      	cmp	r3, #48	; 0x30
 8005788:	d10a      	bne.n	80057a0 <__cvt+0x8c>
 800578a:	2200      	movs	r2, #0
 800578c:	2300      	movs	r3, #0
 800578e:	4620      	mov	r0, r4
 8005790:	4629      	mov	r1, r5
 8005792:	f7fb f9f1 	bl	8000b78 <__aeabi_dcmpeq>
 8005796:	b918      	cbnz	r0, 80057a0 <__cvt+0x8c>
 8005798:	f1c6 0601 	rsb	r6, r6, #1
 800579c:	f8ca 6000 	str.w	r6, [sl]
 80057a0:	f8da 3000 	ldr.w	r3, [sl]
 80057a4:	4499      	add	r9, r3
 80057a6:	2200      	movs	r2, #0
 80057a8:	2300      	movs	r3, #0
 80057aa:	4620      	mov	r0, r4
 80057ac:	4629      	mov	r1, r5
 80057ae:	f7fb f9e3 	bl	8000b78 <__aeabi_dcmpeq>
 80057b2:	b108      	cbz	r0, 80057b8 <__cvt+0xa4>
 80057b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80057b8:	2230      	movs	r2, #48	; 0x30
 80057ba:	9b03      	ldr	r3, [sp, #12]
 80057bc:	454b      	cmp	r3, r9
 80057be:	d307      	bcc.n	80057d0 <__cvt+0xbc>
 80057c0:	9b03      	ldr	r3, [sp, #12]
 80057c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057c4:	1bdb      	subs	r3, r3, r7
 80057c6:	4638      	mov	r0, r7
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	b004      	add	sp, #16
 80057cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d0:	1c59      	adds	r1, r3, #1
 80057d2:	9103      	str	r1, [sp, #12]
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	e7f0      	b.n	80057ba <__cvt+0xa6>

080057d8 <__exponent>:
 80057d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057da:	4603      	mov	r3, r0
 80057dc:	2900      	cmp	r1, #0
 80057de:	bfb8      	it	lt
 80057e0:	4249      	neglt	r1, r1
 80057e2:	f803 2b02 	strb.w	r2, [r3], #2
 80057e6:	bfb4      	ite	lt
 80057e8:	222d      	movlt	r2, #45	; 0x2d
 80057ea:	222b      	movge	r2, #43	; 0x2b
 80057ec:	2909      	cmp	r1, #9
 80057ee:	7042      	strb	r2, [r0, #1]
 80057f0:	dd2a      	ble.n	8005848 <__exponent+0x70>
 80057f2:	f10d 0407 	add.w	r4, sp, #7
 80057f6:	46a4      	mov	ip, r4
 80057f8:	270a      	movs	r7, #10
 80057fa:	46a6      	mov	lr, r4
 80057fc:	460a      	mov	r2, r1
 80057fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8005802:	fb07 1516 	mls	r5, r7, r6, r1
 8005806:	3530      	adds	r5, #48	; 0x30
 8005808:	2a63      	cmp	r2, #99	; 0x63
 800580a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800580e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005812:	4631      	mov	r1, r6
 8005814:	dcf1      	bgt.n	80057fa <__exponent+0x22>
 8005816:	3130      	adds	r1, #48	; 0x30
 8005818:	f1ae 0502 	sub.w	r5, lr, #2
 800581c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005820:	1c44      	adds	r4, r0, #1
 8005822:	4629      	mov	r1, r5
 8005824:	4561      	cmp	r1, ip
 8005826:	d30a      	bcc.n	800583e <__exponent+0x66>
 8005828:	f10d 0209 	add.w	r2, sp, #9
 800582c:	eba2 020e 	sub.w	r2, r2, lr
 8005830:	4565      	cmp	r5, ip
 8005832:	bf88      	it	hi
 8005834:	2200      	movhi	r2, #0
 8005836:	4413      	add	r3, r2
 8005838:	1a18      	subs	r0, r3, r0
 800583a:	b003      	add	sp, #12
 800583c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800583e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005842:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005846:	e7ed      	b.n	8005824 <__exponent+0x4c>
 8005848:	2330      	movs	r3, #48	; 0x30
 800584a:	3130      	adds	r1, #48	; 0x30
 800584c:	7083      	strb	r3, [r0, #2]
 800584e:	70c1      	strb	r1, [r0, #3]
 8005850:	1d03      	adds	r3, r0, #4
 8005852:	e7f1      	b.n	8005838 <__exponent+0x60>

08005854 <_printf_float>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	ed2d 8b02 	vpush	{d8}
 800585c:	b08d      	sub	sp, #52	; 0x34
 800585e:	460c      	mov	r4, r1
 8005860:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005864:	4616      	mov	r6, r2
 8005866:	461f      	mov	r7, r3
 8005868:	4605      	mov	r5, r0
 800586a:	f003 f975 	bl	8008b58 <_localeconv_r>
 800586e:	f8d0 a000 	ldr.w	sl, [r0]
 8005872:	4650      	mov	r0, sl
 8005874:	f7fa fcfe 	bl	8000274 <strlen>
 8005878:	2300      	movs	r3, #0
 800587a:	930a      	str	r3, [sp, #40]	; 0x28
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	9305      	str	r3, [sp, #20]
 8005880:	f8d8 3000 	ldr.w	r3, [r8]
 8005884:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005888:	3307      	adds	r3, #7
 800588a:	f023 0307 	bic.w	r3, r3, #7
 800588e:	f103 0208 	add.w	r2, r3, #8
 8005892:	f8c8 2000 	str.w	r2, [r8]
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800589e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80058a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058a6:	9307      	str	r3, [sp, #28]
 80058a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80058ac:	ee08 0a10 	vmov	s16, r0
 80058b0:	4b9f      	ldr	r3, [pc, #636]	; (8005b30 <_printf_float+0x2dc>)
 80058b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058ba:	f7fb f98f 	bl	8000bdc <__aeabi_dcmpun>
 80058be:	bb88      	cbnz	r0, 8005924 <_printf_float+0xd0>
 80058c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058c4:	4b9a      	ldr	r3, [pc, #616]	; (8005b30 <_printf_float+0x2dc>)
 80058c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058ca:	f7fb f969 	bl	8000ba0 <__aeabi_dcmple>
 80058ce:	bb48      	cbnz	r0, 8005924 <_printf_float+0xd0>
 80058d0:	2200      	movs	r2, #0
 80058d2:	2300      	movs	r3, #0
 80058d4:	4640      	mov	r0, r8
 80058d6:	4649      	mov	r1, r9
 80058d8:	f7fb f958 	bl	8000b8c <__aeabi_dcmplt>
 80058dc:	b110      	cbz	r0, 80058e4 <_printf_float+0x90>
 80058de:	232d      	movs	r3, #45	; 0x2d
 80058e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e4:	4b93      	ldr	r3, [pc, #588]	; (8005b34 <_printf_float+0x2e0>)
 80058e6:	4894      	ldr	r0, [pc, #592]	; (8005b38 <_printf_float+0x2e4>)
 80058e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80058ec:	bf94      	ite	ls
 80058ee:	4698      	movls	r8, r3
 80058f0:	4680      	movhi	r8, r0
 80058f2:	2303      	movs	r3, #3
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	9b05      	ldr	r3, [sp, #20]
 80058f8:	f023 0204 	bic.w	r2, r3, #4
 80058fc:	6022      	str	r2, [r4, #0]
 80058fe:	f04f 0900 	mov.w	r9, #0
 8005902:	9700      	str	r7, [sp, #0]
 8005904:	4633      	mov	r3, r6
 8005906:	aa0b      	add	r2, sp, #44	; 0x2c
 8005908:	4621      	mov	r1, r4
 800590a:	4628      	mov	r0, r5
 800590c:	f000 f9d8 	bl	8005cc0 <_printf_common>
 8005910:	3001      	adds	r0, #1
 8005912:	f040 8090 	bne.w	8005a36 <_printf_float+0x1e2>
 8005916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800591a:	b00d      	add	sp, #52	; 0x34
 800591c:	ecbd 8b02 	vpop	{d8}
 8005920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005924:	4642      	mov	r2, r8
 8005926:	464b      	mov	r3, r9
 8005928:	4640      	mov	r0, r8
 800592a:	4649      	mov	r1, r9
 800592c:	f7fb f956 	bl	8000bdc <__aeabi_dcmpun>
 8005930:	b140      	cbz	r0, 8005944 <_printf_float+0xf0>
 8005932:	464b      	mov	r3, r9
 8005934:	2b00      	cmp	r3, #0
 8005936:	bfbc      	itt	lt
 8005938:	232d      	movlt	r3, #45	; 0x2d
 800593a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800593e:	487f      	ldr	r0, [pc, #508]	; (8005b3c <_printf_float+0x2e8>)
 8005940:	4b7f      	ldr	r3, [pc, #508]	; (8005b40 <_printf_float+0x2ec>)
 8005942:	e7d1      	b.n	80058e8 <_printf_float+0x94>
 8005944:	6863      	ldr	r3, [r4, #4]
 8005946:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800594a:	9206      	str	r2, [sp, #24]
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	d13f      	bne.n	80059d0 <_printf_float+0x17c>
 8005950:	2306      	movs	r3, #6
 8005952:	6063      	str	r3, [r4, #4]
 8005954:	9b05      	ldr	r3, [sp, #20]
 8005956:	6861      	ldr	r1, [r4, #4]
 8005958:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800595c:	2300      	movs	r3, #0
 800595e:	9303      	str	r3, [sp, #12]
 8005960:	ab0a      	add	r3, sp, #40	; 0x28
 8005962:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005966:	ab09      	add	r3, sp, #36	; 0x24
 8005968:	ec49 8b10 	vmov	d0, r8, r9
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	6022      	str	r2, [r4, #0]
 8005970:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005974:	4628      	mov	r0, r5
 8005976:	f7ff fecd 	bl	8005714 <__cvt>
 800597a:	9b06      	ldr	r3, [sp, #24]
 800597c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800597e:	2b47      	cmp	r3, #71	; 0x47
 8005980:	4680      	mov	r8, r0
 8005982:	d108      	bne.n	8005996 <_printf_float+0x142>
 8005984:	1cc8      	adds	r0, r1, #3
 8005986:	db02      	blt.n	800598e <_printf_float+0x13a>
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	4299      	cmp	r1, r3
 800598c:	dd41      	ble.n	8005a12 <_printf_float+0x1be>
 800598e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005992:	fa5f fb8b 	uxtb.w	fp, fp
 8005996:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800599a:	d820      	bhi.n	80059de <_printf_float+0x18a>
 800599c:	3901      	subs	r1, #1
 800599e:	465a      	mov	r2, fp
 80059a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059a4:	9109      	str	r1, [sp, #36]	; 0x24
 80059a6:	f7ff ff17 	bl	80057d8 <__exponent>
 80059aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ac:	1813      	adds	r3, r2, r0
 80059ae:	2a01      	cmp	r2, #1
 80059b0:	4681      	mov	r9, r0
 80059b2:	6123      	str	r3, [r4, #16]
 80059b4:	dc02      	bgt.n	80059bc <_printf_float+0x168>
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	07d2      	lsls	r2, r2, #31
 80059ba:	d501      	bpl.n	80059c0 <_printf_float+0x16c>
 80059bc:	3301      	adds	r3, #1
 80059be:	6123      	str	r3, [r4, #16]
 80059c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d09c      	beq.n	8005902 <_printf_float+0xae>
 80059c8:	232d      	movs	r3, #45	; 0x2d
 80059ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ce:	e798      	b.n	8005902 <_printf_float+0xae>
 80059d0:	9a06      	ldr	r2, [sp, #24]
 80059d2:	2a47      	cmp	r2, #71	; 0x47
 80059d4:	d1be      	bne.n	8005954 <_printf_float+0x100>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1bc      	bne.n	8005954 <_printf_float+0x100>
 80059da:	2301      	movs	r3, #1
 80059dc:	e7b9      	b.n	8005952 <_printf_float+0xfe>
 80059de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80059e2:	d118      	bne.n	8005a16 <_printf_float+0x1c2>
 80059e4:	2900      	cmp	r1, #0
 80059e6:	6863      	ldr	r3, [r4, #4]
 80059e8:	dd0b      	ble.n	8005a02 <_printf_float+0x1ae>
 80059ea:	6121      	str	r1, [r4, #16]
 80059ec:	b913      	cbnz	r3, 80059f4 <_printf_float+0x1a0>
 80059ee:	6822      	ldr	r2, [r4, #0]
 80059f0:	07d0      	lsls	r0, r2, #31
 80059f2:	d502      	bpl.n	80059fa <_printf_float+0x1a6>
 80059f4:	3301      	adds	r3, #1
 80059f6:	440b      	add	r3, r1
 80059f8:	6123      	str	r3, [r4, #16]
 80059fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80059fc:	f04f 0900 	mov.w	r9, #0
 8005a00:	e7de      	b.n	80059c0 <_printf_float+0x16c>
 8005a02:	b913      	cbnz	r3, 8005a0a <_printf_float+0x1b6>
 8005a04:	6822      	ldr	r2, [r4, #0]
 8005a06:	07d2      	lsls	r2, r2, #31
 8005a08:	d501      	bpl.n	8005a0e <_printf_float+0x1ba>
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	e7f4      	b.n	80059f8 <_printf_float+0x1a4>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e7f2      	b.n	80059f8 <_printf_float+0x1a4>
 8005a12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a18:	4299      	cmp	r1, r3
 8005a1a:	db05      	blt.n	8005a28 <_printf_float+0x1d4>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	6121      	str	r1, [r4, #16]
 8005a20:	07d8      	lsls	r0, r3, #31
 8005a22:	d5ea      	bpl.n	80059fa <_printf_float+0x1a6>
 8005a24:	1c4b      	adds	r3, r1, #1
 8005a26:	e7e7      	b.n	80059f8 <_printf_float+0x1a4>
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	bfd4      	ite	le
 8005a2c:	f1c1 0202 	rsble	r2, r1, #2
 8005a30:	2201      	movgt	r2, #1
 8005a32:	4413      	add	r3, r2
 8005a34:	e7e0      	b.n	80059f8 <_printf_float+0x1a4>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	055a      	lsls	r2, r3, #21
 8005a3a:	d407      	bmi.n	8005a4c <_printf_float+0x1f8>
 8005a3c:	6923      	ldr	r3, [r4, #16]
 8005a3e:	4642      	mov	r2, r8
 8005a40:	4631      	mov	r1, r6
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	d12c      	bne.n	8005aa4 <_printf_float+0x250>
 8005a4a:	e764      	b.n	8005916 <_printf_float+0xc2>
 8005a4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a50:	f240 80e0 	bls.w	8005c14 <_printf_float+0x3c0>
 8005a54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f7fb f88c 	bl	8000b78 <__aeabi_dcmpeq>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d034      	beq.n	8005ace <_printf_float+0x27a>
 8005a64:	4a37      	ldr	r2, [pc, #220]	; (8005b44 <_printf_float+0x2f0>)
 8005a66:	2301      	movs	r3, #1
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b8      	blx	r7
 8005a6e:	3001      	adds	r0, #1
 8005a70:	f43f af51 	beq.w	8005916 <_printf_float+0xc2>
 8005a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	db02      	blt.n	8005a82 <_printf_float+0x22e>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	07d8      	lsls	r0, r3, #31
 8005a80:	d510      	bpl.n	8005aa4 <_printf_float+0x250>
 8005a82:	ee18 3a10 	vmov	r3, s16
 8005a86:	4652      	mov	r2, sl
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	47b8      	blx	r7
 8005a8e:	3001      	adds	r0, #1
 8005a90:	f43f af41 	beq.w	8005916 <_printf_float+0xc2>
 8005a94:	f04f 0800 	mov.w	r8, #0
 8005a98:	f104 091a 	add.w	r9, r4, #26
 8005a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	4543      	cmp	r3, r8
 8005aa2:	dc09      	bgt.n	8005ab8 <_printf_float+0x264>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	079b      	lsls	r3, r3, #30
 8005aa8:	f100 8105 	bmi.w	8005cb6 <_printf_float+0x462>
 8005aac:	68e0      	ldr	r0, [r4, #12]
 8005aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab0:	4298      	cmp	r0, r3
 8005ab2:	bfb8      	it	lt
 8005ab4:	4618      	movlt	r0, r3
 8005ab6:	e730      	b.n	800591a <_printf_float+0xc6>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	464a      	mov	r2, r9
 8005abc:	4631      	mov	r1, r6
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b8      	blx	r7
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f43f af27 	beq.w	8005916 <_printf_float+0xc2>
 8005ac8:	f108 0801 	add.w	r8, r8, #1
 8005acc:	e7e6      	b.n	8005a9c <_printf_float+0x248>
 8005ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	dc39      	bgt.n	8005b48 <_printf_float+0x2f4>
 8005ad4:	4a1b      	ldr	r2, [pc, #108]	; (8005b44 <_printf_float+0x2f0>)
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	47b8      	blx	r7
 8005ade:	3001      	adds	r0, #1
 8005ae0:	f43f af19 	beq.w	8005916 <_printf_float+0xc2>
 8005ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	d102      	bne.n	8005af2 <_printf_float+0x29e>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	07d9      	lsls	r1, r3, #31
 8005af0:	d5d8      	bpl.n	8005aa4 <_printf_float+0x250>
 8005af2:	ee18 3a10 	vmov	r3, s16
 8005af6:	4652      	mov	r2, sl
 8005af8:	4631      	mov	r1, r6
 8005afa:	4628      	mov	r0, r5
 8005afc:	47b8      	blx	r7
 8005afe:	3001      	adds	r0, #1
 8005b00:	f43f af09 	beq.w	8005916 <_printf_float+0xc2>
 8005b04:	f04f 0900 	mov.w	r9, #0
 8005b08:	f104 0a1a 	add.w	sl, r4, #26
 8005b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0e:	425b      	negs	r3, r3
 8005b10:	454b      	cmp	r3, r9
 8005b12:	dc01      	bgt.n	8005b18 <_printf_float+0x2c4>
 8005b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b16:	e792      	b.n	8005a3e <_printf_float+0x1ea>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4652      	mov	r2, sl
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b8      	blx	r7
 8005b22:	3001      	adds	r0, #1
 8005b24:	f43f aef7 	beq.w	8005916 <_printf_float+0xc2>
 8005b28:	f109 0901 	add.w	r9, r9, #1
 8005b2c:	e7ee      	b.n	8005b0c <_printf_float+0x2b8>
 8005b2e:	bf00      	nop
 8005b30:	7fefffff 	.word	0x7fefffff
 8005b34:	0800a1e0 	.word	0x0800a1e0
 8005b38:	0800a1e4 	.word	0x0800a1e4
 8005b3c:	0800a1ec 	.word	0x0800a1ec
 8005b40:	0800a1e8 	.word	0x0800a1e8
 8005b44:	0800a1f0 	.word	0x0800a1f0
 8005b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	bfa8      	it	ge
 8005b50:	461a      	movge	r2, r3
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	4691      	mov	r9, r2
 8005b56:	dc37      	bgt.n	8005bc8 <_printf_float+0x374>
 8005b58:	f04f 0b00 	mov.w	fp, #0
 8005b5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b60:	f104 021a 	add.w	r2, r4, #26
 8005b64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b66:	9305      	str	r3, [sp, #20]
 8005b68:	eba3 0309 	sub.w	r3, r3, r9
 8005b6c:	455b      	cmp	r3, fp
 8005b6e:	dc33      	bgt.n	8005bd8 <_printf_float+0x384>
 8005b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b74:	429a      	cmp	r2, r3
 8005b76:	db3b      	blt.n	8005bf0 <_printf_float+0x39c>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	07da      	lsls	r2, r3, #31
 8005b7c:	d438      	bmi.n	8005bf0 <_printf_float+0x39c>
 8005b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b80:	9a05      	ldr	r2, [sp, #20]
 8005b82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b84:	1a9a      	subs	r2, r3, r2
 8005b86:	eba3 0901 	sub.w	r9, r3, r1
 8005b8a:	4591      	cmp	r9, r2
 8005b8c:	bfa8      	it	ge
 8005b8e:	4691      	movge	r9, r2
 8005b90:	f1b9 0f00 	cmp.w	r9, #0
 8005b94:	dc35      	bgt.n	8005c02 <_printf_float+0x3ae>
 8005b96:	f04f 0800 	mov.w	r8, #0
 8005b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b9e:	f104 0a1a 	add.w	sl, r4, #26
 8005ba2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	eba3 0309 	sub.w	r3, r3, r9
 8005bac:	4543      	cmp	r3, r8
 8005bae:	f77f af79 	ble.w	8005aa4 <_printf_float+0x250>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4652      	mov	r2, sl
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b8      	blx	r7
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f43f aeaa 	beq.w	8005916 <_printf_float+0xc2>
 8005bc2:	f108 0801 	add.w	r8, r8, #1
 8005bc6:	e7ec      	b.n	8005ba2 <_printf_float+0x34e>
 8005bc8:	4613      	mov	r3, r2
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4642      	mov	r2, r8
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d1c0      	bne.n	8005b58 <_printf_float+0x304>
 8005bd6:	e69e      	b.n	8005916 <_printf_float+0xc2>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	9205      	str	r2, [sp, #20]
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f ae97 	beq.w	8005916 <_printf_float+0xc2>
 8005be8:	9a05      	ldr	r2, [sp, #20]
 8005bea:	f10b 0b01 	add.w	fp, fp, #1
 8005bee:	e7b9      	b.n	8005b64 <_printf_float+0x310>
 8005bf0:	ee18 3a10 	vmov	r3, s16
 8005bf4:	4652      	mov	r2, sl
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d1be      	bne.n	8005b7e <_printf_float+0x32a>
 8005c00:	e689      	b.n	8005916 <_printf_float+0xc2>
 8005c02:	9a05      	ldr	r2, [sp, #20]
 8005c04:	464b      	mov	r3, r9
 8005c06:	4442      	add	r2, r8
 8005c08:	4631      	mov	r1, r6
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b8      	blx	r7
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d1c1      	bne.n	8005b96 <_printf_float+0x342>
 8005c12:	e680      	b.n	8005916 <_printf_float+0xc2>
 8005c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c16:	2a01      	cmp	r2, #1
 8005c18:	dc01      	bgt.n	8005c1e <_printf_float+0x3ca>
 8005c1a:	07db      	lsls	r3, r3, #31
 8005c1c:	d538      	bpl.n	8005c90 <_printf_float+0x43c>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4642      	mov	r2, r8
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f43f ae74 	beq.w	8005916 <_printf_float+0xc2>
 8005c2e:	ee18 3a10 	vmov	r3, s16
 8005c32:	4652      	mov	r2, sl
 8005c34:	4631      	mov	r1, r6
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f43f ae6b 	beq.w	8005916 <_printf_float+0xc2>
 8005c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c44:	2200      	movs	r2, #0
 8005c46:	2300      	movs	r3, #0
 8005c48:	f7fa ff96 	bl	8000b78 <__aeabi_dcmpeq>
 8005c4c:	b9d8      	cbnz	r0, 8005c86 <_printf_float+0x432>
 8005c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c50:	f108 0201 	add.w	r2, r8, #1
 8005c54:	3b01      	subs	r3, #1
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d10e      	bne.n	8005c7e <_printf_float+0x42a>
 8005c60:	e659      	b.n	8005916 <_printf_float+0xc2>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4652      	mov	r2, sl
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f43f ae52 	beq.w	8005916 <_printf_float+0xc2>
 8005c72:	f108 0801 	add.w	r8, r8, #1
 8005c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	4543      	cmp	r3, r8
 8005c7c:	dcf1      	bgt.n	8005c62 <_printf_float+0x40e>
 8005c7e:	464b      	mov	r3, r9
 8005c80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c84:	e6dc      	b.n	8005a40 <_printf_float+0x1ec>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	f104 0a1a 	add.w	sl, r4, #26
 8005c8e:	e7f2      	b.n	8005c76 <_printf_float+0x422>
 8005c90:	2301      	movs	r3, #1
 8005c92:	4642      	mov	r2, r8
 8005c94:	e7df      	b.n	8005c56 <_printf_float+0x402>
 8005c96:	2301      	movs	r3, #1
 8005c98:	464a      	mov	r2, r9
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f43f ae38 	beq.w	8005916 <_printf_float+0xc2>
 8005ca6:	f108 0801 	add.w	r8, r8, #1
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cae:	1a5b      	subs	r3, r3, r1
 8005cb0:	4543      	cmp	r3, r8
 8005cb2:	dcf0      	bgt.n	8005c96 <_printf_float+0x442>
 8005cb4:	e6fa      	b.n	8005aac <_printf_float+0x258>
 8005cb6:	f04f 0800 	mov.w	r8, #0
 8005cba:	f104 0919 	add.w	r9, r4, #25
 8005cbe:	e7f4      	b.n	8005caa <_printf_float+0x456>

08005cc0 <_printf_common>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	4699      	mov	r9, r3
 8005cc8:	688a      	ldr	r2, [r1, #8]
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	bfb8      	it	lt
 8005cd4:	4613      	movlt	r3, r2
 8005cd6:	6033      	str	r3, [r6, #0]
 8005cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cdc:	4607      	mov	r7, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	b10a      	cbz	r2, 8005ce6 <_printf_common+0x26>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6033      	str	r3, [r6, #0]
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	0699      	lsls	r1, r3, #26
 8005cea:	bf42      	ittt	mi
 8005cec:	6833      	ldrmi	r3, [r6, #0]
 8005cee:	3302      	addmi	r3, #2
 8005cf0:	6033      	strmi	r3, [r6, #0]
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	f015 0506 	ands.w	r5, r5, #6
 8005cf8:	d106      	bne.n	8005d08 <_printf_common+0x48>
 8005cfa:	f104 0a19 	add.w	sl, r4, #25
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	6832      	ldr	r2, [r6, #0]
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dc26      	bgt.n	8005d56 <_printf_common+0x96>
 8005d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d0c:	1e13      	subs	r3, r2, #0
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	bf18      	it	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	0692      	lsls	r2, r2, #26
 8005d16:	d42b      	bmi.n	8005d70 <_printf_common+0xb0>
 8005d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c0      	blx	r8
 8005d22:	3001      	adds	r0, #1
 8005d24:	d01e      	beq.n	8005d64 <_printf_common+0xa4>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	68e5      	ldr	r5, [r4, #12]
 8005d2a:	6832      	ldr	r2, [r6, #0]
 8005d2c:	f003 0306 	and.w	r3, r3, #6
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	bf08      	it	eq
 8005d34:	1aad      	subeq	r5, r5, r2
 8005d36:	68a3      	ldr	r3, [r4, #8]
 8005d38:	6922      	ldr	r2, [r4, #16]
 8005d3a:	bf0c      	ite	eq
 8005d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d40:	2500      	movne	r5, #0
 8005d42:	4293      	cmp	r3, r2
 8005d44:	bfc4      	itt	gt
 8005d46:	1a9b      	subgt	r3, r3, r2
 8005d48:	18ed      	addgt	r5, r5, r3
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	341a      	adds	r4, #26
 8005d4e:	42b5      	cmp	r5, r6
 8005d50:	d11a      	bne.n	8005d88 <_printf_common+0xc8>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e008      	b.n	8005d68 <_printf_common+0xa8>
 8005d56:	2301      	movs	r3, #1
 8005d58:	4652      	mov	r2, sl
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	47c0      	blx	r8
 8005d60:	3001      	adds	r0, #1
 8005d62:	d103      	bne.n	8005d6c <_printf_common+0xac>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	e7c6      	b.n	8005cfe <_printf_common+0x3e>
 8005d70:	18e1      	adds	r1, r4, r3
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	2030      	movs	r0, #48	; 0x30
 8005d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d7a:	4422      	add	r2, r4
 8005d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d84:	3302      	adds	r3, #2
 8005d86:	e7c7      	b.n	8005d18 <_printf_common+0x58>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	4649      	mov	r1, r9
 8005d8e:	4638      	mov	r0, r7
 8005d90:	47c0      	blx	r8
 8005d92:	3001      	adds	r0, #1
 8005d94:	d0e6      	beq.n	8005d64 <_printf_common+0xa4>
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7d9      	b.n	8005d4e <_printf_common+0x8e>
	...

08005d9c <_printf_i>:
 8005d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	7e0f      	ldrb	r7, [r1, #24]
 8005da2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005da4:	2f78      	cmp	r7, #120	; 0x78
 8005da6:	4691      	mov	r9, r2
 8005da8:	4680      	mov	r8, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	469a      	mov	sl, r3
 8005dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005db2:	d807      	bhi.n	8005dc4 <_printf_i+0x28>
 8005db4:	2f62      	cmp	r7, #98	; 0x62
 8005db6:	d80a      	bhi.n	8005dce <_printf_i+0x32>
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	f000 80d8 	beq.w	8005f6e <_printf_i+0x1d2>
 8005dbe:	2f58      	cmp	r7, #88	; 0x58
 8005dc0:	f000 80a3 	beq.w	8005f0a <_printf_i+0x16e>
 8005dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dcc:	e03a      	b.n	8005e44 <_printf_i+0xa8>
 8005dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dd2:	2b15      	cmp	r3, #21
 8005dd4:	d8f6      	bhi.n	8005dc4 <_printf_i+0x28>
 8005dd6:	a101      	add	r1, pc, #4	; (adr r1, 8005ddc <_printf_i+0x40>)
 8005dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e49 	.word	0x08005e49
 8005de4:	08005dc5 	.word	0x08005dc5
 8005de8:	08005dc5 	.word	0x08005dc5
 8005dec:	08005dc5 	.word	0x08005dc5
 8005df0:	08005dc5 	.word	0x08005dc5
 8005df4:	08005e49 	.word	0x08005e49
 8005df8:	08005dc5 	.word	0x08005dc5
 8005dfc:	08005dc5 	.word	0x08005dc5
 8005e00:	08005dc5 	.word	0x08005dc5
 8005e04:	08005dc5 	.word	0x08005dc5
 8005e08:	08005f55 	.word	0x08005f55
 8005e0c:	08005e79 	.word	0x08005e79
 8005e10:	08005f37 	.word	0x08005f37
 8005e14:	08005dc5 	.word	0x08005dc5
 8005e18:	08005dc5 	.word	0x08005dc5
 8005e1c:	08005f77 	.word	0x08005f77
 8005e20:	08005dc5 	.word	0x08005dc5
 8005e24:	08005e79 	.word	0x08005e79
 8005e28:	08005dc5 	.word	0x08005dc5
 8005e2c:	08005dc5 	.word	0x08005dc5
 8005e30:	08005f3f 	.word	0x08005f3f
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	602a      	str	r2, [r5, #0]
 8005e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0a3      	b.n	8005f90 <_printf_i+0x1f4>
 8005e48:	6820      	ldr	r0, [r4, #0]
 8005e4a:	6829      	ldr	r1, [r5, #0]
 8005e4c:	0606      	lsls	r6, r0, #24
 8005e4e:	f101 0304 	add.w	r3, r1, #4
 8005e52:	d50a      	bpl.n	8005e6a <_printf_i+0xce>
 8005e54:	680e      	ldr	r6, [r1, #0]
 8005e56:	602b      	str	r3, [r5, #0]
 8005e58:	2e00      	cmp	r6, #0
 8005e5a:	da03      	bge.n	8005e64 <_printf_i+0xc8>
 8005e5c:	232d      	movs	r3, #45	; 0x2d
 8005e5e:	4276      	negs	r6, r6
 8005e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e64:	485e      	ldr	r0, [pc, #376]	; (8005fe0 <_printf_i+0x244>)
 8005e66:	230a      	movs	r3, #10
 8005e68:	e019      	b.n	8005e9e <_printf_i+0x102>
 8005e6a:	680e      	ldr	r6, [r1, #0]
 8005e6c:	602b      	str	r3, [r5, #0]
 8005e6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e72:	bf18      	it	ne
 8005e74:	b236      	sxthne	r6, r6
 8005e76:	e7ef      	b.n	8005e58 <_printf_i+0xbc>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	6820      	ldr	r0, [r4, #0]
 8005e7c:	1d19      	adds	r1, r3, #4
 8005e7e:	6029      	str	r1, [r5, #0]
 8005e80:	0601      	lsls	r1, r0, #24
 8005e82:	d501      	bpl.n	8005e88 <_printf_i+0xec>
 8005e84:	681e      	ldr	r6, [r3, #0]
 8005e86:	e002      	b.n	8005e8e <_printf_i+0xf2>
 8005e88:	0646      	lsls	r6, r0, #25
 8005e8a:	d5fb      	bpl.n	8005e84 <_printf_i+0xe8>
 8005e8c:	881e      	ldrh	r6, [r3, #0]
 8005e8e:	4854      	ldr	r0, [pc, #336]	; (8005fe0 <_printf_i+0x244>)
 8005e90:	2f6f      	cmp	r7, #111	; 0x6f
 8005e92:	bf0c      	ite	eq
 8005e94:	2308      	moveq	r3, #8
 8005e96:	230a      	movne	r3, #10
 8005e98:	2100      	movs	r1, #0
 8005e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e9e:	6865      	ldr	r5, [r4, #4]
 8005ea0:	60a5      	str	r5, [r4, #8]
 8005ea2:	2d00      	cmp	r5, #0
 8005ea4:	bfa2      	ittt	ge
 8005ea6:	6821      	ldrge	r1, [r4, #0]
 8005ea8:	f021 0104 	bicge.w	r1, r1, #4
 8005eac:	6021      	strge	r1, [r4, #0]
 8005eae:	b90e      	cbnz	r6, 8005eb4 <_printf_i+0x118>
 8005eb0:	2d00      	cmp	r5, #0
 8005eb2:	d04d      	beq.n	8005f50 <_printf_i+0x1b4>
 8005eb4:	4615      	mov	r5, r2
 8005eb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005eba:	fb03 6711 	mls	r7, r3, r1, r6
 8005ebe:	5dc7      	ldrb	r7, [r0, r7]
 8005ec0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ec4:	4637      	mov	r7, r6
 8005ec6:	42bb      	cmp	r3, r7
 8005ec8:	460e      	mov	r6, r1
 8005eca:	d9f4      	bls.n	8005eb6 <_printf_i+0x11a>
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d10b      	bne.n	8005ee8 <_printf_i+0x14c>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	07de      	lsls	r6, r3, #31
 8005ed4:	d508      	bpl.n	8005ee8 <_printf_i+0x14c>
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	6861      	ldr	r1, [r4, #4]
 8005eda:	4299      	cmp	r1, r3
 8005edc:	bfde      	ittt	le
 8005ede:	2330      	movle	r3, #48	; 0x30
 8005ee0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ee4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ee8:	1b52      	subs	r2, r2, r5
 8005eea:	6122      	str	r2, [r4, #16]
 8005eec:	f8cd a000 	str.w	sl, [sp]
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	aa03      	add	r2, sp, #12
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4640      	mov	r0, r8
 8005ef8:	f7ff fee2 	bl	8005cc0 <_printf_common>
 8005efc:	3001      	adds	r0, #1
 8005efe:	d14c      	bne.n	8005f9a <_printf_i+0x1fe>
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f04:	b004      	add	sp, #16
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	4835      	ldr	r0, [pc, #212]	; (8005fe0 <_printf_i+0x244>)
 8005f0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f10:	6829      	ldr	r1, [r5, #0]
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f18:	6029      	str	r1, [r5, #0]
 8005f1a:	061d      	lsls	r5, r3, #24
 8005f1c:	d514      	bpl.n	8005f48 <_printf_i+0x1ac>
 8005f1e:	07df      	lsls	r7, r3, #31
 8005f20:	bf44      	itt	mi
 8005f22:	f043 0320 	orrmi.w	r3, r3, #32
 8005f26:	6023      	strmi	r3, [r4, #0]
 8005f28:	b91e      	cbnz	r6, 8005f32 <_printf_i+0x196>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	f023 0320 	bic.w	r3, r3, #32
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	2310      	movs	r3, #16
 8005f34:	e7b0      	b.n	8005e98 <_printf_i+0xfc>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	f043 0320 	orr.w	r3, r3, #32
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	2378      	movs	r3, #120	; 0x78
 8005f40:	4828      	ldr	r0, [pc, #160]	; (8005fe4 <_printf_i+0x248>)
 8005f42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f46:	e7e3      	b.n	8005f10 <_printf_i+0x174>
 8005f48:	0659      	lsls	r1, r3, #25
 8005f4a:	bf48      	it	mi
 8005f4c:	b2b6      	uxthmi	r6, r6
 8005f4e:	e7e6      	b.n	8005f1e <_printf_i+0x182>
 8005f50:	4615      	mov	r5, r2
 8005f52:	e7bb      	b.n	8005ecc <_printf_i+0x130>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	6826      	ldr	r6, [r4, #0]
 8005f58:	6961      	ldr	r1, [r4, #20]
 8005f5a:	1d18      	adds	r0, r3, #4
 8005f5c:	6028      	str	r0, [r5, #0]
 8005f5e:	0635      	lsls	r5, r6, #24
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	d501      	bpl.n	8005f68 <_printf_i+0x1cc>
 8005f64:	6019      	str	r1, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <_printf_i+0x1d2>
 8005f68:	0670      	lsls	r0, r6, #25
 8005f6a:	d5fb      	bpl.n	8005f64 <_printf_i+0x1c8>
 8005f6c:	8019      	strh	r1, [r3, #0]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	6123      	str	r3, [r4, #16]
 8005f72:	4615      	mov	r5, r2
 8005f74:	e7ba      	b.n	8005eec <_printf_i+0x150>
 8005f76:	682b      	ldr	r3, [r5, #0]
 8005f78:	1d1a      	adds	r2, r3, #4
 8005f7a:	602a      	str	r2, [r5, #0]
 8005f7c:	681d      	ldr	r5, [r3, #0]
 8005f7e:	6862      	ldr	r2, [r4, #4]
 8005f80:	2100      	movs	r1, #0
 8005f82:	4628      	mov	r0, r5
 8005f84:	f7fa f984 	bl	8000290 <memchr>
 8005f88:	b108      	cbz	r0, 8005f8e <_printf_i+0x1f2>
 8005f8a:	1b40      	subs	r0, r0, r5
 8005f8c:	6060      	str	r0, [r4, #4]
 8005f8e:	6863      	ldr	r3, [r4, #4]
 8005f90:	6123      	str	r3, [r4, #16]
 8005f92:	2300      	movs	r3, #0
 8005f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f98:	e7a8      	b.n	8005eec <_printf_i+0x150>
 8005f9a:	6923      	ldr	r3, [r4, #16]
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	4640      	mov	r0, r8
 8005fa2:	47d0      	blx	sl
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d0ab      	beq.n	8005f00 <_printf_i+0x164>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	079b      	lsls	r3, r3, #30
 8005fac:	d413      	bmi.n	8005fd6 <_printf_i+0x23a>
 8005fae:	68e0      	ldr	r0, [r4, #12]
 8005fb0:	9b03      	ldr	r3, [sp, #12]
 8005fb2:	4298      	cmp	r0, r3
 8005fb4:	bfb8      	it	lt
 8005fb6:	4618      	movlt	r0, r3
 8005fb8:	e7a4      	b.n	8005f04 <_printf_i+0x168>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	47d0      	blx	sl
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d09b      	beq.n	8005f00 <_printf_i+0x164>
 8005fc8:	3501      	adds	r5, #1
 8005fca:	68e3      	ldr	r3, [r4, #12]
 8005fcc:	9903      	ldr	r1, [sp, #12]
 8005fce:	1a5b      	subs	r3, r3, r1
 8005fd0:	42ab      	cmp	r3, r5
 8005fd2:	dcf2      	bgt.n	8005fba <_printf_i+0x21e>
 8005fd4:	e7eb      	b.n	8005fae <_printf_i+0x212>
 8005fd6:	2500      	movs	r5, #0
 8005fd8:	f104 0619 	add.w	r6, r4, #25
 8005fdc:	e7f5      	b.n	8005fca <_printf_i+0x22e>
 8005fde:	bf00      	nop
 8005fe0:	0800a1f2 	.word	0x0800a1f2
 8005fe4:	0800a203 	.word	0x0800a203

08005fe8 <_scanf_float>:
 8005fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fec:	b087      	sub	sp, #28
 8005fee:	4617      	mov	r7, r2
 8005ff0:	9303      	str	r3, [sp, #12]
 8005ff2:	688b      	ldr	r3, [r1, #8]
 8005ff4:	1e5a      	subs	r2, r3, #1
 8005ff6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005ffa:	bf83      	ittte	hi
 8005ffc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006000:	195b      	addhi	r3, r3, r5
 8006002:	9302      	strhi	r3, [sp, #8]
 8006004:	2300      	movls	r3, #0
 8006006:	bf86      	itte	hi
 8006008:	f240 135d 	movwhi	r3, #349	; 0x15d
 800600c:	608b      	strhi	r3, [r1, #8]
 800600e:	9302      	strls	r3, [sp, #8]
 8006010:	680b      	ldr	r3, [r1, #0]
 8006012:	468b      	mov	fp, r1
 8006014:	2500      	movs	r5, #0
 8006016:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800601a:	f84b 3b1c 	str.w	r3, [fp], #28
 800601e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006022:	4680      	mov	r8, r0
 8006024:	460c      	mov	r4, r1
 8006026:	465e      	mov	r6, fp
 8006028:	46aa      	mov	sl, r5
 800602a:	46a9      	mov	r9, r5
 800602c:	9501      	str	r5, [sp, #4]
 800602e:	68a2      	ldr	r2, [r4, #8]
 8006030:	b152      	cbz	r2, 8006048 <_scanf_float+0x60>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b4e      	cmp	r3, #78	; 0x4e
 8006038:	d864      	bhi.n	8006104 <_scanf_float+0x11c>
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d83c      	bhi.n	80060b8 <_scanf_float+0xd0>
 800603e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006042:	b2c8      	uxtb	r0, r1
 8006044:	280e      	cmp	r0, #14
 8006046:	d93a      	bls.n	80060be <_scanf_float+0xd6>
 8006048:	f1b9 0f00 	cmp.w	r9, #0
 800604c:	d003      	beq.n	8006056 <_scanf_float+0x6e>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800605a:	f1ba 0f01 	cmp.w	sl, #1
 800605e:	f200 8113 	bhi.w	8006288 <_scanf_float+0x2a0>
 8006062:	455e      	cmp	r6, fp
 8006064:	f200 8105 	bhi.w	8006272 <_scanf_float+0x28a>
 8006068:	2501      	movs	r5, #1
 800606a:	4628      	mov	r0, r5
 800606c:	b007      	add	sp, #28
 800606e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006072:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006076:	2a0d      	cmp	r2, #13
 8006078:	d8e6      	bhi.n	8006048 <_scanf_float+0x60>
 800607a:	a101      	add	r1, pc, #4	; (adr r1, 8006080 <_scanf_float+0x98>)
 800607c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006080:	080061bf 	.word	0x080061bf
 8006084:	08006049 	.word	0x08006049
 8006088:	08006049 	.word	0x08006049
 800608c:	08006049 	.word	0x08006049
 8006090:	0800621f 	.word	0x0800621f
 8006094:	080061f7 	.word	0x080061f7
 8006098:	08006049 	.word	0x08006049
 800609c:	08006049 	.word	0x08006049
 80060a0:	080061cd 	.word	0x080061cd
 80060a4:	08006049 	.word	0x08006049
 80060a8:	08006049 	.word	0x08006049
 80060ac:	08006049 	.word	0x08006049
 80060b0:	08006049 	.word	0x08006049
 80060b4:	08006185 	.word	0x08006185
 80060b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80060bc:	e7db      	b.n	8006076 <_scanf_float+0x8e>
 80060be:	290e      	cmp	r1, #14
 80060c0:	d8c2      	bhi.n	8006048 <_scanf_float+0x60>
 80060c2:	a001      	add	r0, pc, #4	; (adr r0, 80060c8 <_scanf_float+0xe0>)
 80060c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80060c8:	08006177 	.word	0x08006177
 80060cc:	08006049 	.word	0x08006049
 80060d0:	08006177 	.word	0x08006177
 80060d4:	0800620b 	.word	0x0800620b
 80060d8:	08006049 	.word	0x08006049
 80060dc:	08006125 	.word	0x08006125
 80060e0:	08006161 	.word	0x08006161
 80060e4:	08006161 	.word	0x08006161
 80060e8:	08006161 	.word	0x08006161
 80060ec:	08006161 	.word	0x08006161
 80060f0:	08006161 	.word	0x08006161
 80060f4:	08006161 	.word	0x08006161
 80060f8:	08006161 	.word	0x08006161
 80060fc:	08006161 	.word	0x08006161
 8006100:	08006161 	.word	0x08006161
 8006104:	2b6e      	cmp	r3, #110	; 0x6e
 8006106:	d809      	bhi.n	800611c <_scanf_float+0x134>
 8006108:	2b60      	cmp	r3, #96	; 0x60
 800610a:	d8b2      	bhi.n	8006072 <_scanf_float+0x8a>
 800610c:	2b54      	cmp	r3, #84	; 0x54
 800610e:	d077      	beq.n	8006200 <_scanf_float+0x218>
 8006110:	2b59      	cmp	r3, #89	; 0x59
 8006112:	d199      	bne.n	8006048 <_scanf_float+0x60>
 8006114:	2d07      	cmp	r5, #7
 8006116:	d197      	bne.n	8006048 <_scanf_float+0x60>
 8006118:	2508      	movs	r5, #8
 800611a:	e029      	b.n	8006170 <_scanf_float+0x188>
 800611c:	2b74      	cmp	r3, #116	; 0x74
 800611e:	d06f      	beq.n	8006200 <_scanf_float+0x218>
 8006120:	2b79      	cmp	r3, #121	; 0x79
 8006122:	e7f6      	b.n	8006112 <_scanf_float+0x12a>
 8006124:	6821      	ldr	r1, [r4, #0]
 8006126:	05c8      	lsls	r0, r1, #23
 8006128:	d51a      	bpl.n	8006160 <_scanf_float+0x178>
 800612a:	9b02      	ldr	r3, [sp, #8]
 800612c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006130:	6021      	str	r1, [r4, #0]
 8006132:	f109 0901 	add.w	r9, r9, #1
 8006136:	b11b      	cbz	r3, 8006140 <_scanf_float+0x158>
 8006138:	3b01      	subs	r3, #1
 800613a:	3201      	adds	r2, #1
 800613c:	9302      	str	r3, [sp, #8]
 800613e:	60a2      	str	r2, [r4, #8]
 8006140:	68a3      	ldr	r3, [r4, #8]
 8006142:	3b01      	subs	r3, #1
 8006144:	60a3      	str	r3, [r4, #8]
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	3301      	adds	r3, #1
 800614a:	6123      	str	r3, [r4, #16]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3b01      	subs	r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	f340 8084 	ble.w	8006260 <_scanf_float+0x278>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	3301      	adds	r3, #1
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	e766      	b.n	800602e <_scanf_float+0x46>
 8006160:	eb1a 0f05 	cmn.w	sl, r5
 8006164:	f47f af70 	bne.w	8006048 <_scanf_float+0x60>
 8006168:	6822      	ldr	r2, [r4, #0]
 800616a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800616e:	6022      	str	r2, [r4, #0]
 8006170:	f806 3b01 	strb.w	r3, [r6], #1
 8006174:	e7e4      	b.n	8006140 <_scanf_float+0x158>
 8006176:	6822      	ldr	r2, [r4, #0]
 8006178:	0610      	lsls	r0, r2, #24
 800617a:	f57f af65 	bpl.w	8006048 <_scanf_float+0x60>
 800617e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006182:	e7f4      	b.n	800616e <_scanf_float+0x186>
 8006184:	f1ba 0f00 	cmp.w	sl, #0
 8006188:	d10e      	bne.n	80061a8 <_scanf_float+0x1c0>
 800618a:	f1b9 0f00 	cmp.w	r9, #0
 800618e:	d10e      	bne.n	80061ae <_scanf_float+0x1c6>
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006196:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800619a:	d108      	bne.n	80061ae <_scanf_float+0x1c6>
 800619c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061a0:	6022      	str	r2, [r4, #0]
 80061a2:	f04f 0a01 	mov.w	sl, #1
 80061a6:	e7e3      	b.n	8006170 <_scanf_float+0x188>
 80061a8:	f1ba 0f02 	cmp.w	sl, #2
 80061ac:	d055      	beq.n	800625a <_scanf_float+0x272>
 80061ae:	2d01      	cmp	r5, #1
 80061b0:	d002      	beq.n	80061b8 <_scanf_float+0x1d0>
 80061b2:	2d04      	cmp	r5, #4
 80061b4:	f47f af48 	bne.w	8006048 <_scanf_float+0x60>
 80061b8:	3501      	adds	r5, #1
 80061ba:	b2ed      	uxtb	r5, r5
 80061bc:	e7d8      	b.n	8006170 <_scanf_float+0x188>
 80061be:	f1ba 0f01 	cmp.w	sl, #1
 80061c2:	f47f af41 	bne.w	8006048 <_scanf_float+0x60>
 80061c6:	f04f 0a02 	mov.w	sl, #2
 80061ca:	e7d1      	b.n	8006170 <_scanf_float+0x188>
 80061cc:	b97d      	cbnz	r5, 80061ee <_scanf_float+0x206>
 80061ce:	f1b9 0f00 	cmp.w	r9, #0
 80061d2:	f47f af3c 	bne.w	800604e <_scanf_float+0x66>
 80061d6:	6822      	ldr	r2, [r4, #0]
 80061d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061e0:	f47f af39 	bne.w	8006056 <_scanf_float+0x6e>
 80061e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061e8:	6022      	str	r2, [r4, #0]
 80061ea:	2501      	movs	r5, #1
 80061ec:	e7c0      	b.n	8006170 <_scanf_float+0x188>
 80061ee:	2d03      	cmp	r5, #3
 80061f0:	d0e2      	beq.n	80061b8 <_scanf_float+0x1d0>
 80061f2:	2d05      	cmp	r5, #5
 80061f4:	e7de      	b.n	80061b4 <_scanf_float+0x1cc>
 80061f6:	2d02      	cmp	r5, #2
 80061f8:	f47f af26 	bne.w	8006048 <_scanf_float+0x60>
 80061fc:	2503      	movs	r5, #3
 80061fe:	e7b7      	b.n	8006170 <_scanf_float+0x188>
 8006200:	2d06      	cmp	r5, #6
 8006202:	f47f af21 	bne.w	8006048 <_scanf_float+0x60>
 8006206:	2507      	movs	r5, #7
 8006208:	e7b2      	b.n	8006170 <_scanf_float+0x188>
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	0591      	lsls	r1, r2, #22
 800620e:	f57f af1b 	bpl.w	8006048 <_scanf_float+0x60>
 8006212:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006216:	6022      	str	r2, [r4, #0]
 8006218:	f8cd 9004 	str.w	r9, [sp, #4]
 800621c:	e7a8      	b.n	8006170 <_scanf_float+0x188>
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006224:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006228:	d006      	beq.n	8006238 <_scanf_float+0x250>
 800622a:	0550      	lsls	r0, r2, #21
 800622c:	f57f af0c 	bpl.w	8006048 <_scanf_float+0x60>
 8006230:	f1b9 0f00 	cmp.w	r9, #0
 8006234:	f43f af0f 	beq.w	8006056 <_scanf_float+0x6e>
 8006238:	0591      	lsls	r1, r2, #22
 800623a:	bf58      	it	pl
 800623c:	9901      	ldrpl	r1, [sp, #4]
 800623e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006242:	bf58      	it	pl
 8006244:	eba9 0101 	subpl.w	r1, r9, r1
 8006248:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800624c:	bf58      	it	pl
 800624e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006252:	6022      	str	r2, [r4, #0]
 8006254:	f04f 0900 	mov.w	r9, #0
 8006258:	e78a      	b.n	8006170 <_scanf_float+0x188>
 800625a:	f04f 0a03 	mov.w	sl, #3
 800625e:	e787      	b.n	8006170 <_scanf_float+0x188>
 8006260:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006264:	4639      	mov	r1, r7
 8006266:	4640      	mov	r0, r8
 8006268:	4798      	blx	r3
 800626a:	2800      	cmp	r0, #0
 800626c:	f43f aedf 	beq.w	800602e <_scanf_float+0x46>
 8006270:	e6ea      	b.n	8006048 <_scanf_float+0x60>
 8006272:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006276:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800627a:	463a      	mov	r2, r7
 800627c:	4640      	mov	r0, r8
 800627e:	4798      	blx	r3
 8006280:	6923      	ldr	r3, [r4, #16]
 8006282:	3b01      	subs	r3, #1
 8006284:	6123      	str	r3, [r4, #16]
 8006286:	e6ec      	b.n	8006062 <_scanf_float+0x7a>
 8006288:	1e6b      	subs	r3, r5, #1
 800628a:	2b06      	cmp	r3, #6
 800628c:	d825      	bhi.n	80062da <_scanf_float+0x2f2>
 800628e:	2d02      	cmp	r5, #2
 8006290:	d836      	bhi.n	8006300 <_scanf_float+0x318>
 8006292:	455e      	cmp	r6, fp
 8006294:	f67f aee8 	bls.w	8006068 <_scanf_float+0x80>
 8006298:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800629c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062a0:	463a      	mov	r2, r7
 80062a2:	4640      	mov	r0, r8
 80062a4:	4798      	blx	r3
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	e7f1      	b.n	8006292 <_scanf_float+0x2aa>
 80062ae:	9802      	ldr	r0, [sp, #8]
 80062b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80062b8:	9002      	str	r0, [sp, #8]
 80062ba:	463a      	mov	r2, r7
 80062bc:	4640      	mov	r0, r8
 80062be:	4798      	blx	r3
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	6123      	str	r3, [r4, #16]
 80062c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80062ca:	fa5f fa8a 	uxtb.w	sl, sl
 80062ce:	f1ba 0f02 	cmp.w	sl, #2
 80062d2:	d1ec      	bne.n	80062ae <_scanf_float+0x2c6>
 80062d4:	3d03      	subs	r5, #3
 80062d6:	b2ed      	uxtb	r5, r5
 80062d8:	1b76      	subs	r6, r6, r5
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	05da      	lsls	r2, r3, #23
 80062de:	d52f      	bpl.n	8006340 <_scanf_float+0x358>
 80062e0:	055b      	lsls	r3, r3, #21
 80062e2:	d510      	bpl.n	8006306 <_scanf_float+0x31e>
 80062e4:	455e      	cmp	r6, fp
 80062e6:	f67f aebf 	bls.w	8006068 <_scanf_float+0x80>
 80062ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062f2:	463a      	mov	r2, r7
 80062f4:	4640      	mov	r0, r8
 80062f6:	4798      	blx	r3
 80062f8:	6923      	ldr	r3, [r4, #16]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	e7f1      	b.n	80062e4 <_scanf_float+0x2fc>
 8006300:	46aa      	mov	sl, r5
 8006302:	9602      	str	r6, [sp, #8]
 8006304:	e7df      	b.n	80062c6 <_scanf_float+0x2de>
 8006306:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	2965      	cmp	r1, #101	; 0x65
 800630e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006312:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	d00c      	beq.n	8006334 <_scanf_float+0x34c>
 800631a:	2945      	cmp	r1, #69	; 0x45
 800631c:	d00a      	beq.n	8006334 <_scanf_float+0x34c>
 800631e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006322:	463a      	mov	r2, r7
 8006324:	4640      	mov	r0, r8
 8006326:	4798      	blx	r3
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800632e:	3b01      	subs	r3, #1
 8006330:	1eb5      	subs	r5, r6, #2
 8006332:	6123      	str	r3, [r4, #16]
 8006334:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006338:	463a      	mov	r2, r7
 800633a:	4640      	mov	r0, r8
 800633c:	4798      	blx	r3
 800633e:	462e      	mov	r6, r5
 8006340:	6825      	ldr	r5, [r4, #0]
 8006342:	f015 0510 	ands.w	r5, r5, #16
 8006346:	d159      	bne.n	80063fc <_scanf_float+0x414>
 8006348:	7035      	strb	r5, [r6, #0]
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006354:	d11b      	bne.n	800638e <_scanf_float+0x3a6>
 8006356:	9b01      	ldr	r3, [sp, #4]
 8006358:	454b      	cmp	r3, r9
 800635a:	eba3 0209 	sub.w	r2, r3, r9
 800635e:	d123      	bne.n	80063a8 <_scanf_float+0x3c0>
 8006360:	2200      	movs	r2, #0
 8006362:	4659      	mov	r1, fp
 8006364:	4640      	mov	r0, r8
 8006366:	f000 ff0d 	bl	8007184 <_strtod_r>
 800636a:	6822      	ldr	r2, [r4, #0]
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	f012 0f02 	tst.w	r2, #2
 8006372:	ec57 6b10 	vmov	r6, r7, d0
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	d021      	beq.n	80063be <_scanf_float+0x3d6>
 800637a:	9903      	ldr	r1, [sp, #12]
 800637c:	1d1a      	adds	r2, r3, #4
 800637e:	600a      	str	r2, [r1, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	e9c3 6700 	strd	r6, r7, [r3]
 8006386:	68e3      	ldr	r3, [r4, #12]
 8006388:	3301      	adds	r3, #1
 800638a:	60e3      	str	r3, [r4, #12]
 800638c:	e66d      	b.n	800606a <_scanf_float+0x82>
 800638e:	9b04      	ldr	r3, [sp, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0e5      	beq.n	8006360 <_scanf_float+0x378>
 8006394:	9905      	ldr	r1, [sp, #20]
 8006396:	230a      	movs	r3, #10
 8006398:	462a      	mov	r2, r5
 800639a:	3101      	adds	r1, #1
 800639c:	4640      	mov	r0, r8
 800639e:	f000 ff79 	bl	8007294 <_strtol_r>
 80063a2:	9b04      	ldr	r3, [sp, #16]
 80063a4:	9e05      	ldr	r6, [sp, #20]
 80063a6:	1ac2      	subs	r2, r0, r3
 80063a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80063ac:	429e      	cmp	r6, r3
 80063ae:	bf28      	it	cs
 80063b0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80063b4:	4912      	ldr	r1, [pc, #72]	; (8006400 <_scanf_float+0x418>)
 80063b6:	4630      	mov	r0, r6
 80063b8:	f000 f8a2 	bl	8006500 <siprintf>
 80063bc:	e7d0      	b.n	8006360 <_scanf_float+0x378>
 80063be:	9903      	ldr	r1, [sp, #12]
 80063c0:	f012 0f04 	tst.w	r2, #4
 80063c4:	f103 0204 	add.w	r2, r3, #4
 80063c8:	600a      	str	r2, [r1, #0]
 80063ca:	d1d9      	bne.n	8006380 <_scanf_float+0x398>
 80063cc:	f8d3 8000 	ldr.w	r8, [r3]
 80063d0:	ee10 2a10 	vmov	r2, s0
 80063d4:	ee10 0a10 	vmov	r0, s0
 80063d8:	463b      	mov	r3, r7
 80063da:	4639      	mov	r1, r7
 80063dc:	f7fa fbfe 	bl	8000bdc <__aeabi_dcmpun>
 80063e0:	b128      	cbz	r0, 80063ee <_scanf_float+0x406>
 80063e2:	4808      	ldr	r0, [pc, #32]	; (8006404 <_scanf_float+0x41c>)
 80063e4:	f000 f886 	bl	80064f4 <nanf>
 80063e8:	ed88 0a00 	vstr	s0, [r8]
 80063ec:	e7cb      	b.n	8006386 <_scanf_float+0x39e>
 80063ee:	4630      	mov	r0, r6
 80063f0:	4639      	mov	r1, r7
 80063f2:	f7fa fc51 	bl	8000c98 <__aeabi_d2f>
 80063f6:	f8c8 0000 	str.w	r0, [r8]
 80063fa:	e7c4      	b.n	8006386 <_scanf_float+0x39e>
 80063fc:	2500      	movs	r5, #0
 80063fe:	e634      	b.n	800606a <_scanf_float+0x82>
 8006400:	0800a214 	.word	0x0800a214
 8006404:	0800a688 	.word	0x0800a688

08006408 <_puts_r>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	460e      	mov	r6, r1
 800640c:	4605      	mov	r5, r0
 800640e:	b118      	cbz	r0, 8006418 <_puts_r+0x10>
 8006410:	6983      	ldr	r3, [r0, #24]
 8006412:	b90b      	cbnz	r3, 8006418 <_puts_r+0x10>
 8006414:	f001 ff94 	bl	8008340 <__sinit>
 8006418:	69ab      	ldr	r3, [r5, #24]
 800641a:	68ac      	ldr	r4, [r5, #8]
 800641c:	b913      	cbnz	r3, 8006424 <_puts_r+0x1c>
 800641e:	4628      	mov	r0, r5
 8006420:	f001 ff8e 	bl	8008340 <__sinit>
 8006424:	4b2c      	ldr	r3, [pc, #176]	; (80064d8 <_puts_r+0xd0>)
 8006426:	429c      	cmp	r4, r3
 8006428:	d120      	bne.n	800646c <_puts_r+0x64>
 800642a:	686c      	ldr	r4, [r5, #4]
 800642c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800642e:	07db      	lsls	r3, r3, #31
 8006430:	d405      	bmi.n	800643e <_puts_r+0x36>
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	0598      	lsls	r0, r3, #22
 8006436:	d402      	bmi.n	800643e <_puts_r+0x36>
 8006438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800643a:	f002 fb92 	bl	8008b62 <__retarget_lock_acquire_recursive>
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	0719      	lsls	r1, r3, #28
 8006442:	d51d      	bpl.n	8006480 <_puts_r+0x78>
 8006444:	6923      	ldr	r3, [r4, #16]
 8006446:	b1db      	cbz	r3, 8006480 <_puts_r+0x78>
 8006448:	3e01      	subs	r6, #1
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006450:	3b01      	subs	r3, #1
 8006452:	60a3      	str	r3, [r4, #8]
 8006454:	bb39      	cbnz	r1, 80064a6 <_puts_r+0x9e>
 8006456:	2b00      	cmp	r3, #0
 8006458:	da38      	bge.n	80064cc <_puts_r+0xc4>
 800645a:	4622      	mov	r2, r4
 800645c:	210a      	movs	r1, #10
 800645e:	4628      	mov	r0, r5
 8006460:	f000 ff1a 	bl	8007298 <__swbuf_r>
 8006464:	3001      	adds	r0, #1
 8006466:	d011      	beq.n	800648c <_puts_r+0x84>
 8006468:	250a      	movs	r5, #10
 800646a:	e011      	b.n	8006490 <_puts_r+0x88>
 800646c:	4b1b      	ldr	r3, [pc, #108]	; (80064dc <_puts_r+0xd4>)
 800646e:	429c      	cmp	r4, r3
 8006470:	d101      	bne.n	8006476 <_puts_r+0x6e>
 8006472:	68ac      	ldr	r4, [r5, #8]
 8006474:	e7da      	b.n	800642c <_puts_r+0x24>
 8006476:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <_puts_r+0xd8>)
 8006478:	429c      	cmp	r4, r3
 800647a:	bf08      	it	eq
 800647c:	68ec      	ldreq	r4, [r5, #12]
 800647e:	e7d5      	b.n	800642c <_puts_r+0x24>
 8006480:	4621      	mov	r1, r4
 8006482:	4628      	mov	r0, r5
 8006484:	f000 ff5a 	bl	800733c <__swsetup_r>
 8006488:	2800      	cmp	r0, #0
 800648a:	d0dd      	beq.n	8006448 <_puts_r+0x40>
 800648c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006492:	07da      	lsls	r2, r3, #31
 8006494:	d405      	bmi.n	80064a2 <_puts_r+0x9a>
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	059b      	lsls	r3, r3, #22
 800649a:	d402      	bmi.n	80064a2 <_puts_r+0x9a>
 800649c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800649e:	f002 fb61 	bl	8008b64 <__retarget_lock_release_recursive>
 80064a2:	4628      	mov	r0, r5
 80064a4:	bd70      	pop	{r4, r5, r6, pc}
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	da04      	bge.n	80064b4 <_puts_r+0xac>
 80064aa:	69a2      	ldr	r2, [r4, #24]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	dc06      	bgt.n	80064be <_puts_r+0xb6>
 80064b0:	290a      	cmp	r1, #10
 80064b2:	d004      	beq.n	80064be <_puts_r+0xb6>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	6022      	str	r2, [r4, #0]
 80064ba:	7019      	strb	r1, [r3, #0]
 80064bc:	e7c5      	b.n	800644a <_puts_r+0x42>
 80064be:	4622      	mov	r2, r4
 80064c0:	4628      	mov	r0, r5
 80064c2:	f000 fee9 	bl	8007298 <__swbuf_r>
 80064c6:	3001      	adds	r0, #1
 80064c8:	d1bf      	bne.n	800644a <_puts_r+0x42>
 80064ca:	e7df      	b.n	800648c <_puts_r+0x84>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	250a      	movs	r5, #10
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	6022      	str	r2, [r4, #0]
 80064d4:	701d      	strb	r5, [r3, #0]
 80064d6:	e7db      	b.n	8006490 <_puts_r+0x88>
 80064d8:	0800a424 	.word	0x0800a424
 80064dc:	0800a444 	.word	0x0800a444
 80064e0:	0800a404 	.word	0x0800a404

080064e4 <puts>:
 80064e4:	4b02      	ldr	r3, [pc, #8]	; (80064f0 <puts+0xc>)
 80064e6:	4601      	mov	r1, r0
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	f7ff bf8d 	b.w	8006408 <_puts_r>
 80064ee:	bf00      	nop
 80064f0:	20000014 	.word	0x20000014

080064f4 <nanf>:
 80064f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80064fc <nanf+0x8>
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	7fc00000 	.word	0x7fc00000

08006500 <siprintf>:
 8006500:	b40e      	push	{r1, r2, r3}
 8006502:	b500      	push	{lr}
 8006504:	b09c      	sub	sp, #112	; 0x70
 8006506:	ab1d      	add	r3, sp, #116	; 0x74
 8006508:	9002      	str	r0, [sp, #8]
 800650a:	9006      	str	r0, [sp, #24]
 800650c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006510:	4809      	ldr	r0, [pc, #36]	; (8006538 <siprintf+0x38>)
 8006512:	9107      	str	r1, [sp, #28]
 8006514:	9104      	str	r1, [sp, #16]
 8006516:	4909      	ldr	r1, [pc, #36]	; (800653c <siprintf+0x3c>)
 8006518:	f853 2b04 	ldr.w	r2, [r3], #4
 800651c:	9105      	str	r1, [sp, #20]
 800651e:	6800      	ldr	r0, [r0, #0]
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	a902      	add	r1, sp, #8
 8006524:	f003 f9b2 	bl	800988c <_svfiprintf_r>
 8006528:	9b02      	ldr	r3, [sp, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	b01c      	add	sp, #112	; 0x70
 8006530:	f85d eb04 	ldr.w	lr, [sp], #4
 8006534:	b003      	add	sp, #12
 8006536:	4770      	bx	lr
 8006538:	20000014 	.word	0x20000014
 800653c:	ffff0208 	.word	0xffff0208

08006540 <sulp>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	4604      	mov	r4, r0
 8006544:	460d      	mov	r5, r1
 8006546:	ec45 4b10 	vmov	d0, r4, r5
 800654a:	4616      	mov	r6, r2
 800654c:	f002 fefc 	bl	8009348 <__ulp>
 8006550:	ec51 0b10 	vmov	r0, r1, d0
 8006554:	b17e      	cbz	r6, 8006576 <sulp+0x36>
 8006556:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800655a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800655e:	2b00      	cmp	r3, #0
 8006560:	dd09      	ble.n	8006576 <sulp+0x36>
 8006562:	051b      	lsls	r3, r3, #20
 8006564:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006568:	2400      	movs	r4, #0
 800656a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800656e:	4622      	mov	r2, r4
 8006570:	462b      	mov	r3, r5
 8006572:	f7fa f899 	bl	80006a8 <__aeabi_dmul>
 8006576:	bd70      	pop	{r4, r5, r6, pc}

08006578 <_strtod_l>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	ed2d 8b02 	vpush	{d8}
 8006580:	b09d      	sub	sp, #116	; 0x74
 8006582:	461f      	mov	r7, r3
 8006584:	2300      	movs	r3, #0
 8006586:	9318      	str	r3, [sp, #96]	; 0x60
 8006588:	4ba2      	ldr	r3, [pc, #648]	; (8006814 <_strtod_l+0x29c>)
 800658a:	9213      	str	r2, [sp, #76]	; 0x4c
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	9305      	str	r3, [sp, #20]
 8006590:	4604      	mov	r4, r0
 8006592:	4618      	mov	r0, r3
 8006594:	4688      	mov	r8, r1
 8006596:	f7f9 fe6d 	bl	8000274 <strlen>
 800659a:	f04f 0a00 	mov.w	sl, #0
 800659e:	4605      	mov	r5, r0
 80065a0:	f04f 0b00 	mov.w	fp, #0
 80065a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80065a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	2a2b      	cmp	r2, #43	; 0x2b
 80065ae:	d04e      	beq.n	800664e <_strtod_l+0xd6>
 80065b0:	d83b      	bhi.n	800662a <_strtod_l+0xb2>
 80065b2:	2a0d      	cmp	r2, #13
 80065b4:	d834      	bhi.n	8006620 <_strtod_l+0xa8>
 80065b6:	2a08      	cmp	r2, #8
 80065b8:	d834      	bhi.n	8006624 <_strtod_l+0xac>
 80065ba:	2a00      	cmp	r2, #0
 80065bc:	d03e      	beq.n	800663c <_strtod_l+0xc4>
 80065be:	2300      	movs	r3, #0
 80065c0:	930a      	str	r3, [sp, #40]	; 0x28
 80065c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80065c4:	7833      	ldrb	r3, [r6, #0]
 80065c6:	2b30      	cmp	r3, #48	; 0x30
 80065c8:	f040 80b0 	bne.w	800672c <_strtod_l+0x1b4>
 80065cc:	7873      	ldrb	r3, [r6, #1]
 80065ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065d2:	2b58      	cmp	r3, #88	; 0x58
 80065d4:	d168      	bne.n	80066a8 <_strtod_l+0x130>
 80065d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d8:	9301      	str	r3, [sp, #4]
 80065da:	ab18      	add	r3, sp, #96	; 0x60
 80065dc:	9702      	str	r7, [sp, #8]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	4a8d      	ldr	r2, [pc, #564]	; (8006818 <_strtod_l+0x2a0>)
 80065e2:	ab19      	add	r3, sp, #100	; 0x64
 80065e4:	a917      	add	r1, sp, #92	; 0x5c
 80065e6:	4620      	mov	r0, r4
 80065e8:	f001 ffae 	bl	8008548 <__gethex>
 80065ec:	f010 0707 	ands.w	r7, r0, #7
 80065f0:	4605      	mov	r5, r0
 80065f2:	d005      	beq.n	8006600 <_strtod_l+0x88>
 80065f4:	2f06      	cmp	r7, #6
 80065f6:	d12c      	bne.n	8006652 <_strtod_l+0xda>
 80065f8:	3601      	adds	r6, #1
 80065fa:	2300      	movs	r3, #0
 80065fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80065fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006600:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006602:	2b00      	cmp	r3, #0
 8006604:	f040 8590 	bne.w	8007128 <_strtod_l+0xbb0>
 8006608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660a:	b1eb      	cbz	r3, 8006648 <_strtod_l+0xd0>
 800660c:	4652      	mov	r2, sl
 800660e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006612:	ec43 2b10 	vmov	d0, r2, r3
 8006616:	b01d      	add	sp, #116	; 0x74
 8006618:	ecbd 8b02 	vpop	{d8}
 800661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006620:	2a20      	cmp	r2, #32
 8006622:	d1cc      	bne.n	80065be <_strtod_l+0x46>
 8006624:	3301      	adds	r3, #1
 8006626:	9317      	str	r3, [sp, #92]	; 0x5c
 8006628:	e7be      	b.n	80065a8 <_strtod_l+0x30>
 800662a:	2a2d      	cmp	r2, #45	; 0x2d
 800662c:	d1c7      	bne.n	80065be <_strtod_l+0x46>
 800662e:	2201      	movs	r2, #1
 8006630:	920a      	str	r2, [sp, #40]	; 0x28
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	9217      	str	r2, [sp, #92]	; 0x5c
 8006636:	785b      	ldrb	r3, [r3, #1]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1c2      	bne.n	80065c2 <_strtod_l+0x4a>
 800663c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800663e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006642:	2b00      	cmp	r3, #0
 8006644:	f040 856e 	bne.w	8007124 <_strtod_l+0xbac>
 8006648:	4652      	mov	r2, sl
 800664a:	465b      	mov	r3, fp
 800664c:	e7e1      	b.n	8006612 <_strtod_l+0x9a>
 800664e:	2200      	movs	r2, #0
 8006650:	e7ee      	b.n	8006630 <_strtod_l+0xb8>
 8006652:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006654:	b13a      	cbz	r2, 8006666 <_strtod_l+0xee>
 8006656:	2135      	movs	r1, #53	; 0x35
 8006658:	a81a      	add	r0, sp, #104	; 0x68
 800665a:	f002 ff80 	bl	800955e <__copybits>
 800665e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006660:	4620      	mov	r0, r4
 8006662:	f002 fb3f 	bl	8008ce4 <_Bfree>
 8006666:	3f01      	subs	r7, #1
 8006668:	2f04      	cmp	r7, #4
 800666a:	d806      	bhi.n	800667a <_strtod_l+0x102>
 800666c:	e8df f007 	tbb	[pc, r7]
 8006670:	1714030a 	.word	0x1714030a
 8006674:	0a          	.byte	0x0a
 8006675:	00          	.byte	0x00
 8006676:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800667a:	0728      	lsls	r0, r5, #28
 800667c:	d5c0      	bpl.n	8006600 <_strtod_l+0x88>
 800667e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006682:	e7bd      	b.n	8006600 <_strtod_l+0x88>
 8006684:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006688:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800668a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800668e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006692:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006696:	e7f0      	b.n	800667a <_strtod_l+0x102>
 8006698:	f8df b180 	ldr.w	fp, [pc, #384]	; 800681c <_strtod_l+0x2a4>
 800669c:	e7ed      	b.n	800667a <_strtod_l+0x102>
 800669e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80066a2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80066a6:	e7e8      	b.n	800667a <_strtod_l+0x102>
 80066a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	2b30      	cmp	r3, #48	; 0x30
 80066b2:	d0f9      	beq.n	80066a8 <_strtod_l+0x130>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0a3      	beq.n	8006600 <_strtod_l+0x88>
 80066b8:	2301      	movs	r3, #1
 80066ba:	f04f 0900 	mov.w	r9, #0
 80066be:	9304      	str	r3, [sp, #16]
 80066c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066c2:	9308      	str	r3, [sp, #32]
 80066c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80066c8:	464f      	mov	r7, r9
 80066ca:	220a      	movs	r2, #10
 80066cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80066ce:	7806      	ldrb	r6, [r0, #0]
 80066d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80066d4:	b2d9      	uxtb	r1, r3
 80066d6:	2909      	cmp	r1, #9
 80066d8:	d92a      	bls.n	8006730 <_strtod_l+0x1b8>
 80066da:	9905      	ldr	r1, [sp, #20]
 80066dc:	462a      	mov	r2, r5
 80066de:	f003 fa32 	bl	8009b46 <strncmp>
 80066e2:	b398      	cbz	r0, 800674c <_strtod_l+0x1d4>
 80066e4:	2000      	movs	r0, #0
 80066e6:	4632      	mov	r2, r6
 80066e8:	463d      	mov	r5, r7
 80066ea:	9005      	str	r0, [sp, #20]
 80066ec:	4603      	mov	r3, r0
 80066ee:	2a65      	cmp	r2, #101	; 0x65
 80066f0:	d001      	beq.n	80066f6 <_strtod_l+0x17e>
 80066f2:	2a45      	cmp	r2, #69	; 0x45
 80066f4:	d118      	bne.n	8006728 <_strtod_l+0x1b0>
 80066f6:	b91d      	cbnz	r5, 8006700 <_strtod_l+0x188>
 80066f8:	9a04      	ldr	r2, [sp, #16]
 80066fa:	4302      	orrs	r2, r0
 80066fc:	d09e      	beq.n	800663c <_strtod_l+0xc4>
 80066fe:	2500      	movs	r5, #0
 8006700:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006704:	f108 0201 	add.w	r2, r8, #1
 8006708:	9217      	str	r2, [sp, #92]	; 0x5c
 800670a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800670e:	2a2b      	cmp	r2, #43	; 0x2b
 8006710:	d075      	beq.n	80067fe <_strtod_l+0x286>
 8006712:	2a2d      	cmp	r2, #45	; 0x2d
 8006714:	d07b      	beq.n	800680e <_strtod_l+0x296>
 8006716:	f04f 0c00 	mov.w	ip, #0
 800671a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800671e:	2909      	cmp	r1, #9
 8006720:	f240 8082 	bls.w	8006828 <_strtod_l+0x2b0>
 8006724:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006728:	2600      	movs	r6, #0
 800672a:	e09d      	b.n	8006868 <_strtod_l+0x2f0>
 800672c:	2300      	movs	r3, #0
 800672e:	e7c4      	b.n	80066ba <_strtod_l+0x142>
 8006730:	2f08      	cmp	r7, #8
 8006732:	bfd8      	it	le
 8006734:	9907      	ldrle	r1, [sp, #28]
 8006736:	f100 0001 	add.w	r0, r0, #1
 800673a:	bfda      	itte	le
 800673c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006740:	9307      	strle	r3, [sp, #28]
 8006742:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006746:	3701      	adds	r7, #1
 8006748:	9017      	str	r0, [sp, #92]	; 0x5c
 800674a:	e7bf      	b.n	80066cc <_strtod_l+0x154>
 800674c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800674e:	195a      	adds	r2, r3, r5
 8006750:	9217      	str	r2, [sp, #92]	; 0x5c
 8006752:	5d5a      	ldrb	r2, [r3, r5]
 8006754:	2f00      	cmp	r7, #0
 8006756:	d037      	beq.n	80067c8 <_strtod_l+0x250>
 8006758:	9005      	str	r0, [sp, #20]
 800675a:	463d      	mov	r5, r7
 800675c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006760:	2b09      	cmp	r3, #9
 8006762:	d912      	bls.n	800678a <_strtod_l+0x212>
 8006764:	2301      	movs	r3, #1
 8006766:	e7c2      	b.n	80066ee <_strtod_l+0x176>
 8006768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	9217      	str	r2, [sp, #92]	; 0x5c
 800676e:	785a      	ldrb	r2, [r3, #1]
 8006770:	3001      	adds	r0, #1
 8006772:	2a30      	cmp	r2, #48	; 0x30
 8006774:	d0f8      	beq.n	8006768 <_strtod_l+0x1f0>
 8006776:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800677a:	2b08      	cmp	r3, #8
 800677c:	f200 84d9 	bhi.w	8007132 <_strtod_l+0xbba>
 8006780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006782:	9005      	str	r0, [sp, #20]
 8006784:	2000      	movs	r0, #0
 8006786:	9308      	str	r3, [sp, #32]
 8006788:	4605      	mov	r5, r0
 800678a:	3a30      	subs	r2, #48	; 0x30
 800678c:	f100 0301 	add.w	r3, r0, #1
 8006790:	d014      	beq.n	80067bc <_strtod_l+0x244>
 8006792:	9905      	ldr	r1, [sp, #20]
 8006794:	4419      	add	r1, r3
 8006796:	9105      	str	r1, [sp, #20]
 8006798:	462b      	mov	r3, r5
 800679a:	eb00 0e05 	add.w	lr, r0, r5
 800679e:	210a      	movs	r1, #10
 80067a0:	4573      	cmp	r3, lr
 80067a2:	d113      	bne.n	80067cc <_strtod_l+0x254>
 80067a4:	182b      	adds	r3, r5, r0
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	f105 0501 	add.w	r5, r5, #1
 80067ac:	4405      	add	r5, r0
 80067ae:	dc1c      	bgt.n	80067ea <_strtod_l+0x272>
 80067b0:	9907      	ldr	r1, [sp, #28]
 80067b2:	230a      	movs	r3, #10
 80067b4:	fb03 2301 	mla	r3, r3, r1, r2
 80067b8:	9307      	str	r3, [sp, #28]
 80067ba:	2300      	movs	r3, #0
 80067bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067be:	1c51      	adds	r1, r2, #1
 80067c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80067c2:	7852      	ldrb	r2, [r2, #1]
 80067c4:	4618      	mov	r0, r3
 80067c6:	e7c9      	b.n	800675c <_strtod_l+0x1e4>
 80067c8:	4638      	mov	r0, r7
 80067ca:	e7d2      	b.n	8006772 <_strtod_l+0x1fa>
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	dc04      	bgt.n	80067da <_strtod_l+0x262>
 80067d0:	9e07      	ldr	r6, [sp, #28]
 80067d2:	434e      	muls	r6, r1
 80067d4:	9607      	str	r6, [sp, #28]
 80067d6:	3301      	adds	r3, #1
 80067d8:	e7e2      	b.n	80067a0 <_strtod_l+0x228>
 80067da:	f103 0c01 	add.w	ip, r3, #1
 80067de:	f1bc 0f10 	cmp.w	ip, #16
 80067e2:	bfd8      	it	le
 80067e4:	fb01 f909 	mulle.w	r9, r1, r9
 80067e8:	e7f5      	b.n	80067d6 <_strtod_l+0x25e>
 80067ea:	2d10      	cmp	r5, #16
 80067ec:	bfdc      	itt	le
 80067ee:	230a      	movle	r3, #10
 80067f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80067f4:	e7e1      	b.n	80067ba <_strtod_l+0x242>
 80067f6:	2300      	movs	r3, #0
 80067f8:	9305      	str	r3, [sp, #20]
 80067fa:	2301      	movs	r3, #1
 80067fc:	e77c      	b.n	80066f8 <_strtod_l+0x180>
 80067fe:	f04f 0c00 	mov.w	ip, #0
 8006802:	f108 0202 	add.w	r2, r8, #2
 8006806:	9217      	str	r2, [sp, #92]	; 0x5c
 8006808:	f898 2002 	ldrb.w	r2, [r8, #2]
 800680c:	e785      	b.n	800671a <_strtod_l+0x1a2>
 800680e:	f04f 0c01 	mov.w	ip, #1
 8006812:	e7f6      	b.n	8006802 <_strtod_l+0x28a>
 8006814:	0800a4cc 	.word	0x0800a4cc
 8006818:	0800a21c 	.word	0x0800a21c
 800681c:	7ff00000 	.word	0x7ff00000
 8006820:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006822:	1c51      	adds	r1, r2, #1
 8006824:	9117      	str	r1, [sp, #92]	; 0x5c
 8006826:	7852      	ldrb	r2, [r2, #1]
 8006828:	2a30      	cmp	r2, #48	; 0x30
 800682a:	d0f9      	beq.n	8006820 <_strtod_l+0x2a8>
 800682c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006830:	2908      	cmp	r1, #8
 8006832:	f63f af79 	bhi.w	8006728 <_strtod_l+0x1b0>
 8006836:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800683a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800683c:	9206      	str	r2, [sp, #24]
 800683e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006840:	1c51      	adds	r1, r2, #1
 8006842:	9117      	str	r1, [sp, #92]	; 0x5c
 8006844:	7852      	ldrb	r2, [r2, #1]
 8006846:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800684a:	2e09      	cmp	r6, #9
 800684c:	d937      	bls.n	80068be <_strtod_l+0x346>
 800684e:	9e06      	ldr	r6, [sp, #24]
 8006850:	1b89      	subs	r1, r1, r6
 8006852:	2908      	cmp	r1, #8
 8006854:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006858:	dc02      	bgt.n	8006860 <_strtod_l+0x2e8>
 800685a:	4576      	cmp	r6, lr
 800685c:	bfa8      	it	ge
 800685e:	4676      	movge	r6, lr
 8006860:	f1bc 0f00 	cmp.w	ip, #0
 8006864:	d000      	beq.n	8006868 <_strtod_l+0x2f0>
 8006866:	4276      	negs	r6, r6
 8006868:	2d00      	cmp	r5, #0
 800686a:	d14d      	bne.n	8006908 <_strtod_l+0x390>
 800686c:	9904      	ldr	r1, [sp, #16]
 800686e:	4301      	orrs	r1, r0
 8006870:	f47f aec6 	bne.w	8006600 <_strtod_l+0x88>
 8006874:	2b00      	cmp	r3, #0
 8006876:	f47f aee1 	bne.w	800663c <_strtod_l+0xc4>
 800687a:	2a69      	cmp	r2, #105	; 0x69
 800687c:	d027      	beq.n	80068ce <_strtod_l+0x356>
 800687e:	dc24      	bgt.n	80068ca <_strtod_l+0x352>
 8006880:	2a49      	cmp	r2, #73	; 0x49
 8006882:	d024      	beq.n	80068ce <_strtod_l+0x356>
 8006884:	2a4e      	cmp	r2, #78	; 0x4e
 8006886:	f47f aed9 	bne.w	800663c <_strtod_l+0xc4>
 800688a:	499f      	ldr	r1, [pc, #636]	; (8006b08 <_strtod_l+0x590>)
 800688c:	a817      	add	r0, sp, #92	; 0x5c
 800688e:	f002 f8b3 	bl	80089f8 <__match>
 8006892:	2800      	cmp	r0, #0
 8006894:	f43f aed2 	beq.w	800663c <_strtod_l+0xc4>
 8006898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b28      	cmp	r3, #40	; 0x28
 800689e:	d12d      	bne.n	80068fc <_strtod_l+0x384>
 80068a0:	499a      	ldr	r1, [pc, #616]	; (8006b0c <_strtod_l+0x594>)
 80068a2:	aa1a      	add	r2, sp, #104	; 0x68
 80068a4:	a817      	add	r0, sp, #92	; 0x5c
 80068a6:	f002 f8bb 	bl	8008a20 <__hexnan>
 80068aa:	2805      	cmp	r0, #5
 80068ac:	d126      	bne.n	80068fc <_strtod_l+0x384>
 80068ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80068b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80068b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80068bc:	e6a0      	b.n	8006600 <_strtod_l+0x88>
 80068be:	210a      	movs	r1, #10
 80068c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80068c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80068c8:	e7b9      	b.n	800683e <_strtod_l+0x2c6>
 80068ca:	2a6e      	cmp	r2, #110	; 0x6e
 80068cc:	e7db      	b.n	8006886 <_strtod_l+0x30e>
 80068ce:	4990      	ldr	r1, [pc, #576]	; (8006b10 <_strtod_l+0x598>)
 80068d0:	a817      	add	r0, sp, #92	; 0x5c
 80068d2:	f002 f891 	bl	80089f8 <__match>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f43f aeb0 	beq.w	800663c <_strtod_l+0xc4>
 80068dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068de:	498d      	ldr	r1, [pc, #564]	; (8006b14 <_strtod_l+0x59c>)
 80068e0:	3b01      	subs	r3, #1
 80068e2:	a817      	add	r0, sp, #92	; 0x5c
 80068e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80068e6:	f002 f887 	bl	80089f8 <__match>
 80068ea:	b910      	cbnz	r0, 80068f2 <_strtod_l+0x37a>
 80068ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068ee:	3301      	adds	r3, #1
 80068f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80068f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006b24 <_strtod_l+0x5ac>
 80068f6:	f04f 0a00 	mov.w	sl, #0
 80068fa:	e681      	b.n	8006600 <_strtod_l+0x88>
 80068fc:	4886      	ldr	r0, [pc, #536]	; (8006b18 <_strtod_l+0x5a0>)
 80068fe:	f003 f8c7 	bl	8009a90 <nan>
 8006902:	ec5b ab10 	vmov	sl, fp, d0
 8006906:	e67b      	b.n	8006600 <_strtod_l+0x88>
 8006908:	9b05      	ldr	r3, [sp, #20]
 800690a:	9807      	ldr	r0, [sp, #28]
 800690c:	1af3      	subs	r3, r6, r3
 800690e:	2f00      	cmp	r7, #0
 8006910:	bf08      	it	eq
 8006912:	462f      	moveq	r7, r5
 8006914:	2d10      	cmp	r5, #16
 8006916:	9306      	str	r3, [sp, #24]
 8006918:	46a8      	mov	r8, r5
 800691a:	bfa8      	it	ge
 800691c:	f04f 0810 	movge.w	r8, #16
 8006920:	f7f9 fe48 	bl	80005b4 <__aeabi_ui2d>
 8006924:	2d09      	cmp	r5, #9
 8006926:	4682      	mov	sl, r0
 8006928:	468b      	mov	fp, r1
 800692a:	dd13      	ble.n	8006954 <_strtod_l+0x3dc>
 800692c:	4b7b      	ldr	r3, [pc, #492]	; (8006b1c <_strtod_l+0x5a4>)
 800692e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006932:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006936:	f7f9 feb7 	bl	80006a8 <__aeabi_dmul>
 800693a:	4682      	mov	sl, r0
 800693c:	4648      	mov	r0, r9
 800693e:	468b      	mov	fp, r1
 8006940:	f7f9 fe38 	bl	80005b4 <__aeabi_ui2d>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4650      	mov	r0, sl
 800694a:	4659      	mov	r1, fp
 800694c:	f7f9 fcf6 	bl	800033c <__adddf3>
 8006950:	4682      	mov	sl, r0
 8006952:	468b      	mov	fp, r1
 8006954:	2d0f      	cmp	r5, #15
 8006956:	dc38      	bgt.n	80069ca <_strtod_l+0x452>
 8006958:	9b06      	ldr	r3, [sp, #24]
 800695a:	2b00      	cmp	r3, #0
 800695c:	f43f ae50 	beq.w	8006600 <_strtod_l+0x88>
 8006960:	dd24      	ble.n	80069ac <_strtod_l+0x434>
 8006962:	2b16      	cmp	r3, #22
 8006964:	dc0b      	bgt.n	800697e <_strtod_l+0x406>
 8006966:	496d      	ldr	r1, [pc, #436]	; (8006b1c <_strtod_l+0x5a4>)
 8006968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800696c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006970:	4652      	mov	r2, sl
 8006972:	465b      	mov	r3, fp
 8006974:	f7f9 fe98 	bl	80006a8 <__aeabi_dmul>
 8006978:	4682      	mov	sl, r0
 800697a:	468b      	mov	fp, r1
 800697c:	e640      	b.n	8006600 <_strtod_l+0x88>
 800697e:	9a06      	ldr	r2, [sp, #24]
 8006980:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006984:	4293      	cmp	r3, r2
 8006986:	db20      	blt.n	80069ca <_strtod_l+0x452>
 8006988:	4c64      	ldr	r4, [pc, #400]	; (8006b1c <_strtod_l+0x5a4>)
 800698a:	f1c5 050f 	rsb	r5, r5, #15
 800698e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006992:	4652      	mov	r2, sl
 8006994:	465b      	mov	r3, fp
 8006996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800699a:	f7f9 fe85 	bl	80006a8 <__aeabi_dmul>
 800699e:	9b06      	ldr	r3, [sp, #24]
 80069a0:	1b5d      	subs	r5, r3, r5
 80069a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80069a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80069aa:	e7e3      	b.n	8006974 <_strtod_l+0x3fc>
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	3316      	adds	r3, #22
 80069b0:	db0b      	blt.n	80069ca <_strtod_l+0x452>
 80069b2:	9b05      	ldr	r3, [sp, #20]
 80069b4:	1b9e      	subs	r6, r3, r6
 80069b6:	4b59      	ldr	r3, [pc, #356]	; (8006b1c <_strtod_l+0x5a4>)
 80069b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80069bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069c0:	4650      	mov	r0, sl
 80069c2:	4659      	mov	r1, fp
 80069c4:	f7f9 ff9a 	bl	80008fc <__aeabi_ddiv>
 80069c8:	e7d6      	b.n	8006978 <_strtod_l+0x400>
 80069ca:	9b06      	ldr	r3, [sp, #24]
 80069cc:	eba5 0808 	sub.w	r8, r5, r8
 80069d0:	4498      	add	r8, r3
 80069d2:	f1b8 0f00 	cmp.w	r8, #0
 80069d6:	dd74      	ble.n	8006ac2 <_strtod_l+0x54a>
 80069d8:	f018 030f 	ands.w	r3, r8, #15
 80069dc:	d00a      	beq.n	80069f4 <_strtod_l+0x47c>
 80069de:	494f      	ldr	r1, [pc, #316]	; (8006b1c <_strtod_l+0x5a4>)
 80069e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069e4:	4652      	mov	r2, sl
 80069e6:	465b      	mov	r3, fp
 80069e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ec:	f7f9 fe5c 	bl	80006a8 <__aeabi_dmul>
 80069f0:	4682      	mov	sl, r0
 80069f2:	468b      	mov	fp, r1
 80069f4:	f038 080f 	bics.w	r8, r8, #15
 80069f8:	d04f      	beq.n	8006a9a <_strtod_l+0x522>
 80069fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80069fe:	dd22      	ble.n	8006a46 <_strtod_l+0x4ce>
 8006a00:	2500      	movs	r5, #0
 8006a02:	462e      	mov	r6, r5
 8006a04:	9507      	str	r5, [sp, #28]
 8006a06:	9505      	str	r5, [sp, #20]
 8006a08:	2322      	movs	r3, #34	; 0x22
 8006a0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006b24 <_strtod_l+0x5ac>
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	f04f 0a00 	mov.w	sl, #0
 8006a14:	9b07      	ldr	r3, [sp, #28]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f43f adf2 	beq.w	8006600 <_strtod_l+0x88>
 8006a1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f002 f960 	bl	8008ce4 <_Bfree>
 8006a24:	9905      	ldr	r1, [sp, #20]
 8006a26:	4620      	mov	r0, r4
 8006a28:	f002 f95c 	bl	8008ce4 <_Bfree>
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f002 f958 	bl	8008ce4 <_Bfree>
 8006a34:	9907      	ldr	r1, [sp, #28]
 8006a36:	4620      	mov	r0, r4
 8006a38:	f002 f954 	bl	8008ce4 <_Bfree>
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f002 f950 	bl	8008ce4 <_Bfree>
 8006a44:	e5dc      	b.n	8006600 <_strtod_l+0x88>
 8006a46:	4b36      	ldr	r3, [pc, #216]	; (8006b20 <_strtod_l+0x5a8>)
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006a50:	4650      	mov	r0, sl
 8006a52:	4659      	mov	r1, fp
 8006a54:	4699      	mov	r9, r3
 8006a56:	f1b8 0f01 	cmp.w	r8, #1
 8006a5a:	dc21      	bgt.n	8006aa0 <_strtod_l+0x528>
 8006a5c:	b10b      	cbz	r3, 8006a62 <_strtod_l+0x4ea>
 8006a5e:	4682      	mov	sl, r0
 8006a60:	468b      	mov	fp, r1
 8006a62:	4b2f      	ldr	r3, [pc, #188]	; (8006b20 <_strtod_l+0x5a8>)
 8006a64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006a68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006a6c:	4652      	mov	r2, sl
 8006a6e:	465b      	mov	r3, fp
 8006a70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006a74:	f7f9 fe18 	bl	80006a8 <__aeabi_dmul>
 8006a78:	4b2a      	ldr	r3, [pc, #168]	; (8006b24 <_strtod_l+0x5ac>)
 8006a7a:	460a      	mov	r2, r1
 8006a7c:	400b      	ands	r3, r1
 8006a7e:	492a      	ldr	r1, [pc, #168]	; (8006b28 <_strtod_l+0x5b0>)
 8006a80:	428b      	cmp	r3, r1
 8006a82:	4682      	mov	sl, r0
 8006a84:	d8bc      	bhi.n	8006a00 <_strtod_l+0x488>
 8006a86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a8a:	428b      	cmp	r3, r1
 8006a8c:	bf86      	itte	hi
 8006a8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006b2c <_strtod_l+0x5b4>
 8006a92:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006a96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9304      	str	r3, [sp, #16]
 8006a9e:	e084      	b.n	8006baa <_strtod_l+0x632>
 8006aa0:	f018 0f01 	tst.w	r8, #1
 8006aa4:	d005      	beq.n	8006ab2 <_strtod_l+0x53a>
 8006aa6:	9b04      	ldr	r3, [sp, #16]
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	f7f9 fdfc 	bl	80006a8 <__aeabi_dmul>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	9a04      	ldr	r2, [sp, #16]
 8006ab4:	3208      	adds	r2, #8
 8006ab6:	f109 0901 	add.w	r9, r9, #1
 8006aba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006abe:	9204      	str	r2, [sp, #16]
 8006ac0:	e7c9      	b.n	8006a56 <_strtod_l+0x4de>
 8006ac2:	d0ea      	beq.n	8006a9a <_strtod_l+0x522>
 8006ac4:	f1c8 0800 	rsb	r8, r8, #0
 8006ac8:	f018 020f 	ands.w	r2, r8, #15
 8006acc:	d00a      	beq.n	8006ae4 <_strtod_l+0x56c>
 8006ace:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <_strtod_l+0x5a4>)
 8006ad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ad4:	4650      	mov	r0, sl
 8006ad6:	4659      	mov	r1, fp
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f7f9 ff0e 	bl	80008fc <__aeabi_ddiv>
 8006ae0:	4682      	mov	sl, r0
 8006ae2:	468b      	mov	fp, r1
 8006ae4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006ae8:	d0d7      	beq.n	8006a9a <_strtod_l+0x522>
 8006aea:	f1b8 0f1f 	cmp.w	r8, #31
 8006aee:	dd1f      	ble.n	8006b30 <_strtod_l+0x5b8>
 8006af0:	2500      	movs	r5, #0
 8006af2:	462e      	mov	r6, r5
 8006af4:	9507      	str	r5, [sp, #28]
 8006af6:	9505      	str	r5, [sp, #20]
 8006af8:	2322      	movs	r3, #34	; 0x22
 8006afa:	f04f 0a00 	mov.w	sl, #0
 8006afe:	f04f 0b00 	mov.w	fp, #0
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	e786      	b.n	8006a14 <_strtod_l+0x49c>
 8006b06:	bf00      	nop
 8006b08:	0800a1ed 	.word	0x0800a1ed
 8006b0c:	0800a230 	.word	0x0800a230
 8006b10:	0800a1e5 	.word	0x0800a1e5
 8006b14:	0800a374 	.word	0x0800a374
 8006b18:	0800a688 	.word	0x0800a688
 8006b1c:	0800a568 	.word	0x0800a568
 8006b20:	0800a540 	.word	0x0800a540
 8006b24:	7ff00000 	.word	0x7ff00000
 8006b28:	7ca00000 	.word	0x7ca00000
 8006b2c:	7fefffff 	.word	0x7fefffff
 8006b30:	f018 0310 	ands.w	r3, r8, #16
 8006b34:	bf18      	it	ne
 8006b36:	236a      	movne	r3, #106	; 0x6a
 8006b38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006ee8 <_strtod_l+0x970>
 8006b3c:	9304      	str	r3, [sp, #16]
 8006b3e:	4650      	mov	r0, sl
 8006b40:	4659      	mov	r1, fp
 8006b42:	2300      	movs	r3, #0
 8006b44:	f018 0f01 	tst.w	r8, #1
 8006b48:	d004      	beq.n	8006b54 <_strtod_l+0x5dc>
 8006b4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006b4e:	f7f9 fdab 	bl	80006a8 <__aeabi_dmul>
 8006b52:	2301      	movs	r3, #1
 8006b54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006b58:	f109 0908 	add.w	r9, r9, #8
 8006b5c:	d1f2      	bne.n	8006b44 <_strtod_l+0x5cc>
 8006b5e:	b10b      	cbz	r3, 8006b64 <_strtod_l+0x5ec>
 8006b60:	4682      	mov	sl, r0
 8006b62:	468b      	mov	fp, r1
 8006b64:	9b04      	ldr	r3, [sp, #16]
 8006b66:	b1c3      	cbz	r3, 8006b9a <_strtod_l+0x622>
 8006b68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	4659      	mov	r1, fp
 8006b74:	dd11      	ble.n	8006b9a <_strtod_l+0x622>
 8006b76:	2b1f      	cmp	r3, #31
 8006b78:	f340 8124 	ble.w	8006dc4 <_strtod_l+0x84c>
 8006b7c:	2b34      	cmp	r3, #52	; 0x34
 8006b7e:	bfde      	ittt	le
 8006b80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b84:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006b88:	fa03 f202 	lslle.w	r2, r3, r2
 8006b8c:	f04f 0a00 	mov.w	sl, #0
 8006b90:	bfcc      	ite	gt
 8006b92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006b96:	ea02 0b01 	andle.w	fp, r2, r1
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4650      	mov	r0, sl
 8006ba0:	4659      	mov	r1, fp
 8006ba2:	f7f9 ffe9 	bl	8000b78 <__aeabi_dcmpeq>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d1a2      	bne.n	8006af0 <_strtod_l+0x578>
 8006baa:	9b07      	ldr	r3, [sp, #28]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	9908      	ldr	r1, [sp, #32]
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	463a      	mov	r2, r7
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f002 f8fd 	bl	8008db4 <__s2b>
 8006bba:	9007      	str	r0, [sp, #28]
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	f43f af1f 	beq.w	8006a00 <_strtod_l+0x488>
 8006bc2:	9b05      	ldr	r3, [sp, #20]
 8006bc4:	1b9e      	subs	r6, r3, r6
 8006bc6:	9b06      	ldr	r3, [sp, #24]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bfb4      	ite	lt
 8006bcc:	4633      	movlt	r3, r6
 8006bce:	2300      	movge	r3, #0
 8006bd0:	930c      	str	r3, [sp, #48]	; 0x30
 8006bd2:	9b06      	ldr	r3, [sp, #24]
 8006bd4:	2500      	movs	r5, #0
 8006bd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006bda:	9312      	str	r3, [sp, #72]	; 0x48
 8006bdc:	462e      	mov	r6, r5
 8006bde:	9b07      	ldr	r3, [sp, #28]
 8006be0:	4620      	mov	r0, r4
 8006be2:	6859      	ldr	r1, [r3, #4]
 8006be4:	f002 f83e 	bl	8008c64 <_Balloc>
 8006be8:	9005      	str	r0, [sp, #20]
 8006bea:	2800      	cmp	r0, #0
 8006bec:	f43f af0c 	beq.w	8006a08 <_strtod_l+0x490>
 8006bf0:	9b07      	ldr	r3, [sp, #28]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	3202      	adds	r2, #2
 8006bf6:	f103 010c 	add.w	r1, r3, #12
 8006bfa:	0092      	lsls	r2, r2, #2
 8006bfc:	300c      	adds	r0, #12
 8006bfe:	f7fe fd73 	bl	80056e8 <memcpy>
 8006c02:	ec4b ab10 	vmov	d0, sl, fp
 8006c06:	aa1a      	add	r2, sp, #104	; 0x68
 8006c08:	a919      	add	r1, sp, #100	; 0x64
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f002 fc18 	bl	8009440 <__d2b>
 8006c10:	ec4b ab18 	vmov	d8, sl, fp
 8006c14:	9018      	str	r0, [sp, #96]	; 0x60
 8006c16:	2800      	cmp	r0, #0
 8006c18:	f43f aef6 	beq.w	8006a08 <_strtod_l+0x490>
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f002 f962 	bl	8008ee8 <__i2b>
 8006c24:	4606      	mov	r6, r0
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f43f aeee 	beq.w	8006a08 <_strtod_l+0x490>
 8006c2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c2e:	9904      	ldr	r1, [sp, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bfab      	itete	ge
 8006c34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006c36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006c38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006c3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006c3e:	bfac      	ite	ge
 8006c40:	eb03 0902 	addge.w	r9, r3, r2
 8006c44:	1ad7      	sublt	r7, r2, r3
 8006c46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c48:	eba3 0801 	sub.w	r8, r3, r1
 8006c4c:	4490      	add	r8, r2
 8006c4e:	4ba1      	ldr	r3, [pc, #644]	; (8006ed4 <_strtod_l+0x95c>)
 8006c50:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006c54:	4598      	cmp	r8, r3
 8006c56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c5a:	f280 80c7 	bge.w	8006dec <_strtod_l+0x874>
 8006c5e:	eba3 0308 	sub.w	r3, r3, r8
 8006c62:	2b1f      	cmp	r3, #31
 8006c64:	eba2 0203 	sub.w	r2, r2, r3
 8006c68:	f04f 0101 	mov.w	r1, #1
 8006c6c:	f300 80b1 	bgt.w	8006dd2 <_strtod_l+0x85a>
 8006c70:	fa01 f303 	lsl.w	r3, r1, r3
 8006c74:	930d      	str	r3, [sp, #52]	; 0x34
 8006c76:	2300      	movs	r3, #0
 8006c78:	9308      	str	r3, [sp, #32]
 8006c7a:	eb09 0802 	add.w	r8, r9, r2
 8006c7e:	9b04      	ldr	r3, [sp, #16]
 8006c80:	45c1      	cmp	r9, r8
 8006c82:	4417      	add	r7, r2
 8006c84:	441f      	add	r7, r3
 8006c86:	464b      	mov	r3, r9
 8006c88:	bfa8      	it	ge
 8006c8a:	4643      	movge	r3, r8
 8006c8c:	42bb      	cmp	r3, r7
 8006c8e:	bfa8      	it	ge
 8006c90:	463b      	movge	r3, r7
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	bfc2      	ittt	gt
 8006c96:	eba8 0803 	subgt.w	r8, r8, r3
 8006c9a:	1aff      	subgt	r7, r7, r3
 8006c9c:	eba9 0903 	subgt.w	r9, r9, r3
 8006ca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	dd17      	ble.n	8006cd6 <_strtod_l+0x75e>
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	461a      	mov	r2, r3
 8006caa:	4620      	mov	r0, r4
 8006cac:	f002 f9dc 	bl	8009068 <__pow5mult>
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f43f aea8 	beq.w	8006a08 <_strtod_l+0x490>
 8006cb8:	4601      	mov	r1, r0
 8006cba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f002 f929 	bl	8008f14 <__multiply>
 8006cc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f43f ae9f 	beq.w	8006a08 <_strtod_l+0x490>
 8006cca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f002 f809 	bl	8008ce4 <_Bfree>
 8006cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cd4:	9318      	str	r3, [sp, #96]	; 0x60
 8006cd6:	f1b8 0f00 	cmp.w	r8, #0
 8006cda:	f300 808c 	bgt.w	8006df6 <_strtod_l+0x87e>
 8006cde:	9b06      	ldr	r3, [sp, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	dd08      	ble.n	8006cf6 <_strtod_l+0x77e>
 8006ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ce6:	9905      	ldr	r1, [sp, #20]
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f002 f9bd 	bl	8009068 <__pow5mult>
 8006cee:	9005      	str	r0, [sp, #20]
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f43f ae89 	beq.w	8006a08 <_strtod_l+0x490>
 8006cf6:	2f00      	cmp	r7, #0
 8006cf8:	dd08      	ble.n	8006d0c <_strtod_l+0x794>
 8006cfa:	9905      	ldr	r1, [sp, #20]
 8006cfc:	463a      	mov	r2, r7
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f002 fa0c 	bl	800911c <__lshift>
 8006d04:	9005      	str	r0, [sp, #20]
 8006d06:	2800      	cmp	r0, #0
 8006d08:	f43f ae7e 	beq.w	8006a08 <_strtod_l+0x490>
 8006d0c:	f1b9 0f00 	cmp.w	r9, #0
 8006d10:	dd08      	ble.n	8006d24 <_strtod_l+0x7ac>
 8006d12:	4631      	mov	r1, r6
 8006d14:	464a      	mov	r2, r9
 8006d16:	4620      	mov	r0, r4
 8006d18:	f002 fa00 	bl	800911c <__lshift>
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f43f ae72 	beq.w	8006a08 <_strtod_l+0x490>
 8006d24:	9a05      	ldr	r2, [sp, #20]
 8006d26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f002 fa83 	bl	8009234 <__mdiff>
 8006d2e:	4605      	mov	r5, r0
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f43f ae69 	beq.w	8006a08 <_strtod_l+0x490>
 8006d36:	68c3      	ldr	r3, [r0, #12]
 8006d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60c3      	str	r3, [r0, #12]
 8006d3e:	4631      	mov	r1, r6
 8006d40:	f002 fa5c 	bl	80091fc <__mcmp>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	da60      	bge.n	8006e0a <_strtod_l+0x892>
 8006d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d4a:	ea53 030a 	orrs.w	r3, r3, sl
 8006d4e:	f040 8082 	bne.w	8006e56 <_strtod_l+0x8de>
 8006d52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d17d      	bne.n	8006e56 <_strtod_l+0x8de>
 8006d5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d5e:	0d1b      	lsrs	r3, r3, #20
 8006d60:	051b      	lsls	r3, r3, #20
 8006d62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d66:	d976      	bls.n	8006e56 <_strtod_l+0x8de>
 8006d68:	696b      	ldr	r3, [r5, #20]
 8006d6a:	b913      	cbnz	r3, 8006d72 <_strtod_l+0x7fa>
 8006d6c:	692b      	ldr	r3, [r5, #16]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	dd71      	ble.n	8006e56 <_strtod_l+0x8de>
 8006d72:	4629      	mov	r1, r5
 8006d74:	2201      	movs	r2, #1
 8006d76:	4620      	mov	r0, r4
 8006d78:	f002 f9d0 	bl	800911c <__lshift>
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4605      	mov	r5, r0
 8006d80:	f002 fa3c 	bl	80091fc <__mcmp>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	dd66      	ble.n	8006e56 <_strtod_l+0x8de>
 8006d88:	9904      	ldr	r1, [sp, #16]
 8006d8a:	4a53      	ldr	r2, [pc, #332]	; (8006ed8 <_strtod_l+0x960>)
 8006d8c:	465b      	mov	r3, fp
 8006d8e:	2900      	cmp	r1, #0
 8006d90:	f000 8081 	beq.w	8006e96 <_strtod_l+0x91e>
 8006d94:	ea02 010b 	and.w	r1, r2, fp
 8006d98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d9c:	dc7b      	bgt.n	8006e96 <_strtod_l+0x91e>
 8006d9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006da2:	f77f aea9 	ble.w	8006af8 <_strtod_l+0x580>
 8006da6:	4b4d      	ldr	r3, [pc, #308]	; (8006edc <_strtod_l+0x964>)
 8006da8:	4650      	mov	r0, sl
 8006daa:	4659      	mov	r1, fp
 8006dac:	2200      	movs	r2, #0
 8006dae:	f7f9 fc7b 	bl	80006a8 <__aeabi_dmul>
 8006db2:	460b      	mov	r3, r1
 8006db4:	4303      	orrs	r3, r0
 8006db6:	bf08      	it	eq
 8006db8:	2322      	moveq	r3, #34	; 0x22
 8006dba:	4682      	mov	sl, r0
 8006dbc:	468b      	mov	fp, r1
 8006dbe:	bf08      	it	eq
 8006dc0:	6023      	streq	r3, [r4, #0]
 8006dc2:	e62b      	b.n	8006a1c <_strtod_l+0x4a4>
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	ea03 0a0a 	and.w	sl, r3, sl
 8006dd0:	e6e3      	b.n	8006b9a <_strtod_l+0x622>
 8006dd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006dd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006dda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006dde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006de2:	fa01 f308 	lsl.w	r3, r1, r8
 8006de6:	9308      	str	r3, [sp, #32]
 8006de8:	910d      	str	r1, [sp, #52]	; 0x34
 8006dea:	e746      	b.n	8006c7a <_strtod_l+0x702>
 8006dec:	2300      	movs	r3, #0
 8006dee:	9308      	str	r3, [sp, #32]
 8006df0:	2301      	movs	r3, #1
 8006df2:	930d      	str	r3, [sp, #52]	; 0x34
 8006df4:	e741      	b.n	8006c7a <_strtod_l+0x702>
 8006df6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006df8:	4642      	mov	r2, r8
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f002 f98e 	bl	800911c <__lshift>
 8006e00:	9018      	str	r0, [sp, #96]	; 0x60
 8006e02:	2800      	cmp	r0, #0
 8006e04:	f47f af6b 	bne.w	8006cde <_strtod_l+0x766>
 8006e08:	e5fe      	b.n	8006a08 <_strtod_l+0x490>
 8006e0a:	465f      	mov	r7, fp
 8006e0c:	d16e      	bne.n	8006eec <_strtod_l+0x974>
 8006e0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e14:	b342      	cbz	r2, 8006e68 <_strtod_l+0x8f0>
 8006e16:	4a32      	ldr	r2, [pc, #200]	; (8006ee0 <_strtod_l+0x968>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d128      	bne.n	8006e6e <_strtod_l+0x8f6>
 8006e1c:	9b04      	ldr	r3, [sp, #16]
 8006e1e:	4651      	mov	r1, sl
 8006e20:	b1eb      	cbz	r3, 8006e5e <_strtod_l+0x8e6>
 8006e22:	4b2d      	ldr	r3, [pc, #180]	; (8006ed8 <_strtod_l+0x960>)
 8006e24:	403b      	ands	r3, r7
 8006e26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e2e:	d819      	bhi.n	8006e64 <_strtod_l+0x8ec>
 8006e30:	0d1b      	lsrs	r3, r3, #20
 8006e32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	4299      	cmp	r1, r3
 8006e3c:	d117      	bne.n	8006e6e <_strtod_l+0x8f6>
 8006e3e:	4b29      	ldr	r3, [pc, #164]	; (8006ee4 <_strtod_l+0x96c>)
 8006e40:	429f      	cmp	r7, r3
 8006e42:	d102      	bne.n	8006e4a <_strtod_l+0x8d2>
 8006e44:	3101      	adds	r1, #1
 8006e46:	f43f addf 	beq.w	8006a08 <_strtod_l+0x490>
 8006e4a:	4b23      	ldr	r3, [pc, #140]	; (8006ed8 <_strtod_l+0x960>)
 8006e4c:	403b      	ands	r3, r7
 8006e4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006e52:	f04f 0a00 	mov.w	sl, #0
 8006e56:	9b04      	ldr	r3, [sp, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1a4      	bne.n	8006da6 <_strtod_l+0x82e>
 8006e5c:	e5de      	b.n	8006a1c <_strtod_l+0x4a4>
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e62:	e7ea      	b.n	8006e3a <_strtod_l+0x8c2>
 8006e64:	4613      	mov	r3, r2
 8006e66:	e7e8      	b.n	8006e3a <_strtod_l+0x8c2>
 8006e68:	ea53 030a 	orrs.w	r3, r3, sl
 8006e6c:	d08c      	beq.n	8006d88 <_strtod_l+0x810>
 8006e6e:	9b08      	ldr	r3, [sp, #32]
 8006e70:	b1db      	cbz	r3, 8006eaa <_strtod_l+0x932>
 8006e72:	423b      	tst	r3, r7
 8006e74:	d0ef      	beq.n	8006e56 <_strtod_l+0x8de>
 8006e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e78:	9a04      	ldr	r2, [sp, #16]
 8006e7a:	4650      	mov	r0, sl
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	b1c3      	cbz	r3, 8006eb2 <_strtod_l+0x93a>
 8006e80:	f7ff fb5e 	bl	8006540 <sulp>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	ec51 0b18 	vmov	r0, r1, d8
 8006e8c:	f7f9 fa56 	bl	800033c <__adddf3>
 8006e90:	4682      	mov	sl, r0
 8006e92:	468b      	mov	fp, r1
 8006e94:	e7df      	b.n	8006e56 <_strtod_l+0x8de>
 8006e96:	4013      	ands	r3, r2
 8006e98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006ea0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006ea4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006ea8:	e7d5      	b.n	8006e56 <_strtod_l+0x8de>
 8006eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eac:	ea13 0f0a 	tst.w	r3, sl
 8006eb0:	e7e0      	b.n	8006e74 <_strtod_l+0x8fc>
 8006eb2:	f7ff fb45 	bl	8006540 <sulp>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	ec51 0b18 	vmov	r0, r1, d8
 8006ebe:	f7f9 fa3b 	bl	8000338 <__aeabi_dsub>
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4682      	mov	sl, r0
 8006ec8:	468b      	mov	fp, r1
 8006eca:	f7f9 fe55 	bl	8000b78 <__aeabi_dcmpeq>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d0c1      	beq.n	8006e56 <_strtod_l+0x8de>
 8006ed2:	e611      	b.n	8006af8 <_strtod_l+0x580>
 8006ed4:	fffffc02 	.word	0xfffffc02
 8006ed8:	7ff00000 	.word	0x7ff00000
 8006edc:	39500000 	.word	0x39500000
 8006ee0:	000fffff 	.word	0x000fffff
 8006ee4:	7fefffff 	.word	0x7fefffff
 8006ee8:	0800a248 	.word	0x0800a248
 8006eec:	4631      	mov	r1, r6
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f002 fb02 	bl	80094f8 <__ratio>
 8006ef4:	ec59 8b10 	vmov	r8, r9, d0
 8006ef8:	ee10 0a10 	vmov	r0, s0
 8006efc:	2200      	movs	r2, #0
 8006efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f02:	4649      	mov	r1, r9
 8006f04:	f7f9 fe4c 	bl	8000ba0 <__aeabi_dcmple>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d07a      	beq.n	8007002 <_strtod_l+0xa8a>
 8006f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d04a      	beq.n	8006fa8 <_strtod_l+0xa30>
 8006f12:	4b95      	ldr	r3, [pc, #596]	; (8007168 <_strtod_l+0xbf0>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007168 <_strtod_l+0xbf0>
 8006f1e:	f04f 0800 	mov.w	r8, #0
 8006f22:	4b92      	ldr	r3, [pc, #584]	; (800716c <_strtod_l+0xbf4>)
 8006f24:	403b      	ands	r3, r7
 8006f26:	930d      	str	r3, [sp, #52]	; 0x34
 8006f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f2a:	4b91      	ldr	r3, [pc, #580]	; (8007170 <_strtod_l+0xbf8>)
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	f040 80b0 	bne.w	8007092 <_strtod_l+0xb1a>
 8006f32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006f3a:	ec4b ab10 	vmov	d0, sl, fp
 8006f3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006f42:	f002 fa01 	bl	8009348 <__ulp>
 8006f46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f4a:	ec53 2b10 	vmov	r2, r3, d0
 8006f4e:	f7f9 fbab 	bl	80006a8 <__aeabi_dmul>
 8006f52:	4652      	mov	r2, sl
 8006f54:	465b      	mov	r3, fp
 8006f56:	f7f9 f9f1 	bl	800033c <__adddf3>
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4983      	ldr	r1, [pc, #524]	; (800716c <_strtod_l+0xbf4>)
 8006f5e:	4a85      	ldr	r2, [pc, #532]	; (8007174 <_strtod_l+0xbfc>)
 8006f60:	4019      	ands	r1, r3
 8006f62:	4291      	cmp	r1, r2
 8006f64:	4682      	mov	sl, r0
 8006f66:	d960      	bls.n	800702a <_strtod_l+0xab2>
 8006f68:	ee18 3a90 	vmov	r3, s17
 8006f6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d104      	bne.n	8006f7e <_strtod_l+0xa06>
 8006f74:	ee18 3a10 	vmov	r3, s16
 8006f78:	3301      	adds	r3, #1
 8006f7a:	f43f ad45 	beq.w	8006a08 <_strtod_l+0x490>
 8006f7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007180 <_strtod_l+0xc08>
 8006f82:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006f86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f001 feab 	bl	8008ce4 <_Bfree>
 8006f8e:	9905      	ldr	r1, [sp, #20]
 8006f90:	4620      	mov	r0, r4
 8006f92:	f001 fea7 	bl	8008ce4 <_Bfree>
 8006f96:	4631      	mov	r1, r6
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f001 fea3 	bl	8008ce4 <_Bfree>
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f001 fe9f 	bl	8008ce4 <_Bfree>
 8006fa6:	e61a      	b.n	8006bde <_strtod_l+0x666>
 8006fa8:	f1ba 0f00 	cmp.w	sl, #0
 8006fac:	d11b      	bne.n	8006fe6 <_strtod_l+0xa6e>
 8006fae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fb2:	b9f3      	cbnz	r3, 8006ff2 <_strtod_l+0xa7a>
 8006fb4:	4b6c      	ldr	r3, [pc, #432]	; (8007168 <_strtod_l+0xbf0>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4649      	mov	r1, r9
 8006fbc:	f7f9 fde6 	bl	8000b8c <__aeabi_dcmplt>
 8006fc0:	b9d0      	cbnz	r0, 8006ff8 <_strtod_l+0xa80>
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	4b6c      	ldr	r3, [pc, #432]	; (8007178 <_strtod_l+0xc00>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f7f9 fb6d 	bl	80006a8 <__aeabi_dmul>
 8006fce:	4680      	mov	r8, r0
 8006fd0:	4689      	mov	r9, r1
 8006fd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006fd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006fda:	9315      	str	r3, [sp, #84]	; 0x54
 8006fdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006fe0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fe4:	e79d      	b.n	8006f22 <_strtod_l+0x9aa>
 8006fe6:	f1ba 0f01 	cmp.w	sl, #1
 8006fea:	d102      	bne.n	8006ff2 <_strtod_l+0xa7a>
 8006fec:	2f00      	cmp	r7, #0
 8006fee:	f43f ad83 	beq.w	8006af8 <_strtod_l+0x580>
 8006ff2:	4b62      	ldr	r3, [pc, #392]	; (800717c <_strtod_l+0xc04>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	e78e      	b.n	8006f16 <_strtod_l+0x99e>
 8006ff8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007178 <_strtod_l+0xc00>
 8006ffc:	f04f 0800 	mov.w	r8, #0
 8007000:	e7e7      	b.n	8006fd2 <_strtod_l+0xa5a>
 8007002:	4b5d      	ldr	r3, [pc, #372]	; (8007178 <_strtod_l+0xc00>)
 8007004:	4640      	mov	r0, r8
 8007006:	4649      	mov	r1, r9
 8007008:	2200      	movs	r2, #0
 800700a:	f7f9 fb4d 	bl	80006a8 <__aeabi_dmul>
 800700e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007010:	4680      	mov	r8, r0
 8007012:	4689      	mov	r9, r1
 8007014:	b933      	cbnz	r3, 8007024 <_strtod_l+0xaac>
 8007016:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800701a:	900e      	str	r0, [sp, #56]	; 0x38
 800701c:	930f      	str	r3, [sp, #60]	; 0x3c
 800701e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007022:	e7dd      	b.n	8006fe0 <_strtod_l+0xa68>
 8007024:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007028:	e7f9      	b.n	800701e <_strtod_l+0xaa6>
 800702a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800702e:	9b04      	ldr	r3, [sp, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1a8      	bne.n	8006f86 <_strtod_l+0xa0e>
 8007034:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800703a:	0d1b      	lsrs	r3, r3, #20
 800703c:	051b      	lsls	r3, r3, #20
 800703e:	429a      	cmp	r2, r3
 8007040:	d1a1      	bne.n	8006f86 <_strtod_l+0xa0e>
 8007042:	4640      	mov	r0, r8
 8007044:	4649      	mov	r1, r9
 8007046:	f7f9 fe77 	bl	8000d38 <__aeabi_d2lz>
 800704a:	f7f9 faff 	bl	800064c <__aeabi_l2d>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4640      	mov	r0, r8
 8007054:	4649      	mov	r1, r9
 8007056:	f7f9 f96f 	bl	8000338 <__aeabi_dsub>
 800705a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800705c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007060:	ea43 030a 	orr.w	r3, r3, sl
 8007064:	4313      	orrs	r3, r2
 8007066:	4680      	mov	r8, r0
 8007068:	4689      	mov	r9, r1
 800706a:	d055      	beq.n	8007118 <_strtod_l+0xba0>
 800706c:	a336      	add	r3, pc, #216	; (adr r3, 8007148 <_strtod_l+0xbd0>)
 800706e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007072:	f7f9 fd8b 	bl	8000b8c <__aeabi_dcmplt>
 8007076:	2800      	cmp	r0, #0
 8007078:	f47f acd0 	bne.w	8006a1c <_strtod_l+0x4a4>
 800707c:	a334      	add	r3, pc, #208	; (adr r3, 8007150 <_strtod_l+0xbd8>)
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	4640      	mov	r0, r8
 8007084:	4649      	mov	r1, r9
 8007086:	f7f9 fd9f 	bl	8000bc8 <__aeabi_dcmpgt>
 800708a:	2800      	cmp	r0, #0
 800708c:	f43f af7b 	beq.w	8006f86 <_strtod_l+0xa0e>
 8007090:	e4c4      	b.n	8006a1c <_strtod_l+0x4a4>
 8007092:	9b04      	ldr	r3, [sp, #16]
 8007094:	b333      	cbz	r3, 80070e4 <_strtod_l+0xb6c>
 8007096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007098:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800709c:	d822      	bhi.n	80070e4 <_strtod_l+0xb6c>
 800709e:	a32e      	add	r3, pc, #184	; (adr r3, 8007158 <_strtod_l+0xbe0>)
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	4640      	mov	r0, r8
 80070a6:	4649      	mov	r1, r9
 80070a8:	f7f9 fd7a 	bl	8000ba0 <__aeabi_dcmple>
 80070ac:	b1a0      	cbz	r0, 80070d8 <_strtod_l+0xb60>
 80070ae:	4649      	mov	r1, r9
 80070b0:	4640      	mov	r0, r8
 80070b2:	f7f9 fdd1 	bl	8000c58 <__aeabi_d2uiz>
 80070b6:	2801      	cmp	r0, #1
 80070b8:	bf38      	it	cc
 80070ba:	2001      	movcc	r0, #1
 80070bc:	f7f9 fa7a 	bl	80005b4 <__aeabi_ui2d>
 80070c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c2:	4680      	mov	r8, r0
 80070c4:	4689      	mov	r9, r1
 80070c6:	bb23      	cbnz	r3, 8007112 <_strtod_l+0xb9a>
 80070c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070cc:	9010      	str	r0, [sp, #64]	; 0x40
 80070ce:	9311      	str	r3, [sp, #68]	; 0x44
 80070d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80070d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	9309      	str	r3, [sp, #36]	; 0x24
 80070e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070e8:	eeb0 0a48 	vmov.f32	s0, s16
 80070ec:	eef0 0a68 	vmov.f32	s1, s17
 80070f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80070f4:	f002 f928 	bl	8009348 <__ulp>
 80070f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070fc:	ec53 2b10 	vmov	r2, r3, d0
 8007100:	f7f9 fad2 	bl	80006a8 <__aeabi_dmul>
 8007104:	ec53 2b18 	vmov	r2, r3, d8
 8007108:	f7f9 f918 	bl	800033c <__adddf3>
 800710c:	4682      	mov	sl, r0
 800710e:	468b      	mov	fp, r1
 8007110:	e78d      	b.n	800702e <_strtod_l+0xab6>
 8007112:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007116:	e7db      	b.n	80070d0 <_strtod_l+0xb58>
 8007118:	a311      	add	r3, pc, #68	; (adr r3, 8007160 <_strtod_l+0xbe8>)
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f7f9 fd35 	bl	8000b8c <__aeabi_dcmplt>
 8007122:	e7b2      	b.n	800708a <_strtod_l+0xb12>
 8007124:	2300      	movs	r3, #0
 8007126:	930a      	str	r3, [sp, #40]	; 0x28
 8007128:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800712a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	f7ff ba6b 	b.w	8006608 <_strtod_l+0x90>
 8007132:	2a65      	cmp	r2, #101	; 0x65
 8007134:	f43f ab5f 	beq.w	80067f6 <_strtod_l+0x27e>
 8007138:	2a45      	cmp	r2, #69	; 0x45
 800713a:	f43f ab5c 	beq.w	80067f6 <_strtod_l+0x27e>
 800713e:	2301      	movs	r3, #1
 8007140:	f7ff bb94 	b.w	800686c <_strtod_l+0x2f4>
 8007144:	f3af 8000 	nop.w
 8007148:	94a03595 	.word	0x94a03595
 800714c:	3fdfffff 	.word	0x3fdfffff
 8007150:	35afe535 	.word	0x35afe535
 8007154:	3fe00000 	.word	0x3fe00000
 8007158:	ffc00000 	.word	0xffc00000
 800715c:	41dfffff 	.word	0x41dfffff
 8007160:	94a03595 	.word	0x94a03595
 8007164:	3fcfffff 	.word	0x3fcfffff
 8007168:	3ff00000 	.word	0x3ff00000
 800716c:	7ff00000 	.word	0x7ff00000
 8007170:	7fe00000 	.word	0x7fe00000
 8007174:	7c9fffff 	.word	0x7c9fffff
 8007178:	3fe00000 	.word	0x3fe00000
 800717c:	bff00000 	.word	0xbff00000
 8007180:	7fefffff 	.word	0x7fefffff

08007184 <_strtod_r>:
 8007184:	4b01      	ldr	r3, [pc, #4]	; (800718c <_strtod_r+0x8>)
 8007186:	f7ff b9f7 	b.w	8006578 <_strtod_l>
 800718a:	bf00      	nop
 800718c:	2000007c 	.word	0x2000007c

08007190 <_strtol_l.constprop.0>:
 8007190:	2b01      	cmp	r3, #1
 8007192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007196:	d001      	beq.n	800719c <_strtol_l.constprop.0+0xc>
 8007198:	2b24      	cmp	r3, #36	; 0x24
 800719a:	d906      	bls.n	80071aa <_strtol_l.constprop.0+0x1a>
 800719c:	f7fe fa6a 	bl	8005674 <__errno>
 80071a0:	2316      	movs	r3, #22
 80071a2:	6003      	str	r3, [r0, #0]
 80071a4:	2000      	movs	r0, #0
 80071a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007290 <_strtol_l.constprop.0+0x100>
 80071ae:	460d      	mov	r5, r1
 80071b0:	462e      	mov	r6, r5
 80071b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80071ba:	f017 0708 	ands.w	r7, r7, #8
 80071be:	d1f7      	bne.n	80071b0 <_strtol_l.constprop.0+0x20>
 80071c0:	2c2d      	cmp	r4, #45	; 0x2d
 80071c2:	d132      	bne.n	800722a <_strtol_l.constprop.0+0x9a>
 80071c4:	782c      	ldrb	r4, [r5, #0]
 80071c6:	2701      	movs	r7, #1
 80071c8:	1cb5      	adds	r5, r6, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d05b      	beq.n	8007286 <_strtol_l.constprop.0+0xf6>
 80071ce:	2b10      	cmp	r3, #16
 80071d0:	d109      	bne.n	80071e6 <_strtol_l.constprop.0+0x56>
 80071d2:	2c30      	cmp	r4, #48	; 0x30
 80071d4:	d107      	bne.n	80071e6 <_strtol_l.constprop.0+0x56>
 80071d6:	782c      	ldrb	r4, [r5, #0]
 80071d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80071dc:	2c58      	cmp	r4, #88	; 0x58
 80071de:	d14d      	bne.n	800727c <_strtol_l.constprop.0+0xec>
 80071e0:	786c      	ldrb	r4, [r5, #1]
 80071e2:	2310      	movs	r3, #16
 80071e4:	3502      	adds	r5, #2
 80071e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80071ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80071ee:	f04f 0c00 	mov.w	ip, #0
 80071f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80071f6:	4666      	mov	r6, ip
 80071f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80071fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007200:	f1be 0f09 	cmp.w	lr, #9
 8007204:	d816      	bhi.n	8007234 <_strtol_l.constprop.0+0xa4>
 8007206:	4674      	mov	r4, lr
 8007208:	42a3      	cmp	r3, r4
 800720a:	dd24      	ble.n	8007256 <_strtol_l.constprop.0+0xc6>
 800720c:	f1bc 0f00 	cmp.w	ip, #0
 8007210:	db1e      	blt.n	8007250 <_strtol_l.constprop.0+0xc0>
 8007212:	45b1      	cmp	r9, r6
 8007214:	d31c      	bcc.n	8007250 <_strtol_l.constprop.0+0xc0>
 8007216:	d101      	bne.n	800721c <_strtol_l.constprop.0+0x8c>
 8007218:	45a2      	cmp	sl, r4
 800721a:	db19      	blt.n	8007250 <_strtol_l.constprop.0+0xc0>
 800721c:	fb06 4603 	mla	r6, r6, r3, r4
 8007220:	f04f 0c01 	mov.w	ip, #1
 8007224:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007228:	e7e8      	b.n	80071fc <_strtol_l.constprop.0+0x6c>
 800722a:	2c2b      	cmp	r4, #43	; 0x2b
 800722c:	bf04      	itt	eq
 800722e:	782c      	ldrbeq	r4, [r5, #0]
 8007230:	1cb5      	addeq	r5, r6, #2
 8007232:	e7ca      	b.n	80071ca <_strtol_l.constprop.0+0x3a>
 8007234:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007238:	f1be 0f19 	cmp.w	lr, #25
 800723c:	d801      	bhi.n	8007242 <_strtol_l.constprop.0+0xb2>
 800723e:	3c37      	subs	r4, #55	; 0x37
 8007240:	e7e2      	b.n	8007208 <_strtol_l.constprop.0+0x78>
 8007242:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007246:	f1be 0f19 	cmp.w	lr, #25
 800724a:	d804      	bhi.n	8007256 <_strtol_l.constprop.0+0xc6>
 800724c:	3c57      	subs	r4, #87	; 0x57
 800724e:	e7db      	b.n	8007208 <_strtol_l.constprop.0+0x78>
 8007250:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007254:	e7e6      	b.n	8007224 <_strtol_l.constprop.0+0x94>
 8007256:	f1bc 0f00 	cmp.w	ip, #0
 800725a:	da05      	bge.n	8007268 <_strtol_l.constprop.0+0xd8>
 800725c:	2322      	movs	r3, #34	; 0x22
 800725e:	6003      	str	r3, [r0, #0]
 8007260:	4646      	mov	r6, r8
 8007262:	b942      	cbnz	r2, 8007276 <_strtol_l.constprop.0+0xe6>
 8007264:	4630      	mov	r0, r6
 8007266:	e79e      	b.n	80071a6 <_strtol_l.constprop.0+0x16>
 8007268:	b107      	cbz	r7, 800726c <_strtol_l.constprop.0+0xdc>
 800726a:	4276      	negs	r6, r6
 800726c:	2a00      	cmp	r2, #0
 800726e:	d0f9      	beq.n	8007264 <_strtol_l.constprop.0+0xd4>
 8007270:	f1bc 0f00 	cmp.w	ip, #0
 8007274:	d000      	beq.n	8007278 <_strtol_l.constprop.0+0xe8>
 8007276:	1e69      	subs	r1, r5, #1
 8007278:	6011      	str	r1, [r2, #0]
 800727a:	e7f3      	b.n	8007264 <_strtol_l.constprop.0+0xd4>
 800727c:	2430      	movs	r4, #48	; 0x30
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1b1      	bne.n	80071e6 <_strtol_l.constprop.0+0x56>
 8007282:	2308      	movs	r3, #8
 8007284:	e7af      	b.n	80071e6 <_strtol_l.constprop.0+0x56>
 8007286:	2c30      	cmp	r4, #48	; 0x30
 8007288:	d0a5      	beq.n	80071d6 <_strtol_l.constprop.0+0x46>
 800728a:	230a      	movs	r3, #10
 800728c:	e7ab      	b.n	80071e6 <_strtol_l.constprop.0+0x56>
 800728e:	bf00      	nop
 8007290:	0800a271 	.word	0x0800a271

08007294 <_strtol_r>:
 8007294:	f7ff bf7c 	b.w	8007190 <_strtol_l.constprop.0>

08007298 <__swbuf_r>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	460e      	mov	r6, r1
 800729c:	4614      	mov	r4, r2
 800729e:	4605      	mov	r5, r0
 80072a0:	b118      	cbz	r0, 80072aa <__swbuf_r+0x12>
 80072a2:	6983      	ldr	r3, [r0, #24]
 80072a4:	b90b      	cbnz	r3, 80072aa <__swbuf_r+0x12>
 80072a6:	f001 f84b 	bl	8008340 <__sinit>
 80072aa:	4b21      	ldr	r3, [pc, #132]	; (8007330 <__swbuf_r+0x98>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	d12b      	bne.n	8007308 <__swbuf_r+0x70>
 80072b0:	686c      	ldr	r4, [r5, #4]
 80072b2:	69a3      	ldr	r3, [r4, #24]
 80072b4:	60a3      	str	r3, [r4, #8]
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	071a      	lsls	r2, r3, #28
 80072ba:	d52f      	bpl.n	800731c <__swbuf_r+0x84>
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	b36b      	cbz	r3, 800731c <__swbuf_r+0x84>
 80072c0:	6923      	ldr	r3, [r4, #16]
 80072c2:	6820      	ldr	r0, [r4, #0]
 80072c4:	1ac0      	subs	r0, r0, r3
 80072c6:	6963      	ldr	r3, [r4, #20]
 80072c8:	b2f6      	uxtb	r6, r6
 80072ca:	4283      	cmp	r3, r0
 80072cc:	4637      	mov	r7, r6
 80072ce:	dc04      	bgt.n	80072da <__swbuf_r+0x42>
 80072d0:	4621      	mov	r1, r4
 80072d2:	4628      	mov	r0, r5
 80072d4:	f000 ffa0 	bl	8008218 <_fflush_r>
 80072d8:	bb30      	cbnz	r0, 8007328 <__swbuf_r+0x90>
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	3b01      	subs	r3, #1
 80072de:	60a3      	str	r3, [r4, #8]
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	6022      	str	r2, [r4, #0]
 80072e6:	701e      	strb	r6, [r3, #0]
 80072e8:	6963      	ldr	r3, [r4, #20]
 80072ea:	3001      	adds	r0, #1
 80072ec:	4283      	cmp	r3, r0
 80072ee:	d004      	beq.n	80072fa <__swbuf_r+0x62>
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	07db      	lsls	r3, r3, #31
 80072f4:	d506      	bpl.n	8007304 <__swbuf_r+0x6c>
 80072f6:	2e0a      	cmp	r6, #10
 80072f8:	d104      	bne.n	8007304 <__swbuf_r+0x6c>
 80072fa:	4621      	mov	r1, r4
 80072fc:	4628      	mov	r0, r5
 80072fe:	f000 ff8b 	bl	8008218 <_fflush_r>
 8007302:	b988      	cbnz	r0, 8007328 <__swbuf_r+0x90>
 8007304:	4638      	mov	r0, r7
 8007306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <__swbuf_r+0x9c>)
 800730a:	429c      	cmp	r4, r3
 800730c:	d101      	bne.n	8007312 <__swbuf_r+0x7a>
 800730e:	68ac      	ldr	r4, [r5, #8]
 8007310:	e7cf      	b.n	80072b2 <__swbuf_r+0x1a>
 8007312:	4b09      	ldr	r3, [pc, #36]	; (8007338 <__swbuf_r+0xa0>)
 8007314:	429c      	cmp	r4, r3
 8007316:	bf08      	it	eq
 8007318:	68ec      	ldreq	r4, [r5, #12]
 800731a:	e7ca      	b.n	80072b2 <__swbuf_r+0x1a>
 800731c:	4621      	mov	r1, r4
 800731e:	4628      	mov	r0, r5
 8007320:	f000 f80c 	bl	800733c <__swsetup_r>
 8007324:	2800      	cmp	r0, #0
 8007326:	d0cb      	beq.n	80072c0 <__swbuf_r+0x28>
 8007328:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800732c:	e7ea      	b.n	8007304 <__swbuf_r+0x6c>
 800732e:	bf00      	nop
 8007330:	0800a424 	.word	0x0800a424
 8007334:	0800a444 	.word	0x0800a444
 8007338:	0800a404 	.word	0x0800a404

0800733c <__swsetup_r>:
 800733c:	4b32      	ldr	r3, [pc, #200]	; (8007408 <__swsetup_r+0xcc>)
 800733e:	b570      	push	{r4, r5, r6, lr}
 8007340:	681d      	ldr	r5, [r3, #0]
 8007342:	4606      	mov	r6, r0
 8007344:	460c      	mov	r4, r1
 8007346:	b125      	cbz	r5, 8007352 <__swsetup_r+0x16>
 8007348:	69ab      	ldr	r3, [r5, #24]
 800734a:	b913      	cbnz	r3, 8007352 <__swsetup_r+0x16>
 800734c:	4628      	mov	r0, r5
 800734e:	f000 fff7 	bl	8008340 <__sinit>
 8007352:	4b2e      	ldr	r3, [pc, #184]	; (800740c <__swsetup_r+0xd0>)
 8007354:	429c      	cmp	r4, r3
 8007356:	d10f      	bne.n	8007378 <__swsetup_r+0x3c>
 8007358:	686c      	ldr	r4, [r5, #4]
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007360:	0719      	lsls	r1, r3, #28
 8007362:	d42c      	bmi.n	80073be <__swsetup_r+0x82>
 8007364:	06dd      	lsls	r5, r3, #27
 8007366:	d411      	bmi.n	800738c <__swsetup_r+0x50>
 8007368:	2309      	movs	r3, #9
 800736a:	6033      	str	r3, [r6, #0]
 800736c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007376:	e03e      	b.n	80073f6 <__swsetup_r+0xba>
 8007378:	4b25      	ldr	r3, [pc, #148]	; (8007410 <__swsetup_r+0xd4>)
 800737a:	429c      	cmp	r4, r3
 800737c:	d101      	bne.n	8007382 <__swsetup_r+0x46>
 800737e:	68ac      	ldr	r4, [r5, #8]
 8007380:	e7eb      	b.n	800735a <__swsetup_r+0x1e>
 8007382:	4b24      	ldr	r3, [pc, #144]	; (8007414 <__swsetup_r+0xd8>)
 8007384:	429c      	cmp	r4, r3
 8007386:	bf08      	it	eq
 8007388:	68ec      	ldreq	r4, [r5, #12]
 800738a:	e7e6      	b.n	800735a <__swsetup_r+0x1e>
 800738c:	0758      	lsls	r0, r3, #29
 800738e:	d512      	bpl.n	80073b6 <__swsetup_r+0x7a>
 8007390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007392:	b141      	cbz	r1, 80073a6 <__swsetup_r+0x6a>
 8007394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007398:	4299      	cmp	r1, r3
 800739a:	d002      	beq.n	80073a2 <__swsetup_r+0x66>
 800739c:	4630      	mov	r0, r6
 800739e:	f002 f939 	bl	8009614 <_free_r>
 80073a2:	2300      	movs	r3, #0
 80073a4:	6363      	str	r3, [r4, #52]	; 0x34
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	2300      	movs	r3, #0
 80073b0:	6063      	str	r3, [r4, #4]
 80073b2:	6923      	ldr	r3, [r4, #16]
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	f043 0308 	orr.w	r3, r3, #8
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	6923      	ldr	r3, [r4, #16]
 80073c0:	b94b      	cbnz	r3, 80073d6 <__swsetup_r+0x9a>
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073cc:	d003      	beq.n	80073d6 <__swsetup_r+0x9a>
 80073ce:	4621      	mov	r1, r4
 80073d0:	4630      	mov	r0, r6
 80073d2:	f001 fbed 	bl	8008bb0 <__smakebuf_r>
 80073d6:	89a0      	ldrh	r0, [r4, #12]
 80073d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073dc:	f010 0301 	ands.w	r3, r0, #1
 80073e0:	d00a      	beq.n	80073f8 <__swsetup_r+0xbc>
 80073e2:	2300      	movs	r3, #0
 80073e4:	60a3      	str	r3, [r4, #8]
 80073e6:	6963      	ldr	r3, [r4, #20]
 80073e8:	425b      	negs	r3, r3
 80073ea:	61a3      	str	r3, [r4, #24]
 80073ec:	6923      	ldr	r3, [r4, #16]
 80073ee:	b943      	cbnz	r3, 8007402 <__swsetup_r+0xc6>
 80073f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073f4:	d1ba      	bne.n	800736c <__swsetup_r+0x30>
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
 80073f8:	0781      	lsls	r1, r0, #30
 80073fa:	bf58      	it	pl
 80073fc:	6963      	ldrpl	r3, [r4, #20]
 80073fe:	60a3      	str	r3, [r4, #8]
 8007400:	e7f4      	b.n	80073ec <__swsetup_r+0xb0>
 8007402:	2000      	movs	r0, #0
 8007404:	e7f7      	b.n	80073f6 <__swsetup_r+0xba>
 8007406:	bf00      	nop
 8007408:	20000014 	.word	0x20000014
 800740c:	0800a424 	.word	0x0800a424
 8007410:	0800a444 	.word	0x0800a444
 8007414:	0800a404 	.word	0x0800a404

08007418 <quorem>:
 8007418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	6903      	ldr	r3, [r0, #16]
 800741e:	690c      	ldr	r4, [r1, #16]
 8007420:	42a3      	cmp	r3, r4
 8007422:	4607      	mov	r7, r0
 8007424:	f2c0 8081 	blt.w	800752a <quorem+0x112>
 8007428:	3c01      	subs	r4, #1
 800742a:	f101 0814 	add.w	r8, r1, #20
 800742e:	f100 0514 	add.w	r5, r0, #20
 8007432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800743c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007440:	3301      	adds	r3, #1
 8007442:	429a      	cmp	r2, r3
 8007444:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007448:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800744c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007450:	d331      	bcc.n	80074b6 <quorem+0x9e>
 8007452:	f04f 0e00 	mov.w	lr, #0
 8007456:	4640      	mov	r0, r8
 8007458:	46ac      	mov	ip, r5
 800745a:	46f2      	mov	sl, lr
 800745c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007460:	b293      	uxth	r3, r2
 8007462:	fb06 e303 	mla	r3, r6, r3, lr
 8007466:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800746a:	b29b      	uxth	r3, r3
 800746c:	ebaa 0303 	sub.w	r3, sl, r3
 8007470:	f8dc a000 	ldr.w	sl, [ip]
 8007474:	0c12      	lsrs	r2, r2, #16
 8007476:	fa13 f38a 	uxtah	r3, r3, sl
 800747a:	fb06 e202 	mla	r2, r6, r2, lr
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	9b00      	ldr	r3, [sp, #0]
 8007482:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007486:	b292      	uxth	r2, r2
 8007488:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800748c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007490:	f8bd 3000 	ldrh.w	r3, [sp]
 8007494:	4581      	cmp	r9, r0
 8007496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800749a:	f84c 3b04 	str.w	r3, [ip], #4
 800749e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80074a2:	d2db      	bcs.n	800745c <quorem+0x44>
 80074a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80074a8:	b92b      	cbnz	r3, 80074b6 <quorem+0x9e>
 80074aa:	9b01      	ldr	r3, [sp, #4]
 80074ac:	3b04      	subs	r3, #4
 80074ae:	429d      	cmp	r5, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	d32e      	bcc.n	8007512 <quorem+0xfa>
 80074b4:	613c      	str	r4, [r7, #16]
 80074b6:	4638      	mov	r0, r7
 80074b8:	f001 fea0 	bl	80091fc <__mcmp>
 80074bc:	2800      	cmp	r0, #0
 80074be:	db24      	blt.n	800750a <quorem+0xf2>
 80074c0:	3601      	adds	r6, #1
 80074c2:	4628      	mov	r0, r5
 80074c4:	f04f 0c00 	mov.w	ip, #0
 80074c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80074cc:	f8d0 e000 	ldr.w	lr, [r0]
 80074d0:	b293      	uxth	r3, r2
 80074d2:	ebac 0303 	sub.w	r3, ip, r3
 80074d6:	0c12      	lsrs	r2, r2, #16
 80074d8:	fa13 f38e 	uxtah	r3, r3, lr
 80074dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074ea:	45c1      	cmp	r9, r8
 80074ec:	f840 3b04 	str.w	r3, [r0], #4
 80074f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074f4:	d2e8      	bcs.n	80074c8 <quorem+0xb0>
 80074f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074fe:	b922      	cbnz	r2, 800750a <quorem+0xf2>
 8007500:	3b04      	subs	r3, #4
 8007502:	429d      	cmp	r5, r3
 8007504:	461a      	mov	r2, r3
 8007506:	d30a      	bcc.n	800751e <quorem+0x106>
 8007508:	613c      	str	r4, [r7, #16]
 800750a:	4630      	mov	r0, r6
 800750c:	b003      	add	sp, #12
 800750e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	3b04      	subs	r3, #4
 8007516:	2a00      	cmp	r2, #0
 8007518:	d1cc      	bne.n	80074b4 <quorem+0x9c>
 800751a:	3c01      	subs	r4, #1
 800751c:	e7c7      	b.n	80074ae <quorem+0x96>
 800751e:	6812      	ldr	r2, [r2, #0]
 8007520:	3b04      	subs	r3, #4
 8007522:	2a00      	cmp	r2, #0
 8007524:	d1f0      	bne.n	8007508 <quorem+0xf0>
 8007526:	3c01      	subs	r4, #1
 8007528:	e7eb      	b.n	8007502 <quorem+0xea>
 800752a:	2000      	movs	r0, #0
 800752c:	e7ee      	b.n	800750c <quorem+0xf4>
	...

08007530 <_dtoa_r>:
 8007530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	ed2d 8b04 	vpush	{d8-d9}
 8007538:	ec57 6b10 	vmov	r6, r7, d0
 800753c:	b093      	sub	sp, #76	; 0x4c
 800753e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007540:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007544:	9106      	str	r1, [sp, #24]
 8007546:	ee10 aa10 	vmov	sl, s0
 800754a:	4604      	mov	r4, r0
 800754c:	9209      	str	r2, [sp, #36]	; 0x24
 800754e:	930c      	str	r3, [sp, #48]	; 0x30
 8007550:	46bb      	mov	fp, r7
 8007552:	b975      	cbnz	r5, 8007572 <_dtoa_r+0x42>
 8007554:	2010      	movs	r0, #16
 8007556:	f001 fb6b 	bl	8008c30 <malloc>
 800755a:	4602      	mov	r2, r0
 800755c:	6260      	str	r0, [r4, #36]	; 0x24
 800755e:	b920      	cbnz	r0, 800756a <_dtoa_r+0x3a>
 8007560:	4ba7      	ldr	r3, [pc, #668]	; (8007800 <_dtoa_r+0x2d0>)
 8007562:	21ea      	movs	r1, #234	; 0xea
 8007564:	48a7      	ldr	r0, [pc, #668]	; (8007804 <_dtoa_r+0x2d4>)
 8007566:	f002 fb0f 	bl	8009b88 <__assert_func>
 800756a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800756e:	6005      	str	r5, [r0, #0]
 8007570:	60c5      	str	r5, [r0, #12]
 8007572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007574:	6819      	ldr	r1, [r3, #0]
 8007576:	b151      	cbz	r1, 800758e <_dtoa_r+0x5e>
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	604a      	str	r2, [r1, #4]
 800757c:	2301      	movs	r3, #1
 800757e:	4093      	lsls	r3, r2
 8007580:	608b      	str	r3, [r1, #8]
 8007582:	4620      	mov	r0, r4
 8007584:	f001 fbae 	bl	8008ce4 <_Bfree>
 8007588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	1e3b      	subs	r3, r7, #0
 8007590:	bfaa      	itet	ge
 8007592:	2300      	movge	r3, #0
 8007594:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007598:	f8c8 3000 	strge.w	r3, [r8]
 800759c:	4b9a      	ldr	r3, [pc, #616]	; (8007808 <_dtoa_r+0x2d8>)
 800759e:	bfbc      	itt	lt
 80075a0:	2201      	movlt	r2, #1
 80075a2:	f8c8 2000 	strlt.w	r2, [r8]
 80075a6:	ea33 030b 	bics.w	r3, r3, fp
 80075aa:	d11b      	bne.n	80075e4 <_dtoa_r+0xb4>
 80075ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075b8:	4333      	orrs	r3, r6
 80075ba:	f000 8592 	beq.w	80080e2 <_dtoa_r+0xbb2>
 80075be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075c0:	b963      	cbnz	r3, 80075dc <_dtoa_r+0xac>
 80075c2:	4b92      	ldr	r3, [pc, #584]	; (800780c <_dtoa_r+0x2dc>)
 80075c4:	e022      	b.n	800760c <_dtoa_r+0xdc>
 80075c6:	4b92      	ldr	r3, [pc, #584]	; (8007810 <_dtoa_r+0x2e0>)
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	3308      	adds	r3, #8
 80075cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	9801      	ldr	r0, [sp, #4]
 80075d2:	b013      	add	sp, #76	; 0x4c
 80075d4:	ecbd 8b04 	vpop	{d8-d9}
 80075d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075dc:	4b8b      	ldr	r3, [pc, #556]	; (800780c <_dtoa_r+0x2dc>)
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	3303      	adds	r3, #3
 80075e2:	e7f3      	b.n	80075cc <_dtoa_r+0x9c>
 80075e4:	2200      	movs	r2, #0
 80075e6:	2300      	movs	r3, #0
 80075e8:	4650      	mov	r0, sl
 80075ea:	4659      	mov	r1, fp
 80075ec:	f7f9 fac4 	bl	8000b78 <__aeabi_dcmpeq>
 80075f0:	ec4b ab19 	vmov	d9, sl, fp
 80075f4:	4680      	mov	r8, r0
 80075f6:	b158      	cbz	r0, 8007610 <_dtoa_r+0xe0>
 80075f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075fa:	2301      	movs	r3, #1
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 856b 	beq.w	80080dc <_dtoa_r+0xbac>
 8007606:	4883      	ldr	r0, [pc, #524]	; (8007814 <_dtoa_r+0x2e4>)
 8007608:	6018      	str	r0, [r3, #0]
 800760a:	1e43      	subs	r3, r0, #1
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	e7df      	b.n	80075d0 <_dtoa_r+0xa0>
 8007610:	ec4b ab10 	vmov	d0, sl, fp
 8007614:	aa10      	add	r2, sp, #64	; 0x40
 8007616:	a911      	add	r1, sp, #68	; 0x44
 8007618:	4620      	mov	r0, r4
 800761a:	f001 ff11 	bl	8009440 <__d2b>
 800761e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007622:	ee08 0a10 	vmov	s16, r0
 8007626:	2d00      	cmp	r5, #0
 8007628:	f000 8084 	beq.w	8007734 <_dtoa_r+0x204>
 800762c:	ee19 3a90 	vmov	r3, s19
 8007630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007634:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007638:	4656      	mov	r6, sl
 800763a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800763e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007642:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007646:	4b74      	ldr	r3, [pc, #464]	; (8007818 <_dtoa_r+0x2e8>)
 8007648:	2200      	movs	r2, #0
 800764a:	4630      	mov	r0, r6
 800764c:	4639      	mov	r1, r7
 800764e:	f7f8 fe73 	bl	8000338 <__aeabi_dsub>
 8007652:	a365      	add	r3, pc, #404	; (adr r3, 80077e8 <_dtoa_r+0x2b8>)
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	f7f9 f826 	bl	80006a8 <__aeabi_dmul>
 800765c:	a364      	add	r3, pc, #400	; (adr r3, 80077f0 <_dtoa_r+0x2c0>)
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	f7f8 fe6b 	bl	800033c <__adddf3>
 8007666:	4606      	mov	r6, r0
 8007668:	4628      	mov	r0, r5
 800766a:	460f      	mov	r7, r1
 800766c:	f7f8 ffb2 	bl	80005d4 <__aeabi_i2d>
 8007670:	a361      	add	r3, pc, #388	; (adr r3, 80077f8 <_dtoa_r+0x2c8>)
 8007672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007676:	f7f9 f817 	bl	80006a8 <__aeabi_dmul>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4630      	mov	r0, r6
 8007680:	4639      	mov	r1, r7
 8007682:	f7f8 fe5b 	bl	800033c <__adddf3>
 8007686:	4606      	mov	r6, r0
 8007688:	460f      	mov	r7, r1
 800768a:	f7f9 fabd 	bl	8000c08 <__aeabi_d2iz>
 800768e:	2200      	movs	r2, #0
 8007690:	9000      	str	r0, [sp, #0]
 8007692:	2300      	movs	r3, #0
 8007694:	4630      	mov	r0, r6
 8007696:	4639      	mov	r1, r7
 8007698:	f7f9 fa78 	bl	8000b8c <__aeabi_dcmplt>
 800769c:	b150      	cbz	r0, 80076b4 <_dtoa_r+0x184>
 800769e:	9800      	ldr	r0, [sp, #0]
 80076a0:	f7f8 ff98 	bl	80005d4 <__aeabi_i2d>
 80076a4:	4632      	mov	r2, r6
 80076a6:	463b      	mov	r3, r7
 80076a8:	f7f9 fa66 	bl	8000b78 <__aeabi_dcmpeq>
 80076ac:	b910      	cbnz	r0, 80076b4 <_dtoa_r+0x184>
 80076ae:	9b00      	ldr	r3, [sp, #0]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	9b00      	ldr	r3, [sp, #0]
 80076b6:	2b16      	cmp	r3, #22
 80076b8:	d85a      	bhi.n	8007770 <_dtoa_r+0x240>
 80076ba:	9a00      	ldr	r2, [sp, #0]
 80076bc:	4b57      	ldr	r3, [pc, #348]	; (800781c <_dtoa_r+0x2ec>)
 80076be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	ec51 0b19 	vmov	r0, r1, d9
 80076ca:	f7f9 fa5f 	bl	8000b8c <__aeabi_dcmplt>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d050      	beq.n	8007774 <_dtoa_r+0x244>
 80076d2:	9b00      	ldr	r3, [sp, #0]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	2300      	movs	r3, #0
 80076da:	930b      	str	r3, [sp, #44]	; 0x2c
 80076dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076de:	1b5d      	subs	r5, r3, r5
 80076e0:	1e6b      	subs	r3, r5, #1
 80076e2:	9305      	str	r3, [sp, #20]
 80076e4:	bf45      	ittet	mi
 80076e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80076ea:	9304      	strmi	r3, [sp, #16]
 80076ec:	2300      	movpl	r3, #0
 80076ee:	2300      	movmi	r3, #0
 80076f0:	bf4c      	ite	mi
 80076f2:	9305      	strmi	r3, [sp, #20]
 80076f4:	9304      	strpl	r3, [sp, #16]
 80076f6:	9b00      	ldr	r3, [sp, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	db3d      	blt.n	8007778 <_dtoa_r+0x248>
 80076fc:	9b05      	ldr	r3, [sp, #20]
 80076fe:	9a00      	ldr	r2, [sp, #0]
 8007700:	920a      	str	r2, [sp, #40]	; 0x28
 8007702:	4413      	add	r3, r2
 8007704:	9305      	str	r3, [sp, #20]
 8007706:	2300      	movs	r3, #0
 8007708:	9307      	str	r3, [sp, #28]
 800770a:	9b06      	ldr	r3, [sp, #24]
 800770c:	2b09      	cmp	r3, #9
 800770e:	f200 8089 	bhi.w	8007824 <_dtoa_r+0x2f4>
 8007712:	2b05      	cmp	r3, #5
 8007714:	bfc4      	itt	gt
 8007716:	3b04      	subgt	r3, #4
 8007718:	9306      	strgt	r3, [sp, #24]
 800771a:	9b06      	ldr	r3, [sp, #24]
 800771c:	f1a3 0302 	sub.w	r3, r3, #2
 8007720:	bfcc      	ite	gt
 8007722:	2500      	movgt	r5, #0
 8007724:	2501      	movle	r5, #1
 8007726:	2b03      	cmp	r3, #3
 8007728:	f200 8087 	bhi.w	800783a <_dtoa_r+0x30a>
 800772c:	e8df f003 	tbb	[pc, r3]
 8007730:	59383a2d 	.word	0x59383a2d
 8007734:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007738:	441d      	add	r5, r3
 800773a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800773e:	2b20      	cmp	r3, #32
 8007740:	bfc1      	itttt	gt
 8007742:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007746:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800774a:	fa0b f303 	lslgt.w	r3, fp, r3
 800774e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007752:	bfda      	itte	le
 8007754:	f1c3 0320 	rsble	r3, r3, #32
 8007758:	fa06 f003 	lslle.w	r0, r6, r3
 800775c:	4318      	orrgt	r0, r3
 800775e:	f7f8 ff29 	bl	80005b4 <__aeabi_ui2d>
 8007762:	2301      	movs	r3, #1
 8007764:	4606      	mov	r6, r0
 8007766:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800776a:	3d01      	subs	r5, #1
 800776c:	930e      	str	r3, [sp, #56]	; 0x38
 800776e:	e76a      	b.n	8007646 <_dtoa_r+0x116>
 8007770:	2301      	movs	r3, #1
 8007772:	e7b2      	b.n	80076da <_dtoa_r+0x1aa>
 8007774:	900b      	str	r0, [sp, #44]	; 0x2c
 8007776:	e7b1      	b.n	80076dc <_dtoa_r+0x1ac>
 8007778:	9b04      	ldr	r3, [sp, #16]
 800777a:	9a00      	ldr	r2, [sp, #0]
 800777c:	1a9b      	subs	r3, r3, r2
 800777e:	9304      	str	r3, [sp, #16]
 8007780:	4253      	negs	r3, r2
 8007782:	9307      	str	r3, [sp, #28]
 8007784:	2300      	movs	r3, #0
 8007786:	930a      	str	r3, [sp, #40]	; 0x28
 8007788:	e7bf      	b.n	800770a <_dtoa_r+0x1da>
 800778a:	2300      	movs	r3, #0
 800778c:	9308      	str	r3, [sp, #32]
 800778e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	dc55      	bgt.n	8007840 <_dtoa_r+0x310>
 8007794:	2301      	movs	r3, #1
 8007796:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800779a:	461a      	mov	r2, r3
 800779c:	9209      	str	r2, [sp, #36]	; 0x24
 800779e:	e00c      	b.n	80077ba <_dtoa_r+0x28a>
 80077a0:	2301      	movs	r3, #1
 80077a2:	e7f3      	b.n	800778c <_dtoa_r+0x25c>
 80077a4:	2300      	movs	r3, #0
 80077a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a8:	9308      	str	r3, [sp, #32]
 80077aa:	9b00      	ldr	r3, [sp, #0]
 80077ac:	4413      	add	r3, r2
 80077ae:	9302      	str	r3, [sp, #8]
 80077b0:	3301      	adds	r3, #1
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	9303      	str	r3, [sp, #12]
 80077b6:	bfb8      	it	lt
 80077b8:	2301      	movlt	r3, #1
 80077ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80077bc:	2200      	movs	r2, #0
 80077be:	6042      	str	r2, [r0, #4]
 80077c0:	2204      	movs	r2, #4
 80077c2:	f102 0614 	add.w	r6, r2, #20
 80077c6:	429e      	cmp	r6, r3
 80077c8:	6841      	ldr	r1, [r0, #4]
 80077ca:	d93d      	bls.n	8007848 <_dtoa_r+0x318>
 80077cc:	4620      	mov	r0, r4
 80077ce:	f001 fa49 	bl	8008c64 <_Balloc>
 80077d2:	9001      	str	r0, [sp, #4]
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d13b      	bne.n	8007850 <_dtoa_r+0x320>
 80077d8:	4b11      	ldr	r3, [pc, #68]	; (8007820 <_dtoa_r+0x2f0>)
 80077da:	4602      	mov	r2, r0
 80077dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077e0:	e6c0      	b.n	8007564 <_dtoa_r+0x34>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e7df      	b.n	80077a6 <_dtoa_r+0x276>
 80077e6:	bf00      	nop
 80077e8:	636f4361 	.word	0x636f4361
 80077ec:	3fd287a7 	.word	0x3fd287a7
 80077f0:	8b60c8b3 	.word	0x8b60c8b3
 80077f4:	3fc68a28 	.word	0x3fc68a28
 80077f8:	509f79fb 	.word	0x509f79fb
 80077fc:	3fd34413 	.word	0x3fd34413
 8007800:	0800a37e 	.word	0x0800a37e
 8007804:	0800a395 	.word	0x0800a395
 8007808:	7ff00000 	.word	0x7ff00000
 800780c:	0800a37a 	.word	0x0800a37a
 8007810:	0800a371 	.word	0x0800a371
 8007814:	0800a1f1 	.word	0x0800a1f1
 8007818:	3ff80000 	.word	0x3ff80000
 800781c:	0800a568 	.word	0x0800a568
 8007820:	0800a3f0 	.word	0x0800a3f0
 8007824:	2501      	movs	r5, #1
 8007826:	2300      	movs	r3, #0
 8007828:	9306      	str	r3, [sp, #24]
 800782a:	9508      	str	r5, [sp, #32]
 800782c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007830:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007834:	2200      	movs	r2, #0
 8007836:	2312      	movs	r3, #18
 8007838:	e7b0      	b.n	800779c <_dtoa_r+0x26c>
 800783a:	2301      	movs	r3, #1
 800783c:	9308      	str	r3, [sp, #32]
 800783e:	e7f5      	b.n	800782c <_dtoa_r+0x2fc>
 8007840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007842:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007846:	e7b8      	b.n	80077ba <_dtoa_r+0x28a>
 8007848:	3101      	adds	r1, #1
 800784a:	6041      	str	r1, [r0, #4]
 800784c:	0052      	lsls	r2, r2, #1
 800784e:	e7b8      	b.n	80077c2 <_dtoa_r+0x292>
 8007850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007852:	9a01      	ldr	r2, [sp, #4]
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	9b03      	ldr	r3, [sp, #12]
 8007858:	2b0e      	cmp	r3, #14
 800785a:	f200 809d 	bhi.w	8007998 <_dtoa_r+0x468>
 800785e:	2d00      	cmp	r5, #0
 8007860:	f000 809a 	beq.w	8007998 <_dtoa_r+0x468>
 8007864:	9b00      	ldr	r3, [sp, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	dd32      	ble.n	80078d0 <_dtoa_r+0x3a0>
 800786a:	4ab7      	ldr	r2, [pc, #732]	; (8007b48 <_dtoa_r+0x618>)
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007874:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007878:	9b00      	ldr	r3, [sp, #0]
 800787a:	05d8      	lsls	r0, r3, #23
 800787c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007880:	d516      	bpl.n	80078b0 <_dtoa_r+0x380>
 8007882:	4bb2      	ldr	r3, [pc, #712]	; (8007b4c <_dtoa_r+0x61c>)
 8007884:	ec51 0b19 	vmov	r0, r1, d9
 8007888:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800788c:	f7f9 f836 	bl	80008fc <__aeabi_ddiv>
 8007890:	f007 070f 	and.w	r7, r7, #15
 8007894:	4682      	mov	sl, r0
 8007896:	468b      	mov	fp, r1
 8007898:	2503      	movs	r5, #3
 800789a:	4eac      	ldr	r6, [pc, #688]	; (8007b4c <_dtoa_r+0x61c>)
 800789c:	b957      	cbnz	r7, 80078b4 <_dtoa_r+0x384>
 800789e:	4642      	mov	r2, r8
 80078a0:	464b      	mov	r3, r9
 80078a2:	4650      	mov	r0, sl
 80078a4:	4659      	mov	r1, fp
 80078a6:	f7f9 f829 	bl	80008fc <__aeabi_ddiv>
 80078aa:	4682      	mov	sl, r0
 80078ac:	468b      	mov	fp, r1
 80078ae:	e028      	b.n	8007902 <_dtoa_r+0x3d2>
 80078b0:	2502      	movs	r5, #2
 80078b2:	e7f2      	b.n	800789a <_dtoa_r+0x36a>
 80078b4:	07f9      	lsls	r1, r7, #31
 80078b6:	d508      	bpl.n	80078ca <_dtoa_r+0x39a>
 80078b8:	4640      	mov	r0, r8
 80078ba:	4649      	mov	r1, r9
 80078bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078c0:	f7f8 fef2 	bl	80006a8 <__aeabi_dmul>
 80078c4:	3501      	adds	r5, #1
 80078c6:	4680      	mov	r8, r0
 80078c8:	4689      	mov	r9, r1
 80078ca:	107f      	asrs	r7, r7, #1
 80078cc:	3608      	adds	r6, #8
 80078ce:	e7e5      	b.n	800789c <_dtoa_r+0x36c>
 80078d0:	f000 809b 	beq.w	8007a0a <_dtoa_r+0x4da>
 80078d4:	9b00      	ldr	r3, [sp, #0]
 80078d6:	4f9d      	ldr	r7, [pc, #628]	; (8007b4c <_dtoa_r+0x61c>)
 80078d8:	425e      	negs	r6, r3
 80078da:	4b9b      	ldr	r3, [pc, #620]	; (8007b48 <_dtoa_r+0x618>)
 80078dc:	f006 020f 	and.w	r2, r6, #15
 80078e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	ec51 0b19 	vmov	r0, r1, d9
 80078ec:	f7f8 fedc 	bl	80006a8 <__aeabi_dmul>
 80078f0:	1136      	asrs	r6, r6, #4
 80078f2:	4682      	mov	sl, r0
 80078f4:	468b      	mov	fp, r1
 80078f6:	2300      	movs	r3, #0
 80078f8:	2502      	movs	r5, #2
 80078fa:	2e00      	cmp	r6, #0
 80078fc:	d17a      	bne.n	80079f4 <_dtoa_r+0x4c4>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1d3      	bne.n	80078aa <_dtoa_r+0x37a>
 8007902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8082 	beq.w	8007a0e <_dtoa_r+0x4de>
 800790a:	4b91      	ldr	r3, [pc, #580]	; (8007b50 <_dtoa_r+0x620>)
 800790c:	2200      	movs	r2, #0
 800790e:	4650      	mov	r0, sl
 8007910:	4659      	mov	r1, fp
 8007912:	f7f9 f93b 	bl	8000b8c <__aeabi_dcmplt>
 8007916:	2800      	cmp	r0, #0
 8007918:	d079      	beq.n	8007a0e <_dtoa_r+0x4de>
 800791a:	9b03      	ldr	r3, [sp, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d076      	beq.n	8007a0e <_dtoa_r+0x4de>
 8007920:	9b02      	ldr	r3, [sp, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	dd36      	ble.n	8007994 <_dtoa_r+0x464>
 8007926:	9b00      	ldr	r3, [sp, #0]
 8007928:	4650      	mov	r0, sl
 800792a:	4659      	mov	r1, fp
 800792c:	1e5f      	subs	r7, r3, #1
 800792e:	2200      	movs	r2, #0
 8007930:	4b88      	ldr	r3, [pc, #544]	; (8007b54 <_dtoa_r+0x624>)
 8007932:	f7f8 feb9 	bl	80006a8 <__aeabi_dmul>
 8007936:	9e02      	ldr	r6, [sp, #8]
 8007938:	4682      	mov	sl, r0
 800793a:	468b      	mov	fp, r1
 800793c:	3501      	adds	r5, #1
 800793e:	4628      	mov	r0, r5
 8007940:	f7f8 fe48 	bl	80005d4 <__aeabi_i2d>
 8007944:	4652      	mov	r2, sl
 8007946:	465b      	mov	r3, fp
 8007948:	f7f8 feae 	bl	80006a8 <__aeabi_dmul>
 800794c:	4b82      	ldr	r3, [pc, #520]	; (8007b58 <_dtoa_r+0x628>)
 800794e:	2200      	movs	r2, #0
 8007950:	f7f8 fcf4 	bl	800033c <__adddf3>
 8007954:	46d0      	mov	r8, sl
 8007956:	46d9      	mov	r9, fp
 8007958:	4682      	mov	sl, r0
 800795a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800795e:	2e00      	cmp	r6, #0
 8007960:	d158      	bne.n	8007a14 <_dtoa_r+0x4e4>
 8007962:	4b7e      	ldr	r3, [pc, #504]	; (8007b5c <_dtoa_r+0x62c>)
 8007964:	2200      	movs	r2, #0
 8007966:	4640      	mov	r0, r8
 8007968:	4649      	mov	r1, r9
 800796a:	f7f8 fce5 	bl	8000338 <__aeabi_dsub>
 800796e:	4652      	mov	r2, sl
 8007970:	465b      	mov	r3, fp
 8007972:	4680      	mov	r8, r0
 8007974:	4689      	mov	r9, r1
 8007976:	f7f9 f927 	bl	8000bc8 <__aeabi_dcmpgt>
 800797a:	2800      	cmp	r0, #0
 800797c:	f040 8295 	bne.w	8007eaa <_dtoa_r+0x97a>
 8007980:	4652      	mov	r2, sl
 8007982:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007986:	4640      	mov	r0, r8
 8007988:	4649      	mov	r1, r9
 800798a:	f7f9 f8ff 	bl	8000b8c <__aeabi_dcmplt>
 800798e:	2800      	cmp	r0, #0
 8007990:	f040 8289 	bne.w	8007ea6 <_dtoa_r+0x976>
 8007994:	ec5b ab19 	vmov	sl, fp, d9
 8007998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800799a:	2b00      	cmp	r3, #0
 800799c:	f2c0 8148 	blt.w	8007c30 <_dtoa_r+0x700>
 80079a0:	9a00      	ldr	r2, [sp, #0]
 80079a2:	2a0e      	cmp	r2, #14
 80079a4:	f300 8144 	bgt.w	8007c30 <_dtoa_r+0x700>
 80079a8:	4b67      	ldr	r3, [pc, #412]	; (8007b48 <_dtoa_r+0x618>)
 80079aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f280 80d5 	bge.w	8007b64 <_dtoa_r+0x634>
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f300 80d1 	bgt.w	8007b64 <_dtoa_r+0x634>
 80079c2:	f040 826f 	bne.w	8007ea4 <_dtoa_r+0x974>
 80079c6:	4b65      	ldr	r3, [pc, #404]	; (8007b5c <_dtoa_r+0x62c>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	4640      	mov	r0, r8
 80079cc:	4649      	mov	r1, r9
 80079ce:	f7f8 fe6b 	bl	80006a8 <__aeabi_dmul>
 80079d2:	4652      	mov	r2, sl
 80079d4:	465b      	mov	r3, fp
 80079d6:	f7f9 f8ed 	bl	8000bb4 <__aeabi_dcmpge>
 80079da:	9e03      	ldr	r6, [sp, #12]
 80079dc:	4637      	mov	r7, r6
 80079de:	2800      	cmp	r0, #0
 80079e0:	f040 8245 	bne.w	8007e6e <_dtoa_r+0x93e>
 80079e4:	9d01      	ldr	r5, [sp, #4]
 80079e6:	2331      	movs	r3, #49	; 0x31
 80079e8:	f805 3b01 	strb.w	r3, [r5], #1
 80079ec:	9b00      	ldr	r3, [sp, #0]
 80079ee:	3301      	adds	r3, #1
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	e240      	b.n	8007e76 <_dtoa_r+0x946>
 80079f4:	07f2      	lsls	r2, r6, #31
 80079f6:	d505      	bpl.n	8007a04 <_dtoa_r+0x4d4>
 80079f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079fc:	f7f8 fe54 	bl	80006a8 <__aeabi_dmul>
 8007a00:	3501      	adds	r5, #1
 8007a02:	2301      	movs	r3, #1
 8007a04:	1076      	asrs	r6, r6, #1
 8007a06:	3708      	adds	r7, #8
 8007a08:	e777      	b.n	80078fa <_dtoa_r+0x3ca>
 8007a0a:	2502      	movs	r5, #2
 8007a0c:	e779      	b.n	8007902 <_dtoa_r+0x3d2>
 8007a0e:	9f00      	ldr	r7, [sp, #0]
 8007a10:	9e03      	ldr	r6, [sp, #12]
 8007a12:	e794      	b.n	800793e <_dtoa_r+0x40e>
 8007a14:	9901      	ldr	r1, [sp, #4]
 8007a16:	4b4c      	ldr	r3, [pc, #304]	; (8007b48 <_dtoa_r+0x618>)
 8007a18:	4431      	add	r1, r6
 8007a1a:	910d      	str	r1, [sp, #52]	; 0x34
 8007a1c:	9908      	ldr	r1, [sp, #32]
 8007a1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a26:	2900      	cmp	r1, #0
 8007a28:	d043      	beq.n	8007ab2 <_dtoa_r+0x582>
 8007a2a:	494d      	ldr	r1, [pc, #308]	; (8007b60 <_dtoa_r+0x630>)
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	f7f8 ff65 	bl	80008fc <__aeabi_ddiv>
 8007a32:	4652      	mov	r2, sl
 8007a34:	465b      	mov	r3, fp
 8007a36:	f7f8 fc7f 	bl	8000338 <__aeabi_dsub>
 8007a3a:	9d01      	ldr	r5, [sp, #4]
 8007a3c:	4682      	mov	sl, r0
 8007a3e:	468b      	mov	fp, r1
 8007a40:	4649      	mov	r1, r9
 8007a42:	4640      	mov	r0, r8
 8007a44:	f7f9 f8e0 	bl	8000c08 <__aeabi_d2iz>
 8007a48:	4606      	mov	r6, r0
 8007a4a:	f7f8 fdc3 	bl	80005d4 <__aeabi_i2d>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4640      	mov	r0, r8
 8007a54:	4649      	mov	r1, r9
 8007a56:	f7f8 fc6f 	bl	8000338 <__aeabi_dsub>
 8007a5a:	3630      	adds	r6, #48	; 0x30
 8007a5c:	f805 6b01 	strb.w	r6, [r5], #1
 8007a60:	4652      	mov	r2, sl
 8007a62:	465b      	mov	r3, fp
 8007a64:	4680      	mov	r8, r0
 8007a66:	4689      	mov	r9, r1
 8007a68:	f7f9 f890 	bl	8000b8c <__aeabi_dcmplt>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d163      	bne.n	8007b38 <_dtoa_r+0x608>
 8007a70:	4642      	mov	r2, r8
 8007a72:	464b      	mov	r3, r9
 8007a74:	4936      	ldr	r1, [pc, #216]	; (8007b50 <_dtoa_r+0x620>)
 8007a76:	2000      	movs	r0, #0
 8007a78:	f7f8 fc5e 	bl	8000338 <__aeabi_dsub>
 8007a7c:	4652      	mov	r2, sl
 8007a7e:	465b      	mov	r3, fp
 8007a80:	f7f9 f884 	bl	8000b8c <__aeabi_dcmplt>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f040 80b5 	bne.w	8007bf4 <_dtoa_r+0x6c4>
 8007a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a8c:	429d      	cmp	r5, r3
 8007a8e:	d081      	beq.n	8007994 <_dtoa_r+0x464>
 8007a90:	4b30      	ldr	r3, [pc, #192]	; (8007b54 <_dtoa_r+0x624>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	4650      	mov	r0, sl
 8007a96:	4659      	mov	r1, fp
 8007a98:	f7f8 fe06 	bl	80006a8 <__aeabi_dmul>
 8007a9c:	4b2d      	ldr	r3, [pc, #180]	; (8007b54 <_dtoa_r+0x624>)
 8007a9e:	4682      	mov	sl, r0
 8007aa0:	468b      	mov	fp, r1
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f7f8 fdfe 	bl	80006a8 <__aeabi_dmul>
 8007aac:	4680      	mov	r8, r0
 8007aae:	4689      	mov	r9, r1
 8007ab0:	e7c6      	b.n	8007a40 <_dtoa_r+0x510>
 8007ab2:	4650      	mov	r0, sl
 8007ab4:	4659      	mov	r1, fp
 8007ab6:	f7f8 fdf7 	bl	80006a8 <__aeabi_dmul>
 8007aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007abc:	9d01      	ldr	r5, [sp, #4]
 8007abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ac0:	4682      	mov	sl, r0
 8007ac2:	468b      	mov	fp, r1
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	f7f9 f89e 	bl	8000c08 <__aeabi_d2iz>
 8007acc:	4606      	mov	r6, r0
 8007ace:	f7f8 fd81 	bl	80005d4 <__aeabi_i2d>
 8007ad2:	3630      	adds	r6, #48	; 0x30
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4640      	mov	r0, r8
 8007ada:	4649      	mov	r1, r9
 8007adc:	f7f8 fc2c 	bl	8000338 <__aeabi_dsub>
 8007ae0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ae6:	429d      	cmp	r5, r3
 8007ae8:	4680      	mov	r8, r0
 8007aea:	4689      	mov	r9, r1
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	d124      	bne.n	8007b3c <_dtoa_r+0x60c>
 8007af2:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <_dtoa_r+0x630>)
 8007af4:	4650      	mov	r0, sl
 8007af6:	4659      	mov	r1, fp
 8007af8:	f7f8 fc20 	bl	800033c <__adddf3>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4640      	mov	r0, r8
 8007b02:	4649      	mov	r1, r9
 8007b04:	f7f9 f860 	bl	8000bc8 <__aeabi_dcmpgt>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d173      	bne.n	8007bf4 <_dtoa_r+0x6c4>
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	465b      	mov	r3, fp
 8007b10:	4913      	ldr	r1, [pc, #76]	; (8007b60 <_dtoa_r+0x630>)
 8007b12:	2000      	movs	r0, #0
 8007b14:	f7f8 fc10 	bl	8000338 <__aeabi_dsub>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	4649      	mov	r1, r9
 8007b20:	f7f9 f834 	bl	8000b8c <__aeabi_dcmplt>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f43f af35 	beq.w	8007994 <_dtoa_r+0x464>
 8007b2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b2c:	1e6b      	subs	r3, r5, #1
 8007b2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b34:	2b30      	cmp	r3, #48	; 0x30
 8007b36:	d0f8      	beq.n	8007b2a <_dtoa_r+0x5fa>
 8007b38:	9700      	str	r7, [sp, #0]
 8007b3a:	e049      	b.n	8007bd0 <_dtoa_r+0x6a0>
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <_dtoa_r+0x624>)
 8007b3e:	f7f8 fdb3 	bl	80006a8 <__aeabi_dmul>
 8007b42:	4680      	mov	r8, r0
 8007b44:	4689      	mov	r9, r1
 8007b46:	e7bd      	b.n	8007ac4 <_dtoa_r+0x594>
 8007b48:	0800a568 	.word	0x0800a568
 8007b4c:	0800a540 	.word	0x0800a540
 8007b50:	3ff00000 	.word	0x3ff00000
 8007b54:	40240000 	.word	0x40240000
 8007b58:	401c0000 	.word	0x401c0000
 8007b5c:	40140000 	.word	0x40140000
 8007b60:	3fe00000 	.word	0x3fe00000
 8007b64:	9d01      	ldr	r5, [sp, #4]
 8007b66:	4656      	mov	r6, sl
 8007b68:	465f      	mov	r7, fp
 8007b6a:	4642      	mov	r2, r8
 8007b6c:	464b      	mov	r3, r9
 8007b6e:	4630      	mov	r0, r6
 8007b70:	4639      	mov	r1, r7
 8007b72:	f7f8 fec3 	bl	80008fc <__aeabi_ddiv>
 8007b76:	f7f9 f847 	bl	8000c08 <__aeabi_d2iz>
 8007b7a:	4682      	mov	sl, r0
 8007b7c:	f7f8 fd2a 	bl	80005d4 <__aeabi_i2d>
 8007b80:	4642      	mov	r2, r8
 8007b82:	464b      	mov	r3, r9
 8007b84:	f7f8 fd90 	bl	80006a8 <__aeabi_dmul>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	4639      	mov	r1, r7
 8007b90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b94:	f7f8 fbd0 	bl	8000338 <__aeabi_dsub>
 8007b98:	f805 6b01 	strb.w	r6, [r5], #1
 8007b9c:	9e01      	ldr	r6, [sp, #4]
 8007b9e:	9f03      	ldr	r7, [sp, #12]
 8007ba0:	1bae      	subs	r6, r5, r6
 8007ba2:	42b7      	cmp	r7, r6
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	d135      	bne.n	8007c16 <_dtoa_r+0x6e6>
 8007baa:	f7f8 fbc7 	bl	800033c <__adddf3>
 8007bae:	4642      	mov	r2, r8
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460f      	mov	r7, r1
 8007bb6:	f7f9 f807 	bl	8000bc8 <__aeabi_dcmpgt>
 8007bba:	b9d0      	cbnz	r0, 8007bf2 <_dtoa_r+0x6c2>
 8007bbc:	4642      	mov	r2, r8
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	f7f8 ffd8 	bl	8000b78 <__aeabi_dcmpeq>
 8007bc8:	b110      	cbz	r0, 8007bd0 <_dtoa_r+0x6a0>
 8007bca:	f01a 0f01 	tst.w	sl, #1
 8007bce:	d110      	bne.n	8007bf2 <_dtoa_r+0x6c2>
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	ee18 1a10 	vmov	r1, s16
 8007bd6:	f001 f885 	bl	8008ce4 <_Bfree>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9800      	ldr	r0, [sp, #0]
 8007bde:	702b      	strb	r3, [r5, #0]
 8007be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007be2:	3001      	adds	r0, #1
 8007be4:	6018      	str	r0, [r3, #0]
 8007be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f43f acf1 	beq.w	80075d0 <_dtoa_r+0xa0>
 8007bee:	601d      	str	r5, [r3, #0]
 8007bf0:	e4ee      	b.n	80075d0 <_dtoa_r+0xa0>
 8007bf2:	9f00      	ldr	r7, [sp, #0]
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	461d      	mov	r5, r3
 8007bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bfc:	2a39      	cmp	r2, #57	; 0x39
 8007bfe:	d106      	bne.n	8007c0e <_dtoa_r+0x6de>
 8007c00:	9a01      	ldr	r2, [sp, #4]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d1f7      	bne.n	8007bf6 <_dtoa_r+0x6c6>
 8007c06:	9901      	ldr	r1, [sp, #4]
 8007c08:	2230      	movs	r2, #48	; 0x30
 8007c0a:	3701      	adds	r7, #1
 8007c0c:	700a      	strb	r2, [r1, #0]
 8007c0e:	781a      	ldrb	r2, [r3, #0]
 8007c10:	3201      	adds	r2, #1
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e790      	b.n	8007b38 <_dtoa_r+0x608>
 8007c16:	4ba6      	ldr	r3, [pc, #664]	; (8007eb0 <_dtoa_r+0x980>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f7f8 fd45 	bl	80006a8 <__aeabi_dmul>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2300      	movs	r3, #0
 8007c22:	4606      	mov	r6, r0
 8007c24:	460f      	mov	r7, r1
 8007c26:	f7f8 ffa7 	bl	8000b78 <__aeabi_dcmpeq>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d09d      	beq.n	8007b6a <_dtoa_r+0x63a>
 8007c2e:	e7cf      	b.n	8007bd0 <_dtoa_r+0x6a0>
 8007c30:	9a08      	ldr	r2, [sp, #32]
 8007c32:	2a00      	cmp	r2, #0
 8007c34:	f000 80d7 	beq.w	8007de6 <_dtoa_r+0x8b6>
 8007c38:	9a06      	ldr	r2, [sp, #24]
 8007c3a:	2a01      	cmp	r2, #1
 8007c3c:	f300 80ba 	bgt.w	8007db4 <_dtoa_r+0x884>
 8007c40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	f000 80b2 	beq.w	8007dac <_dtoa_r+0x87c>
 8007c48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c4c:	9e07      	ldr	r6, [sp, #28]
 8007c4e:	9d04      	ldr	r5, [sp, #16]
 8007c50:	9a04      	ldr	r2, [sp, #16]
 8007c52:	441a      	add	r2, r3
 8007c54:	9204      	str	r2, [sp, #16]
 8007c56:	9a05      	ldr	r2, [sp, #20]
 8007c58:	2101      	movs	r1, #1
 8007c5a:	441a      	add	r2, r3
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	9205      	str	r2, [sp, #20]
 8007c60:	f001 f942 	bl	8008ee8 <__i2b>
 8007c64:	4607      	mov	r7, r0
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	dd0c      	ble.n	8007c84 <_dtoa_r+0x754>
 8007c6a:	9b05      	ldr	r3, [sp, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	dd09      	ble.n	8007c84 <_dtoa_r+0x754>
 8007c70:	42ab      	cmp	r3, r5
 8007c72:	9a04      	ldr	r2, [sp, #16]
 8007c74:	bfa8      	it	ge
 8007c76:	462b      	movge	r3, r5
 8007c78:	1ad2      	subs	r2, r2, r3
 8007c7a:	9204      	str	r2, [sp, #16]
 8007c7c:	9a05      	ldr	r2, [sp, #20]
 8007c7e:	1aed      	subs	r5, r5, r3
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	9305      	str	r3, [sp, #20]
 8007c84:	9b07      	ldr	r3, [sp, #28]
 8007c86:	b31b      	cbz	r3, 8007cd0 <_dtoa_r+0x7a0>
 8007c88:	9b08      	ldr	r3, [sp, #32]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 80af 	beq.w	8007dee <_dtoa_r+0x8be>
 8007c90:	2e00      	cmp	r6, #0
 8007c92:	dd13      	ble.n	8007cbc <_dtoa_r+0x78c>
 8007c94:	4639      	mov	r1, r7
 8007c96:	4632      	mov	r2, r6
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f001 f9e5 	bl	8009068 <__pow5mult>
 8007c9e:	ee18 2a10 	vmov	r2, s16
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	4607      	mov	r7, r0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f001 f934 	bl	8008f14 <__multiply>
 8007cac:	ee18 1a10 	vmov	r1, s16
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f001 f816 	bl	8008ce4 <_Bfree>
 8007cb8:	ee08 8a10 	vmov	s16, r8
 8007cbc:	9b07      	ldr	r3, [sp, #28]
 8007cbe:	1b9a      	subs	r2, r3, r6
 8007cc0:	d006      	beq.n	8007cd0 <_dtoa_r+0x7a0>
 8007cc2:	ee18 1a10 	vmov	r1, s16
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f001 f9ce 	bl	8009068 <__pow5mult>
 8007ccc:	ee08 0a10 	vmov	s16, r0
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f001 f908 	bl	8008ee8 <__i2b>
 8007cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	4606      	mov	r6, r0
 8007cde:	f340 8088 	ble.w	8007df2 <_dtoa_r+0x8c2>
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4601      	mov	r1, r0
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f001 f9be 	bl	8009068 <__pow5mult>
 8007cec:	9b06      	ldr	r3, [sp, #24]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	f340 8081 	ble.w	8007df8 <_dtoa_r+0x8c8>
 8007cf6:	f04f 0800 	mov.w	r8, #0
 8007cfa:	6933      	ldr	r3, [r6, #16]
 8007cfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d00:	6918      	ldr	r0, [r3, #16]
 8007d02:	f001 f8a1 	bl	8008e48 <__hi0bits>
 8007d06:	f1c0 0020 	rsb	r0, r0, #32
 8007d0a:	9b05      	ldr	r3, [sp, #20]
 8007d0c:	4418      	add	r0, r3
 8007d0e:	f010 001f 	ands.w	r0, r0, #31
 8007d12:	f000 8092 	beq.w	8007e3a <_dtoa_r+0x90a>
 8007d16:	f1c0 0320 	rsb	r3, r0, #32
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	f340 808a 	ble.w	8007e34 <_dtoa_r+0x904>
 8007d20:	f1c0 001c 	rsb	r0, r0, #28
 8007d24:	9b04      	ldr	r3, [sp, #16]
 8007d26:	4403      	add	r3, r0
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	9b05      	ldr	r3, [sp, #20]
 8007d2c:	4403      	add	r3, r0
 8007d2e:	4405      	add	r5, r0
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	9b04      	ldr	r3, [sp, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	dd07      	ble.n	8007d48 <_dtoa_r+0x818>
 8007d38:	ee18 1a10 	vmov	r1, s16
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f001 f9ec 	bl	800911c <__lshift>
 8007d44:	ee08 0a10 	vmov	s16, r0
 8007d48:	9b05      	ldr	r3, [sp, #20]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dd05      	ble.n	8007d5a <_dtoa_r+0x82a>
 8007d4e:	4631      	mov	r1, r6
 8007d50:	461a      	mov	r2, r3
 8007d52:	4620      	mov	r0, r4
 8007d54:	f001 f9e2 	bl	800911c <__lshift>
 8007d58:	4606      	mov	r6, r0
 8007d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d06e      	beq.n	8007e3e <_dtoa_r+0x90e>
 8007d60:	ee18 0a10 	vmov	r0, s16
 8007d64:	4631      	mov	r1, r6
 8007d66:	f001 fa49 	bl	80091fc <__mcmp>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	da67      	bge.n	8007e3e <_dtoa_r+0x90e>
 8007d6e:	9b00      	ldr	r3, [sp, #0]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	ee18 1a10 	vmov	r1, s16
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	220a      	movs	r2, #10
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f000 ffd3 	bl	8008d28 <__multadd>
 8007d82:	9b08      	ldr	r3, [sp, #32]
 8007d84:	ee08 0a10 	vmov	s16, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 81b1 	beq.w	80080f0 <_dtoa_r+0xbc0>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	4639      	mov	r1, r7
 8007d92:	220a      	movs	r2, #10
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 ffc7 	bl	8008d28 <__multadd>
 8007d9a:	9b02      	ldr	r3, [sp, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	4607      	mov	r7, r0
 8007da0:	f300 808e 	bgt.w	8007ec0 <_dtoa_r+0x990>
 8007da4:	9b06      	ldr	r3, [sp, #24]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	dc51      	bgt.n	8007e4e <_dtoa_r+0x91e>
 8007daa:	e089      	b.n	8007ec0 <_dtoa_r+0x990>
 8007dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007db2:	e74b      	b.n	8007c4c <_dtoa_r+0x71c>
 8007db4:	9b03      	ldr	r3, [sp, #12]
 8007db6:	1e5e      	subs	r6, r3, #1
 8007db8:	9b07      	ldr	r3, [sp, #28]
 8007dba:	42b3      	cmp	r3, r6
 8007dbc:	bfbf      	itttt	lt
 8007dbe:	9b07      	ldrlt	r3, [sp, #28]
 8007dc0:	9607      	strlt	r6, [sp, #28]
 8007dc2:	1af2      	sublt	r2, r6, r3
 8007dc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007dc6:	bfb6      	itet	lt
 8007dc8:	189b      	addlt	r3, r3, r2
 8007dca:	1b9e      	subge	r6, r3, r6
 8007dcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	bfb8      	it	lt
 8007dd2:	2600      	movlt	r6, #0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bfb7      	itett	lt
 8007dd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ddc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007de0:	1a9d      	sublt	r5, r3, r2
 8007de2:	2300      	movlt	r3, #0
 8007de4:	e734      	b.n	8007c50 <_dtoa_r+0x720>
 8007de6:	9e07      	ldr	r6, [sp, #28]
 8007de8:	9d04      	ldr	r5, [sp, #16]
 8007dea:	9f08      	ldr	r7, [sp, #32]
 8007dec:	e73b      	b.n	8007c66 <_dtoa_r+0x736>
 8007dee:	9a07      	ldr	r2, [sp, #28]
 8007df0:	e767      	b.n	8007cc2 <_dtoa_r+0x792>
 8007df2:	9b06      	ldr	r3, [sp, #24]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	dc18      	bgt.n	8007e2a <_dtoa_r+0x8fa>
 8007df8:	f1ba 0f00 	cmp.w	sl, #0
 8007dfc:	d115      	bne.n	8007e2a <_dtoa_r+0x8fa>
 8007dfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e02:	b993      	cbnz	r3, 8007e2a <_dtoa_r+0x8fa>
 8007e04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e08:	0d1b      	lsrs	r3, r3, #20
 8007e0a:	051b      	lsls	r3, r3, #20
 8007e0c:	b183      	cbz	r3, 8007e30 <_dtoa_r+0x900>
 8007e0e:	9b04      	ldr	r3, [sp, #16]
 8007e10:	3301      	adds	r3, #1
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	9b05      	ldr	r3, [sp, #20]
 8007e16:	3301      	adds	r3, #1
 8007e18:	9305      	str	r3, [sp, #20]
 8007e1a:	f04f 0801 	mov.w	r8, #1
 8007e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f47f af6a 	bne.w	8007cfa <_dtoa_r+0x7ca>
 8007e26:	2001      	movs	r0, #1
 8007e28:	e76f      	b.n	8007d0a <_dtoa_r+0x7da>
 8007e2a:	f04f 0800 	mov.w	r8, #0
 8007e2e:	e7f6      	b.n	8007e1e <_dtoa_r+0x8ee>
 8007e30:	4698      	mov	r8, r3
 8007e32:	e7f4      	b.n	8007e1e <_dtoa_r+0x8ee>
 8007e34:	f43f af7d 	beq.w	8007d32 <_dtoa_r+0x802>
 8007e38:	4618      	mov	r0, r3
 8007e3a:	301c      	adds	r0, #28
 8007e3c:	e772      	b.n	8007d24 <_dtoa_r+0x7f4>
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dc37      	bgt.n	8007eb4 <_dtoa_r+0x984>
 8007e44:	9b06      	ldr	r3, [sp, #24]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	dd34      	ble.n	8007eb4 <_dtoa_r+0x984>
 8007e4a:	9b03      	ldr	r3, [sp, #12]
 8007e4c:	9302      	str	r3, [sp, #8]
 8007e4e:	9b02      	ldr	r3, [sp, #8]
 8007e50:	b96b      	cbnz	r3, 8007e6e <_dtoa_r+0x93e>
 8007e52:	4631      	mov	r1, r6
 8007e54:	2205      	movs	r2, #5
 8007e56:	4620      	mov	r0, r4
 8007e58:	f000 ff66 	bl	8008d28 <__multadd>
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	4606      	mov	r6, r0
 8007e60:	ee18 0a10 	vmov	r0, s16
 8007e64:	f001 f9ca 	bl	80091fc <__mcmp>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	f73f adbb 	bgt.w	80079e4 <_dtoa_r+0x4b4>
 8007e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e70:	9d01      	ldr	r5, [sp, #4]
 8007e72:	43db      	mvns	r3, r3
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	f04f 0800 	mov.w	r8, #0
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 ff31 	bl	8008ce4 <_Bfree>
 8007e82:	2f00      	cmp	r7, #0
 8007e84:	f43f aea4 	beq.w	8007bd0 <_dtoa_r+0x6a0>
 8007e88:	f1b8 0f00 	cmp.w	r8, #0
 8007e8c:	d005      	beq.n	8007e9a <_dtoa_r+0x96a>
 8007e8e:	45b8      	cmp	r8, r7
 8007e90:	d003      	beq.n	8007e9a <_dtoa_r+0x96a>
 8007e92:	4641      	mov	r1, r8
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 ff25 	bl	8008ce4 <_Bfree>
 8007e9a:	4639      	mov	r1, r7
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f000 ff21 	bl	8008ce4 <_Bfree>
 8007ea2:	e695      	b.n	8007bd0 <_dtoa_r+0x6a0>
 8007ea4:	2600      	movs	r6, #0
 8007ea6:	4637      	mov	r7, r6
 8007ea8:	e7e1      	b.n	8007e6e <_dtoa_r+0x93e>
 8007eaa:	9700      	str	r7, [sp, #0]
 8007eac:	4637      	mov	r7, r6
 8007eae:	e599      	b.n	80079e4 <_dtoa_r+0x4b4>
 8007eb0:	40240000 	.word	0x40240000
 8007eb4:	9b08      	ldr	r3, [sp, #32]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 80ca 	beq.w	8008050 <_dtoa_r+0xb20>
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	9302      	str	r3, [sp, #8]
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	dd05      	ble.n	8007ed0 <_dtoa_r+0x9a0>
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	462a      	mov	r2, r5
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f001 f927 	bl	800911c <__lshift>
 8007ece:	4607      	mov	r7, r0
 8007ed0:	f1b8 0f00 	cmp.w	r8, #0
 8007ed4:	d05b      	beq.n	8007f8e <_dtoa_r+0xa5e>
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 fec3 	bl	8008c64 <_Balloc>
 8007ede:	4605      	mov	r5, r0
 8007ee0:	b928      	cbnz	r0, 8007eee <_dtoa_r+0x9be>
 8007ee2:	4b87      	ldr	r3, [pc, #540]	; (8008100 <_dtoa_r+0xbd0>)
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007eea:	f7ff bb3b 	b.w	8007564 <_dtoa_r+0x34>
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	3202      	adds	r2, #2
 8007ef2:	0092      	lsls	r2, r2, #2
 8007ef4:	f107 010c 	add.w	r1, r7, #12
 8007ef8:	300c      	adds	r0, #12
 8007efa:	f7fd fbf5 	bl	80056e8 <memcpy>
 8007efe:	2201      	movs	r2, #1
 8007f00:	4629      	mov	r1, r5
 8007f02:	4620      	mov	r0, r4
 8007f04:	f001 f90a 	bl	800911c <__lshift>
 8007f08:	9b01      	ldr	r3, [sp, #4]
 8007f0a:	f103 0901 	add.w	r9, r3, #1
 8007f0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007f12:	4413      	add	r3, r2
 8007f14:	9305      	str	r3, [sp, #20]
 8007f16:	f00a 0301 	and.w	r3, sl, #1
 8007f1a:	46b8      	mov	r8, r7
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	4607      	mov	r7, r0
 8007f20:	4631      	mov	r1, r6
 8007f22:	ee18 0a10 	vmov	r0, s16
 8007f26:	f7ff fa77 	bl	8007418 <quorem>
 8007f2a:	4641      	mov	r1, r8
 8007f2c:	9002      	str	r0, [sp, #8]
 8007f2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f32:	ee18 0a10 	vmov	r0, s16
 8007f36:	f001 f961 	bl	80091fc <__mcmp>
 8007f3a:	463a      	mov	r2, r7
 8007f3c:	9003      	str	r0, [sp, #12]
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4620      	mov	r0, r4
 8007f42:	f001 f977 	bl	8009234 <__mdiff>
 8007f46:	68c2      	ldr	r2, [r0, #12]
 8007f48:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	bb02      	cbnz	r2, 8007f92 <_dtoa_r+0xa62>
 8007f50:	4601      	mov	r1, r0
 8007f52:	ee18 0a10 	vmov	r0, s16
 8007f56:	f001 f951 	bl	80091fc <__mcmp>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	4620      	mov	r0, r4
 8007f60:	9207      	str	r2, [sp, #28]
 8007f62:	f000 febf 	bl	8008ce4 <_Bfree>
 8007f66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007f6a:	ea43 0102 	orr.w	r1, r3, r2
 8007f6e:	9b04      	ldr	r3, [sp, #16]
 8007f70:	430b      	orrs	r3, r1
 8007f72:	464d      	mov	r5, r9
 8007f74:	d10f      	bne.n	8007f96 <_dtoa_r+0xa66>
 8007f76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f7a:	d02a      	beq.n	8007fd2 <_dtoa_r+0xaa2>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dd02      	ble.n	8007f88 <_dtoa_r+0xa58>
 8007f82:	9b02      	ldr	r3, [sp, #8]
 8007f84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f88:	f88b a000 	strb.w	sl, [fp]
 8007f8c:	e775      	b.n	8007e7a <_dtoa_r+0x94a>
 8007f8e:	4638      	mov	r0, r7
 8007f90:	e7ba      	b.n	8007f08 <_dtoa_r+0x9d8>
 8007f92:	2201      	movs	r2, #1
 8007f94:	e7e2      	b.n	8007f5c <_dtoa_r+0xa2c>
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	db04      	blt.n	8007fa6 <_dtoa_r+0xa76>
 8007f9c:	9906      	ldr	r1, [sp, #24]
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	9904      	ldr	r1, [sp, #16]
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	d122      	bne.n	8007fec <_dtoa_r+0xabc>
 8007fa6:	2a00      	cmp	r2, #0
 8007fa8:	ddee      	ble.n	8007f88 <_dtoa_r+0xa58>
 8007faa:	ee18 1a10 	vmov	r1, s16
 8007fae:	2201      	movs	r2, #1
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f001 f8b3 	bl	800911c <__lshift>
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	ee08 0a10 	vmov	s16, r0
 8007fbc:	f001 f91e 	bl	80091fc <__mcmp>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	dc03      	bgt.n	8007fcc <_dtoa_r+0xa9c>
 8007fc4:	d1e0      	bne.n	8007f88 <_dtoa_r+0xa58>
 8007fc6:	f01a 0f01 	tst.w	sl, #1
 8007fca:	d0dd      	beq.n	8007f88 <_dtoa_r+0xa58>
 8007fcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007fd0:	d1d7      	bne.n	8007f82 <_dtoa_r+0xa52>
 8007fd2:	2339      	movs	r3, #57	; 0x39
 8007fd4:	f88b 3000 	strb.w	r3, [fp]
 8007fd8:	462b      	mov	r3, r5
 8007fda:	461d      	mov	r5, r3
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007fe2:	2a39      	cmp	r2, #57	; 0x39
 8007fe4:	d071      	beq.n	80080ca <_dtoa_r+0xb9a>
 8007fe6:	3201      	adds	r2, #1
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	e746      	b.n	8007e7a <_dtoa_r+0x94a>
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	dd07      	ble.n	8008000 <_dtoa_r+0xad0>
 8007ff0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ff4:	d0ed      	beq.n	8007fd2 <_dtoa_r+0xaa2>
 8007ff6:	f10a 0301 	add.w	r3, sl, #1
 8007ffa:	f88b 3000 	strb.w	r3, [fp]
 8007ffe:	e73c      	b.n	8007e7a <_dtoa_r+0x94a>
 8008000:	9b05      	ldr	r3, [sp, #20]
 8008002:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008006:	4599      	cmp	r9, r3
 8008008:	d047      	beq.n	800809a <_dtoa_r+0xb6a>
 800800a:	ee18 1a10 	vmov	r1, s16
 800800e:	2300      	movs	r3, #0
 8008010:	220a      	movs	r2, #10
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fe88 	bl	8008d28 <__multadd>
 8008018:	45b8      	cmp	r8, r7
 800801a:	ee08 0a10 	vmov	s16, r0
 800801e:	f04f 0300 	mov.w	r3, #0
 8008022:	f04f 020a 	mov.w	r2, #10
 8008026:	4641      	mov	r1, r8
 8008028:	4620      	mov	r0, r4
 800802a:	d106      	bne.n	800803a <_dtoa_r+0xb0a>
 800802c:	f000 fe7c 	bl	8008d28 <__multadd>
 8008030:	4680      	mov	r8, r0
 8008032:	4607      	mov	r7, r0
 8008034:	f109 0901 	add.w	r9, r9, #1
 8008038:	e772      	b.n	8007f20 <_dtoa_r+0x9f0>
 800803a:	f000 fe75 	bl	8008d28 <__multadd>
 800803e:	4639      	mov	r1, r7
 8008040:	4680      	mov	r8, r0
 8008042:	2300      	movs	r3, #0
 8008044:	220a      	movs	r2, #10
 8008046:	4620      	mov	r0, r4
 8008048:	f000 fe6e 	bl	8008d28 <__multadd>
 800804c:	4607      	mov	r7, r0
 800804e:	e7f1      	b.n	8008034 <_dtoa_r+0xb04>
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	9302      	str	r3, [sp, #8]
 8008054:	9d01      	ldr	r5, [sp, #4]
 8008056:	ee18 0a10 	vmov	r0, s16
 800805a:	4631      	mov	r1, r6
 800805c:	f7ff f9dc 	bl	8007418 <quorem>
 8008060:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008064:	9b01      	ldr	r3, [sp, #4]
 8008066:	f805 ab01 	strb.w	sl, [r5], #1
 800806a:	1aea      	subs	r2, r5, r3
 800806c:	9b02      	ldr	r3, [sp, #8]
 800806e:	4293      	cmp	r3, r2
 8008070:	dd09      	ble.n	8008086 <_dtoa_r+0xb56>
 8008072:	ee18 1a10 	vmov	r1, s16
 8008076:	2300      	movs	r3, #0
 8008078:	220a      	movs	r2, #10
 800807a:	4620      	mov	r0, r4
 800807c:	f000 fe54 	bl	8008d28 <__multadd>
 8008080:	ee08 0a10 	vmov	s16, r0
 8008084:	e7e7      	b.n	8008056 <_dtoa_r+0xb26>
 8008086:	9b02      	ldr	r3, [sp, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	bfc8      	it	gt
 800808c:	461d      	movgt	r5, r3
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	bfd8      	it	le
 8008092:	2501      	movle	r5, #1
 8008094:	441d      	add	r5, r3
 8008096:	f04f 0800 	mov.w	r8, #0
 800809a:	ee18 1a10 	vmov	r1, s16
 800809e:	2201      	movs	r2, #1
 80080a0:	4620      	mov	r0, r4
 80080a2:	f001 f83b 	bl	800911c <__lshift>
 80080a6:	4631      	mov	r1, r6
 80080a8:	ee08 0a10 	vmov	s16, r0
 80080ac:	f001 f8a6 	bl	80091fc <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	dc91      	bgt.n	8007fd8 <_dtoa_r+0xaa8>
 80080b4:	d102      	bne.n	80080bc <_dtoa_r+0xb8c>
 80080b6:	f01a 0f01 	tst.w	sl, #1
 80080ba:	d18d      	bne.n	8007fd8 <_dtoa_r+0xaa8>
 80080bc:	462b      	mov	r3, r5
 80080be:	461d      	mov	r5, r3
 80080c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080c4:	2a30      	cmp	r2, #48	; 0x30
 80080c6:	d0fa      	beq.n	80080be <_dtoa_r+0xb8e>
 80080c8:	e6d7      	b.n	8007e7a <_dtoa_r+0x94a>
 80080ca:	9a01      	ldr	r2, [sp, #4]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d184      	bne.n	8007fda <_dtoa_r+0xaaa>
 80080d0:	9b00      	ldr	r3, [sp, #0]
 80080d2:	3301      	adds	r3, #1
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	2331      	movs	r3, #49	; 0x31
 80080d8:	7013      	strb	r3, [r2, #0]
 80080da:	e6ce      	b.n	8007e7a <_dtoa_r+0x94a>
 80080dc:	4b09      	ldr	r3, [pc, #36]	; (8008104 <_dtoa_r+0xbd4>)
 80080de:	f7ff ba95 	b.w	800760c <_dtoa_r+0xdc>
 80080e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f47f aa6e 	bne.w	80075c6 <_dtoa_r+0x96>
 80080ea:	4b07      	ldr	r3, [pc, #28]	; (8008108 <_dtoa_r+0xbd8>)
 80080ec:	f7ff ba8e 	b.w	800760c <_dtoa_r+0xdc>
 80080f0:	9b02      	ldr	r3, [sp, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	dcae      	bgt.n	8008054 <_dtoa_r+0xb24>
 80080f6:	9b06      	ldr	r3, [sp, #24]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	f73f aea8 	bgt.w	8007e4e <_dtoa_r+0x91e>
 80080fe:	e7a9      	b.n	8008054 <_dtoa_r+0xb24>
 8008100:	0800a3f0 	.word	0x0800a3f0
 8008104:	0800a1f0 	.word	0x0800a1f0
 8008108:	0800a371 	.word	0x0800a371

0800810c <__sflush_r>:
 800810c:	898a      	ldrh	r2, [r1, #12]
 800810e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008112:	4605      	mov	r5, r0
 8008114:	0710      	lsls	r0, r2, #28
 8008116:	460c      	mov	r4, r1
 8008118:	d458      	bmi.n	80081cc <__sflush_r+0xc0>
 800811a:	684b      	ldr	r3, [r1, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dc05      	bgt.n	800812c <__sflush_r+0x20>
 8008120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	dc02      	bgt.n	800812c <__sflush_r+0x20>
 8008126:	2000      	movs	r0, #0
 8008128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800812e:	2e00      	cmp	r6, #0
 8008130:	d0f9      	beq.n	8008126 <__sflush_r+0x1a>
 8008132:	2300      	movs	r3, #0
 8008134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008138:	682f      	ldr	r7, [r5, #0]
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	d032      	beq.n	80081a4 <__sflush_r+0x98>
 800813e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	075a      	lsls	r2, r3, #29
 8008144:	d505      	bpl.n	8008152 <__sflush_r+0x46>
 8008146:	6863      	ldr	r3, [r4, #4]
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800814c:	b10b      	cbz	r3, 8008152 <__sflush_r+0x46>
 800814e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008150:	1ac0      	subs	r0, r0, r3
 8008152:	2300      	movs	r3, #0
 8008154:	4602      	mov	r2, r0
 8008156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008158:	6a21      	ldr	r1, [r4, #32]
 800815a:	4628      	mov	r0, r5
 800815c:	47b0      	blx	r6
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	d106      	bne.n	8008172 <__sflush_r+0x66>
 8008164:	6829      	ldr	r1, [r5, #0]
 8008166:	291d      	cmp	r1, #29
 8008168:	d82c      	bhi.n	80081c4 <__sflush_r+0xb8>
 800816a:	4a2a      	ldr	r2, [pc, #168]	; (8008214 <__sflush_r+0x108>)
 800816c:	40ca      	lsrs	r2, r1
 800816e:	07d6      	lsls	r6, r2, #31
 8008170:	d528      	bpl.n	80081c4 <__sflush_r+0xb8>
 8008172:	2200      	movs	r2, #0
 8008174:	6062      	str	r2, [r4, #4]
 8008176:	04d9      	lsls	r1, r3, #19
 8008178:	6922      	ldr	r2, [r4, #16]
 800817a:	6022      	str	r2, [r4, #0]
 800817c:	d504      	bpl.n	8008188 <__sflush_r+0x7c>
 800817e:	1c42      	adds	r2, r0, #1
 8008180:	d101      	bne.n	8008186 <__sflush_r+0x7a>
 8008182:	682b      	ldr	r3, [r5, #0]
 8008184:	b903      	cbnz	r3, 8008188 <__sflush_r+0x7c>
 8008186:	6560      	str	r0, [r4, #84]	; 0x54
 8008188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800818a:	602f      	str	r7, [r5, #0]
 800818c:	2900      	cmp	r1, #0
 800818e:	d0ca      	beq.n	8008126 <__sflush_r+0x1a>
 8008190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008194:	4299      	cmp	r1, r3
 8008196:	d002      	beq.n	800819e <__sflush_r+0x92>
 8008198:	4628      	mov	r0, r5
 800819a:	f001 fa3b 	bl	8009614 <_free_r>
 800819e:	2000      	movs	r0, #0
 80081a0:	6360      	str	r0, [r4, #52]	; 0x34
 80081a2:	e7c1      	b.n	8008128 <__sflush_r+0x1c>
 80081a4:	6a21      	ldr	r1, [r4, #32]
 80081a6:	2301      	movs	r3, #1
 80081a8:	4628      	mov	r0, r5
 80081aa:	47b0      	blx	r6
 80081ac:	1c41      	adds	r1, r0, #1
 80081ae:	d1c7      	bne.n	8008140 <__sflush_r+0x34>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0c4      	beq.n	8008140 <__sflush_r+0x34>
 80081b6:	2b1d      	cmp	r3, #29
 80081b8:	d001      	beq.n	80081be <__sflush_r+0xb2>
 80081ba:	2b16      	cmp	r3, #22
 80081bc:	d101      	bne.n	80081c2 <__sflush_r+0xb6>
 80081be:	602f      	str	r7, [r5, #0]
 80081c0:	e7b1      	b.n	8008126 <__sflush_r+0x1a>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	e7ad      	b.n	8008128 <__sflush_r+0x1c>
 80081cc:	690f      	ldr	r7, [r1, #16]
 80081ce:	2f00      	cmp	r7, #0
 80081d0:	d0a9      	beq.n	8008126 <__sflush_r+0x1a>
 80081d2:	0793      	lsls	r3, r2, #30
 80081d4:	680e      	ldr	r6, [r1, #0]
 80081d6:	bf08      	it	eq
 80081d8:	694b      	ldreq	r3, [r1, #20]
 80081da:	600f      	str	r7, [r1, #0]
 80081dc:	bf18      	it	ne
 80081de:	2300      	movne	r3, #0
 80081e0:	eba6 0807 	sub.w	r8, r6, r7
 80081e4:	608b      	str	r3, [r1, #8]
 80081e6:	f1b8 0f00 	cmp.w	r8, #0
 80081ea:	dd9c      	ble.n	8008126 <__sflush_r+0x1a>
 80081ec:	6a21      	ldr	r1, [r4, #32]
 80081ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081f0:	4643      	mov	r3, r8
 80081f2:	463a      	mov	r2, r7
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b0      	blx	r6
 80081f8:	2800      	cmp	r0, #0
 80081fa:	dc06      	bgt.n	800820a <__sflush_r+0xfe>
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008202:	81a3      	strh	r3, [r4, #12]
 8008204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008208:	e78e      	b.n	8008128 <__sflush_r+0x1c>
 800820a:	4407      	add	r7, r0
 800820c:	eba8 0800 	sub.w	r8, r8, r0
 8008210:	e7e9      	b.n	80081e6 <__sflush_r+0xda>
 8008212:	bf00      	nop
 8008214:	20400001 	.word	0x20400001

08008218 <_fflush_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	690b      	ldr	r3, [r1, #16]
 800821c:	4605      	mov	r5, r0
 800821e:	460c      	mov	r4, r1
 8008220:	b913      	cbnz	r3, 8008228 <_fflush_r+0x10>
 8008222:	2500      	movs	r5, #0
 8008224:	4628      	mov	r0, r5
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	b118      	cbz	r0, 8008232 <_fflush_r+0x1a>
 800822a:	6983      	ldr	r3, [r0, #24]
 800822c:	b90b      	cbnz	r3, 8008232 <_fflush_r+0x1a>
 800822e:	f000 f887 	bl	8008340 <__sinit>
 8008232:	4b14      	ldr	r3, [pc, #80]	; (8008284 <_fflush_r+0x6c>)
 8008234:	429c      	cmp	r4, r3
 8008236:	d11b      	bne.n	8008270 <_fflush_r+0x58>
 8008238:	686c      	ldr	r4, [r5, #4]
 800823a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0ef      	beq.n	8008222 <_fflush_r+0xa>
 8008242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008244:	07d0      	lsls	r0, r2, #31
 8008246:	d404      	bmi.n	8008252 <_fflush_r+0x3a>
 8008248:	0599      	lsls	r1, r3, #22
 800824a:	d402      	bmi.n	8008252 <_fflush_r+0x3a>
 800824c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800824e:	f000 fc88 	bl	8008b62 <__retarget_lock_acquire_recursive>
 8008252:	4628      	mov	r0, r5
 8008254:	4621      	mov	r1, r4
 8008256:	f7ff ff59 	bl	800810c <__sflush_r>
 800825a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800825c:	07da      	lsls	r2, r3, #31
 800825e:	4605      	mov	r5, r0
 8008260:	d4e0      	bmi.n	8008224 <_fflush_r+0xc>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	059b      	lsls	r3, r3, #22
 8008266:	d4dd      	bmi.n	8008224 <_fflush_r+0xc>
 8008268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826a:	f000 fc7b 	bl	8008b64 <__retarget_lock_release_recursive>
 800826e:	e7d9      	b.n	8008224 <_fflush_r+0xc>
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <_fflush_r+0x70>)
 8008272:	429c      	cmp	r4, r3
 8008274:	d101      	bne.n	800827a <_fflush_r+0x62>
 8008276:	68ac      	ldr	r4, [r5, #8]
 8008278:	e7df      	b.n	800823a <_fflush_r+0x22>
 800827a:	4b04      	ldr	r3, [pc, #16]	; (800828c <_fflush_r+0x74>)
 800827c:	429c      	cmp	r4, r3
 800827e:	bf08      	it	eq
 8008280:	68ec      	ldreq	r4, [r5, #12]
 8008282:	e7da      	b.n	800823a <_fflush_r+0x22>
 8008284:	0800a424 	.word	0x0800a424
 8008288:	0800a444 	.word	0x0800a444
 800828c:	0800a404 	.word	0x0800a404

08008290 <std>:
 8008290:	2300      	movs	r3, #0
 8008292:	b510      	push	{r4, lr}
 8008294:	4604      	mov	r4, r0
 8008296:	e9c0 3300 	strd	r3, r3, [r0]
 800829a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800829e:	6083      	str	r3, [r0, #8]
 80082a0:	8181      	strh	r1, [r0, #12]
 80082a2:	6643      	str	r3, [r0, #100]	; 0x64
 80082a4:	81c2      	strh	r2, [r0, #14]
 80082a6:	6183      	str	r3, [r0, #24]
 80082a8:	4619      	mov	r1, r3
 80082aa:	2208      	movs	r2, #8
 80082ac:	305c      	adds	r0, #92	; 0x5c
 80082ae:	f7fd fa29 	bl	8005704 <memset>
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <std+0x38>)
 80082b4:	6263      	str	r3, [r4, #36]	; 0x24
 80082b6:	4b05      	ldr	r3, [pc, #20]	; (80082cc <std+0x3c>)
 80082b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80082ba:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <std+0x40>)
 80082bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082be:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <std+0x44>)
 80082c0:	6224      	str	r4, [r4, #32]
 80082c2:	6323      	str	r3, [r4, #48]	; 0x30
 80082c4:	bd10      	pop	{r4, pc}
 80082c6:	bf00      	nop
 80082c8:	08009ac1 	.word	0x08009ac1
 80082cc:	08009ae3 	.word	0x08009ae3
 80082d0:	08009b1b 	.word	0x08009b1b
 80082d4:	08009b3f 	.word	0x08009b3f

080082d8 <_cleanup_r>:
 80082d8:	4901      	ldr	r1, [pc, #4]	; (80082e0 <_cleanup_r+0x8>)
 80082da:	f000 b8af 	b.w	800843c <_fwalk_reent>
 80082de:	bf00      	nop
 80082e0:	08008219 	.word	0x08008219

080082e4 <__sfmoreglue>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	2268      	movs	r2, #104	; 0x68
 80082e8:	1e4d      	subs	r5, r1, #1
 80082ea:	4355      	muls	r5, r2
 80082ec:	460e      	mov	r6, r1
 80082ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082f2:	f001 f9fb 	bl	80096ec <_malloc_r>
 80082f6:	4604      	mov	r4, r0
 80082f8:	b140      	cbz	r0, 800830c <__sfmoreglue+0x28>
 80082fa:	2100      	movs	r1, #0
 80082fc:	e9c0 1600 	strd	r1, r6, [r0]
 8008300:	300c      	adds	r0, #12
 8008302:	60a0      	str	r0, [r4, #8]
 8008304:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008308:	f7fd f9fc 	bl	8005704 <memset>
 800830c:	4620      	mov	r0, r4
 800830e:	bd70      	pop	{r4, r5, r6, pc}

08008310 <__sfp_lock_acquire>:
 8008310:	4801      	ldr	r0, [pc, #4]	; (8008318 <__sfp_lock_acquire+0x8>)
 8008312:	f000 bc26 	b.w	8008b62 <__retarget_lock_acquire_recursive>
 8008316:	bf00      	nop
 8008318:	2001462c 	.word	0x2001462c

0800831c <__sfp_lock_release>:
 800831c:	4801      	ldr	r0, [pc, #4]	; (8008324 <__sfp_lock_release+0x8>)
 800831e:	f000 bc21 	b.w	8008b64 <__retarget_lock_release_recursive>
 8008322:	bf00      	nop
 8008324:	2001462c 	.word	0x2001462c

08008328 <__sinit_lock_acquire>:
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <__sinit_lock_acquire+0x8>)
 800832a:	f000 bc1a 	b.w	8008b62 <__retarget_lock_acquire_recursive>
 800832e:	bf00      	nop
 8008330:	2001462d 	.word	0x2001462d

08008334 <__sinit_lock_release>:
 8008334:	4801      	ldr	r0, [pc, #4]	; (800833c <__sinit_lock_release+0x8>)
 8008336:	f000 bc15 	b.w	8008b64 <__retarget_lock_release_recursive>
 800833a:	bf00      	nop
 800833c:	2001462d 	.word	0x2001462d

08008340 <__sinit>:
 8008340:	b510      	push	{r4, lr}
 8008342:	4604      	mov	r4, r0
 8008344:	f7ff fff0 	bl	8008328 <__sinit_lock_acquire>
 8008348:	69a3      	ldr	r3, [r4, #24]
 800834a:	b11b      	cbz	r3, 8008354 <__sinit+0x14>
 800834c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008350:	f7ff bff0 	b.w	8008334 <__sinit_lock_release>
 8008354:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008358:	6523      	str	r3, [r4, #80]	; 0x50
 800835a:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <__sinit+0x68>)
 800835c:	4a13      	ldr	r2, [pc, #76]	; (80083ac <__sinit+0x6c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	62a2      	str	r2, [r4, #40]	; 0x28
 8008362:	42a3      	cmp	r3, r4
 8008364:	bf04      	itt	eq
 8008366:	2301      	moveq	r3, #1
 8008368:	61a3      	streq	r3, [r4, #24]
 800836a:	4620      	mov	r0, r4
 800836c:	f000 f820 	bl	80083b0 <__sfp>
 8008370:	6060      	str	r0, [r4, #4]
 8008372:	4620      	mov	r0, r4
 8008374:	f000 f81c 	bl	80083b0 <__sfp>
 8008378:	60a0      	str	r0, [r4, #8]
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f818 	bl	80083b0 <__sfp>
 8008380:	2200      	movs	r2, #0
 8008382:	60e0      	str	r0, [r4, #12]
 8008384:	2104      	movs	r1, #4
 8008386:	6860      	ldr	r0, [r4, #4]
 8008388:	f7ff ff82 	bl	8008290 <std>
 800838c:	68a0      	ldr	r0, [r4, #8]
 800838e:	2201      	movs	r2, #1
 8008390:	2109      	movs	r1, #9
 8008392:	f7ff ff7d 	bl	8008290 <std>
 8008396:	68e0      	ldr	r0, [r4, #12]
 8008398:	2202      	movs	r2, #2
 800839a:	2112      	movs	r1, #18
 800839c:	f7ff ff78 	bl	8008290 <std>
 80083a0:	2301      	movs	r3, #1
 80083a2:	61a3      	str	r3, [r4, #24]
 80083a4:	e7d2      	b.n	800834c <__sinit+0xc>
 80083a6:	bf00      	nop
 80083a8:	0800a1dc 	.word	0x0800a1dc
 80083ac:	080082d9 	.word	0x080082d9

080083b0 <__sfp>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	4607      	mov	r7, r0
 80083b4:	f7ff ffac 	bl	8008310 <__sfp_lock_acquire>
 80083b8:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <__sfp+0x84>)
 80083ba:	681e      	ldr	r6, [r3, #0]
 80083bc:	69b3      	ldr	r3, [r6, #24]
 80083be:	b913      	cbnz	r3, 80083c6 <__sfp+0x16>
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7ff ffbd 	bl	8008340 <__sinit>
 80083c6:	3648      	adds	r6, #72	; 0x48
 80083c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	d503      	bpl.n	80083d8 <__sfp+0x28>
 80083d0:	6833      	ldr	r3, [r6, #0]
 80083d2:	b30b      	cbz	r3, 8008418 <__sfp+0x68>
 80083d4:	6836      	ldr	r6, [r6, #0]
 80083d6:	e7f7      	b.n	80083c8 <__sfp+0x18>
 80083d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083dc:	b9d5      	cbnz	r5, 8008414 <__sfp+0x64>
 80083de:	4b16      	ldr	r3, [pc, #88]	; (8008438 <__sfp+0x88>)
 80083e0:	60e3      	str	r3, [r4, #12]
 80083e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083e6:	6665      	str	r5, [r4, #100]	; 0x64
 80083e8:	f000 fbba 	bl	8008b60 <__retarget_lock_init_recursive>
 80083ec:	f7ff ff96 	bl	800831c <__sfp_lock_release>
 80083f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083f8:	6025      	str	r5, [r4, #0]
 80083fa:	61a5      	str	r5, [r4, #24]
 80083fc:	2208      	movs	r2, #8
 80083fe:	4629      	mov	r1, r5
 8008400:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008404:	f7fd f97e 	bl	8005704 <memset>
 8008408:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800840c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008410:	4620      	mov	r0, r4
 8008412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008414:	3468      	adds	r4, #104	; 0x68
 8008416:	e7d9      	b.n	80083cc <__sfp+0x1c>
 8008418:	2104      	movs	r1, #4
 800841a:	4638      	mov	r0, r7
 800841c:	f7ff ff62 	bl	80082e4 <__sfmoreglue>
 8008420:	4604      	mov	r4, r0
 8008422:	6030      	str	r0, [r6, #0]
 8008424:	2800      	cmp	r0, #0
 8008426:	d1d5      	bne.n	80083d4 <__sfp+0x24>
 8008428:	f7ff ff78 	bl	800831c <__sfp_lock_release>
 800842c:	230c      	movs	r3, #12
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	e7ee      	b.n	8008410 <__sfp+0x60>
 8008432:	bf00      	nop
 8008434:	0800a1dc 	.word	0x0800a1dc
 8008438:	ffff0001 	.word	0xffff0001

0800843c <_fwalk_reent>:
 800843c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008440:	4606      	mov	r6, r0
 8008442:	4688      	mov	r8, r1
 8008444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008448:	2700      	movs	r7, #0
 800844a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800844e:	f1b9 0901 	subs.w	r9, r9, #1
 8008452:	d505      	bpl.n	8008460 <_fwalk_reent+0x24>
 8008454:	6824      	ldr	r4, [r4, #0]
 8008456:	2c00      	cmp	r4, #0
 8008458:	d1f7      	bne.n	800844a <_fwalk_reent+0xe>
 800845a:	4638      	mov	r0, r7
 800845c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008460:	89ab      	ldrh	r3, [r5, #12]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d907      	bls.n	8008476 <_fwalk_reent+0x3a>
 8008466:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800846a:	3301      	adds	r3, #1
 800846c:	d003      	beq.n	8008476 <_fwalk_reent+0x3a>
 800846e:	4629      	mov	r1, r5
 8008470:	4630      	mov	r0, r6
 8008472:	47c0      	blx	r8
 8008474:	4307      	orrs	r7, r0
 8008476:	3568      	adds	r5, #104	; 0x68
 8008478:	e7e9      	b.n	800844e <_fwalk_reent+0x12>

0800847a <rshift>:
 800847a:	6903      	ldr	r3, [r0, #16]
 800847c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008484:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008488:	f100 0414 	add.w	r4, r0, #20
 800848c:	dd45      	ble.n	800851a <rshift+0xa0>
 800848e:	f011 011f 	ands.w	r1, r1, #31
 8008492:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008496:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800849a:	d10c      	bne.n	80084b6 <rshift+0x3c>
 800849c:	f100 0710 	add.w	r7, r0, #16
 80084a0:	4629      	mov	r1, r5
 80084a2:	42b1      	cmp	r1, r6
 80084a4:	d334      	bcc.n	8008510 <rshift+0x96>
 80084a6:	1a9b      	subs	r3, r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	1eea      	subs	r2, r5, #3
 80084ac:	4296      	cmp	r6, r2
 80084ae:	bf38      	it	cc
 80084b0:	2300      	movcc	r3, #0
 80084b2:	4423      	add	r3, r4
 80084b4:	e015      	b.n	80084e2 <rshift+0x68>
 80084b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80084ba:	f1c1 0820 	rsb	r8, r1, #32
 80084be:	40cf      	lsrs	r7, r1
 80084c0:	f105 0e04 	add.w	lr, r5, #4
 80084c4:	46a1      	mov	r9, r4
 80084c6:	4576      	cmp	r6, lr
 80084c8:	46f4      	mov	ip, lr
 80084ca:	d815      	bhi.n	80084f8 <rshift+0x7e>
 80084cc:	1a9a      	subs	r2, r3, r2
 80084ce:	0092      	lsls	r2, r2, #2
 80084d0:	3a04      	subs	r2, #4
 80084d2:	3501      	adds	r5, #1
 80084d4:	42ae      	cmp	r6, r5
 80084d6:	bf38      	it	cc
 80084d8:	2200      	movcc	r2, #0
 80084da:	18a3      	adds	r3, r4, r2
 80084dc:	50a7      	str	r7, [r4, r2]
 80084de:	b107      	cbz	r7, 80084e2 <rshift+0x68>
 80084e0:	3304      	adds	r3, #4
 80084e2:	1b1a      	subs	r2, r3, r4
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084ea:	bf08      	it	eq
 80084ec:	2300      	moveq	r3, #0
 80084ee:	6102      	str	r2, [r0, #16]
 80084f0:	bf08      	it	eq
 80084f2:	6143      	streq	r3, [r0, #20]
 80084f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084f8:	f8dc c000 	ldr.w	ip, [ip]
 80084fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8008500:	ea4c 0707 	orr.w	r7, ip, r7
 8008504:	f849 7b04 	str.w	r7, [r9], #4
 8008508:	f85e 7b04 	ldr.w	r7, [lr], #4
 800850c:	40cf      	lsrs	r7, r1
 800850e:	e7da      	b.n	80084c6 <rshift+0x4c>
 8008510:	f851 cb04 	ldr.w	ip, [r1], #4
 8008514:	f847 cf04 	str.w	ip, [r7, #4]!
 8008518:	e7c3      	b.n	80084a2 <rshift+0x28>
 800851a:	4623      	mov	r3, r4
 800851c:	e7e1      	b.n	80084e2 <rshift+0x68>

0800851e <__hexdig_fun>:
 800851e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008522:	2b09      	cmp	r3, #9
 8008524:	d802      	bhi.n	800852c <__hexdig_fun+0xe>
 8008526:	3820      	subs	r0, #32
 8008528:	b2c0      	uxtb	r0, r0
 800852a:	4770      	bx	lr
 800852c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008530:	2b05      	cmp	r3, #5
 8008532:	d801      	bhi.n	8008538 <__hexdig_fun+0x1a>
 8008534:	3847      	subs	r0, #71	; 0x47
 8008536:	e7f7      	b.n	8008528 <__hexdig_fun+0xa>
 8008538:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800853c:	2b05      	cmp	r3, #5
 800853e:	d801      	bhi.n	8008544 <__hexdig_fun+0x26>
 8008540:	3827      	subs	r0, #39	; 0x27
 8008542:	e7f1      	b.n	8008528 <__hexdig_fun+0xa>
 8008544:	2000      	movs	r0, #0
 8008546:	4770      	bx	lr

08008548 <__gethex>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	ed2d 8b02 	vpush	{d8}
 8008550:	b089      	sub	sp, #36	; 0x24
 8008552:	ee08 0a10 	vmov	s16, r0
 8008556:	9304      	str	r3, [sp, #16]
 8008558:	4bb4      	ldr	r3, [pc, #720]	; (800882c <__gethex+0x2e4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	4618      	mov	r0, r3
 8008560:	468b      	mov	fp, r1
 8008562:	4690      	mov	r8, r2
 8008564:	f7f7 fe86 	bl	8000274 <strlen>
 8008568:	9b01      	ldr	r3, [sp, #4]
 800856a:	f8db 2000 	ldr.w	r2, [fp]
 800856e:	4403      	add	r3, r0
 8008570:	4682      	mov	sl, r0
 8008572:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008576:	9305      	str	r3, [sp, #20]
 8008578:	1c93      	adds	r3, r2, #2
 800857a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800857e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008582:	32fe      	adds	r2, #254	; 0xfe
 8008584:	18d1      	adds	r1, r2, r3
 8008586:	461f      	mov	r7, r3
 8008588:	f813 0b01 	ldrb.w	r0, [r3], #1
 800858c:	9100      	str	r1, [sp, #0]
 800858e:	2830      	cmp	r0, #48	; 0x30
 8008590:	d0f8      	beq.n	8008584 <__gethex+0x3c>
 8008592:	f7ff ffc4 	bl	800851e <__hexdig_fun>
 8008596:	4604      	mov	r4, r0
 8008598:	2800      	cmp	r0, #0
 800859a:	d13a      	bne.n	8008612 <__gethex+0xca>
 800859c:	9901      	ldr	r1, [sp, #4]
 800859e:	4652      	mov	r2, sl
 80085a0:	4638      	mov	r0, r7
 80085a2:	f001 fad0 	bl	8009b46 <strncmp>
 80085a6:	4605      	mov	r5, r0
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d168      	bne.n	800867e <__gethex+0x136>
 80085ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 80085b0:	eb07 060a 	add.w	r6, r7, sl
 80085b4:	f7ff ffb3 	bl	800851e <__hexdig_fun>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d062      	beq.n	8008682 <__gethex+0x13a>
 80085bc:	4633      	mov	r3, r6
 80085be:	7818      	ldrb	r0, [r3, #0]
 80085c0:	2830      	cmp	r0, #48	; 0x30
 80085c2:	461f      	mov	r7, r3
 80085c4:	f103 0301 	add.w	r3, r3, #1
 80085c8:	d0f9      	beq.n	80085be <__gethex+0x76>
 80085ca:	f7ff ffa8 	bl	800851e <__hexdig_fun>
 80085ce:	2301      	movs	r3, #1
 80085d0:	fab0 f480 	clz	r4, r0
 80085d4:	0964      	lsrs	r4, r4, #5
 80085d6:	4635      	mov	r5, r6
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	463a      	mov	r2, r7
 80085dc:	4616      	mov	r6, r2
 80085de:	3201      	adds	r2, #1
 80085e0:	7830      	ldrb	r0, [r6, #0]
 80085e2:	f7ff ff9c 	bl	800851e <__hexdig_fun>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d1f8      	bne.n	80085dc <__gethex+0x94>
 80085ea:	9901      	ldr	r1, [sp, #4]
 80085ec:	4652      	mov	r2, sl
 80085ee:	4630      	mov	r0, r6
 80085f0:	f001 faa9 	bl	8009b46 <strncmp>
 80085f4:	b980      	cbnz	r0, 8008618 <__gethex+0xd0>
 80085f6:	b94d      	cbnz	r5, 800860c <__gethex+0xc4>
 80085f8:	eb06 050a 	add.w	r5, r6, sl
 80085fc:	462a      	mov	r2, r5
 80085fe:	4616      	mov	r6, r2
 8008600:	3201      	adds	r2, #1
 8008602:	7830      	ldrb	r0, [r6, #0]
 8008604:	f7ff ff8b 	bl	800851e <__hexdig_fun>
 8008608:	2800      	cmp	r0, #0
 800860a:	d1f8      	bne.n	80085fe <__gethex+0xb6>
 800860c:	1bad      	subs	r5, r5, r6
 800860e:	00ad      	lsls	r5, r5, #2
 8008610:	e004      	b.n	800861c <__gethex+0xd4>
 8008612:	2400      	movs	r4, #0
 8008614:	4625      	mov	r5, r4
 8008616:	e7e0      	b.n	80085da <__gethex+0x92>
 8008618:	2d00      	cmp	r5, #0
 800861a:	d1f7      	bne.n	800860c <__gethex+0xc4>
 800861c:	7833      	ldrb	r3, [r6, #0]
 800861e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008622:	2b50      	cmp	r3, #80	; 0x50
 8008624:	d13b      	bne.n	800869e <__gethex+0x156>
 8008626:	7873      	ldrb	r3, [r6, #1]
 8008628:	2b2b      	cmp	r3, #43	; 0x2b
 800862a:	d02c      	beq.n	8008686 <__gethex+0x13e>
 800862c:	2b2d      	cmp	r3, #45	; 0x2d
 800862e:	d02e      	beq.n	800868e <__gethex+0x146>
 8008630:	1c71      	adds	r1, r6, #1
 8008632:	f04f 0900 	mov.w	r9, #0
 8008636:	7808      	ldrb	r0, [r1, #0]
 8008638:	f7ff ff71 	bl	800851e <__hexdig_fun>
 800863c:	1e43      	subs	r3, r0, #1
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b18      	cmp	r3, #24
 8008642:	d82c      	bhi.n	800869e <__gethex+0x156>
 8008644:	f1a0 0210 	sub.w	r2, r0, #16
 8008648:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800864c:	f7ff ff67 	bl	800851e <__hexdig_fun>
 8008650:	1e43      	subs	r3, r0, #1
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b18      	cmp	r3, #24
 8008656:	d91d      	bls.n	8008694 <__gethex+0x14c>
 8008658:	f1b9 0f00 	cmp.w	r9, #0
 800865c:	d000      	beq.n	8008660 <__gethex+0x118>
 800865e:	4252      	negs	r2, r2
 8008660:	4415      	add	r5, r2
 8008662:	f8cb 1000 	str.w	r1, [fp]
 8008666:	b1e4      	cbz	r4, 80086a2 <__gethex+0x15a>
 8008668:	9b00      	ldr	r3, [sp, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	bf14      	ite	ne
 800866e:	2700      	movne	r7, #0
 8008670:	2706      	moveq	r7, #6
 8008672:	4638      	mov	r0, r7
 8008674:	b009      	add	sp, #36	; 0x24
 8008676:	ecbd 8b02 	vpop	{d8}
 800867a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867e:	463e      	mov	r6, r7
 8008680:	4625      	mov	r5, r4
 8008682:	2401      	movs	r4, #1
 8008684:	e7ca      	b.n	800861c <__gethex+0xd4>
 8008686:	f04f 0900 	mov.w	r9, #0
 800868a:	1cb1      	adds	r1, r6, #2
 800868c:	e7d3      	b.n	8008636 <__gethex+0xee>
 800868e:	f04f 0901 	mov.w	r9, #1
 8008692:	e7fa      	b.n	800868a <__gethex+0x142>
 8008694:	230a      	movs	r3, #10
 8008696:	fb03 0202 	mla	r2, r3, r2, r0
 800869a:	3a10      	subs	r2, #16
 800869c:	e7d4      	b.n	8008648 <__gethex+0x100>
 800869e:	4631      	mov	r1, r6
 80086a0:	e7df      	b.n	8008662 <__gethex+0x11a>
 80086a2:	1bf3      	subs	r3, r6, r7
 80086a4:	3b01      	subs	r3, #1
 80086a6:	4621      	mov	r1, r4
 80086a8:	2b07      	cmp	r3, #7
 80086aa:	dc0b      	bgt.n	80086c4 <__gethex+0x17c>
 80086ac:	ee18 0a10 	vmov	r0, s16
 80086b0:	f000 fad8 	bl	8008c64 <_Balloc>
 80086b4:	4604      	mov	r4, r0
 80086b6:	b940      	cbnz	r0, 80086ca <__gethex+0x182>
 80086b8:	4b5d      	ldr	r3, [pc, #372]	; (8008830 <__gethex+0x2e8>)
 80086ba:	4602      	mov	r2, r0
 80086bc:	21de      	movs	r1, #222	; 0xde
 80086be:	485d      	ldr	r0, [pc, #372]	; (8008834 <__gethex+0x2ec>)
 80086c0:	f001 fa62 	bl	8009b88 <__assert_func>
 80086c4:	3101      	adds	r1, #1
 80086c6:	105b      	asrs	r3, r3, #1
 80086c8:	e7ee      	b.n	80086a8 <__gethex+0x160>
 80086ca:	f100 0914 	add.w	r9, r0, #20
 80086ce:	f04f 0b00 	mov.w	fp, #0
 80086d2:	f1ca 0301 	rsb	r3, sl, #1
 80086d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80086da:	f8cd b000 	str.w	fp, [sp]
 80086de:	9306      	str	r3, [sp, #24]
 80086e0:	42b7      	cmp	r7, r6
 80086e2:	d340      	bcc.n	8008766 <__gethex+0x21e>
 80086e4:	9802      	ldr	r0, [sp, #8]
 80086e6:	9b00      	ldr	r3, [sp, #0]
 80086e8:	f840 3b04 	str.w	r3, [r0], #4
 80086ec:	eba0 0009 	sub.w	r0, r0, r9
 80086f0:	1080      	asrs	r0, r0, #2
 80086f2:	0146      	lsls	r6, r0, #5
 80086f4:	6120      	str	r0, [r4, #16]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 fba6 	bl	8008e48 <__hi0bits>
 80086fc:	1a30      	subs	r0, r6, r0
 80086fe:	f8d8 6000 	ldr.w	r6, [r8]
 8008702:	42b0      	cmp	r0, r6
 8008704:	dd63      	ble.n	80087ce <__gethex+0x286>
 8008706:	1b87      	subs	r7, r0, r6
 8008708:	4639      	mov	r1, r7
 800870a:	4620      	mov	r0, r4
 800870c:	f000 ff4a 	bl	80095a4 <__any_on>
 8008710:	4682      	mov	sl, r0
 8008712:	b1a8      	cbz	r0, 8008740 <__gethex+0x1f8>
 8008714:	1e7b      	subs	r3, r7, #1
 8008716:	1159      	asrs	r1, r3, #5
 8008718:	f003 021f 	and.w	r2, r3, #31
 800871c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008720:	f04f 0a01 	mov.w	sl, #1
 8008724:	fa0a f202 	lsl.w	r2, sl, r2
 8008728:	420a      	tst	r2, r1
 800872a:	d009      	beq.n	8008740 <__gethex+0x1f8>
 800872c:	4553      	cmp	r3, sl
 800872e:	dd05      	ble.n	800873c <__gethex+0x1f4>
 8008730:	1eb9      	subs	r1, r7, #2
 8008732:	4620      	mov	r0, r4
 8008734:	f000 ff36 	bl	80095a4 <__any_on>
 8008738:	2800      	cmp	r0, #0
 800873a:	d145      	bne.n	80087c8 <__gethex+0x280>
 800873c:	f04f 0a02 	mov.w	sl, #2
 8008740:	4639      	mov	r1, r7
 8008742:	4620      	mov	r0, r4
 8008744:	f7ff fe99 	bl	800847a <rshift>
 8008748:	443d      	add	r5, r7
 800874a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800874e:	42ab      	cmp	r3, r5
 8008750:	da4c      	bge.n	80087ec <__gethex+0x2a4>
 8008752:	ee18 0a10 	vmov	r0, s16
 8008756:	4621      	mov	r1, r4
 8008758:	f000 fac4 	bl	8008ce4 <_Bfree>
 800875c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800875e:	2300      	movs	r3, #0
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	27a3      	movs	r7, #163	; 0xa3
 8008764:	e785      	b.n	8008672 <__gethex+0x12a>
 8008766:	1e73      	subs	r3, r6, #1
 8008768:	9a05      	ldr	r2, [sp, #20]
 800876a:	9303      	str	r3, [sp, #12]
 800876c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008770:	4293      	cmp	r3, r2
 8008772:	d019      	beq.n	80087a8 <__gethex+0x260>
 8008774:	f1bb 0f20 	cmp.w	fp, #32
 8008778:	d107      	bne.n	800878a <__gethex+0x242>
 800877a:	9b02      	ldr	r3, [sp, #8]
 800877c:	9a00      	ldr	r2, [sp, #0]
 800877e:	f843 2b04 	str.w	r2, [r3], #4
 8008782:	9302      	str	r3, [sp, #8]
 8008784:	2300      	movs	r3, #0
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	469b      	mov	fp, r3
 800878a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800878e:	f7ff fec6 	bl	800851e <__hexdig_fun>
 8008792:	9b00      	ldr	r3, [sp, #0]
 8008794:	f000 000f 	and.w	r0, r0, #15
 8008798:	fa00 f00b 	lsl.w	r0, r0, fp
 800879c:	4303      	orrs	r3, r0
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	f10b 0b04 	add.w	fp, fp, #4
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	e00d      	b.n	80087c4 <__gethex+0x27c>
 80087a8:	9b03      	ldr	r3, [sp, #12]
 80087aa:	9a06      	ldr	r2, [sp, #24]
 80087ac:	4413      	add	r3, r2
 80087ae:	42bb      	cmp	r3, r7
 80087b0:	d3e0      	bcc.n	8008774 <__gethex+0x22c>
 80087b2:	4618      	mov	r0, r3
 80087b4:	9901      	ldr	r1, [sp, #4]
 80087b6:	9307      	str	r3, [sp, #28]
 80087b8:	4652      	mov	r2, sl
 80087ba:	f001 f9c4 	bl	8009b46 <strncmp>
 80087be:	9b07      	ldr	r3, [sp, #28]
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d1d7      	bne.n	8008774 <__gethex+0x22c>
 80087c4:	461e      	mov	r6, r3
 80087c6:	e78b      	b.n	80086e0 <__gethex+0x198>
 80087c8:	f04f 0a03 	mov.w	sl, #3
 80087cc:	e7b8      	b.n	8008740 <__gethex+0x1f8>
 80087ce:	da0a      	bge.n	80087e6 <__gethex+0x29e>
 80087d0:	1a37      	subs	r7, r6, r0
 80087d2:	4621      	mov	r1, r4
 80087d4:	ee18 0a10 	vmov	r0, s16
 80087d8:	463a      	mov	r2, r7
 80087da:	f000 fc9f 	bl	800911c <__lshift>
 80087de:	1bed      	subs	r5, r5, r7
 80087e0:	4604      	mov	r4, r0
 80087e2:	f100 0914 	add.w	r9, r0, #20
 80087e6:	f04f 0a00 	mov.w	sl, #0
 80087ea:	e7ae      	b.n	800874a <__gethex+0x202>
 80087ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80087f0:	42a8      	cmp	r0, r5
 80087f2:	dd72      	ble.n	80088da <__gethex+0x392>
 80087f4:	1b45      	subs	r5, r0, r5
 80087f6:	42ae      	cmp	r6, r5
 80087f8:	dc36      	bgt.n	8008868 <__gethex+0x320>
 80087fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d02a      	beq.n	8008858 <__gethex+0x310>
 8008802:	2b03      	cmp	r3, #3
 8008804:	d02c      	beq.n	8008860 <__gethex+0x318>
 8008806:	2b01      	cmp	r3, #1
 8008808:	d11c      	bne.n	8008844 <__gethex+0x2fc>
 800880a:	42ae      	cmp	r6, r5
 800880c:	d11a      	bne.n	8008844 <__gethex+0x2fc>
 800880e:	2e01      	cmp	r6, #1
 8008810:	d112      	bne.n	8008838 <__gethex+0x2f0>
 8008812:	9a04      	ldr	r2, [sp, #16]
 8008814:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	2301      	movs	r3, #1
 800881c:	6123      	str	r3, [r4, #16]
 800881e:	f8c9 3000 	str.w	r3, [r9]
 8008822:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008824:	2762      	movs	r7, #98	; 0x62
 8008826:	601c      	str	r4, [r3, #0]
 8008828:	e723      	b.n	8008672 <__gethex+0x12a>
 800882a:	bf00      	nop
 800882c:	0800a4cc 	.word	0x0800a4cc
 8008830:	0800a3f0 	.word	0x0800a3f0
 8008834:	0800a464 	.word	0x0800a464
 8008838:	1e71      	subs	r1, r6, #1
 800883a:	4620      	mov	r0, r4
 800883c:	f000 feb2 	bl	80095a4 <__any_on>
 8008840:	2800      	cmp	r0, #0
 8008842:	d1e6      	bne.n	8008812 <__gethex+0x2ca>
 8008844:	ee18 0a10 	vmov	r0, s16
 8008848:	4621      	mov	r1, r4
 800884a:	f000 fa4b 	bl	8008ce4 <_Bfree>
 800884e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008850:	2300      	movs	r3, #0
 8008852:	6013      	str	r3, [r2, #0]
 8008854:	2750      	movs	r7, #80	; 0x50
 8008856:	e70c      	b.n	8008672 <__gethex+0x12a>
 8008858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1f2      	bne.n	8008844 <__gethex+0x2fc>
 800885e:	e7d8      	b.n	8008812 <__gethex+0x2ca>
 8008860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1d5      	bne.n	8008812 <__gethex+0x2ca>
 8008866:	e7ed      	b.n	8008844 <__gethex+0x2fc>
 8008868:	1e6f      	subs	r7, r5, #1
 800886a:	f1ba 0f00 	cmp.w	sl, #0
 800886e:	d131      	bne.n	80088d4 <__gethex+0x38c>
 8008870:	b127      	cbz	r7, 800887c <__gethex+0x334>
 8008872:	4639      	mov	r1, r7
 8008874:	4620      	mov	r0, r4
 8008876:	f000 fe95 	bl	80095a4 <__any_on>
 800887a:	4682      	mov	sl, r0
 800887c:	117b      	asrs	r3, r7, #5
 800887e:	2101      	movs	r1, #1
 8008880:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008884:	f007 071f 	and.w	r7, r7, #31
 8008888:	fa01 f707 	lsl.w	r7, r1, r7
 800888c:	421f      	tst	r7, r3
 800888e:	4629      	mov	r1, r5
 8008890:	4620      	mov	r0, r4
 8008892:	bf18      	it	ne
 8008894:	f04a 0a02 	orrne.w	sl, sl, #2
 8008898:	1b76      	subs	r6, r6, r5
 800889a:	f7ff fdee 	bl	800847a <rshift>
 800889e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80088a2:	2702      	movs	r7, #2
 80088a4:	f1ba 0f00 	cmp.w	sl, #0
 80088a8:	d048      	beq.n	800893c <__gethex+0x3f4>
 80088aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d015      	beq.n	80088de <__gethex+0x396>
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d017      	beq.n	80088e6 <__gethex+0x39e>
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d109      	bne.n	80088ce <__gethex+0x386>
 80088ba:	f01a 0f02 	tst.w	sl, #2
 80088be:	d006      	beq.n	80088ce <__gethex+0x386>
 80088c0:	f8d9 0000 	ldr.w	r0, [r9]
 80088c4:	ea4a 0a00 	orr.w	sl, sl, r0
 80088c8:	f01a 0f01 	tst.w	sl, #1
 80088cc:	d10e      	bne.n	80088ec <__gethex+0x3a4>
 80088ce:	f047 0710 	orr.w	r7, r7, #16
 80088d2:	e033      	b.n	800893c <__gethex+0x3f4>
 80088d4:	f04f 0a01 	mov.w	sl, #1
 80088d8:	e7d0      	b.n	800887c <__gethex+0x334>
 80088da:	2701      	movs	r7, #1
 80088dc:	e7e2      	b.n	80088a4 <__gethex+0x35c>
 80088de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088e0:	f1c3 0301 	rsb	r3, r3, #1
 80088e4:	9315      	str	r3, [sp, #84]	; 0x54
 80088e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d0f0      	beq.n	80088ce <__gethex+0x386>
 80088ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088f0:	f104 0314 	add.w	r3, r4, #20
 80088f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088fc:	f04f 0c00 	mov.w	ip, #0
 8008900:	4618      	mov	r0, r3
 8008902:	f853 2b04 	ldr.w	r2, [r3], #4
 8008906:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800890a:	d01c      	beq.n	8008946 <__gethex+0x3fe>
 800890c:	3201      	adds	r2, #1
 800890e:	6002      	str	r2, [r0, #0]
 8008910:	2f02      	cmp	r7, #2
 8008912:	f104 0314 	add.w	r3, r4, #20
 8008916:	d13f      	bne.n	8008998 <__gethex+0x450>
 8008918:	f8d8 2000 	ldr.w	r2, [r8]
 800891c:	3a01      	subs	r2, #1
 800891e:	42b2      	cmp	r2, r6
 8008920:	d10a      	bne.n	8008938 <__gethex+0x3f0>
 8008922:	1171      	asrs	r1, r6, #5
 8008924:	2201      	movs	r2, #1
 8008926:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800892a:	f006 061f 	and.w	r6, r6, #31
 800892e:	fa02 f606 	lsl.w	r6, r2, r6
 8008932:	421e      	tst	r6, r3
 8008934:	bf18      	it	ne
 8008936:	4617      	movne	r7, r2
 8008938:	f047 0720 	orr.w	r7, r7, #32
 800893c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800893e:	601c      	str	r4, [r3, #0]
 8008940:	9b04      	ldr	r3, [sp, #16]
 8008942:	601d      	str	r5, [r3, #0]
 8008944:	e695      	b.n	8008672 <__gethex+0x12a>
 8008946:	4299      	cmp	r1, r3
 8008948:	f843 cc04 	str.w	ip, [r3, #-4]
 800894c:	d8d8      	bhi.n	8008900 <__gethex+0x3b8>
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	459b      	cmp	fp, r3
 8008952:	db19      	blt.n	8008988 <__gethex+0x440>
 8008954:	6861      	ldr	r1, [r4, #4]
 8008956:	ee18 0a10 	vmov	r0, s16
 800895a:	3101      	adds	r1, #1
 800895c:	f000 f982 	bl	8008c64 <_Balloc>
 8008960:	4681      	mov	r9, r0
 8008962:	b918      	cbnz	r0, 800896c <__gethex+0x424>
 8008964:	4b1a      	ldr	r3, [pc, #104]	; (80089d0 <__gethex+0x488>)
 8008966:	4602      	mov	r2, r0
 8008968:	2184      	movs	r1, #132	; 0x84
 800896a:	e6a8      	b.n	80086be <__gethex+0x176>
 800896c:	6922      	ldr	r2, [r4, #16]
 800896e:	3202      	adds	r2, #2
 8008970:	f104 010c 	add.w	r1, r4, #12
 8008974:	0092      	lsls	r2, r2, #2
 8008976:	300c      	adds	r0, #12
 8008978:	f7fc feb6 	bl	80056e8 <memcpy>
 800897c:	4621      	mov	r1, r4
 800897e:	ee18 0a10 	vmov	r0, s16
 8008982:	f000 f9af 	bl	8008ce4 <_Bfree>
 8008986:	464c      	mov	r4, r9
 8008988:	6923      	ldr	r3, [r4, #16]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008990:	6122      	str	r2, [r4, #16]
 8008992:	2201      	movs	r2, #1
 8008994:	615a      	str	r2, [r3, #20]
 8008996:	e7bb      	b.n	8008910 <__gethex+0x3c8>
 8008998:	6922      	ldr	r2, [r4, #16]
 800899a:	455a      	cmp	r2, fp
 800899c:	dd0b      	ble.n	80089b6 <__gethex+0x46e>
 800899e:	2101      	movs	r1, #1
 80089a0:	4620      	mov	r0, r4
 80089a2:	f7ff fd6a 	bl	800847a <rshift>
 80089a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089aa:	3501      	adds	r5, #1
 80089ac:	42ab      	cmp	r3, r5
 80089ae:	f6ff aed0 	blt.w	8008752 <__gethex+0x20a>
 80089b2:	2701      	movs	r7, #1
 80089b4:	e7c0      	b.n	8008938 <__gethex+0x3f0>
 80089b6:	f016 061f 	ands.w	r6, r6, #31
 80089ba:	d0fa      	beq.n	80089b2 <__gethex+0x46a>
 80089bc:	4453      	add	r3, sl
 80089be:	f1c6 0620 	rsb	r6, r6, #32
 80089c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80089c6:	f000 fa3f 	bl	8008e48 <__hi0bits>
 80089ca:	42b0      	cmp	r0, r6
 80089cc:	dbe7      	blt.n	800899e <__gethex+0x456>
 80089ce:	e7f0      	b.n	80089b2 <__gethex+0x46a>
 80089d0:	0800a3f0 	.word	0x0800a3f0

080089d4 <L_shift>:
 80089d4:	f1c2 0208 	rsb	r2, r2, #8
 80089d8:	0092      	lsls	r2, r2, #2
 80089da:	b570      	push	{r4, r5, r6, lr}
 80089dc:	f1c2 0620 	rsb	r6, r2, #32
 80089e0:	6843      	ldr	r3, [r0, #4]
 80089e2:	6804      	ldr	r4, [r0, #0]
 80089e4:	fa03 f506 	lsl.w	r5, r3, r6
 80089e8:	432c      	orrs	r4, r5
 80089ea:	40d3      	lsrs	r3, r2
 80089ec:	6004      	str	r4, [r0, #0]
 80089ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80089f2:	4288      	cmp	r0, r1
 80089f4:	d3f4      	bcc.n	80089e0 <L_shift+0xc>
 80089f6:	bd70      	pop	{r4, r5, r6, pc}

080089f8 <__match>:
 80089f8:	b530      	push	{r4, r5, lr}
 80089fa:	6803      	ldr	r3, [r0, #0]
 80089fc:	3301      	adds	r3, #1
 80089fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a02:	b914      	cbnz	r4, 8008a0a <__match+0x12>
 8008a04:	6003      	str	r3, [r0, #0]
 8008a06:	2001      	movs	r0, #1
 8008a08:	bd30      	pop	{r4, r5, pc}
 8008a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008a12:	2d19      	cmp	r5, #25
 8008a14:	bf98      	it	ls
 8008a16:	3220      	addls	r2, #32
 8008a18:	42a2      	cmp	r2, r4
 8008a1a:	d0f0      	beq.n	80089fe <__match+0x6>
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	e7f3      	b.n	8008a08 <__match+0x10>

08008a20 <__hexnan>:
 8008a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	680b      	ldr	r3, [r1, #0]
 8008a26:	115e      	asrs	r6, r3, #5
 8008a28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a2c:	f013 031f 	ands.w	r3, r3, #31
 8008a30:	b087      	sub	sp, #28
 8008a32:	bf18      	it	ne
 8008a34:	3604      	addne	r6, #4
 8008a36:	2500      	movs	r5, #0
 8008a38:	1f37      	subs	r7, r6, #4
 8008a3a:	4690      	mov	r8, r2
 8008a3c:	6802      	ldr	r2, [r0, #0]
 8008a3e:	9301      	str	r3, [sp, #4]
 8008a40:	4682      	mov	sl, r0
 8008a42:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a46:	46b9      	mov	r9, r7
 8008a48:	463c      	mov	r4, r7
 8008a4a:	9502      	str	r5, [sp, #8]
 8008a4c:	46ab      	mov	fp, r5
 8008a4e:	7851      	ldrb	r1, [r2, #1]
 8008a50:	1c53      	adds	r3, r2, #1
 8008a52:	9303      	str	r3, [sp, #12]
 8008a54:	b341      	cbz	r1, 8008aa8 <__hexnan+0x88>
 8008a56:	4608      	mov	r0, r1
 8008a58:	9205      	str	r2, [sp, #20]
 8008a5a:	9104      	str	r1, [sp, #16]
 8008a5c:	f7ff fd5f 	bl	800851e <__hexdig_fun>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d14f      	bne.n	8008b04 <__hexnan+0xe4>
 8008a64:	9904      	ldr	r1, [sp, #16]
 8008a66:	9a05      	ldr	r2, [sp, #20]
 8008a68:	2920      	cmp	r1, #32
 8008a6a:	d818      	bhi.n	8008a9e <__hexnan+0x7e>
 8008a6c:	9b02      	ldr	r3, [sp, #8]
 8008a6e:	459b      	cmp	fp, r3
 8008a70:	dd13      	ble.n	8008a9a <__hexnan+0x7a>
 8008a72:	454c      	cmp	r4, r9
 8008a74:	d206      	bcs.n	8008a84 <__hexnan+0x64>
 8008a76:	2d07      	cmp	r5, #7
 8008a78:	dc04      	bgt.n	8008a84 <__hexnan+0x64>
 8008a7a:	462a      	mov	r2, r5
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f7ff ffa8 	bl	80089d4 <L_shift>
 8008a84:	4544      	cmp	r4, r8
 8008a86:	d950      	bls.n	8008b2a <__hexnan+0x10a>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f1a4 0904 	sub.w	r9, r4, #4
 8008a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a92:	f8cd b008 	str.w	fp, [sp, #8]
 8008a96:	464c      	mov	r4, r9
 8008a98:	461d      	mov	r5, r3
 8008a9a:	9a03      	ldr	r2, [sp, #12]
 8008a9c:	e7d7      	b.n	8008a4e <__hexnan+0x2e>
 8008a9e:	2929      	cmp	r1, #41	; 0x29
 8008aa0:	d156      	bne.n	8008b50 <__hexnan+0x130>
 8008aa2:	3202      	adds	r2, #2
 8008aa4:	f8ca 2000 	str.w	r2, [sl]
 8008aa8:	f1bb 0f00 	cmp.w	fp, #0
 8008aac:	d050      	beq.n	8008b50 <__hexnan+0x130>
 8008aae:	454c      	cmp	r4, r9
 8008ab0:	d206      	bcs.n	8008ac0 <__hexnan+0xa0>
 8008ab2:	2d07      	cmp	r5, #7
 8008ab4:	dc04      	bgt.n	8008ac0 <__hexnan+0xa0>
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4649      	mov	r1, r9
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7ff ff8a 	bl	80089d4 <L_shift>
 8008ac0:	4544      	cmp	r4, r8
 8008ac2:	d934      	bls.n	8008b2e <__hexnan+0x10e>
 8008ac4:	f1a8 0204 	sub.w	r2, r8, #4
 8008ac8:	4623      	mov	r3, r4
 8008aca:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ace:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ad2:	429f      	cmp	r7, r3
 8008ad4:	d2f9      	bcs.n	8008aca <__hexnan+0xaa>
 8008ad6:	1b3b      	subs	r3, r7, r4
 8008ad8:	f023 0303 	bic.w	r3, r3, #3
 8008adc:	3304      	adds	r3, #4
 8008ade:	3401      	adds	r4, #1
 8008ae0:	3e03      	subs	r6, #3
 8008ae2:	42b4      	cmp	r4, r6
 8008ae4:	bf88      	it	hi
 8008ae6:	2304      	movhi	r3, #4
 8008ae8:	4443      	add	r3, r8
 8008aea:	2200      	movs	r2, #0
 8008aec:	f843 2b04 	str.w	r2, [r3], #4
 8008af0:	429f      	cmp	r7, r3
 8008af2:	d2fb      	bcs.n	8008aec <__hexnan+0xcc>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	b91b      	cbnz	r3, 8008b00 <__hexnan+0xe0>
 8008af8:	4547      	cmp	r7, r8
 8008afa:	d127      	bne.n	8008b4c <__hexnan+0x12c>
 8008afc:	2301      	movs	r3, #1
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	2005      	movs	r0, #5
 8008b02:	e026      	b.n	8008b52 <__hexnan+0x132>
 8008b04:	3501      	adds	r5, #1
 8008b06:	2d08      	cmp	r5, #8
 8008b08:	f10b 0b01 	add.w	fp, fp, #1
 8008b0c:	dd06      	ble.n	8008b1c <__hexnan+0xfc>
 8008b0e:	4544      	cmp	r4, r8
 8008b10:	d9c3      	bls.n	8008a9a <__hexnan+0x7a>
 8008b12:	2300      	movs	r3, #0
 8008b14:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b18:	2501      	movs	r5, #1
 8008b1a:	3c04      	subs	r4, #4
 8008b1c:	6822      	ldr	r2, [r4, #0]
 8008b1e:	f000 000f 	and.w	r0, r0, #15
 8008b22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008b26:	6022      	str	r2, [r4, #0]
 8008b28:	e7b7      	b.n	8008a9a <__hexnan+0x7a>
 8008b2a:	2508      	movs	r5, #8
 8008b2c:	e7b5      	b.n	8008a9a <__hexnan+0x7a>
 8008b2e:	9b01      	ldr	r3, [sp, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d0df      	beq.n	8008af4 <__hexnan+0xd4>
 8008b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b38:	f1c3 0320 	rsb	r3, r3, #32
 8008b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b44:	401a      	ands	r2, r3
 8008b46:	f846 2c04 	str.w	r2, [r6, #-4]
 8008b4a:	e7d3      	b.n	8008af4 <__hexnan+0xd4>
 8008b4c:	3f04      	subs	r7, #4
 8008b4e:	e7d1      	b.n	8008af4 <__hexnan+0xd4>
 8008b50:	2004      	movs	r0, #4
 8008b52:	b007      	add	sp, #28
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b58 <_localeconv_r>:
 8008b58:	4800      	ldr	r0, [pc, #0]	; (8008b5c <_localeconv_r+0x4>)
 8008b5a:	4770      	bx	lr
 8008b5c:	2000016c 	.word	0x2000016c

08008b60 <__retarget_lock_init_recursive>:
 8008b60:	4770      	bx	lr

08008b62 <__retarget_lock_acquire_recursive>:
 8008b62:	4770      	bx	lr

08008b64 <__retarget_lock_release_recursive>:
 8008b64:	4770      	bx	lr

08008b66 <__swhatbuf_r>:
 8008b66:	b570      	push	{r4, r5, r6, lr}
 8008b68:	460e      	mov	r6, r1
 8008b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b6e:	2900      	cmp	r1, #0
 8008b70:	b096      	sub	sp, #88	; 0x58
 8008b72:	4614      	mov	r4, r2
 8008b74:	461d      	mov	r5, r3
 8008b76:	da08      	bge.n	8008b8a <__swhatbuf_r+0x24>
 8008b78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	602a      	str	r2, [r5, #0]
 8008b80:	061a      	lsls	r2, r3, #24
 8008b82:	d410      	bmi.n	8008ba6 <__swhatbuf_r+0x40>
 8008b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b88:	e00e      	b.n	8008ba8 <__swhatbuf_r+0x42>
 8008b8a:	466a      	mov	r2, sp
 8008b8c:	f001 f83c 	bl	8009c08 <_fstat_r>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	dbf1      	blt.n	8008b78 <__swhatbuf_r+0x12>
 8008b94:	9a01      	ldr	r2, [sp, #4]
 8008b96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b9e:	425a      	negs	r2, r3
 8008ba0:	415a      	adcs	r2, r3
 8008ba2:	602a      	str	r2, [r5, #0]
 8008ba4:	e7ee      	b.n	8008b84 <__swhatbuf_r+0x1e>
 8008ba6:	2340      	movs	r3, #64	; 0x40
 8008ba8:	2000      	movs	r0, #0
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	b016      	add	sp, #88	; 0x58
 8008bae:	bd70      	pop	{r4, r5, r6, pc}

08008bb0 <__smakebuf_r>:
 8008bb0:	898b      	ldrh	r3, [r1, #12]
 8008bb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bb4:	079d      	lsls	r5, r3, #30
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	460c      	mov	r4, r1
 8008bba:	d507      	bpl.n	8008bcc <__smakebuf_r+0x1c>
 8008bbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	6163      	str	r3, [r4, #20]
 8008bc8:	b002      	add	sp, #8
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
 8008bcc:	ab01      	add	r3, sp, #4
 8008bce:	466a      	mov	r2, sp
 8008bd0:	f7ff ffc9 	bl	8008b66 <__swhatbuf_r>
 8008bd4:	9900      	ldr	r1, [sp, #0]
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f000 fd87 	bl	80096ec <_malloc_r>
 8008bde:	b948      	cbnz	r0, 8008bf4 <__smakebuf_r+0x44>
 8008be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be4:	059a      	lsls	r2, r3, #22
 8008be6:	d4ef      	bmi.n	8008bc8 <__smakebuf_r+0x18>
 8008be8:	f023 0303 	bic.w	r3, r3, #3
 8008bec:	f043 0302 	orr.w	r3, r3, #2
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	e7e3      	b.n	8008bbc <__smakebuf_r+0xc>
 8008bf4:	4b0d      	ldr	r3, [pc, #52]	; (8008c2c <__smakebuf_r+0x7c>)
 8008bf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	6020      	str	r0, [r4, #0]
 8008bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c00:	81a3      	strh	r3, [r4, #12]
 8008c02:	9b00      	ldr	r3, [sp, #0]
 8008c04:	6163      	str	r3, [r4, #20]
 8008c06:	9b01      	ldr	r3, [sp, #4]
 8008c08:	6120      	str	r0, [r4, #16]
 8008c0a:	b15b      	cbz	r3, 8008c24 <__smakebuf_r+0x74>
 8008c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c10:	4630      	mov	r0, r6
 8008c12:	f001 f80b 	bl	8009c2c <_isatty_r>
 8008c16:	b128      	cbz	r0, 8008c24 <__smakebuf_r+0x74>
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	f023 0303 	bic.w	r3, r3, #3
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	89a0      	ldrh	r0, [r4, #12]
 8008c26:	4305      	orrs	r5, r0
 8008c28:	81a5      	strh	r5, [r4, #12]
 8008c2a:	e7cd      	b.n	8008bc8 <__smakebuf_r+0x18>
 8008c2c:	080082d9 	.word	0x080082d9

08008c30 <malloc>:
 8008c30:	4b02      	ldr	r3, [pc, #8]	; (8008c3c <malloc+0xc>)
 8008c32:	4601      	mov	r1, r0
 8008c34:	6818      	ldr	r0, [r3, #0]
 8008c36:	f000 bd59 	b.w	80096ec <_malloc_r>
 8008c3a:	bf00      	nop
 8008c3c:	20000014 	.word	0x20000014

08008c40 <__ascii_mbtowc>:
 8008c40:	b082      	sub	sp, #8
 8008c42:	b901      	cbnz	r1, 8008c46 <__ascii_mbtowc+0x6>
 8008c44:	a901      	add	r1, sp, #4
 8008c46:	b142      	cbz	r2, 8008c5a <__ascii_mbtowc+0x1a>
 8008c48:	b14b      	cbz	r3, 8008c5e <__ascii_mbtowc+0x1e>
 8008c4a:	7813      	ldrb	r3, [r2, #0]
 8008c4c:	600b      	str	r3, [r1, #0]
 8008c4e:	7812      	ldrb	r2, [r2, #0]
 8008c50:	1e10      	subs	r0, r2, #0
 8008c52:	bf18      	it	ne
 8008c54:	2001      	movne	r0, #1
 8008c56:	b002      	add	sp, #8
 8008c58:	4770      	bx	lr
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	e7fb      	b.n	8008c56 <__ascii_mbtowc+0x16>
 8008c5e:	f06f 0001 	mvn.w	r0, #1
 8008c62:	e7f8      	b.n	8008c56 <__ascii_mbtowc+0x16>

08008c64 <_Balloc>:
 8008c64:	b570      	push	{r4, r5, r6, lr}
 8008c66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c68:	4604      	mov	r4, r0
 8008c6a:	460d      	mov	r5, r1
 8008c6c:	b976      	cbnz	r6, 8008c8c <_Balloc+0x28>
 8008c6e:	2010      	movs	r0, #16
 8008c70:	f7ff ffde 	bl	8008c30 <malloc>
 8008c74:	4602      	mov	r2, r0
 8008c76:	6260      	str	r0, [r4, #36]	; 0x24
 8008c78:	b920      	cbnz	r0, 8008c84 <_Balloc+0x20>
 8008c7a:	4b18      	ldr	r3, [pc, #96]	; (8008cdc <_Balloc+0x78>)
 8008c7c:	4818      	ldr	r0, [pc, #96]	; (8008ce0 <_Balloc+0x7c>)
 8008c7e:	2166      	movs	r1, #102	; 0x66
 8008c80:	f000 ff82 	bl	8009b88 <__assert_func>
 8008c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c88:	6006      	str	r6, [r0, #0]
 8008c8a:	60c6      	str	r6, [r0, #12]
 8008c8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c8e:	68f3      	ldr	r3, [r6, #12]
 8008c90:	b183      	cbz	r3, 8008cb4 <_Balloc+0x50>
 8008c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c9a:	b9b8      	cbnz	r0, 8008ccc <_Balloc+0x68>
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	fa01 f605 	lsl.w	r6, r1, r5
 8008ca2:	1d72      	adds	r2, r6, #5
 8008ca4:	0092      	lsls	r2, r2, #2
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f000 fc9d 	bl	80095e6 <_calloc_r>
 8008cac:	b160      	cbz	r0, 8008cc8 <_Balloc+0x64>
 8008cae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cb2:	e00e      	b.n	8008cd2 <_Balloc+0x6e>
 8008cb4:	2221      	movs	r2, #33	; 0x21
 8008cb6:	2104      	movs	r1, #4
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 fc94 	bl	80095e6 <_calloc_r>
 8008cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cc0:	60f0      	str	r0, [r6, #12]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1e4      	bne.n	8008c92 <_Balloc+0x2e>
 8008cc8:	2000      	movs	r0, #0
 8008cca:	bd70      	pop	{r4, r5, r6, pc}
 8008ccc:	6802      	ldr	r2, [r0, #0]
 8008cce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cd8:	e7f7      	b.n	8008cca <_Balloc+0x66>
 8008cda:	bf00      	nop
 8008cdc:	0800a37e 	.word	0x0800a37e
 8008ce0:	0800a4e0 	.word	0x0800a4e0

08008ce4 <_Bfree>:
 8008ce4:	b570      	push	{r4, r5, r6, lr}
 8008ce6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ce8:	4605      	mov	r5, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	b976      	cbnz	r6, 8008d0c <_Bfree+0x28>
 8008cee:	2010      	movs	r0, #16
 8008cf0:	f7ff ff9e 	bl	8008c30 <malloc>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6268      	str	r0, [r5, #36]	; 0x24
 8008cf8:	b920      	cbnz	r0, 8008d04 <_Bfree+0x20>
 8008cfa:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <_Bfree+0x3c>)
 8008cfc:	4809      	ldr	r0, [pc, #36]	; (8008d24 <_Bfree+0x40>)
 8008cfe:	218a      	movs	r1, #138	; 0x8a
 8008d00:	f000 ff42 	bl	8009b88 <__assert_func>
 8008d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d08:	6006      	str	r6, [r0, #0]
 8008d0a:	60c6      	str	r6, [r0, #12]
 8008d0c:	b13c      	cbz	r4, 8008d1e <_Bfree+0x3a>
 8008d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d10:	6862      	ldr	r2, [r4, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d18:	6021      	str	r1, [r4, #0]
 8008d1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}
 8008d20:	0800a37e 	.word	0x0800a37e
 8008d24:	0800a4e0 	.word	0x0800a4e0

08008d28 <__multadd>:
 8008d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2c:	690d      	ldr	r5, [r1, #16]
 8008d2e:	4607      	mov	r7, r0
 8008d30:	460c      	mov	r4, r1
 8008d32:	461e      	mov	r6, r3
 8008d34:	f101 0c14 	add.w	ip, r1, #20
 8008d38:	2000      	movs	r0, #0
 8008d3a:	f8dc 3000 	ldr.w	r3, [ip]
 8008d3e:	b299      	uxth	r1, r3
 8008d40:	fb02 6101 	mla	r1, r2, r1, r6
 8008d44:	0c1e      	lsrs	r6, r3, #16
 8008d46:	0c0b      	lsrs	r3, r1, #16
 8008d48:	fb02 3306 	mla	r3, r2, r6, r3
 8008d4c:	b289      	uxth	r1, r1
 8008d4e:	3001      	adds	r0, #1
 8008d50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d54:	4285      	cmp	r5, r0
 8008d56:	f84c 1b04 	str.w	r1, [ip], #4
 8008d5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d5e:	dcec      	bgt.n	8008d3a <__multadd+0x12>
 8008d60:	b30e      	cbz	r6, 8008da6 <__multadd+0x7e>
 8008d62:	68a3      	ldr	r3, [r4, #8]
 8008d64:	42ab      	cmp	r3, r5
 8008d66:	dc19      	bgt.n	8008d9c <__multadd+0x74>
 8008d68:	6861      	ldr	r1, [r4, #4]
 8008d6a:	4638      	mov	r0, r7
 8008d6c:	3101      	adds	r1, #1
 8008d6e:	f7ff ff79 	bl	8008c64 <_Balloc>
 8008d72:	4680      	mov	r8, r0
 8008d74:	b928      	cbnz	r0, 8008d82 <__multadd+0x5a>
 8008d76:	4602      	mov	r2, r0
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <__multadd+0x84>)
 8008d7a:	480d      	ldr	r0, [pc, #52]	; (8008db0 <__multadd+0x88>)
 8008d7c:	21b5      	movs	r1, #181	; 0xb5
 8008d7e:	f000 ff03 	bl	8009b88 <__assert_func>
 8008d82:	6922      	ldr	r2, [r4, #16]
 8008d84:	3202      	adds	r2, #2
 8008d86:	f104 010c 	add.w	r1, r4, #12
 8008d8a:	0092      	lsls	r2, r2, #2
 8008d8c:	300c      	adds	r0, #12
 8008d8e:	f7fc fcab 	bl	80056e8 <memcpy>
 8008d92:	4621      	mov	r1, r4
 8008d94:	4638      	mov	r0, r7
 8008d96:	f7ff ffa5 	bl	8008ce4 <_Bfree>
 8008d9a:	4644      	mov	r4, r8
 8008d9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008da0:	3501      	adds	r5, #1
 8008da2:	615e      	str	r6, [r3, #20]
 8008da4:	6125      	str	r5, [r4, #16]
 8008da6:	4620      	mov	r0, r4
 8008da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dac:	0800a3f0 	.word	0x0800a3f0
 8008db0:	0800a4e0 	.word	0x0800a4e0

08008db4 <__s2b>:
 8008db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db8:	460c      	mov	r4, r1
 8008dba:	4615      	mov	r5, r2
 8008dbc:	461f      	mov	r7, r3
 8008dbe:	2209      	movs	r2, #9
 8008dc0:	3308      	adds	r3, #8
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dc8:	2100      	movs	r1, #0
 8008dca:	2201      	movs	r2, #1
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	db09      	blt.n	8008de4 <__s2b+0x30>
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f7ff ff47 	bl	8008c64 <_Balloc>
 8008dd6:	b940      	cbnz	r0, 8008dea <__s2b+0x36>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	4b19      	ldr	r3, [pc, #100]	; (8008e40 <__s2b+0x8c>)
 8008ddc:	4819      	ldr	r0, [pc, #100]	; (8008e44 <__s2b+0x90>)
 8008dde:	21ce      	movs	r1, #206	; 0xce
 8008de0:	f000 fed2 	bl	8009b88 <__assert_func>
 8008de4:	0052      	lsls	r2, r2, #1
 8008de6:	3101      	adds	r1, #1
 8008de8:	e7f0      	b.n	8008dcc <__s2b+0x18>
 8008dea:	9b08      	ldr	r3, [sp, #32]
 8008dec:	6143      	str	r3, [r0, #20]
 8008dee:	2d09      	cmp	r5, #9
 8008df0:	f04f 0301 	mov.w	r3, #1
 8008df4:	6103      	str	r3, [r0, #16]
 8008df6:	dd16      	ble.n	8008e26 <__s2b+0x72>
 8008df8:	f104 0909 	add.w	r9, r4, #9
 8008dfc:	46c8      	mov	r8, r9
 8008dfe:	442c      	add	r4, r5
 8008e00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008e04:	4601      	mov	r1, r0
 8008e06:	3b30      	subs	r3, #48	; 0x30
 8008e08:	220a      	movs	r2, #10
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7ff ff8c 	bl	8008d28 <__multadd>
 8008e10:	45a0      	cmp	r8, r4
 8008e12:	d1f5      	bne.n	8008e00 <__s2b+0x4c>
 8008e14:	f1a5 0408 	sub.w	r4, r5, #8
 8008e18:	444c      	add	r4, r9
 8008e1a:	1b2d      	subs	r5, r5, r4
 8008e1c:	1963      	adds	r3, r4, r5
 8008e1e:	42bb      	cmp	r3, r7
 8008e20:	db04      	blt.n	8008e2c <__s2b+0x78>
 8008e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e26:	340a      	adds	r4, #10
 8008e28:	2509      	movs	r5, #9
 8008e2a:	e7f6      	b.n	8008e1a <__s2b+0x66>
 8008e2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e30:	4601      	mov	r1, r0
 8008e32:	3b30      	subs	r3, #48	; 0x30
 8008e34:	220a      	movs	r2, #10
 8008e36:	4630      	mov	r0, r6
 8008e38:	f7ff ff76 	bl	8008d28 <__multadd>
 8008e3c:	e7ee      	b.n	8008e1c <__s2b+0x68>
 8008e3e:	bf00      	nop
 8008e40:	0800a3f0 	.word	0x0800a3f0
 8008e44:	0800a4e0 	.word	0x0800a4e0

08008e48 <__hi0bits>:
 8008e48:	0c03      	lsrs	r3, r0, #16
 8008e4a:	041b      	lsls	r3, r3, #16
 8008e4c:	b9d3      	cbnz	r3, 8008e84 <__hi0bits+0x3c>
 8008e4e:	0400      	lsls	r0, r0, #16
 8008e50:	2310      	movs	r3, #16
 8008e52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e56:	bf04      	itt	eq
 8008e58:	0200      	lsleq	r0, r0, #8
 8008e5a:	3308      	addeq	r3, #8
 8008e5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e60:	bf04      	itt	eq
 8008e62:	0100      	lsleq	r0, r0, #4
 8008e64:	3304      	addeq	r3, #4
 8008e66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e6a:	bf04      	itt	eq
 8008e6c:	0080      	lsleq	r0, r0, #2
 8008e6e:	3302      	addeq	r3, #2
 8008e70:	2800      	cmp	r0, #0
 8008e72:	db05      	blt.n	8008e80 <__hi0bits+0x38>
 8008e74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e78:	f103 0301 	add.w	r3, r3, #1
 8008e7c:	bf08      	it	eq
 8008e7e:	2320      	moveq	r3, #32
 8008e80:	4618      	mov	r0, r3
 8008e82:	4770      	bx	lr
 8008e84:	2300      	movs	r3, #0
 8008e86:	e7e4      	b.n	8008e52 <__hi0bits+0xa>

08008e88 <__lo0bits>:
 8008e88:	6803      	ldr	r3, [r0, #0]
 8008e8a:	f013 0207 	ands.w	r2, r3, #7
 8008e8e:	4601      	mov	r1, r0
 8008e90:	d00b      	beq.n	8008eaa <__lo0bits+0x22>
 8008e92:	07da      	lsls	r2, r3, #31
 8008e94:	d423      	bmi.n	8008ede <__lo0bits+0x56>
 8008e96:	0798      	lsls	r0, r3, #30
 8008e98:	bf49      	itett	mi
 8008e9a:	085b      	lsrmi	r3, r3, #1
 8008e9c:	089b      	lsrpl	r3, r3, #2
 8008e9e:	2001      	movmi	r0, #1
 8008ea0:	600b      	strmi	r3, [r1, #0]
 8008ea2:	bf5c      	itt	pl
 8008ea4:	600b      	strpl	r3, [r1, #0]
 8008ea6:	2002      	movpl	r0, #2
 8008ea8:	4770      	bx	lr
 8008eaa:	b298      	uxth	r0, r3
 8008eac:	b9a8      	cbnz	r0, 8008eda <__lo0bits+0x52>
 8008eae:	0c1b      	lsrs	r3, r3, #16
 8008eb0:	2010      	movs	r0, #16
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	b90a      	cbnz	r2, 8008eba <__lo0bits+0x32>
 8008eb6:	3008      	adds	r0, #8
 8008eb8:	0a1b      	lsrs	r3, r3, #8
 8008eba:	071a      	lsls	r2, r3, #28
 8008ebc:	bf04      	itt	eq
 8008ebe:	091b      	lsreq	r3, r3, #4
 8008ec0:	3004      	addeq	r0, #4
 8008ec2:	079a      	lsls	r2, r3, #30
 8008ec4:	bf04      	itt	eq
 8008ec6:	089b      	lsreq	r3, r3, #2
 8008ec8:	3002      	addeq	r0, #2
 8008eca:	07da      	lsls	r2, r3, #31
 8008ecc:	d403      	bmi.n	8008ed6 <__lo0bits+0x4e>
 8008ece:	085b      	lsrs	r3, r3, #1
 8008ed0:	f100 0001 	add.w	r0, r0, #1
 8008ed4:	d005      	beq.n	8008ee2 <__lo0bits+0x5a>
 8008ed6:	600b      	str	r3, [r1, #0]
 8008ed8:	4770      	bx	lr
 8008eda:	4610      	mov	r0, r2
 8008edc:	e7e9      	b.n	8008eb2 <__lo0bits+0x2a>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	4770      	bx	lr
 8008ee2:	2020      	movs	r0, #32
 8008ee4:	4770      	bx	lr
	...

08008ee8 <__i2b>:
 8008ee8:	b510      	push	{r4, lr}
 8008eea:	460c      	mov	r4, r1
 8008eec:	2101      	movs	r1, #1
 8008eee:	f7ff feb9 	bl	8008c64 <_Balloc>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	b928      	cbnz	r0, 8008f02 <__i2b+0x1a>
 8008ef6:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <__i2b+0x24>)
 8008ef8:	4805      	ldr	r0, [pc, #20]	; (8008f10 <__i2b+0x28>)
 8008efa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008efe:	f000 fe43 	bl	8009b88 <__assert_func>
 8008f02:	2301      	movs	r3, #1
 8008f04:	6144      	str	r4, [r0, #20]
 8008f06:	6103      	str	r3, [r0, #16]
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	bf00      	nop
 8008f0c:	0800a3f0 	.word	0x0800a3f0
 8008f10:	0800a4e0 	.word	0x0800a4e0

08008f14 <__multiply>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	4691      	mov	r9, r2
 8008f1a:	690a      	ldr	r2, [r1, #16]
 8008f1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	bfb8      	it	lt
 8008f24:	460b      	movlt	r3, r1
 8008f26:	460c      	mov	r4, r1
 8008f28:	bfbc      	itt	lt
 8008f2a:	464c      	movlt	r4, r9
 8008f2c:	4699      	movlt	r9, r3
 8008f2e:	6927      	ldr	r7, [r4, #16]
 8008f30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f34:	68a3      	ldr	r3, [r4, #8]
 8008f36:	6861      	ldr	r1, [r4, #4]
 8008f38:	eb07 060a 	add.w	r6, r7, sl
 8008f3c:	42b3      	cmp	r3, r6
 8008f3e:	b085      	sub	sp, #20
 8008f40:	bfb8      	it	lt
 8008f42:	3101      	addlt	r1, #1
 8008f44:	f7ff fe8e 	bl	8008c64 <_Balloc>
 8008f48:	b930      	cbnz	r0, 8008f58 <__multiply+0x44>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	4b44      	ldr	r3, [pc, #272]	; (8009060 <__multiply+0x14c>)
 8008f4e:	4845      	ldr	r0, [pc, #276]	; (8009064 <__multiply+0x150>)
 8008f50:	f240 115d 	movw	r1, #349	; 0x15d
 8008f54:	f000 fe18 	bl	8009b88 <__assert_func>
 8008f58:	f100 0514 	add.w	r5, r0, #20
 8008f5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f60:	462b      	mov	r3, r5
 8008f62:	2200      	movs	r2, #0
 8008f64:	4543      	cmp	r3, r8
 8008f66:	d321      	bcc.n	8008fac <__multiply+0x98>
 8008f68:	f104 0314 	add.w	r3, r4, #20
 8008f6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f70:	f109 0314 	add.w	r3, r9, #20
 8008f74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f78:	9202      	str	r2, [sp, #8]
 8008f7a:	1b3a      	subs	r2, r7, r4
 8008f7c:	3a15      	subs	r2, #21
 8008f7e:	f022 0203 	bic.w	r2, r2, #3
 8008f82:	3204      	adds	r2, #4
 8008f84:	f104 0115 	add.w	r1, r4, #21
 8008f88:	428f      	cmp	r7, r1
 8008f8a:	bf38      	it	cc
 8008f8c:	2204      	movcc	r2, #4
 8008f8e:	9201      	str	r2, [sp, #4]
 8008f90:	9a02      	ldr	r2, [sp, #8]
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d80c      	bhi.n	8008fb2 <__multiply+0x9e>
 8008f98:	2e00      	cmp	r6, #0
 8008f9a:	dd03      	ble.n	8008fa4 <__multiply+0x90>
 8008f9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d05a      	beq.n	800905a <__multiply+0x146>
 8008fa4:	6106      	str	r6, [r0, #16]
 8008fa6:	b005      	add	sp, #20
 8008fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fac:	f843 2b04 	str.w	r2, [r3], #4
 8008fb0:	e7d8      	b.n	8008f64 <__multiply+0x50>
 8008fb2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fb6:	f1ba 0f00 	cmp.w	sl, #0
 8008fba:	d024      	beq.n	8009006 <__multiply+0xf2>
 8008fbc:	f104 0e14 	add.w	lr, r4, #20
 8008fc0:	46a9      	mov	r9, r5
 8008fc2:	f04f 0c00 	mov.w	ip, #0
 8008fc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008fca:	f8d9 1000 	ldr.w	r1, [r9]
 8008fce:	fa1f fb82 	uxth.w	fp, r2
 8008fd2:	b289      	uxth	r1, r1
 8008fd4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8008fe0:	4461      	add	r1, ip
 8008fe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fe6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008fea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fee:	b289      	uxth	r1, r1
 8008ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ff4:	4577      	cmp	r7, lr
 8008ff6:	f849 1b04 	str.w	r1, [r9], #4
 8008ffa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ffe:	d8e2      	bhi.n	8008fc6 <__multiply+0xb2>
 8009000:	9a01      	ldr	r2, [sp, #4]
 8009002:	f845 c002 	str.w	ip, [r5, r2]
 8009006:	9a03      	ldr	r2, [sp, #12]
 8009008:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800900c:	3304      	adds	r3, #4
 800900e:	f1b9 0f00 	cmp.w	r9, #0
 8009012:	d020      	beq.n	8009056 <__multiply+0x142>
 8009014:	6829      	ldr	r1, [r5, #0]
 8009016:	f104 0c14 	add.w	ip, r4, #20
 800901a:	46ae      	mov	lr, r5
 800901c:	f04f 0a00 	mov.w	sl, #0
 8009020:	f8bc b000 	ldrh.w	fp, [ip]
 8009024:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009028:	fb09 220b 	mla	r2, r9, fp, r2
 800902c:	4492      	add	sl, r2
 800902e:	b289      	uxth	r1, r1
 8009030:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009034:	f84e 1b04 	str.w	r1, [lr], #4
 8009038:	f85c 2b04 	ldr.w	r2, [ip], #4
 800903c:	f8be 1000 	ldrh.w	r1, [lr]
 8009040:	0c12      	lsrs	r2, r2, #16
 8009042:	fb09 1102 	mla	r1, r9, r2, r1
 8009046:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800904a:	4567      	cmp	r7, ip
 800904c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009050:	d8e6      	bhi.n	8009020 <__multiply+0x10c>
 8009052:	9a01      	ldr	r2, [sp, #4]
 8009054:	50a9      	str	r1, [r5, r2]
 8009056:	3504      	adds	r5, #4
 8009058:	e79a      	b.n	8008f90 <__multiply+0x7c>
 800905a:	3e01      	subs	r6, #1
 800905c:	e79c      	b.n	8008f98 <__multiply+0x84>
 800905e:	bf00      	nop
 8009060:	0800a3f0 	.word	0x0800a3f0
 8009064:	0800a4e0 	.word	0x0800a4e0

08009068 <__pow5mult>:
 8009068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800906c:	4615      	mov	r5, r2
 800906e:	f012 0203 	ands.w	r2, r2, #3
 8009072:	4606      	mov	r6, r0
 8009074:	460f      	mov	r7, r1
 8009076:	d007      	beq.n	8009088 <__pow5mult+0x20>
 8009078:	4c25      	ldr	r4, [pc, #148]	; (8009110 <__pow5mult+0xa8>)
 800907a:	3a01      	subs	r2, #1
 800907c:	2300      	movs	r3, #0
 800907e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009082:	f7ff fe51 	bl	8008d28 <__multadd>
 8009086:	4607      	mov	r7, r0
 8009088:	10ad      	asrs	r5, r5, #2
 800908a:	d03d      	beq.n	8009108 <__pow5mult+0xa0>
 800908c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800908e:	b97c      	cbnz	r4, 80090b0 <__pow5mult+0x48>
 8009090:	2010      	movs	r0, #16
 8009092:	f7ff fdcd 	bl	8008c30 <malloc>
 8009096:	4602      	mov	r2, r0
 8009098:	6270      	str	r0, [r6, #36]	; 0x24
 800909a:	b928      	cbnz	r0, 80090a8 <__pow5mult+0x40>
 800909c:	4b1d      	ldr	r3, [pc, #116]	; (8009114 <__pow5mult+0xac>)
 800909e:	481e      	ldr	r0, [pc, #120]	; (8009118 <__pow5mult+0xb0>)
 80090a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090a4:	f000 fd70 	bl	8009b88 <__assert_func>
 80090a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090ac:	6004      	str	r4, [r0, #0]
 80090ae:	60c4      	str	r4, [r0, #12]
 80090b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090b8:	b94c      	cbnz	r4, 80090ce <__pow5mult+0x66>
 80090ba:	f240 2171 	movw	r1, #625	; 0x271
 80090be:	4630      	mov	r0, r6
 80090c0:	f7ff ff12 	bl	8008ee8 <__i2b>
 80090c4:	2300      	movs	r3, #0
 80090c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ca:	4604      	mov	r4, r0
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	f04f 0900 	mov.w	r9, #0
 80090d2:	07eb      	lsls	r3, r5, #31
 80090d4:	d50a      	bpl.n	80090ec <__pow5mult+0x84>
 80090d6:	4639      	mov	r1, r7
 80090d8:	4622      	mov	r2, r4
 80090da:	4630      	mov	r0, r6
 80090dc:	f7ff ff1a 	bl	8008f14 <__multiply>
 80090e0:	4639      	mov	r1, r7
 80090e2:	4680      	mov	r8, r0
 80090e4:	4630      	mov	r0, r6
 80090e6:	f7ff fdfd 	bl	8008ce4 <_Bfree>
 80090ea:	4647      	mov	r7, r8
 80090ec:	106d      	asrs	r5, r5, #1
 80090ee:	d00b      	beq.n	8009108 <__pow5mult+0xa0>
 80090f0:	6820      	ldr	r0, [r4, #0]
 80090f2:	b938      	cbnz	r0, 8009104 <__pow5mult+0x9c>
 80090f4:	4622      	mov	r2, r4
 80090f6:	4621      	mov	r1, r4
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7ff ff0b 	bl	8008f14 <__multiply>
 80090fe:	6020      	str	r0, [r4, #0]
 8009100:	f8c0 9000 	str.w	r9, [r0]
 8009104:	4604      	mov	r4, r0
 8009106:	e7e4      	b.n	80090d2 <__pow5mult+0x6a>
 8009108:	4638      	mov	r0, r7
 800910a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910e:	bf00      	nop
 8009110:	0800a630 	.word	0x0800a630
 8009114:	0800a37e 	.word	0x0800a37e
 8009118:	0800a4e0 	.word	0x0800a4e0

0800911c <__lshift>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	460c      	mov	r4, r1
 8009122:	6849      	ldr	r1, [r1, #4]
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	4607      	mov	r7, r0
 800912e:	4691      	mov	r9, r2
 8009130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009134:	f108 0601 	add.w	r6, r8, #1
 8009138:	42b3      	cmp	r3, r6
 800913a:	db0b      	blt.n	8009154 <__lshift+0x38>
 800913c:	4638      	mov	r0, r7
 800913e:	f7ff fd91 	bl	8008c64 <_Balloc>
 8009142:	4605      	mov	r5, r0
 8009144:	b948      	cbnz	r0, 800915a <__lshift+0x3e>
 8009146:	4602      	mov	r2, r0
 8009148:	4b2a      	ldr	r3, [pc, #168]	; (80091f4 <__lshift+0xd8>)
 800914a:	482b      	ldr	r0, [pc, #172]	; (80091f8 <__lshift+0xdc>)
 800914c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009150:	f000 fd1a 	bl	8009b88 <__assert_func>
 8009154:	3101      	adds	r1, #1
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	e7ee      	b.n	8009138 <__lshift+0x1c>
 800915a:	2300      	movs	r3, #0
 800915c:	f100 0114 	add.w	r1, r0, #20
 8009160:	f100 0210 	add.w	r2, r0, #16
 8009164:	4618      	mov	r0, r3
 8009166:	4553      	cmp	r3, sl
 8009168:	db37      	blt.n	80091da <__lshift+0xbe>
 800916a:	6920      	ldr	r0, [r4, #16]
 800916c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009170:	f104 0314 	add.w	r3, r4, #20
 8009174:	f019 091f 	ands.w	r9, r9, #31
 8009178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800917c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009180:	d02f      	beq.n	80091e2 <__lshift+0xc6>
 8009182:	f1c9 0e20 	rsb	lr, r9, #32
 8009186:	468a      	mov	sl, r1
 8009188:	f04f 0c00 	mov.w	ip, #0
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	fa02 f209 	lsl.w	r2, r2, r9
 8009192:	ea42 020c 	orr.w	r2, r2, ip
 8009196:	f84a 2b04 	str.w	r2, [sl], #4
 800919a:	f853 2b04 	ldr.w	r2, [r3], #4
 800919e:	4298      	cmp	r0, r3
 80091a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80091a4:	d8f2      	bhi.n	800918c <__lshift+0x70>
 80091a6:	1b03      	subs	r3, r0, r4
 80091a8:	3b15      	subs	r3, #21
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	3304      	adds	r3, #4
 80091b0:	f104 0215 	add.w	r2, r4, #21
 80091b4:	4290      	cmp	r0, r2
 80091b6:	bf38      	it	cc
 80091b8:	2304      	movcc	r3, #4
 80091ba:	f841 c003 	str.w	ip, [r1, r3]
 80091be:	f1bc 0f00 	cmp.w	ip, #0
 80091c2:	d001      	beq.n	80091c8 <__lshift+0xac>
 80091c4:	f108 0602 	add.w	r6, r8, #2
 80091c8:	3e01      	subs	r6, #1
 80091ca:	4638      	mov	r0, r7
 80091cc:	612e      	str	r6, [r5, #16]
 80091ce:	4621      	mov	r1, r4
 80091d0:	f7ff fd88 	bl	8008ce4 <_Bfree>
 80091d4:	4628      	mov	r0, r5
 80091d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091da:	f842 0f04 	str.w	r0, [r2, #4]!
 80091de:	3301      	adds	r3, #1
 80091e0:	e7c1      	b.n	8009166 <__lshift+0x4a>
 80091e2:	3904      	subs	r1, #4
 80091e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80091ec:	4298      	cmp	r0, r3
 80091ee:	d8f9      	bhi.n	80091e4 <__lshift+0xc8>
 80091f0:	e7ea      	b.n	80091c8 <__lshift+0xac>
 80091f2:	bf00      	nop
 80091f4:	0800a3f0 	.word	0x0800a3f0
 80091f8:	0800a4e0 	.word	0x0800a4e0

080091fc <__mcmp>:
 80091fc:	b530      	push	{r4, r5, lr}
 80091fe:	6902      	ldr	r2, [r0, #16]
 8009200:	690c      	ldr	r4, [r1, #16]
 8009202:	1b12      	subs	r2, r2, r4
 8009204:	d10e      	bne.n	8009224 <__mcmp+0x28>
 8009206:	f100 0314 	add.w	r3, r0, #20
 800920a:	3114      	adds	r1, #20
 800920c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009210:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009214:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009218:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800921c:	42a5      	cmp	r5, r4
 800921e:	d003      	beq.n	8009228 <__mcmp+0x2c>
 8009220:	d305      	bcc.n	800922e <__mcmp+0x32>
 8009222:	2201      	movs	r2, #1
 8009224:	4610      	mov	r0, r2
 8009226:	bd30      	pop	{r4, r5, pc}
 8009228:	4283      	cmp	r3, r0
 800922a:	d3f3      	bcc.n	8009214 <__mcmp+0x18>
 800922c:	e7fa      	b.n	8009224 <__mcmp+0x28>
 800922e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009232:	e7f7      	b.n	8009224 <__mcmp+0x28>

08009234 <__mdiff>:
 8009234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	460c      	mov	r4, r1
 800923a:	4606      	mov	r6, r0
 800923c:	4611      	mov	r1, r2
 800923e:	4620      	mov	r0, r4
 8009240:	4690      	mov	r8, r2
 8009242:	f7ff ffdb 	bl	80091fc <__mcmp>
 8009246:	1e05      	subs	r5, r0, #0
 8009248:	d110      	bne.n	800926c <__mdiff+0x38>
 800924a:	4629      	mov	r1, r5
 800924c:	4630      	mov	r0, r6
 800924e:	f7ff fd09 	bl	8008c64 <_Balloc>
 8009252:	b930      	cbnz	r0, 8009262 <__mdiff+0x2e>
 8009254:	4b3a      	ldr	r3, [pc, #232]	; (8009340 <__mdiff+0x10c>)
 8009256:	4602      	mov	r2, r0
 8009258:	f240 2132 	movw	r1, #562	; 0x232
 800925c:	4839      	ldr	r0, [pc, #228]	; (8009344 <__mdiff+0x110>)
 800925e:	f000 fc93 	bl	8009b88 <__assert_func>
 8009262:	2301      	movs	r3, #1
 8009264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926c:	bfa4      	itt	ge
 800926e:	4643      	movge	r3, r8
 8009270:	46a0      	movge	r8, r4
 8009272:	4630      	mov	r0, r6
 8009274:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009278:	bfa6      	itte	ge
 800927a:	461c      	movge	r4, r3
 800927c:	2500      	movge	r5, #0
 800927e:	2501      	movlt	r5, #1
 8009280:	f7ff fcf0 	bl	8008c64 <_Balloc>
 8009284:	b920      	cbnz	r0, 8009290 <__mdiff+0x5c>
 8009286:	4b2e      	ldr	r3, [pc, #184]	; (8009340 <__mdiff+0x10c>)
 8009288:	4602      	mov	r2, r0
 800928a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800928e:	e7e5      	b.n	800925c <__mdiff+0x28>
 8009290:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009294:	6926      	ldr	r6, [r4, #16]
 8009296:	60c5      	str	r5, [r0, #12]
 8009298:	f104 0914 	add.w	r9, r4, #20
 800929c:	f108 0514 	add.w	r5, r8, #20
 80092a0:	f100 0e14 	add.w	lr, r0, #20
 80092a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80092a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80092ac:	f108 0210 	add.w	r2, r8, #16
 80092b0:	46f2      	mov	sl, lr
 80092b2:	2100      	movs	r1, #0
 80092b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80092b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092bc:	fa1f f883 	uxth.w	r8, r3
 80092c0:	fa11 f18b 	uxtah	r1, r1, fp
 80092c4:	0c1b      	lsrs	r3, r3, #16
 80092c6:	eba1 0808 	sub.w	r8, r1, r8
 80092ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092d2:	fa1f f888 	uxth.w	r8, r8
 80092d6:	1419      	asrs	r1, r3, #16
 80092d8:	454e      	cmp	r6, r9
 80092da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092de:	f84a 3b04 	str.w	r3, [sl], #4
 80092e2:	d8e7      	bhi.n	80092b4 <__mdiff+0x80>
 80092e4:	1b33      	subs	r3, r6, r4
 80092e6:	3b15      	subs	r3, #21
 80092e8:	f023 0303 	bic.w	r3, r3, #3
 80092ec:	3304      	adds	r3, #4
 80092ee:	3415      	adds	r4, #21
 80092f0:	42a6      	cmp	r6, r4
 80092f2:	bf38      	it	cc
 80092f4:	2304      	movcc	r3, #4
 80092f6:	441d      	add	r5, r3
 80092f8:	4473      	add	r3, lr
 80092fa:	469e      	mov	lr, r3
 80092fc:	462e      	mov	r6, r5
 80092fe:	4566      	cmp	r6, ip
 8009300:	d30e      	bcc.n	8009320 <__mdiff+0xec>
 8009302:	f10c 0203 	add.w	r2, ip, #3
 8009306:	1b52      	subs	r2, r2, r5
 8009308:	f022 0203 	bic.w	r2, r2, #3
 800930c:	3d03      	subs	r5, #3
 800930e:	45ac      	cmp	ip, r5
 8009310:	bf38      	it	cc
 8009312:	2200      	movcc	r2, #0
 8009314:	441a      	add	r2, r3
 8009316:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800931a:	b17b      	cbz	r3, 800933c <__mdiff+0x108>
 800931c:	6107      	str	r7, [r0, #16]
 800931e:	e7a3      	b.n	8009268 <__mdiff+0x34>
 8009320:	f856 8b04 	ldr.w	r8, [r6], #4
 8009324:	fa11 f288 	uxtah	r2, r1, r8
 8009328:	1414      	asrs	r4, r2, #16
 800932a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800932e:	b292      	uxth	r2, r2
 8009330:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009334:	f84e 2b04 	str.w	r2, [lr], #4
 8009338:	1421      	asrs	r1, r4, #16
 800933a:	e7e0      	b.n	80092fe <__mdiff+0xca>
 800933c:	3f01      	subs	r7, #1
 800933e:	e7ea      	b.n	8009316 <__mdiff+0xe2>
 8009340:	0800a3f0 	.word	0x0800a3f0
 8009344:	0800a4e0 	.word	0x0800a4e0

08009348 <__ulp>:
 8009348:	b082      	sub	sp, #8
 800934a:	ed8d 0b00 	vstr	d0, [sp]
 800934e:	9b01      	ldr	r3, [sp, #4]
 8009350:	4912      	ldr	r1, [pc, #72]	; (800939c <__ulp+0x54>)
 8009352:	4019      	ands	r1, r3
 8009354:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009358:	2900      	cmp	r1, #0
 800935a:	dd05      	ble.n	8009368 <__ulp+0x20>
 800935c:	2200      	movs	r2, #0
 800935e:	460b      	mov	r3, r1
 8009360:	ec43 2b10 	vmov	d0, r2, r3
 8009364:	b002      	add	sp, #8
 8009366:	4770      	bx	lr
 8009368:	4249      	negs	r1, r1
 800936a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800936e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009372:	f04f 0200 	mov.w	r2, #0
 8009376:	f04f 0300 	mov.w	r3, #0
 800937a:	da04      	bge.n	8009386 <__ulp+0x3e>
 800937c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009380:	fa41 f300 	asr.w	r3, r1, r0
 8009384:	e7ec      	b.n	8009360 <__ulp+0x18>
 8009386:	f1a0 0114 	sub.w	r1, r0, #20
 800938a:	291e      	cmp	r1, #30
 800938c:	bfda      	itte	le
 800938e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009392:	fa20 f101 	lsrle.w	r1, r0, r1
 8009396:	2101      	movgt	r1, #1
 8009398:	460a      	mov	r2, r1
 800939a:	e7e1      	b.n	8009360 <__ulp+0x18>
 800939c:	7ff00000 	.word	0x7ff00000

080093a0 <__b2d>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	6905      	ldr	r5, [r0, #16]
 80093a4:	f100 0714 	add.w	r7, r0, #20
 80093a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80093ac:	1f2e      	subs	r6, r5, #4
 80093ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80093b2:	4620      	mov	r0, r4
 80093b4:	f7ff fd48 	bl	8008e48 <__hi0bits>
 80093b8:	f1c0 0320 	rsb	r3, r0, #32
 80093bc:	280a      	cmp	r0, #10
 80093be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800943c <__b2d+0x9c>
 80093c2:	600b      	str	r3, [r1, #0]
 80093c4:	dc14      	bgt.n	80093f0 <__b2d+0x50>
 80093c6:	f1c0 0e0b 	rsb	lr, r0, #11
 80093ca:	fa24 f10e 	lsr.w	r1, r4, lr
 80093ce:	42b7      	cmp	r7, r6
 80093d0:	ea41 030c 	orr.w	r3, r1, ip
 80093d4:	bf34      	ite	cc
 80093d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80093da:	2100      	movcs	r1, #0
 80093dc:	3015      	adds	r0, #21
 80093de:	fa04 f000 	lsl.w	r0, r4, r0
 80093e2:	fa21 f10e 	lsr.w	r1, r1, lr
 80093e6:	ea40 0201 	orr.w	r2, r0, r1
 80093ea:	ec43 2b10 	vmov	d0, r2, r3
 80093ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093f0:	42b7      	cmp	r7, r6
 80093f2:	bf3a      	itte	cc
 80093f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80093f8:	f1a5 0608 	subcc.w	r6, r5, #8
 80093fc:	2100      	movcs	r1, #0
 80093fe:	380b      	subs	r0, #11
 8009400:	d017      	beq.n	8009432 <__b2d+0x92>
 8009402:	f1c0 0c20 	rsb	ip, r0, #32
 8009406:	fa04 f500 	lsl.w	r5, r4, r0
 800940a:	42be      	cmp	r6, r7
 800940c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009410:	ea45 0504 	orr.w	r5, r5, r4
 8009414:	bf8c      	ite	hi
 8009416:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800941a:	2400      	movls	r4, #0
 800941c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009420:	fa01 f000 	lsl.w	r0, r1, r0
 8009424:	fa24 f40c 	lsr.w	r4, r4, ip
 8009428:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800942c:	ea40 0204 	orr.w	r2, r0, r4
 8009430:	e7db      	b.n	80093ea <__b2d+0x4a>
 8009432:	ea44 030c 	orr.w	r3, r4, ip
 8009436:	460a      	mov	r2, r1
 8009438:	e7d7      	b.n	80093ea <__b2d+0x4a>
 800943a:	bf00      	nop
 800943c:	3ff00000 	.word	0x3ff00000

08009440 <__d2b>:
 8009440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009444:	4689      	mov	r9, r1
 8009446:	2101      	movs	r1, #1
 8009448:	ec57 6b10 	vmov	r6, r7, d0
 800944c:	4690      	mov	r8, r2
 800944e:	f7ff fc09 	bl	8008c64 <_Balloc>
 8009452:	4604      	mov	r4, r0
 8009454:	b930      	cbnz	r0, 8009464 <__d2b+0x24>
 8009456:	4602      	mov	r2, r0
 8009458:	4b25      	ldr	r3, [pc, #148]	; (80094f0 <__d2b+0xb0>)
 800945a:	4826      	ldr	r0, [pc, #152]	; (80094f4 <__d2b+0xb4>)
 800945c:	f240 310a 	movw	r1, #778	; 0x30a
 8009460:	f000 fb92 	bl	8009b88 <__assert_func>
 8009464:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009468:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800946c:	bb35      	cbnz	r5, 80094bc <__d2b+0x7c>
 800946e:	2e00      	cmp	r6, #0
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	d028      	beq.n	80094c6 <__d2b+0x86>
 8009474:	4668      	mov	r0, sp
 8009476:	9600      	str	r6, [sp, #0]
 8009478:	f7ff fd06 	bl	8008e88 <__lo0bits>
 800947c:	9900      	ldr	r1, [sp, #0]
 800947e:	b300      	cbz	r0, 80094c2 <__d2b+0x82>
 8009480:	9a01      	ldr	r2, [sp, #4]
 8009482:	f1c0 0320 	rsb	r3, r0, #32
 8009486:	fa02 f303 	lsl.w	r3, r2, r3
 800948a:	430b      	orrs	r3, r1
 800948c:	40c2      	lsrs	r2, r0
 800948e:	6163      	str	r3, [r4, #20]
 8009490:	9201      	str	r2, [sp, #4]
 8009492:	9b01      	ldr	r3, [sp, #4]
 8009494:	61a3      	str	r3, [r4, #24]
 8009496:	2b00      	cmp	r3, #0
 8009498:	bf14      	ite	ne
 800949a:	2202      	movne	r2, #2
 800949c:	2201      	moveq	r2, #1
 800949e:	6122      	str	r2, [r4, #16]
 80094a0:	b1d5      	cbz	r5, 80094d8 <__d2b+0x98>
 80094a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094a6:	4405      	add	r5, r0
 80094a8:	f8c9 5000 	str.w	r5, [r9]
 80094ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094b0:	f8c8 0000 	str.w	r0, [r8]
 80094b4:	4620      	mov	r0, r4
 80094b6:	b003      	add	sp, #12
 80094b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094c0:	e7d5      	b.n	800946e <__d2b+0x2e>
 80094c2:	6161      	str	r1, [r4, #20]
 80094c4:	e7e5      	b.n	8009492 <__d2b+0x52>
 80094c6:	a801      	add	r0, sp, #4
 80094c8:	f7ff fcde 	bl	8008e88 <__lo0bits>
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	6163      	str	r3, [r4, #20]
 80094d0:	2201      	movs	r2, #1
 80094d2:	6122      	str	r2, [r4, #16]
 80094d4:	3020      	adds	r0, #32
 80094d6:	e7e3      	b.n	80094a0 <__d2b+0x60>
 80094d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094e0:	f8c9 0000 	str.w	r0, [r9]
 80094e4:	6918      	ldr	r0, [r3, #16]
 80094e6:	f7ff fcaf 	bl	8008e48 <__hi0bits>
 80094ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094ee:	e7df      	b.n	80094b0 <__d2b+0x70>
 80094f0:	0800a3f0 	.word	0x0800a3f0
 80094f4:	0800a4e0 	.word	0x0800a4e0

080094f8 <__ratio>:
 80094f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fc:	4688      	mov	r8, r1
 80094fe:	4669      	mov	r1, sp
 8009500:	4681      	mov	r9, r0
 8009502:	f7ff ff4d 	bl	80093a0 <__b2d>
 8009506:	a901      	add	r1, sp, #4
 8009508:	4640      	mov	r0, r8
 800950a:	ec55 4b10 	vmov	r4, r5, d0
 800950e:	f7ff ff47 	bl	80093a0 <__b2d>
 8009512:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009516:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800951a:	eba3 0c02 	sub.w	ip, r3, r2
 800951e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009528:	ec51 0b10 	vmov	r0, r1, d0
 800952c:	2b00      	cmp	r3, #0
 800952e:	bfd6      	itet	le
 8009530:	460a      	movle	r2, r1
 8009532:	462a      	movgt	r2, r5
 8009534:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009538:	468b      	mov	fp, r1
 800953a:	462f      	mov	r7, r5
 800953c:	bfd4      	ite	le
 800953e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009542:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009546:	4620      	mov	r0, r4
 8009548:	ee10 2a10 	vmov	r2, s0
 800954c:	465b      	mov	r3, fp
 800954e:	4639      	mov	r1, r7
 8009550:	f7f7 f9d4 	bl	80008fc <__aeabi_ddiv>
 8009554:	ec41 0b10 	vmov	d0, r0, r1
 8009558:	b003      	add	sp, #12
 800955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800955e <__copybits>:
 800955e:	3901      	subs	r1, #1
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	1149      	asrs	r1, r1, #5
 8009564:	6914      	ldr	r4, [r2, #16]
 8009566:	3101      	adds	r1, #1
 8009568:	f102 0314 	add.w	r3, r2, #20
 800956c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009570:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009574:	1f05      	subs	r5, r0, #4
 8009576:	42a3      	cmp	r3, r4
 8009578:	d30c      	bcc.n	8009594 <__copybits+0x36>
 800957a:	1aa3      	subs	r3, r4, r2
 800957c:	3b11      	subs	r3, #17
 800957e:	f023 0303 	bic.w	r3, r3, #3
 8009582:	3211      	adds	r2, #17
 8009584:	42a2      	cmp	r2, r4
 8009586:	bf88      	it	hi
 8009588:	2300      	movhi	r3, #0
 800958a:	4418      	add	r0, r3
 800958c:	2300      	movs	r3, #0
 800958e:	4288      	cmp	r0, r1
 8009590:	d305      	bcc.n	800959e <__copybits+0x40>
 8009592:	bd70      	pop	{r4, r5, r6, pc}
 8009594:	f853 6b04 	ldr.w	r6, [r3], #4
 8009598:	f845 6f04 	str.w	r6, [r5, #4]!
 800959c:	e7eb      	b.n	8009576 <__copybits+0x18>
 800959e:	f840 3b04 	str.w	r3, [r0], #4
 80095a2:	e7f4      	b.n	800958e <__copybits+0x30>

080095a4 <__any_on>:
 80095a4:	f100 0214 	add.w	r2, r0, #20
 80095a8:	6900      	ldr	r0, [r0, #16]
 80095aa:	114b      	asrs	r3, r1, #5
 80095ac:	4298      	cmp	r0, r3
 80095ae:	b510      	push	{r4, lr}
 80095b0:	db11      	blt.n	80095d6 <__any_on+0x32>
 80095b2:	dd0a      	ble.n	80095ca <__any_on+0x26>
 80095b4:	f011 011f 	ands.w	r1, r1, #31
 80095b8:	d007      	beq.n	80095ca <__any_on+0x26>
 80095ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80095be:	fa24 f001 	lsr.w	r0, r4, r1
 80095c2:	fa00 f101 	lsl.w	r1, r0, r1
 80095c6:	428c      	cmp	r4, r1
 80095c8:	d10b      	bne.n	80095e2 <__any_on+0x3e>
 80095ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d803      	bhi.n	80095da <__any_on+0x36>
 80095d2:	2000      	movs	r0, #0
 80095d4:	bd10      	pop	{r4, pc}
 80095d6:	4603      	mov	r3, r0
 80095d8:	e7f7      	b.n	80095ca <__any_on+0x26>
 80095da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095de:	2900      	cmp	r1, #0
 80095e0:	d0f5      	beq.n	80095ce <__any_on+0x2a>
 80095e2:	2001      	movs	r0, #1
 80095e4:	e7f6      	b.n	80095d4 <__any_on+0x30>

080095e6 <_calloc_r>:
 80095e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095e8:	fba1 2402 	umull	r2, r4, r1, r2
 80095ec:	b94c      	cbnz	r4, 8009602 <_calloc_r+0x1c>
 80095ee:	4611      	mov	r1, r2
 80095f0:	9201      	str	r2, [sp, #4]
 80095f2:	f000 f87b 	bl	80096ec <_malloc_r>
 80095f6:	9a01      	ldr	r2, [sp, #4]
 80095f8:	4605      	mov	r5, r0
 80095fa:	b930      	cbnz	r0, 800960a <_calloc_r+0x24>
 80095fc:	4628      	mov	r0, r5
 80095fe:	b003      	add	sp, #12
 8009600:	bd30      	pop	{r4, r5, pc}
 8009602:	220c      	movs	r2, #12
 8009604:	6002      	str	r2, [r0, #0]
 8009606:	2500      	movs	r5, #0
 8009608:	e7f8      	b.n	80095fc <_calloc_r+0x16>
 800960a:	4621      	mov	r1, r4
 800960c:	f7fc f87a 	bl	8005704 <memset>
 8009610:	e7f4      	b.n	80095fc <_calloc_r+0x16>
	...

08009614 <_free_r>:
 8009614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009616:	2900      	cmp	r1, #0
 8009618:	d044      	beq.n	80096a4 <_free_r+0x90>
 800961a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800961e:	9001      	str	r0, [sp, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	f1a1 0404 	sub.w	r4, r1, #4
 8009626:	bfb8      	it	lt
 8009628:	18e4      	addlt	r4, r4, r3
 800962a:	f000 fb3b 	bl	8009ca4 <__malloc_lock>
 800962e:	4a1e      	ldr	r2, [pc, #120]	; (80096a8 <_free_r+0x94>)
 8009630:	9801      	ldr	r0, [sp, #4]
 8009632:	6813      	ldr	r3, [r2, #0]
 8009634:	b933      	cbnz	r3, 8009644 <_free_r+0x30>
 8009636:	6063      	str	r3, [r4, #4]
 8009638:	6014      	str	r4, [r2, #0]
 800963a:	b003      	add	sp, #12
 800963c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009640:	f000 bb36 	b.w	8009cb0 <__malloc_unlock>
 8009644:	42a3      	cmp	r3, r4
 8009646:	d908      	bls.n	800965a <_free_r+0x46>
 8009648:	6825      	ldr	r5, [r4, #0]
 800964a:	1961      	adds	r1, r4, r5
 800964c:	428b      	cmp	r3, r1
 800964e:	bf01      	itttt	eq
 8009650:	6819      	ldreq	r1, [r3, #0]
 8009652:	685b      	ldreq	r3, [r3, #4]
 8009654:	1949      	addeq	r1, r1, r5
 8009656:	6021      	streq	r1, [r4, #0]
 8009658:	e7ed      	b.n	8009636 <_free_r+0x22>
 800965a:	461a      	mov	r2, r3
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	b10b      	cbz	r3, 8009664 <_free_r+0x50>
 8009660:	42a3      	cmp	r3, r4
 8009662:	d9fa      	bls.n	800965a <_free_r+0x46>
 8009664:	6811      	ldr	r1, [r2, #0]
 8009666:	1855      	adds	r5, r2, r1
 8009668:	42a5      	cmp	r5, r4
 800966a:	d10b      	bne.n	8009684 <_free_r+0x70>
 800966c:	6824      	ldr	r4, [r4, #0]
 800966e:	4421      	add	r1, r4
 8009670:	1854      	adds	r4, r2, r1
 8009672:	42a3      	cmp	r3, r4
 8009674:	6011      	str	r1, [r2, #0]
 8009676:	d1e0      	bne.n	800963a <_free_r+0x26>
 8009678:	681c      	ldr	r4, [r3, #0]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	6053      	str	r3, [r2, #4]
 800967e:	4421      	add	r1, r4
 8009680:	6011      	str	r1, [r2, #0]
 8009682:	e7da      	b.n	800963a <_free_r+0x26>
 8009684:	d902      	bls.n	800968c <_free_r+0x78>
 8009686:	230c      	movs	r3, #12
 8009688:	6003      	str	r3, [r0, #0]
 800968a:	e7d6      	b.n	800963a <_free_r+0x26>
 800968c:	6825      	ldr	r5, [r4, #0]
 800968e:	1961      	adds	r1, r4, r5
 8009690:	428b      	cmp	r3, r1
 8009692:	bf04      	itt	eq
 8009694:	6819      	ldreq	r1, [r3, #0]
 8009696:	685b      	ldreq	r3, [r3, #4]
 8009698:	6063      	str	r3, [r4, #4]
 800969a:	bf04      	itt	eq
 800969c:	1949      	addeq	r1, r1, r5
 800969e:	6021      	streq	r1, [r4, #0]
 80096a0:	6054      	str	r4, [r2, #4]
 80096a2:	e7ca      	b.n	800963a <_free_r+0x26>
 80096a4:	b003      	add	sp, #12
 80096a6:	bd30      	pop	{r4, r5, pc}
 80096a8:	20014630 	.word	0x20014630

080096ac <sbrk_aligned>:
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	4e0e      	ldr	r6, [pc, #56]	; (80096e8 <sbrk_aligned+0x3c>)
 80096b0:	460c      	mov	r4, r1
 80096b2:	6831      	ldr	r1, [r6, #0]
 80096b4:	4605      	mov	r5, r0
 80096b6:	b911      	cbnz	r1, 80096be <sbrk_aligned+0x12>
 80096b8:	f000 f9f2 	bl	8009aa0 <_sbrk_r>
 80096bc:	6030      	str	r0, [r6, #0]
 80096be:	4621      	mov	r1, r4
 80096c0:	4628      	mov	r0, r5
 80096c2:	f000 f9ed 	bl	8009aa0 <_sbrk_r>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	d00a      	beq.n	80096e0 <sbrk_aligned+0x34>
 80096ca:	1cc4      	adds	r4, r0, #3
 80096cc:	f024 0403 	bic.w	r4, r4, #3
 80096d0:	42a0      	cmp	r0, r4
 80096d2:	d007      	beq.n	80096e4 <sbrk_aligned+0x38>
 80096d4:	1a21      	subs	r1, r4, r0
 80096d6:	4628      	mov	r0, r5
 80096d8:	f000 f9e2 	bl	8009aa0 <_sbrk_r>
 80096dc:	3001      	adds	r0, #1
 80096de:	d101      	bne.n	80096e4 <sbrk_aligned+0x38>
 80096e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80096e4:	4620      	mov	r0, r4
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	20014634 	.word	0x20014634

080096ec <_malloc_r>:
 80096ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f0:	1ccd      	adds	r5, r1, #3
 80096f2:	f025 0503 	bic.w	r5, r5, #3
 80096f6:	3508      	adds	r5, #8
 80096f8:	2d0c      	cmp	r5, #12
 80096fa:	bf38      	it	cc
 80096fc:	250c      	movcc	r5, #12
 80096fe:	2d00      	cmp	r5, #0
 8009700:	4607      	mov	r7, r0
 8009702:	db01      	blt.n	8009708 <_malloc_r+0x1c>
 8009704:	42a9      	cmp	r1, r5
 8009706:	d905      	bls.n	8009714 <_malloc_r+0x28>
 8009708:	230c      	movs	r3, #12
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	2600      	movs	r6, #0
 800970e:	4630      	mov	r0, r6
 8009710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009714:	4e2e      	ldr	r6, [pc, #184]	; (80097d0 <_malloc_r+0xe4>)
 8009716:	f000 fac5 	bl	8009ca4 <__malloc_lock>
 800971a:	6833      	ldr	r3, [r6, #0]
 800971c:	461c      	mov	r4, r3
 800971e:	bb34      	cbnz	r4, 800976e <_malloc_r+0x82>
 8009720:	4629      	mov	r1, r5
 8009722:	4638      	mov	r0, r7
 8009724:	f7ff ffc2 	bl	80096ac <sbrk_aligned>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	4604      	mov	r4, r0
 800972c:	d14d      	bne.n	80097ca <_malloc_r+0xde>
 800972e:	6834      	ldr	r4, [r6, #0]
 8009730:	4626      	mov	r6, r4
 8009732:	2e00      	cmp	r6, #0
 8009734:	d140      	bne.n	80097b8 <_malloc_r+0xcc>
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	4631      	mov	r1, r6
 800973a:	4638      	mov	r0, r7
 800973c:	eb04 0803 	add.w	r8, r4, r3
 8009740:	f000 f9ae 	bl	8009aa0 <_sbrk_r>
 8009744:	4580      	cmp	r8, r0
 8009746:	d13a      	bne.n	80097be <_malloc_r+0xd2>
 8009748:	6821      	ldr	r1, [r4, #0]
 800974a:	3503      	adds	r5, #3
 800974c:	1a6d      	subs	r5, r5, r1
 800974e:	f025 0503 	bic.w	r5, r5, #3
 8009752:	3508      	adds	r5, #8
 8009754:	2d0c      	cmp	r5, #12
 8009756:	bf38      	it	cc
 8009758:	250c      	movcc	r5, #12
 800975a:	4629      	mov	r1, r5
 800975c:	4638      	mov	r0, r7
 800975e:	f7ff ffa5 	bl	80096ac <sbrk_aligned>
 8009762:	3001      	adds	r0, #1
 8009764:	d02b      	beq.n	80097be <_malloc_r+0xd2>
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	442b      	add	r3, r5
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	e00e      	b.n	800978c <_malloc_r+0xa0>
 800976e:	6822      	ldr	r2, [r4, #0]
 8009770:	1b52      	subs	r2, r2, r5
 8009772:	d41e      	bmi.n	80097b2 <_malloc_r+0xc6>
 8009774:	2a0b      	cmp	r2, #11
 8009776:	d916      	bls.n	80097a6 <_malloc_r+0xba>
 8009778:	1961      	adds	r1, r4, r5
 800977a:	42a3      	cmp	r3, r4
 800977c:	6025      	str	r5, [r4, #0]
 800977e:	bf18      	it	ne
 8009780:	6059      	strne	r1, [r3, #4]
 8009782:	6863      	ldr	r3, [r4, #4]
 8009784:	bf08      	it	eq
 8009786:	6031      	streq	r1, [r6, #0]
 8009788:	5162      	str	r2, [r4, r5]
 800978a:	604b      	str	r3, [r1, #4]
 800978c:	4638      	mov	r0, r7
 800978e:	f104 060b 	add.w	r6, r4, #11
 8009792:	f000 fa8d 	bl	8009cb0 <__malloc_unlock>
 8009796:	f026 0607 	bic.w	r6, r6, #7
 800979a:	1d23      	adds	r3, r4, #4
 800979c:	1af2      	subs	r2, r6, r3
 800979e:	d0b6      	beq.n	800970e <_malloc_r+0x22>
 80097a0:	1b9b      	subs	r3, r3, r6
 80097a2:	50a3      	str	r3, [r4, r2]
 80097a4:	e7b3      	b.n	800970e <_malloc_r+0x22>
 80097a6:	6862      	ldr	r2, [r4, #4]
 80097a8:	42a3      	cmp	r3, r4
 80097aa:	bf0c      	ite	eq
 80097ac:	6032      	streq	r2, [r6, #0]
 80097ae:	605a      	strne	r2, [r3, #4]
 80097b0:	e7ec      	b.n	800978c <_malloc_r+0xa0>
 80097b2:	4623      	mov	r3, r4
 80097b4:	6864      	ldr	r4, [r4, #4]
 80097b6:	e7b2      	b.n	800971e <_malloc_r+0x32>
 80097b8:	4634      	mov	r4, r6
 80097ba:	6876      	ldr	r6, [r6, #4]
 80097bc:	e7b9      	b.n	8009732 <_malloc_r+0x46>
 80097be:	230c      	movs	r3, #12
 80097c0:	603b      	str	r3, [r7, #0]
 80097c2:	4638      	mov	r0, r7
 80097c4:	f000 fa74 	bl	8009cb0 <__malloc_unlock>
 80097c8:	e7a1      	b.n	800970e <_malloc_r+0x22>
 80097ca:	6025      	str	r5, [r4, #0]
 80097cc:	e7de      	b.n	800978c <_malloc_r+0xa0>
 80097ce:	bf00      	nop
 80097d0:	20014630 	.word	0x20014630

080097d4 <__ssputs_r>:
 80097d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d8:	688e      	ldr	r6, [r1, #8]
 80097da:	429e      	cmp	r6, r3
 80097dc:	4682      	mov	sl, r0
 80097de:	460c      	mov	r4, r1
 80097e0:	4690      	mov	r8, r2
 80097e2:	461f      	mov	r7, r3
 80097e4:	d838      	bhi.n	8009858 <__ssputs_r+0x84>
 80097e6:	898a      	ldrh	r2, [r1, #12]
 80097e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097ec:	d032      	beq.n	8009854 <__ssputs_r+0x80>
 80097ee:	6825      	ldr	r5, [r4, #0]
 80097f0:	6909      	ldr	r1, [r1, #16]
 80097f2:	eba5 0901 	sub.w	r9, r5, r1
 80097f6:	6965      	ldr	r5, [r4, #20]
 80097f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009800:	3301      	adds	r3, #1
 8009802:	444b      	add	r3, r9
 8009804:	106d      	asrs	r5, r5, #1
 8009806:	429d      	cmp	r5, r3
 8009808:	bf38      	it	cc
 800980a:	461d      	movcc	r5, r3
 800980c:	0553      	lsls	r3, r2, #21
 800980e:	d531      	bpl.n	8009874 <__ssputs_r+0xa0>
 8009810:	4629      	mov	r1, r5
 8009812:	f7ff ff6b 	bl	80096ec <_malloc_r>
 8009816:	4606      	mov	r6, r0
 8009818:	b950      	cbnz	r0, 8009830 <__ssputs_r+0x5c>
 800981a:	230c      	movs	r3, #12
 800981c:	f8ca 3000 	str.w	r3, [sl]
 8009820:	89a3      	ldrh	r3, [r4, #12]
 8009822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800982c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009830:	6921      	ldr	r1, [r4, #16]
 8009832:	464a      	mov	r2, r9
 8009834:	f7fb ff58 	bl	80056e8 <memcpy>
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800983e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	6126      	str	r6, [r4, #16]
 8009846:	6165      	str	r5, [r4, #20]
 8009848:	444e      	add	r6, r9
 800984a:	eba5 0509 	sub.w	r5, r5, r9
 800984e:	6026      	str	r6, [r4, #0]
 8009850:	60a5      	str	r5, [r4, #8]
 8009852:	463e      	mov	r6, r7
 8009854:	42be      	cmp	r6, r7
 8009856:	d900      	bls.n	800985a <__ssputs_r+0x86>
 8009858:	463e      	mov	r6, r7
 800985a:	6820      	ldr	r0, [r4, #0]
 800985c:	4632      	mov	r2, r6
 800985e:	4641      	mov	r1, r8
 8009860:	f000 fa06 	bl	8009c70 <memmove>
 8009864:	68a3      	ldr	r3, [r4, #8]
 8009866:	1b9b      	subs	r3, r3, r6
 8009868:	60a3      	str	r3, [r4, #8]
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	4433      	add	r3, r6
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	2000      	movs	r0, #0
 8009872:	e7db      	b.n	800982c <__ssputs_r+0x58>
 8009874:	462a      	mov	r2, r5
 8009876:	f000 fa21 	bl	8009cbc <_realloc_r>
 800987a:	4606      	mov	r6, r0
 800987c:	2800      	cmp	r0, #0
 800987e:	d1e1      	bne.n	8009844 <__ssputs_r+0x70>
 8009880:	6921      	ldr	r1, [r4, #16]
 8009882:	4650      	mov	r0, sl
 8009884:	f7ff fec6 	bl	8009614 <_free_r>
 8009888:	e7c7      	b.n	800981a <__ssputs_r+0x46>
	...

0800988c <_svfiprintf_r>:
 800988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009890:	4698      	mov	r8, r3
 8009892:	898b      	ldrh	r3, [r1, #12]
 8009894:	061b      	lsls	r3, r3, #24
 8009896:	b09d      	sub	sp, #116	; 0x74
 8009898:	4607      	mov	r7, r0
 800989a:	460d      	mov	r5, r1
 800989c:	4614      	mov	r4, r2
 800989e:	d50e      	bpl.n	80098be <_svfiprintf_r+0x32>
 80098a0:	690b      	ldr	r3, [r1, #16]
 80098a2:	b963      	cbnz	r3, 80098be <_svfiprintf_r+0x32>
 80098a4:	2140      	movs	r1, #64	; 0x40
 80098a6:	f7ff ff21 	bl	80096ec <_malloc_r>
 80098aa:	6028      	str	r0, [r5, #0]
 80098ac:	6128      	str	r0, [r5, #16]
 80098ae:	b920      	cbnz	r0, 80098ba <_svfiprintf_r+0x2e>
 80098b0:	230c      	movs	r3, #12
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098b8:	e0d1      	b.n	8009a5e <_svfiprintf_r+0x1d2>
 80098ba:	2340      	movs	r3, #64	; 0x40
 80098bc:	616b      	str	r3, [r5, #20]
 80098be:	2300      	movs	r3, #0
 80098c0:	9309      	str	r3, [sp, #36]	; 0x24
 80098c2:	2320      	movs	r3, #32
 80098c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80098cc:	2330      	movs	r3, #48	; 0x30
 80098ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a78 <_svfiprintf_r+0x1ec>
 80098d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098d6:	f04f 0901 	mov.w	r9, #1
 80098da:	4623      	mov	r3, r4
 80098dc:	469a      	mov	sl, r3
 80098de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098e2:	b10a      	cbz	r2, 80098e8 <_svfiprintf_r+0x5c>
 80098e4:	2a25      	cmp	r2, #37	; 0x25
 80098e6:	d1f9      	bne.n	80098dc <_svfiprintf_r+0x50>
 80098e8:	ebba 0b04 	subs.w	fp, sl, r4
 80098ec:	d00b      	beq.n	8009906 <_svfiprintf_r+0x7a>
 80098ee:	465b      	mov	r3, fp
 80098f0:	4622      	mov	r2, r4
 80098f2:	4629      	mov	r1, r5
 80098f4:	4638      	mov	r0, r7
 80098f6:	f7ff ff6d 	bl	80097d4 <__ssputs_r>
 80098fa:	3001      	adds	r0, #1
 80098fc:	f000 80aa 	beq.w	8009a54 <_svfiprintf_r+0x1c8>
 8009900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009902:	445a      	add	r2, fp
 8009904:	9209      	str	r2, [sp, #36]	; 0x24
 8009906:	f89a 3000 	ldrb.w	r3, [sl]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 80a2 	beq.w	8009a54 <_svfiprintf_r+0x1c8>
 8009910:	2300      	movs	r3, #0
 8009912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800991a:	f10a 0a01 	add.w	sl, sl, #1
 800991e:	9304      	str	r3, [sp, #16]
 8009920:	9307      	str	r3, [sp, #28]
 8009922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009926:	931a      	str	r3, [sp, #104]	; 0x68
 8009928:	4654      	mov	r4, sl
 800992a:	2205      	movs	r2, #5
 800992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009930:	4851      	ldr	r0, [pc, #324]	; (8009a78 <_svfiprintf_r+0x1ec>)
 8009932:	f7f6 fcad 	bl	8000290 <memchr>
 8009936:	9a04      	ldr	r2, [sp, #16]
 8009938:	b9d8      	cbnz	r0, 8009972 <_svfiprintf_r+0xe6>
 800993a:	06d0      	lsls	r0, r2, #27
 800993c:	bf44      	itt	mi
 800993e:	2320      	movmi	r3, #32
 8009940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009944:	0711      	lsls	r1, r2, #28
 8009946:	bf44      	itt	mi
 8009948:	232b      	movmi	r3, #43	; 0x2b
 800994a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800994e:	f89a 3000 	ldrb.w	r3, [sl]
 8009952:	2b2a      	cmp	r3, #42	; 0x2a
 8009954:	d015      	beq.n	8009982 <_svfiprintf_r+0xf6>
 8009956:	9a07      	ldr	r2, [sp, #28]
 8009958:	4654      	mov	r4, sl
 800995a:	2000      	movs	r0, #0
 800995c:	f04f 0c0a 	mov.w	ip, #10
 8009960:	4621      	mov	r1, r4
 8009962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009966:	3b30      	subs	r3, #48	; 0x30
 8009968:	2b09      	cmp	r3, #9
 800996a:	d94e      	bls.n	8009a0a <_svfiprintf_r+0x17e>
 800996c:	b1b0      	cbz	r0, 800999c <_svfiprintf_r+0x110>
 800996e:	9207      	str	r2, [sp, #28]
 8009970:	e014      	b.n	800999c <_svfiprintf_r+0x110>
 8009972:	eba0 0308 	sub.w	r3, r0, r8
 8009976:	fa09 f303 	lsl.w	r3, r9, r3
 800997a:	4313      	orrs	r3, r2
 800997c:	9304      	str	r3, [sp, #16]
 800997e:	46a2      	mov	sl, r4
 8009980:	e7d2      	b.n	8009928 <_svfiprintf_r+0x9c>
 8009982:	9b03      	ldr	r3, [sp, #12]
 8009984:	1d19      	adds	r1, r3, #4
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	9103      	str	r1, [sp, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	bfbb      	ittet	lt
 800998e:	425b      	neglt	r3, r3
 8009990:	f042 0202 	orrlt.w	r2, r2, #2
 8009994:	9307      	strge	r3, [sp, #28]
 8009996:	9307      	strlt	r3, [sp, #28]
 8009998:	bfb8      	it	lt
 800999a:	9204      	strlt	r2, [sp, #16]
 800999c:	7823      	ldrb	r3, [r4, #0]
 800999e:	2b2e      	cmp	r3, #46	; 0x2e
 80099a0:	d10c      	bne.n	80099bc <_svfiprintf_r+0x130>
 80099a2:	7863      	ldrb	r3, [r4, #1]
 80099a4:	2b2a      	cmp	r3, #42	; 0x2a
 80099a6:	d135      	bne.n	8009a14 <_svfiprintf_r+0x188>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	1d1a      	adds	r2, r3, #4
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	9203      	str	r2, [sp, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	bfb8      	it	lt
 80099b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80099b8:	3402      	adds	r4, #2
 80099ba:	9305      	str	r3, [sp, #20]
 80099bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a88 <_svfiprintf_r+0x1fc>
 80099c0:	7821      	ldrb	r1, [r4, #0]
 80099c2:	2203      	movs	r2, #3
 80099c4:	4650      	mov	r0, sl
 80099c6:	f7f6 fc63 	bl	8000290 <memchr>
 80099ca:	b140      	cbz	r0, 80099de <_svfiprintf_r+0x152>
 80099cc:	2340      	movs	r3, #64	; 0x40
 80099ce:	eba0 000a 	sub.w	r0, r0, sl
 80099d2:	fa03 f000 	lsl.w	r0, r3, r0
 80099d6:	9b04      	ldr	r3, [sp, #16]
 80099d8:	4303      	orrs	r3, r0
 80099da:	3401      	adds	r4, #1
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e2:	4826      	ldr	r0, [pc, #152]	; (8009a7c <_svfiprintf_r+0x1f0>)
 80099e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099e8:	2206      	movs	r2, #6
 80099ea:	f7f6 fc51 	bl	8000290 <memchr>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d038      	beq.n	8009a64 <_svfiprintf_r+0x1d8>
 80099f2:	4b23      	ldr	r3, [pc, #140]	; (8009a80 <_svfiprintf_r+0x1f4>)
 80099f4:	bb1b      	cbnz	r3, 8009a3e <_svfiprintf_r+0x1b2>
 80099f6:	9b03      	ldr	r3, [sp, #12]
 80099f8:	3307      	adds	r3, #7
 80099fa:	f023 0307 	bic.w	r3, r3, #7
 80099fe:	3308      	adds	r3, #8
 8009a00:	9303      	str	r3, [sp, #12]
 8009a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a04:	4433      	add	r3, r6
 8009a06:	9309      	str	r3, [sp, #36]	; 0x24
 8009a08:	e767      	b.n	80098da <_svfiprintf_r+0x4e>
 8009a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a0e:	460c      	mov	r4, r1
 8009a10:	2001      	movs	r0, #1
 8009a12:	e7a5      	b.n	8009960 <_svfiprintf_r+0xd4>
 8009a14:	2300      	movs	r3, #0
 8009a16:	3401      	adds	r4, #1
 8009a18:	9305      	str	r3, [sp, #20]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	f04f 0c0a 	mov.w	ip, #10
 8009a20:	4620      	mov	r0, r4
 8009a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a26:	3a30      	subs	r2, #48	; 0x30
 8009a28:	2a09      	cmp	r2, #9
 8009a2a:	d903      	bls.n	8009a34 <_svfiprintf_r+0x1a8>
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0c5      	beq.n	80099bc <_svfiprintf_r+0x130>
 8009a30:	9105      	str	r1, [sp, #20]
 8009a32:	e7c3      	b.n	80099bc <_svfiprintf_r+0x130>
 8009a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a38:	4604      	mov	r4, r0
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e7f0      	b.n	8009a20 <_svfiprintf_r+0x194>
 8009a3e:	ab03      	add	r3, sp, #12
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	462a      	mov	r2, r5
 8009a44:	4b0f      	ldr	r3, [pc, #60]	; (8009a84 <_svfiprintf_r+0x1f8>)
 8009a46:	a904      	add	r1, sp, #16
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f7fb ff03 	bl	8005854 <_printf_float>
 8009a4e:	1c42      	adds	r2, r0, #1
 8009a50:	4606      	mov	r6, r0
 8009a52:	d1d6      	bne.n	8009a02 <_svfiprintf_r+0x176>
 8009a54:	89ab      	ldrh	r3, [r5, #12]
 8009a56:	065b      	lsls	r3, r3, #25
 8009a58:	f53f af2c 	bmi.w	80098b4 <_svfiprintf_r+0x28>
 8009a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a5e:	b01d      	add	sp, #116	; 0x74
 8009a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	ab03      	add	r3, sp, #12
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	462a      	mov	r2, r5
 8009a6a:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <_svfiprintf_r+0x1f8>)
 8009a6c:	a904      	add	r1, sp, #16
 8009a6e:	4638      	mov	r0, r7
 8009a70:	f7fc f994 	bl	8005d9c <_printf_i>
 8009a74:	e7eb      	b.n	8009a4e <_svfiprintf_r+0x1c2>
 8009a76:	bf00      	nop
 8009a78:	0800a63c 	.word	0x0800a63c
 8009a7c:	0800a646 	.word	0x0800a646
 8009a80:	08005855 	.word	0x08005855
 8009a84:	080097d5 	.word	0x080097d5
 8009a88:	0800a642 	.word	0x0800a642
 8009a8c:	00000000 	.word	0x00000000

08009a90 <nan>:
 8009a90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a98 <nan+0x8>
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	00000000 	.word	0x00000000
 8009a9c:	7ff80000 	.word	0x7ff80000

08009aa0 <_sbrk_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d06      	ldr	r5, [pc, #24]	; (8009abc <_sbrk_r+0x1c>)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	f7f7 fa7a 	bl	8000fa4 <_sbrk>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_sbrk_r+0x1a>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_sbrk_r+0x1a>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	20014638 	.word	0x20014638

08009ac0 <__sread>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac8:	f000 fa80 	bl	8009fcc <_read_r>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	bfab      	itete	ge
 8009ad0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ad4:	181b      	addge	r3, r3, r0
 8009ad6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ada:	bfac      	ite	ge
 8009adc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ade:	81a3      	strhlt	r3, [r4, #12]
 8009ae0:	bd10      	pop	{r4, pc}

08009ae2 <__swrite>:
 8009ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae6:	461f      	mov	r7, r3
 8009ae8:	898b      	ldrh	r3, [r1, #12]
 8009aea:	05db      	lsls	r3, r3, #23
 8009aec:	4605      	mov	r5, r0
 8009aee:	460c      	mov	r4, r1
 8009af0:	4616      	mov	r6, r2
 8009af2:	d505      	bpl.n	8009b00 <__swrite+0x1e>
 8009af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af8:	2302      	movs	r3, #2
 8009afa:	2200      	movs	r2, #0
 8009afc:	f000 f8a6 	bl	8009c4c <_lseek_r>
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	463b      	mov	r3, r7
 8009b10:	4628      	mov	r0, r5
 8009b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b16:	f7fb bc9f 	b.w	8005458 <_write_r>

08009b1a <__sseek>:
 8009b1a:	b510      	push	{r4, lr}
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b22:	f000 f893 	bl	8009c4c <_lseek_r>
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	bf15      	itete	ne
 8009b2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b36:	81a3      	strheq	r3, [r4, #12]
 8009b38:	bf18      	it	ne
 8009b3a:	81a3      	strhne	r3, [r4, #12]
 8009b3c:	bd10      	pop	{r4, pc}

08009b3e <__sclose>:
 8009b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b42:	f000 b83f 	b.w	8009bc4 <_close_r>

08009b46 <strncmp>:
 8009b46:	b510      	push	{r4, lr}
 8009b48:	b17a      	cbz	r2, 8009b6a <strncmp+0x24>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	3901      	subs	r1, #1
 8009b4e:	1884      	adds	r4, r0, r2
 8009b50:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b58:	4290      	cmp	r0, r2
 8009b5a:	d101      	bne.n	8009b60 <strncmp+0x1a>
 8009b5c:	42a3      	cmp	r3, r4
 8009b5e:	d101      	bne.n	8009b64 <strncmp+0x1e>
 8009b60:	1a80      	subs	r0, r0, r2
 8009b62:	bd10      	pop	{r4, pc}
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d1f3      	bne.n	8009b50 <strncmp+0xa>
 8009b68:	e7fa      	b.n	8009b60 <strncmp+0x1a>
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	e7f9      	b.n	8009b62 <strncmp+0x1c>

08009b6e <__ascii_wctomb>:
 8009b6e:	b149      	cbz	r1, 8009b84 <__ascii_wctomb+0x16>
 8009b70:	2aff      	cmp	r2, #255	; 0xff
 8009b72:	bf85      	ittet	hi
 8009b74:	238a      	movhi	r3, #138	; 0x8a
 8009b76:	6003      	strhi	r3, [r0, #0]
 8009b78:	700a      	strbls	r2, [r1, #0]
 8009b7a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009b7e:	bf98      	it	ls
 8009b80:	2001      	movls	r0, #1
 8009b82:	4770      	bx	lr
 8009b84:	4608      	mov	r0, r1
 8009b86:	4770      	bx	lr

08009b88 <__assert_func>:
 8009b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b8a:	4614      	mov	r4, r2
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <__assert_func+0x2c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4605      	mov	r5, r0
 8009b94:	68d8      	ldr	r0, [r3, #12]
 8009b96:	b14c      	cbz	r4, 8009bac <__assert_func+0x24>
 8009b98:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <__assert_func+0x30>)
 8009b9a:	9100      	str	r1, [sp, #0]
 8009b9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ba0:	4906      	ldr	r1, [pc, #24]	; (8009bbc <__assert_func+0x34>)
 8009ba2:	462b      	mov	r3, r5
 8009ba4:	f000 f81e 	bl	8009be4 <fiprintf>
 8009ba8:	f000 fa22 	bl	8009ff0 <abort>
 8009bac:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <__assert_func+0x38>)
 8009bae:	461c      	mov	r4, r3
 8009bb0:	e7f3      	b.n	8009b9a <__assert_func+0x12>
 8009bb2:	bf00      	nop
 8009bb4:	20000014 	.word	0x20000014
 8009bb8:	0800a64d 	.word	0x0800a64d
 8009bbc:	0800a65a 	.word	0x0800a65a
 8009bc0:	0800a688 	.word	0x0800a688

08009bc4 <_close_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4d06      	ldr	r5, [pc, #24]	; (8009be0 <_close_r+0x1c>)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4604      	mov	r4, r0
 8009bcc:	4608      	mov	r0, r1
 8009bce:	602b      	str	r3, [r5, #0]
 8009bd0:	f7f7 f9b3 	bl	8000f3a <_close>
 8009bd4:	1c43      	adds	r3, r0, #1
 8009bd6:	d102      	bne.n	8009bde <_close_r+0x1a>
 8009bd8:	682b      	ldr	r3, [r5, #0]
 8009bda:	b103      	cbz	r3, 8009bde <_close_r+0x1a>
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	20014638 	.word	0x20014638

08009be4 <fiprintf>:
 8009be4:	b40e      	push	{r1, r2, r3}
 8009be6:	b503      	push	{r0, r1, lr}
 8009be8:	4601      	mov	r1, r0
 8009bea:	ab03      	add	r3, sp, #12
 8009bec:	4805      	ldr	r0, [pc, #20]	; (8009c04 <fiprintf+0x20>)
 8009bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bf2:	6800      	ldr	r0, [r0, #0]
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	f000 f8b9 	bl	8009d6c <_vfiprintf_r>
 8009bfa:	b002      	add	sp, #8
 8009bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c00:	b003      	add	sp, #12
 8009c02:	4770      	bx	lr
 8009c04:	20000014 	.word	0x20000014

08009c08 <_fstat_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d07      	ldr	r5, [pc, #28]	; (8009c28 <_fstat_r+0x20>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4604      	mov	r4, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	4611      	mov	r1, r2
 8009c14:	602b      	str	r3, [r5, #0]
 8009c16:	f7f7 f99c 	bl	8000f52 <_fstat>
 8009c1a:	1c43      	adds	r3, r0, #1
 8009c1c:	d102      	bne.n	8009c24 <_fstat_r+0x1c>
 8009c1e:	682b      	ldr	r3, [r5, #0]
 8009c20:	b103      	cbz	r3, 8009c24 <_fstat_r+0x1c>
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	bd38      	pop	{r3, r4, r5, pc}
 8009c26:	bf00      	nop
 8009c28:	20014638 	.word	0x20014638

08009c2c <_isatty_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d06      	ldr	r5, [pc, #24]	; (8009c48 <_isatty_r+0x1c>)
 8009c30:	2300      	movs	r3, #0
 8009c32:	4604      	mov	r4, r0
 8009c34:	4608      	mov	r0, r1
 8009c36:	602b      	str	r3, [r5, #0]
 8009c38:	f7f7 f99b 	bl	8000f72 <_isatty>
 8009c3c:	1c43      	adds	r3, r0, #1
 8009c3e:	d102      	bne.n	8009c46 <_isatty_r+0x1a>
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	b103      	cbz	r3, 8009c46 <_isatty_r+0x1a>
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	bd38      	pop	{r3, r4, r5, pc}
 8009c48:	20014638 	.word	0x20014638

08009c4c <_lseek_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	4d07      	ldr	r5, [pc, #28]	; (8009c6c <_lseek_r+0x20>)
 8009c50:	4604      	mov	r4, r0
 8009c52:	4608      	mov	r0, r1
 8009c54:	4611      	mov	r1, r2
 8009c56:	2200      	movs	r2, #0
 8009c58:	602a      	str	r2, [r5, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f7f7 f994 	bl	8000f88 <_lseek>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d102      	bne.n	8009c6a <_lseek_r+0x1e>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	b103      	cbz	r3, 8009c6a <_lseek_r+0x1e>
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	20014638 	.word	0x20014638

08009c70 <memmove>:
 8009c70:	4288      	cmp	r0, r1
 8009c72:	b510      	push	{r4, lr}
 8009c74:	eb01 0402 	add.w	r4, r1, r2
 8009c78:	d902      	bls.n	8009c80 <memmove+0x10>
 8009c7a:	4284      	cmp	r4, r0
 8009c7c:	4623      	mov	r3, r4
 8009c7e:	d807      	bhi.n	8009c90 <memmove+0x20>
 8009c80:	1e43      	subs	r3, r0, #1
 8009c82:	42a1      	cmp	r1, r4
 8009c84:	d008      	beq.n	8009c98 <memmove+0x28>
 8009c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c8e:	e7f8      	b.n	8009c82 <memmove+0x12>
 8009c90:	4402      	add	r2, r0
 8009c92:	4601      	mov	r1, r0
 8009c94:	428a      	cmp	r2, r1
 8009c96:	d100      	bne.n	8009c9a <memmove+0x2a>
 8009c98:	bd10      	pop	{r4, pc}
 8009c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ca2:	e7f7      	b.n	8009c94 <memmove+0x24>

08009ca4 <__malloc_lock>:
 8009ca4:	4801      	ldr	r0, [pc, #4]	; (8009cac <__malloc_lock+0x8>)
 8009ca6:	f7fe bf5c 	b.w	8008b62 <__retarget_lock_acquire_recursive>
 8009caa:	bf00      	nop
 8009cac:	2001462b 	.word	0x2001462b

08009cb0 <__malloc_unlock>:
 8009cb0:	4801      	ldr	r0, [pc, #4]	; (8009cb8 <__malloc_unlock+0x8>)
 8009cb2:	f7fe bf57 	b.w	8008b64 <__retarget_lock_release_recursive>
 8009cb6:	bf00      	nop
 8009cb8:	2001462b 	.word	0x2001462b

08009cbc <_realloc_r>:
 8009cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	4614      	mov	r4, r2
 8009cc4:	460e      	mov	r6, r1
 8009cc6:	b921      	cbnz	r1, 8009cd2 <_realloc_r+0x16>
 8009cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ccc:	4611      	mov	r1, r2
 8009cce:	f7ff bd0d 	b.w	80096ec <_malloc_r>
 8009cd2:	b92a      	cbnz	r2, 8009ce0 <_realloc_r+0x24>
 8009cd4:	f7ff fc9e 	bl	8009614 <_free_r>
 8009cd8:	4625      	mov	r5, r4
 8009cda:	4628      	mov	r0, r5
 8009cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce0:	f000 f98d 	bl	8009ffe <_malloc_usable_size_r>
 8009ce4:	4284      	cmp	r4, r0
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	d802      	bhi.n	8009cf0 <_realloc_r+0x34>
 8009cea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009cee:	d812      	bhi.n	8009d16 <_realloc_r+0x5a>
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	f7ff fcfa 	bl	80096ec <_malloc_r>
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d0ed      	beq.n	8009cda <_realloc_r+0x1e>
 8009cfe:	42bc      	cmp	r4, r7
 8009d00:	4622      	mov	r2, r4
 8009d02:	4631      	mov	r1, r6
 8009d04:	bf28      	it	cs
 8009d06:	463a      	movcs	r2, r7
 8009d08:	f7fb fcee 	bl	80056e8 <memcpy>
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4640      	mov	r0, r8
 8009d10:	f7ff fc80 	bl	8009614 <_free_r>
 8009d14:	e7e1      	b.n	8009cda <_realloc_r+0x1e>
 8009d16:	4635      	mov	r5, r6
 8009d18:	e7df      	b.n	8009cda <_realloc_r+0x1e>

08009d1a <__sfputc_r>:
 8009d1a:	6893      	ldr	r3, [r2, #8]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	b410      	push	{r4}
 8009d22:	6093      	str	r3, [r2, #8]
 8009d24:	da08      	bge.n	8009d38 <__sfputc_r+0x1e>
 8009d26:	6994      	ldr	r4, [r2, #24]
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	db01      	blt.n	8009d30 <__sfputc_r+0x16>
 8009d2c:	290a      	cmp	r1, #10
 8009d2e:	d103      	bne.n	8009d38 <__sfputc_r+0x1e>
 8009d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d34:	f7fd bab0 	b.w	8007298 <__swbuf_r>
 8009d38:	6813      	ldr	r3, [r2, #0]
 8009d3a:	1c58      	adds	r0, r3, #1
 8009d3c:	6010      	str	r0, [r2, #0]
 8009d3e:	7019      	strb	r1, [r3, #0]
 8009d40:	4608      	mov	r0, r1
 8009d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <__sfputs_r>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	460f      	mov	r7, r1
 8009d4e:	4614      	mov	r4, r2
 8009d50:	18d5      	adds	r5, r2, r3
 8009d52:	42ac      	cmp	r4, r5
 8009d54:	d101      	bne.n	8009d5a <__sfputs_r+0x12>
 8009d56:	2000      	movs	r0, #0
 8009d58:	e007      	b.n	8009d6a <__sfputs_r+0x22>
 8009d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d5e:	463a      	mov	r2, r7
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7ff ffda 	bl	8009d1a <__sfputc_r>
 8009d66:	1c43      	adds	r3, r0, #1
 8009d68:	d1f3      	bne.n	8009d52 <__sfputs_r+0xa>
 8009d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d6c <_vfiprintf_r>:
 8009d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d70:	460d      	mov	r5, r1
 8009d72:	b09d      	sub	sp, #116	; 0x74
 8009d74:	4614      	mov	r4, r2
 8009d76:	4698      	mov	r8, r3
 8009d78:	4606      	mov	r6, r0
 8009d7a:	b118      	cbz	r0, 8009d84 <_vfiprintf_r+0x18>
 8009d7c:	6983      	ldr	r3, [r0, #24]
 8009d7e:	b90b      	cbnz	r3, 8009d84 <_vfiprintf_r+0x18>
 8009d80:	f7fe fade 	bl	8008340 <__sinit>
 8009d84:	4b89      	ldr	r3, [pc, #548]	; (8009fac <_vfiprintf_r+0x240>)
 8009d86:	429d      	cmp	r5, r3
 8009d88:	d11b      	bne.n	8009dc2 <_vfiprintf_r+0x56>
 8009d8a:	6875      	ldr	r5, [r6, #4]
 8009d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d8e:	07d9      	lsls	r1, r3, #31
 8009d90:	d405      	bmi.n	8009d9e <_vfiprintf_r+0x32>
 8009d92:	89ab      	ldrh	r3, [r5, #12]
 8009d94:	059a      	lsls	r2, r3, #22
 8009d96:	d402      	bmi.n	8009d9e <_vfiprintf_r+0x32>
 8009d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d9a:	f7fe fee2 	bl	8008b62 <__retarget_lock_acquire_recursive>
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	071b      	lsls	r3, r3, #28
 8009da2:	d501      	bpl.n	8009da8 <_vfiprintf_r+0x3c>
 8009da4:	692b      	ldr	r3, [r5, #16]
 8009da6:	b9eb      	cbnz	r3, 8009de4 <_vfiprintf_r+0x78>
 8009da8:	4629      	mov	r1, r5
 8009daa:	4630      	mov	r0, r6
 8009dac:	f7fd fac6 	bl	800733c <__swsetup_r>
 8009db0:	b1c0      	cbz	r0, 8009de4 <_vfiprintf_r+0x78>
 8009db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009db4:	07dc      	lsls	r4, r3, #31
 8009db6:	d50e      	bpl.n	8009dd6 <_vfiprintf_r+0x6a>
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dbc:	b01d      	add	sp, #116	; 0x74
 8009dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc2:	4b7b      	ldr	r3, [pc, #492]	; (8009fb0 <_vfiprintf_r+0x244>)
 8009dc4:	429d      	cmp	r5, r3
 8009dc6:	d101      	bne.n	8009dcc <_vfiprintf_r+0x60>
 8009dc8:	68b5      	ldr	r5, [r6, #8]
 8009dca:	e7df      	b.n	8009d8c <_vfiprintf_r+0x20>
 8009dcc:	4b79      	ldr	r3, [pc, #484]	; (8009fb4 <_vfiprintf_r+0x248>)
 8009dce:	429d      	cmp	r5, r3
 8009dd0:	bf08      	it	eq
 8009dd2:	68f5      	ldreq	r5, [r6, #12]
 8009dd4:	e7da      	b.n	8009d8c <_vfiprintf_r+0x20>
 8009dd6:	89ab      	ldrh	r3, [r5, #12]
 8009dd8:	0598      	lsls	r0, r3, #22
 8009dda:	d4ed      	bmi.n	8009db8 <_vfiprintf_r+0x4c>
 8009ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dde:	f7fe fec1 	bl	8008b64 <__retarget_lock_release_recursive>
 8009de2:	e7e9      	b.n	8009db8 <_vfiprintf_r+0x4c>
 8009de4:	2300      	movs	r3, #0
 8009de6:	9309      	str	r3, [sp, #36]	; 0x24
 8009de8:	2320      	movs	r3, #32
 8009dea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8009df2:	2330      	movs	r3, #48	; 0x30
 8009df4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009fb8 <_vfiprintf_r+0x24c>
 8009df8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dfc:	f04f 0901 	mov.w	r9, #1
 8009e00:	4623      	mov	r3, r4
 8009e02:	469a      	mov	sl, r3
 8009e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e08:	b10a      	cbz	r2, 8009e0e <_vfiprintf_r+0xa2>
 8009e0a:	2a25      	cmp	r2, #37	; 0x25
 8009e0c:	d1f9      	bne.n	8009e02 <_vfiprintf_r+0x96>
 8009e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8009e12:	d00b      	beq.n	8009e2c <_vfiprintf_r+0xc0>
 8009e14:	465b      	mov	r3, fp
 8009e16:	4622      	mov	r2, r4
 8009e18:	4629      	mov	r1, r5
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f7ff ff94 	bl	8009d48 <__sfputs_r>
 8009e20:	3001      	adds	r0, #1
 8009e22:	f000 80aa 	beq.w	8009f7a <_vfiprintf_r+0x20e>
 8009e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e28:	445a      	add	r2, fp
 8009e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 80a2 	beq.w	8009f7a <_vfiprintf_r+0x20e>
 8009e36:	2300      	movs	r3, #0
 8009e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e40:	f10a 0a01 	add.w	sl, sl, #1
 8009e44:	9304      	str	r3, [sp, #16]
 8009e46:	9307      	str	r3, [sp, #28]
 8009e48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e4c:	931a      	str	r3, [sp, #104]	; 0x68
 8009e4e:	4654      	mov	r4, sl
 8009e50:	2205      	movs	r2, #5
 8009e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e56:	4858      	ldr	r0, [pc, #352]	; (8009fb8 <_vfiprintf_r+0x24c>)
 8009e58:	f7f6 fa1a 	bl	8000290 <memchr>
 8009e5c:	9a04      	ldr	r2, [sp, #16]
 8009e5e:	b9d8      	cbnz	r0, 8009e98 <_vfiprintf_r+0x12c>
 8009e60:	06d1      	lsls	r1, r2, #27
 8009e62:	bf44      	itt	mi
 8009e64:	2320      	movmi	r3, #32
 8009e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e6a:	0713      	lsls	r3, r2, #28
 8009e6c:	bf44      	itt	mi
 8009e6e:	232b      	movmi	r3, #43	; 0x2b
 8009e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e74:	f89a 3000 	ldrb.w	r3, [sl]
 8009e78:	2b2a      	cmp	r3, #42	; 0x2a
 8009e7a:	d015      	beq.n	8009ea8 <_vfiprintf_r+0x13c>
 8009e7c:	9a07      	ldr	r2, [sp, #28]
 8009e7e:	4654      	mov	r4, sl
 8009e80:	2000      	movs	r0, #0
 8009e82:	f04f 0c0a 	mov.w	ip, #10
 8009e86:	4621      	mov	r1, r4
 8009e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e8c:	3b30      	subs	r3, #48	; 0x30
 8009e8e:	2b09      	cmp	r3, #9
 8009e90:	d94e      	bls.n	8009f30 <_vfiprintf_r+0x1c4>
 8009e92:	b1b0      	cbz	r0, 8009ec2 <_vfiprintf_r+0x156>
 8009e94:	9207      	str	r2, [sp, #28]
 8009e96:	e014      	b.n	8009ec2 <_vfiprintf_r+0x156>
 8009e98:	eba0 0308 	sub.w	r3, r0, r8
 8009e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	46a2      	mov	sl, r4
 8009ea6:	e7d2      	b.n	8009e4e <_vfiprintf_r+0xe2>
 8009ea8:	9b03      	ldr	r3, [sp, #12]
 8009eaa:	1d19      	adds	r1, r3, #4
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	9103      	str	r1, [sp, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	bfbb      	ittet	lt
 8009eb4:	425b      	neglt	r3, r3
 8009eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8009eba:	9307      	strge	r3, [sp, #28]
 8009ebc:	9307      	strlt	r3, [sp, #28]
 8009ebe:	bfb8      	it	lt
 8009ec0:	9204      	strlt	r2, [sp, #16]
 8009ec2:	7823      	ldrb	r3, [r4, #0]
 8009ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ec6:	d10c      	bne.n	8009ee2 <_vfiprintf_r+0x176>
 8009ec8:	7863      	ldrb	r3, [r4, #1]
 8009eca:	2b2a      	cmp	r3, #42	; 0x2a
 8009ecc:	d135      	bne.n	8009f3a <_vfiprintf_r+0x1ce>
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	1d1a      	adds	r2, r3, #4
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	9203      	str	r2, [sp, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bfb8      	it	lt
 8009eda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ede:	3402      	adds	r4, #2
 8009ee0:	9305      	str	r3, [sp, #20]
 8009ee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fc8 <_vfiprintf_r+0x25c>
 8009ee6:	7821      	ldrb	r1, [r4, #0]
 8009ee8:	2203      	movs	r2, #3
 8009eea:	4650      	mov	r0, sl
 8009eec:	f7f6 f9d0 	bl	8000290 <memchr>
 8009ef0:	b140      	cbz	r0, 8009f04 <_vfiprintf_r+0x198>
 8009ef2:	2340      	movs	r3, #64	; 0x40
 8009ef4:	eba0 000a 	sub.w	r0, r0, sl
 8009ef8:	fa03 f000 	lsl.w	r0, r3, r0
 8009efc:	9b04      	ldr	r3, [sp, #16]
 8009efe:	4303      	orrs	r3, r0
 8009f00:	3401      	adds	r4, #1
 8009f02:	9304      	str	r3, [sp, #16]
 8009f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f08:	482c      	ldr	r0, [pc, #176]	; (8009fbc <_vfiprintf_r+0x250>)
 8009f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f0e:	2206      	movs	r2, #6
 8009f10:	f7f6 f9be 	bl	8000290 <memchr>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d03f      	beq.n	8009f98 <_vfiprintf_r+0x22c>
 8009f18:	4b29      	ldr	r3, [pc, #164]	; (8009fc0 <_vfiprintf_r+0x254>)
 8009f1a:	bb1b      	cbnz	r3, 8009f64 <_vfiprintf_r+0x1f8>
 8009f1c:	9b03      	ldr	r3, [sp, #12]
 8009f1e:	3307      	adds	r3, #7
 8009f20:	f023 0307 	bic.w	r3, r3, #7
 8009f24:	3308      	adds	r3, #8
 8009f26:	9303      	str	r3, [sp, #12]
 8009f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2a:	443b      	add	r3, r7
 8009f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f2e:	e767      	b.n	8009e00 <_vfiprintf_r+0x94>
 8009f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f34:	460c      	mov	r4, r1
 8009f36:	2001      	movs	r0, #1
 8009f38:	e7a5      	b.n	8009e86 <_vfiprintf_r+0x11a>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	3401      	adds	r4, #1
 8009f3e:	9305      	str	r3, [sp, #20]
 8009f40:	4619      	mov	r1, r3
 8009f42:	f04f 0c0a 	mov.w	ip, #10
 8009f46:	4620      	mov	r0, r4
 8009f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f4c:	3a30      	subs	r2, #48	; 0x30
 8009f4e:	2a09      	cmp	r2, #9
 8009f50:	d903      	bls.n	8009f5a <_vfiprintf_r+0x1ee>
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d0c5      	beq.n	8009ee2 <_vfiprintf_r+0x176>
 8009f56:	9105      	str	r1, [sp, #20]
 8009f58:	e7c3      	b.n	8009ee2 <_vfiprintf_r+0x176>
 8009f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f5e:	4604      	mov	r4, r0
 8009f60:	2301      	movs	r3, #1
 8009f62:	e7f0      	b.n	8009f46 <_vfiprintf_r+0x1da>
 8009f64:	ab03      	add	r3, sp, #12
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	462a      	mov	r2, r5
 8009f6a:	4b16      	ldr	r3, [pc, #88]	; (8009fc4 <_vfiprintf_r+0x258>)
 8009f6c:	a904      	add	r1, sp, #16
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f7fb fc70 	bl	8005854 <_printf_float>
 8009f74:	4607      	mov	r7, r0
 8009f76:	1c78      	adds	r0, r7, #1
 8009f78:	d1d6      	bne.n	8009f28 <_vfiprintf_r+0x1bc>
 8009f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f7c:	07d9      	lsls	r1, r3, #31
 8009f7e:	d405      	bmi.n	8009f8c <_vfiprintf_r+0x220>
 8009f80:	89ab      	ldrh	r3, [r5, #12]
 8009f82:	059a      	lsls	r2, r3, #22
 8009f84:	d402      	bmi.n	8009f8c <_vfiprintf_r+0x220>
 8009f86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f88:	f7fe fdec 	bl	8008b64 <__retarget_lock_release_recursive>
 8009f8c:	89ab      	ldrh	r3, [r5, #12]
 8009f8e:	065b      	lsls	r3, r3, #25
 8009f90:	f53f af12 	bmi.w	8009db8 <_vfiprintf_r+0x4c>
 8009f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f96:	e711      	b.n	8009dbc <_vfiprintf_r+0x50>
 8009f98:	ab03      	add	r3, sp, #12
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	462a      	mov	r2, r5
 8009f9e:	4b09      	ldr	r3, [pc, #36]	; (8009fc4 <_vfiprintf_r+0x258>)
 8009fa0:	a904      	add	r1, sp, #16
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f7fb fefa 	bl	8005d9c <_printf_i>
 8009fa8:	e7e4      	b.n	8009f74 <_vfiprintf_r+0x208>
 8009faa:	bf00      	nop
 8009fac:	0800a424 	.word	0x0800a424
 8009fb0:	0800a444 	.word	0x0800a444
 8009fb4:	0800a404 	.word	0x0800a404
 8009fb8:	0800a63c 	.word	0x0800a63c
 8009fbc:	0800a646 	.word	0x0800a646
 8009fc0:	08005855 	.word	0x08005855
 8009fc4:	08009d49 	.word	0x08009d49
 8009fc8:	0800a642 	.word	0x0800a642

08009fcc <_read_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4d07      	ldr	r5, [pc, #28]	; (8009fec <_read_r+0x20>)
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	4608      	mov	r0, r1
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	602a      	str	r2, [r5, #0]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f7f6 ff90 	bl	8000f00 <_read>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_read_r+0x1e>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_read_r+0x1e>
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	20014638 	.word	0x20014638

08009ff0 <abort>:
 8009ff0:	b508      	push	{r3, lr}
 8009ff2:	2006      	movs	r0, #6
 8009ff4:	f000 f834 	bl	800a060 <raise>
 8009ff8:	2001      	movs	r0, #1
 8009ffa:	f7f6 ff77 	bl	8000eec <_exit>

08009ffe <_malloc_usable_size_r>:
 8009ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a002:	1f18      	subs	r0, r3, #4
 800a004:	2b00      	cmp	r3, #0
 800a006:	bfbc      	itt	lt
 800a008:	580b      	ldrlt	r3, [r1, r0]
 800a00a:	18c0      	addlt	r0, r0, r3
 800a00c:	4770      	bx	lr

0800a00e <_raise_r>:
 800a00e:	291f      	cmp	r1, #31
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4604      	mov	r4, r0
 800a014:	460d      	mov	r5, r1
 800a016:	d904      	bls.n	800a022 <_raise_r+0x14>
 800a018:	2316      	movs	r3, #22
 800a01a:	6003      	str	r3, [r0, #0]
 800a01c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a020:	bd38      	pop	{r3, r4, r5, pc}
 800a022:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a024:	b112      	cbz	r2, 800a02c <_raise_r+0x1e>
 800a026:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a02a:	b94b      	cbnz	r3, 800a040 <_raise_r+0x32>
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 f831 	bl	800a094 <_getpid_r>
 800a032:	462a      	mov	r2, r5
 800a034:	4601      	mov	r1, r0
 800a036:	4620      	mov	r0, r4
 800a038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a03c:	f000 b818 	b.w	800a070 <_kill_r>
 800a040:	2b01      	cmp	r3, #1
 800a042:	d00a      	beq.n	800a05a <_raise_r+0x4c>
 800a044:	1c59      	adds	r1, r3, #1
 800a046:	d103      	bne.n	800a050 <_raise_r+0x42>
 800a048:	2316      	movs	r3, #22
 800a04a:	6003      	str	r3, [r0, #0]
 800a04c:	2001      	movs	r0, #1
 800a04e:	e7e7      	b.n	800a020 <_raise_r+0x12>
 800a050:	2400      	movs	r4, #0
 800a052:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a056:	4628      	mov	r0, r5
 800a058:	4798      	blx	r3
 800a05a:	2000      	movs	r0, #0
 800a05c:	e7e0      	b.n	800a020 <_raise_r+0x12>
	...

0800a060 <raise>:
 800a060:	4b02      	ldr	r3, [pc, #8]	; (800a06c <raise+0xc>)
 800a062:	4601      	mov	r1, r0
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	f7ff bfd2 	b.w	800a00e <_raise_r>
 800a06a:	bf00      	nop
 800a06c:	20000014 	.word	0x20000014

0800a070 <_kill_r>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	4d07      	ldr	r5, [pc, #28]	; (800a090 <_kill_r+0x20>)
 800a074:	2300      	movs	r3, #0
 800a076:	4604      	mov	r4, r0
 800a078:	4608      	mov	r0, r1
 800a07a:	4611      	mov	r1, r2
 800a07c:	602b      	str	r3, [r5, #0]
 800a07e:	f7f6 ff25 	bl	8000ecc <_kill>
 800a082:	1c43      	adds	r3, r0, #1
 800a084:	d102      	bne.n	800a08c <_kill_r+0x1c>
 800a086:	682b      	ldr	r3, [r5, #0]
 800a088:	b103      	cbz	r3, 800a08c <_kill_r+0x1c>
 800a08a:	6023      	str	r3, [r4, #0]
 800a08c:	bd38      	pop	{r3, r4, r5, pc}
 800a08e:	bf00      	nop
 800a090:	20014638 	.word	0x20014638

0800a094 <_getpid_r>:
 800a094:	f7f6 bf12 	b.w	8000ebc <_getpid>

0800a098 <_init>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	bf00      	nop
 800a09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09e:	bc08      	pop	{r3}
 800a0a0:	469e      	mov	lr, r3
 800a0a2:	4770      	bx	lr

0800a0a4 <_fini>:
 800a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a6:	bf00      	nop
 800a0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0aa:	bc08      	pop	{r3}
 800a0ac:	469e      	mov	lr, r3
 800a0ae:	4770      	bx	lr
