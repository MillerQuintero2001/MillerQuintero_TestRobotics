
Base_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000721c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  080073c0  080073c0  000173c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800788c  0800788c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800788c  0800788c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800788c  0800788c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  200001d4  08007a68  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  08007a68  00020874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a06a  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001727  00000000  00000000  0002a26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002b998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  0002c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000122a5  00000000  00000000  0002ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009574  00000000  00000000  0003ecd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063d77  00000000  00000000  00048249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000abfc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  000ac010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073a4 	.word	0x080073a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080073a4 	.word	0x080073a4

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20000298 	.word	0x20000298

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	; 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2uiz>:
 8000c58:	004a      	lsls	r2, r1, #1
 8000c5a:	d211      	bcs.n	8000c80 <__aeabi_d2uiz+0x28>
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d211      	bcs.n	8000c86 <__aeabi_d2uiz+0x2e>
 8000c62:	d50d      	bpl.n	8000c80 <__aeabi_d2uiz+0x28>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d40e      	bmi.n	8000c8c <__aeabi_d2uiz+0x34>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c8a:	d102      	bne.n	8000c92 <__aeabi_d2uiz+0x3a>
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c90:	4770      	bx	lr
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2f>:
 8000c98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ca0:	bf24      	itt	cs
 8000ca2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ca6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000caa:	d90d      	bls.n	8000cc8 <__aeabi_d2f+0x30>
 8000cac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ccc:	d121      	bne.n	8000d12 <__aeabi_d2f+0x7a>
 8000cce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cd2:	bfbc      	itt	lt
 8000cd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cd8:	4770      	bxlt	lr
 8000cda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ce2:	f1c2 0218 	rsb	r2, r2, #24
 8000ce6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cee:	fa20 f002 	lsr.w	r0, r0, r2
 8000cf2:	bf18      	it	ne
 8000cf4:	f040 0001 	orrne.w	r0, r0, #1
 8000cf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d04:	ea40 000c 	orr.w	r0, r0, ip
 8000d08:	fa23 f302 	lsr.w	r3, r3, r2
 8000d0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d10:	e7cc      	b.n	8000cac <__aeabi_d2f+0x14>
 8000d12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d16:	d107      	bne.n	8000d28 <__aeabi_d2f+0x90>
 8000d18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d1c:	bf1e      	ittt	ne
 8000d1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d26:	4770      	bxne	lr
 8000d28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff ff23 	bl	8000b8c <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc99 	bl	80006a8 <__aeabi_dmul>
 8000d76:	f7ff ff6f 	bl	8000c58 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fc1a 	bl	80005b4 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc90 	bl	80006a8 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fad2 	bl	8000338 <__aeabi_dsub>
 8000d94:	f7ff ff60 	bl	8000c58 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <main>:
void vTaskTwo( void * pvParameters );

GPIO_Handler_t handlerBlinkyPin = {0}; // LED de estado del Pin A5

int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

	/* Activamos la unidad de punto flotante (FPU) */
	//SCB->CPACR    |= (0xF << 20);

	/* Activamos del contador de Ticks */
	DWT->CTRL    |= (1 << 0);
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <main+0x4c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <main+0x4c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6013      	str	r3, [r2, #0]

	configPLL(100);
 8000db6:	2064      	movs	r0, #100	; 0x64
 8000db8:	f001 fd52 	bl	8002860 <configPLL>

	/* GPIO del Blinky Led de Estado PA5 */
	handlerBlinkyPin.pGPIOx								= GPIOA;
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <main+0x50>)
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <main+0x54>)
 8000dc0:	601a      	str	r2, [r3, #0]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinNumber 		= PIN_5;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <main+0x50>)
 8000dc4:	2205      	movs	r2, #5
 8000dc6:	711a      	strb	r2, [r3, #4]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_OUT;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <main+0x50>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	715a      	strb	r2, [r3, #5]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinSpeed 		= GPIO_OSPEED_FAST;
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <main+0x50>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	719a      	strb	r2, [r3, #6]
	handlerBlinkyPin.GPIO_PinConfig.GPIO_PinOPType 		= GPIO_OTYPE_PUSHPULL;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <main+0x50>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	721a      	strb	r2, [r3, #8]
	// Cargo la configuración
	GPIO_Config(&handlerBlinkyPin);
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <main+0x50>)
 8000ddc:	f001 fbea 	bl	80025b4 <GPIO_Config>
	// Comienzo en estado bajo
	GPIO_WritePin(&handlerBlinkyPin, SET);
 8000de0:	2101      	movs	r1, #1
 8000de2:	4804      	ldr	r0, [pc, #16]	; (8000df4 <main+0x50>)
 8000de4:	f001 fd10 	bl	8002808 <GPIO_WritePin>

	float var = 5.5f/25.3f;
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <main+0x58>)
 8000dea:	607b      	str	r3, [r7, #4]
	(void)var;


    /* Loop forever */
	while(1){
 8000dec:	e7fe      	b.n	8000dec <main+0x48>
 8000dee:	bf00      	nop
 8000df0:	e0001000 	.word	0xe0001000
 8000df4:	200001f0 	.word	0x200001f0
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	3e5e9bd4 	.word	0x3e5e9bd4

08000e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	return 1;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_kill>:

int _kill(int pid, int sig)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e1a:	f001 fe35 	bl	8002a88 <__errno>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2216      	movs	r2, #22
 8000e22:	601a      	str	r2, [r3, #0]
	return -1;
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_exit>:

void _exit (int status)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ffe7 	bl	8000e10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e42:	e7fe      	b.n	8000e42 <_exit+0x12>

08000e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e00a      	b.n	8000e6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e56:	f3af 8000 	nop.w
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	b2ca      	uxtb	r2, r1
 8000e64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbf0      	blt.n	8000e56 <_read+0x12>
	}

return len;
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
	return -1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_isatty>:

int _isatty(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f001 fdb6 	bl	8002a88 <__errno>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20020000 	.word	0x20020000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	200001fc 	.word	0x200001fc
 8000f50:	20000878 	.word	0x20000878

08000f54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f5e:	490d      	ldr	r1, [pc, #52]	; (8000f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <LoopForever+0xe>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f74:	4c0a      	ldr	r4, [pc, #40]	; (8000fa0 <LoopForever+0x16>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f82:	f001 fd87 	bl	8002a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f86:	f7ff ff0d 	bl	8000da4 <main>

08000f8a <LoopForever>:

LoopForever:
    b LoopForever
 8000f8a:	e7fe      	b.n	8000f8a <LoopForever>
  ldr   r0, =_estack
 8000f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000f98:	08007894 	.word	0x08007894
  ldr r2, =_sbss
 8000f9c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000fa0:	20000874 	.word	0x20000874

08000fa4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC_IRQHandler>

08000fa6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6892      	ldr	r2, [r2, #8]
 8001004:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6852      	ldr	r2, [r2, #4]
 800100e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d103      	bne.n	8001022 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800104e:	4b41      	ldr	r3, [pc, #260]	; (8001154 <xTaskIncrementTick+0x110>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d173      	bne.n	800113e <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001056:	4b40      	ldr	r3, [pc, #256]	; (8001158 <xTaskIncrementTick+0x114>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800105e:	4a3e      	ldr	r2, [pc, #248]	; (8001158 <xTaskIncrementTick+0x114>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d120      	bne.n	80010ac <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <xTaskIncrementTick+0x118>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00a      	beq.n	800108a <xTaskIncrementTick+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001078:	f383 8811 	msr	BASEPRI, r3
 800107c:	f3bf 8f6f 	isb	sy
 8001080:	f3bf 8f4f 	dsb	sy
 8001084:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001086:	bf00      	nop
 8001088:	e7fe      	b.n	8001088 <xTaskIncrementTick+0x44>
 800108a:	4b34      	ldr	r3, [pc, #208]	; (800115c <xTaskIncrementTick+0x118>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <xTaskIncrementTick+0x11c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a31      	ldr	r2, [pc, #196]	; (800115c <xTaskIncrementTick+0x118>)
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4a31      	ldr	r2, [pc, #196]	; (8001160 <xTaskIncrementTick+0x11c>)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b31      	ldr	r3, [pc, #196]	; (8001164 <xTaskIncrementTick+0x120>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a2f      	ldr	r2, [pc, #188]	; (8001164 <xTaskIncrementTick+0x120>)
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	f000 f8d0 	bl	800124c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80010ac:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <xTaskIncrementTick+0x124>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d348      	bcc.n	8001148 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010b6:	4b29      	ldr	r3, [pc, #164]	; (800115c <xTaskIncrementTick+0x118>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d104      	bne.n	80010ca <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <xTaskIncrementTick+0x124>)
 80010c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010c6:	601a      	str	r2, [r3, #0]
                    break;
 80010c8:	e03e      	b.n	8001148 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <xTaskIncrementTick+0x118>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d203      	bcs.n	80010ea <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80010e2:	4a21      	ldr	r2, [pc, #132]	; (8001168 <xTaskIncrementTick+0x124>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80010e8:	e02e      	b.n	8001148 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3304      	adds	r3, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff7d 	bl	8000fee <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	3318      	adds	r3, #24
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff74 	bl	8000fee <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	4618      	mov	r0, r3
 800110a:	f001 f923 	bl	8002354 <SEGGER_SYSVIEW_OnTaskStartReady>
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001112:	2201      	movs	r2, #1
 8001114:	409a      	lsls	r2, r3
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <xTaskIncrementTick+0x128>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4313      	orrs	r3, r2
 800111c:	4a13      	ldr	r2, [pc, #76]	; (800116c <xTaskIncrementTick+0x128>)
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4a10      	ldr	r2, [pc, #64]	; (8001170 <xTaskIncrementTick+0x12c>)
 800112e:	441a      	add	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3304      	adds	r3, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4610      	mov	r0, r2
 8001138:	f7ff ff35 	bl	8000fa6 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800113c:	e7bb      	b.n	80010b6 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <xTaskIncrementTick+0x130>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <xTaskIncrementTick+0x130>)
 8001146:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001148:	697b      	ldr	r3, [r7, #20]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000028c 	.word	0x2000028c
 8001158:	20000270 	.word	0x20000270
 800115c:	20000268 	.word	0x20000268
 8001160:	2000026c 	.word	0x2000026c
 8001164:	20000280 	.word	0x20000280
 8001168:	20000284 	.word	0x20000284
 800116c:	20000274 	.word	0x20000274
 8001170:	20000204 	.word	0x20000204
 8001174:	20000278 	.word	0x20000278

08001178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <vTaskSwitchContext+0xbc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <vTaskSwitchContext+0xc0>)
 8001188:	2201      	movs	r2, #1
 800118a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800118c:	e04d      	b.n	800122a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <vTaskSwitchContext+0xc0>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001194:	4b29      	ldr	r3, [pc, #164]	; (800123c <vTaskSwitchContext+0xc4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	fab3 f383 	clz	r3, r3
 80011a0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	f1c3 031f 	rsb	r3, r3, #31
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	4925      	ldr	r1, [pc, #148]	; (8001240 <vTaskSwitchContext+0xc8>)
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10a      	bne.n	80011d4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80011be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c2:	f383 8811 	msr	BASEPRI, r3
 80011c6:	f3bf 8f6f 	isb	sy
 80011ca:	f3bf 8f4f 	dsb	sy
 80011ce:	607b      	str	r3, [r7, #4]
    }
 80011d0:	bf00      	nop
 80011d2:	e7fe      	b.n	80011d2 <vTaskSwitchContext+0x5a>
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <vTaskSwitchContext+0xc8>)
 80011e0:	4413      	add	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	3308      	adds	r3, #8
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d104      	bne.n	8001204 <vTaskSwitchContext+0x8c>
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <vTaskSwitchContext+0xcc>)
 800120c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <vTaskSwitchContext+0xcc>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <vTaskSwitchContext+0xd0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d102      	bne.n	8001220 <vTaskSwitchContext+0xa8>
 800121a:	f001 f83d 	bl	8002298 <SEGGER_SYSVIEW_OnIdle>
}
 800121e:	e004      	b.n	800122a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <vTaskSwitchContext+0xcc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f001 f853 	bl	80022d0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000028c 	.word	0x2000028c
 8001238:	2000027c 	.word	0x2000027c
 800123c:	20000274 	.word	0x20000274
 8001240:	20000204 	.word	0x20000204
 8001244:	20000200 	.word	0x20000200
 8001248:	20000288 	.word	0x20000288

0800124c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <prvResetNextTaskUnblockTime+0x30>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d104      	bne.n	8001264 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <prvResetNextTaskUnblockTime+0x34>)
 800125c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001260:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001262:	e005      	b.n	8001270 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <prvResetNextTaskUnblockTime+0x30>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <prvResetNextTaskUnblockTime+0x34>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000268 	.word	0x20000268
 8001280:	20000284 	.word	0x20000284
	...

08001290 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <pxCurrentTCBConst2>)
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	6808      	ldr	r0, [r1, #0]
 8001296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800129a:	f380 8809 	msr	PSP, r0
 800129e:	f3bf 8f6f 	isb	sy
 80012a2:	f04f 0000 	mov.w	r0, #0
 80012a6:	f380 8811 	msr	BASEPRI, r0
 80012aa:	4770      	bx	lr
 80012ac:	f3af 8000 	nop.w

080012b0 <pxCurrentTCBConst2>:
 80012b0:	20000200 	.word	0x20000200
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
	...

080012c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80012c0:	f3ef 8009 	mrs	r0, PSP
 80012c4:	f3bf 8f6f 	isb	sy
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <pxCurrentTCBConst>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	f01e 0f10 	tst.w	lr, #16
 80012d0:	bf08      	it	eq
 80012d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80012d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012da:	6010      	str	r0, [r2, #0]
 80012dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80012e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80012e4:	f380 8811 	msr	BASEPRI, r0
 80012e8:	f3bf 8f4f 	dsb	sy
 80012ec:	f3bf 8f6f 	isb	sy
 80012f0:	f7ff ff42 	bl	8001178 <vTaskSwitchContext>
 80012f4:	f04f 0000 	mov.w	r0, #0
 80012f8:	f380 8811 	msr	BASEPRI, r0
 80012fc:	bc09      	pop	{r0, r3}
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	6808      	ldr	r0, [r1, #0]
 8001302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001306:	f01e 0f10 	tst.w	lr, #16
 800130a:	bf08      	it	eq
 800130c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001310:	f380 8809 	msr	PSP, r0
 8001314:	f3bf 8f6f 	isb	sy
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	f3af 8000 	nop.w

08001320 <pxCurrentTCBConst>:
 8001320:	20000200 	.word	0x20000200
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop

08001328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
        __asm volatile
 800132e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001332:	f383 8811 	msr	BASEPRI, r3
 8001336:	f3bf 8f6f 	isb	sy
 800133a:	f3bf 8f4f 	dsb	sy
 800133e:	607b      	str	r3, [r7, #4]
    }
 8001340:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001342:	f000 ff2f 	bl	80021a4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001346:	f7ff fe7d 	bl	8001044 <xTaskIncrementTick>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001350:	f000 ff86 	bl	8002260 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <SysTick_Handler+0x50>)
 8001356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e001      	b.n	8001362 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800135e:	f000 ff63 	bl	8002228 <SEGGER_SYSVIEW_RecordExitISR>
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800136c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000ed04 	.word	0xe000ed04

0800137c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <USART2_IRQHandler+0x80>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	2b00      	cmp	r3, #0
 8001390:	d011      	beq.n	80013b6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <USART2_IRQHandler+0x84>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f003 030b 	and.w	r3, r3, #11
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d108      	bne.n	80013b6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <USART2_IRQHandler+0x88>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <USART2_IRQHandler+0x88>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	4610      	mov	r0, r2
 80013b4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d01a      	beq.n	80013f6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <USART2_IRQHandler+0x8c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <USART2_IRQHandler+0x8c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	1dfa      	adds	r2, r7, #7
 80013ce:	4610      	mov	r0, r2
 80013d0:	4798      	blx	r3
 80013d2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <USART2_IRQHandler+0x90>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <USART2_IRQHandler+0x90>)
 80013e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e006      	b.n	80013f6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <USART2_IRQHandler+0x80>)
 80013ea:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80013ec:	79fa      	ldrb	r2, [r7, #7]
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <USART2_IRQHandler+0x84>)
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e000      	b.n	80013f6 <USART2_IRQHandler+0x7a>
      return;
 80013f4:	bf00      	nop
    }
  }
}
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40004400 	.word	0x40004400
 8001400:	40004404 	.word	0x40004404
 8001404:	20000290 	.word	0x20000290
 8001408:	20000294 	.word	0x20000294
 800140c:	4000440c 	.word	0x4000440c

08001410 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800141a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	4000440c 	.word	0x4000440c

08001430 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <_DoInit+0x98>)
 8001438:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2203      	movs	r2, #3
 800143e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a20      	ldr	r2, [pc, #128]	; (80014cc <_DoInit+0x9c>)
 800144a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <_DoInit+0xa0>)
 8001450:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001458:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <_DoInit+0x9c>)
 8001470:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <_DoInit+0xa4>)
 8001476:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2210      	movs	r2, #16
 800147c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3307      	adds	r3, #7
 8001494:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <_DoInit+0xa8>)
 8001496:	6810      	ldr	r0, [r2, #0]
 8001498:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800149a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <_DoInit+0xac>)
 80014a2:	6810      	ldr	r0, [r2, #0]
 80014a4:	6018      	str	r0, [r3, #0]
 80014a6:	8891      	ldrh	r1, [r2, #4]
 80014a8:	7992      	ldrb	r2, [r2, #6]
 80014aa:	8099      	strh	r1, [r3, #4]
 80014ac:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80014ae:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2220      	movs	r2, #32
 80014b6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80014b8:	f3bf 8f5f 	dmb	sy
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	20000298 	.word	0x20000298
 80014cc:	080073c0 	.word	0x080073c0
 80014d0:	20000340 	.word	0x20000340
 80014d4:	20000740 	.word	0x20000740
 80014d8:	080073cc 	.word	0x080073cc
 80014dc:	080073d0 	.word	0x080073d0

080014e0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	429a      	cmp	r2, r3
 8001502:	d905      	bls.n	8001510 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	3b01      	subs	r3, #1
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
 800150e:	e007      	b.n	8001520 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	69b9      	ldr	r1, [r7, #24]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	1acb      	subs	r3, r1, r3
 800151a:	4413      	add	r3, r2
 800151c:	3b01      	subs	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152a:	4293      	cmp	r3, r2
 800152c:	bf28      	it	cs
 800152e:	4613      	movcs	r3, r2
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4293      	cmp	r3, r2
 8001538:	bf28      	it	cs
 800153a:	4613      	movcs	r3, r2
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8001548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	6978      	ldr	r0, [r7, #20]
 800154e:	f001 fac5 	bl	8002adc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001552:	6a3a      	ldr	r2, [r7, #32]
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	4413      	add	r3, r2
 8001558:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	4413      	add	r3, r2
 8001560:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	4413      	add	r3, r2
 8001570:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	429a      	cmp	r2, r3
 800157a:	d101      	bne.n	8001580 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001580:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1b2      	bne.n	80014f6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001590:	6a3b      	ldr	r3, [r7, #32]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800159a:	b580      	push	{r7, lr}
 800159c:	b088      	sub	sp, #32
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d911      	bls.n	80015e2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	4413      	add	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	6938      	ldr	r0, [r7, #16]
 80015ce:	f001 fa85 	bl	8002adc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80015d2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	441a      	add	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80015e0:	e01f      	b.n	8001622 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	6938      	ldr	r0, [r7, #16]
 80015f6:	f001 fa71 	bl	8002adc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	4413      	add	r3, r2
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4619      	mov	r1, r3
 8001612:	6938      	ldr	r0, [r7, #16]
 8001614:	f001 fa62 	bl	8002adc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001618:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	60da      	str	r2, [r3, #12]
}
 8001622:	bf00      	nop
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800162a:	b480      	push	{r7}
 800162c:	b087      	sub	sp, #28
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	429a      	cmp	r2, r3
 8001644:	d808      	bhi.n	8001658 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad2      	subs	r2, r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4413      	add	r3, r2
 8001652:	3b01      	subs	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e004      	b.n	8001662 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	3b01      	subs	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001662:	697b      	ldr	r3, [r7, #20]
}
 8001664:	4618      	mov	r0, r3
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <SEGGER_RTT_ReadNoLock+0x108>)
 800167e:	623b      	str	r3, [r7, #32]
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <SEGGER_RTT_ReadNoLock+0x1e>
 800168a:	f7ff fed1 	bl	8001430 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	3360      	adds	r3, #96	; 0x60
 800169a:	4a37      	ldr	r2, [pc, #220]	; (8001778 <SEGGER_RTT_ReadNoLock+0x108>)
 800169c:	4413      	add	r3, r2
 800169e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80016b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d92b      	bls.n	8001714 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4293      	cmp	r3, r2
 80016cc:	bf28      	it	cs
 80016ce:	4613      	movcs	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	4413      	add	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	6939      	ldr	r1, [r7, #16]
 80016e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016e2:	f001 f9fb 	bl	8002adc <memcpy>
    NumBytesRead += NumBytesRem;
 80016e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80016ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	4413      	add	r3, r2
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80016fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	4413      	add	r3, r2
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800170c:	429a      	cmp	r2, r3
 800170e:	d101      	bne.n	8001714 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4293      	cmp	r3, r2
 8001722:	bf28      	it	cs
 8001724:	4613      	movcs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d019      	beq.n	8001762 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001734:	4413      	add	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	6939      	ldr	r1, [r7, #16]
 800173c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800173e:	f001 f9cd 	bl	8002adc <memcpy>
    NumBytesRead += NumBytesRem;
 8001742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4413      	add	r3, r2
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800174a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	4413      	add	r3, r2
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800175a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	4413      	add	r3, r2
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8001762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800176c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001770:	4618      	mov	r0, r3
 8001772:	3730      	adds	r7, #48	; 0x30
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000298 	.word	0x20000298

0800177c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <SEGGER_RTT_WriteNoLock+0x9c>)
 800179a:	4413      	add	r3, r2
 800179c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d029      	beq.n	80017fa <SEGGER_RTT_WriteNoLock+0x7e>
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d82e      	bhi.n	8001808 <SEGGER_RTT_WriteNoLock+0x8c>
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <SEGGER_RTT_WriteNoLock+0x38>
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d013      	beq.n	80017da <SEGGER_RTT_WriteNoLock+0x5e>
 80017b2:	e029      	b.n	8001808 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80017b4:	6978      	ldr	r0, [r7, #20]
 80017b6:	f7ff ff38 	bl	800162a <_GetAvailWriteSpace>
 80017ba:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d202      	bcs.n	80017ca <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80017c8:	e021      	b.n	800180e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	69b9      	ldr	r1, [r7, #24]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff fee1 	bl	800159a <_WriteNoCheck>
    break;
 80017d8:	e019      	b.n	800180e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff25 	bl	800162a <_GetAvailWriteSpace>
 80017e0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4293      	cmp	r3, r2
 80017e8:	bf28      	it	cs
 80017ea:	4613      	movcs	r3, r2
 80017ec:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	69b9      	ldr	r1, [r7, #24]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff fed1 	bl	800159a <_WriteNoCheck>
    break;
 80017f8:	e009      	b.n	800180e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	69b9      	ldr	r1, [r7, #24]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff fe6e 	bl	80014e0 <_WriteBlocking>
 8001804:	61f8      	str	r0, [r7, #28]
    break;
 8001806:	e002      	b.n	800180e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    break;
 800180c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800180e:	69fb      	ldr	r3, [r7, #28]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000298 	.word	0x20000298

0800181c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <SEGGER_RTT_Write+0x48>)
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <SEGGER_RTT_Write+0x1e>
 8001836:	f7ff fdfb 	bl	8001430 <_DoInit>
  SEGGER_RTT_LOCK();
 800183a:	f3ef 8311 	mrs	r3, BASEPRI
 800183e:	f04f 0120 	mov.w	r1, #32
 8001842:	f381 8811 	msr	BASEPRI, r1
 8001846:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff ff95 	bl	800177c <SEGGER_RTT_WriteNoLock>
 8001852:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800185a:	697b      	ldr	r3, [r7, #20]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3720      	adds	r7, #32
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000298 	.word	0x20000298

08001868 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001878:	e002      	b.n	8001880 <_EncodeStr+0x18>
    Len++;
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	3301      	adds	r3, #1
 800187e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4413      	add	r3, r2
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f6      	bne.n	800187a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	d901      	bls.n	8001898 <_EncodeStr+0x30>
    Len = Limit;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	2bfe      	cmp	r3, #254	; 0xfe
 800189c:	d806      	bhi.n	80018ac <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	60fa      	str	r2, [r7, #12]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e011      	b.n	80018d0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	60fa      	str	r2, [r7, #12]
 80018b2:	22ff      	movs	r2, #255	; 0xff
 80018b4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	60fa      	str	r2, [r7, #12]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	0a19      	lsrs	r1, r3, #8
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	60fa      	str	r2, [r7, #12]
 80018cc:	b2ca      	uxtb	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80018d4:	e00a      	b.n	80018ec <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	1c53      	adds	r3, r2, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1c59      	adds	r1, r3, #1
 80018e0:	60f9      	str	r1, [r7, #12]
 80018e2:	7812      	ldrb	r2, [r2, #0]
 80018e4:	701a      	strb	r2, [r3, #0]
    n++;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d3f0      	bcc.n	80018d6 <_EncodeStr+0x6e>
  }
  return pPayload;
 80018f4:	68fb      	ldr	r3, [r7, #12]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3304      	adds	r3, #4
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001922:	4b36      	ldr	r3, [pc, #216]	; (80019fc <_HandleIncomingPacket+0xe0>)
 8001924:	7e1b      	ldrb	r3, [r3, #24]
 8001926:	4618      	mov	r0, r3
 8001928:	1cfb      	adds	r3, r7, #3
 800192a:	2201      	movs	r2, #1
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff fe9f 	bl	8001670 <SEGGER_RTT_ReadNoLock>
 8001932:	4603      	mov	r3, r0
 8001934:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	dd54      	ble.n	80019e6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	2b80      	cmp	r3, #128	; 0x80
 8001940:	d032      	beq.n	80019a8 <_HandleIncomingPacket+0x8c>
 8001942:	2b80      	cmp	r3, #128	; 0x80
 8001944:	dc42      	bgt.n	80019cc <_HandleIncomingPacket+0xb0>
 8001946:	2b07      	cmp	r3, #7
 8001948:	dc16      	bgt.n	8001978 <_HandleIncomingPacket+0x5c>
 800194a:	2b00      	cmp	r3, #0
 800194c:	dd3e      	ble.n	80019cc <_HandleIncomingPacket+0xb0>
 800194e:	3b01      	subs	r3, #1
 8001950:	2b06      	cmp	r3, #6
 8001952:	d83b      	bhi.n	80019cc <_HandleIncomingPacket+0xb0>
 8001954:	a201      	add	r2, pc, #4	; (adr r2, 800195c <_HandleIncomingPacket+0x40>)
 8001956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195a:	bf00      	nop
 800195c:	0800197f 	.word	0x0800197f
 8001960:	08001985 	.word	0x08001985
 8001964:	0800198b 	.word	0x0800198b
 8001968:	08001991 	.word	0x08001991
 800196c:	08001997 	.word	0x08001997
 8001970:	0800199d 	.word	0x0800199d
 8001974:	080019a3 	.word	0x080019a3
 8001978:	2b7f      	cmp	r3, #127	; 0x7f
 800197a:	d036      	beq.n	80019ea <_HandleIncomingPacket+0xce>
 800197c:	e026      	b.n	80019cc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800197e:	f000 fa4f 	bl	8001e20 <SEGGER_SYSVIEW_Start>
      break;
 8001982:	e037      	b.n	80019f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8001984:	f000 fb08 	bl	8001f98 <SEGGER_SYSVIEW_Stop>
      break;
 8001988:	e034      	b.n	80019f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800198a:	f000 fbd9 	bl	8002140 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800198e:	e031      	b.n	80019f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8001990:	f000 fbc2 	bl	8002118 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001994:	e02e      	b.n	80019f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8001996:	f000 fb25 	bl	8001fe4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800199a:	e02b      	b.n	80019f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800199c:	f000 fdba 	bl	8002514 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80019a0:	e028      	b.n	80019f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80019a2:	f000 fd99 	bl	80024d8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80019a6:	e025      	b.n	80019f4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <_HandleIncomingPacket+0xe0>)
 80019aa:	7e1b      	ldrb	r3, [r3, #24]
 80019ac:	4618      	mov	r0, r3
 80019ae:	1cfb      	adds	r3, r7, #3
 80019b0:	2201      	movs	r2, #1
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff fe5c 	bl	8001670 <SEGGER_RTT_ReadNoLock>
 80019b8:	4603      	mov	r3, r0
 80019ba:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	dd15      	ble.n	80019ee <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fd07 	bl	80023d8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80019ca:	e010      	b.n	80019ee <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	da0e      	bge.n	80019f2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <_HandleIncomingPacket+0xe0>)
 80019d6:	7e1b      	ldrb	r3, [r3, #24]
 80019d8:	4618      	mov	r0, r3
 80019da:	1cfb      	adds	r3, r7, #3
 80019dc:	2201      	movs	r2, #1
 80019de:	4619      	mov	r1, r3
 80019e0:	f7ff fe46 	bl	8001670 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80019e4:	e005      	b.n	80019f2 <_HandleIncomingPacket+0xd6>
    }
  }
 80019e6:	bf00      	nop
 80019e8:	e004      	b.n	80019f4 <_HandleIncomingPacket+0xd8>
      break;
 80019ea:	bf00      	nop
 80019ec:	e002      	b.n	80019f4 <_HandleIncomingPacket+0xd8>
      break;
 80019ee:	bf00      	nop
 80019f0:	e000      	b.n	80019f4 <_HandleIncomingPacket+0xd8>
      break;
 80019f2:	bf00      	nop
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000750 	.word	0x20000750

08001a00 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001a06:	2301      	movs	r3, #1
 8001a08:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a14:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <_TrySendOverflowPacket+0xe0>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1a:	e00b      	b.n	8001a34 <_TrySendOverflowPacket+0x34>
 8001a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a22:	1c59      	adds	r1, r3, #1
 8001a24:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a30:	09db      	lsrs	r3, r3, #7
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a36:	2b7f      	cmp	r3, #127	; 0x7f
 8001a38:	d8f0      	bhi.n	8001a1c <_TrySendOverflowPacket+0x1c>
 8001a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <_TrySendOverflowPacket+0xe4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <_TrySendOverflowPacket+0xe0>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	623b      	str	r3, [r7, #32]
 8001a62:	e00b      	b.n	8001a7c <_TrySendOverflowPacket+0x7c>
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	1c59      	adds	r1, r3, #1
 8001a6c:	6279      	str	r1, [r7, #36]	; 0x24
 8001a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	09db      	lsrs	r3, r3, #7
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a80:	d8f0      	bhi.n	8001a64 <_TrySendOverflowPacket+0x64>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	627a      	str	r2, [r7, #36]	; 0x24
 8001a88:	6a3a      	ldr	r2, [r7, #32]
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <_TrySendOverflowPacket+0xe0>)
 8001a94:	785b      	ldrb	r3, [r3, #1]
 8001a96:	4618      	mov	r0, r3
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7fe fb9c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8001aac:	f7ff fcb0 	bl	8001410 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <_TrySendOverflowPacket+0xe0>)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <_TrySendOverflowPacket+0xe0>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <_TrySendOverflowPacket+0xe0>)
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e004      	b.n	8001ad4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <_TrySendOverflowPacket+0xe0>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <_TrySendOverflowPacket+0xe0>)
 8001ad2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001ad4:	693b      	ldr	r3, [r7, #16]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3730      	adds	r7, #48	; 0x30
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000750 	.word	0x20000750
 8001ae4:	e0001004 	.word	0xe0001004

08001ae8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001af4:	4b6d      	ldr	r3, [pc, #436]	; (8001cac <_SendPacket+0x1c4>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d010      	beq.n	8001b1e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001afc:	4b6b      	ldr	r3, [pc, #428]	; (8001cac <_SendPacket+0x1c4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a5 	beq.w	8001c50 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001b06:	4b69      	ldr	r3, [pc, #420]	; (8001cac <_SendPacket+0x1c4>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d109      	bne.n	8001b22 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8001b0e:	f7ff ff77 	bl	8001a00 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001b12:	4b66      	ldr	r3, [pc, #408]	; (8001cac <_SendPacket+0x1c4>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	f040 809c 	bne.w	8001c54 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8001b1c:	e001      	b.n	8001b22 <_SendPacket+0x3a>
    goto Send;
 8001b1e:	bf00      	nop
 8001b20:	e000      	b.n	8001b24 <_SendPacket+0x3c>
Send:
 8001b22:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b1f      	cmp	r3, #31
 8001b28:	d809      	bhi.n	8001b3e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001b2a:	4b60      	ldr	r3, [pc, #384]	; (8001cac <_SendPacket+0x1c4>)
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f040 808d 	bne.w	8001c58 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b17      	cmp	r3, #23
 8001b42:	d807      	bhi.n	8001b54 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	e03d      	b.n	8001bd0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b60:	d912      	bls.n	8001b88 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	09da      	lsrs	r2, r3, #7
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	3a01      	subs	r2, #1
 8001b7a:	60fa      	str	r2, [r7, #12]
 8001b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	e006      	b.n	8001b96 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b7f      	cmp	r3, #127	; 0x7f
 8001b9a:	d912      	bls.n	8001bc2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	09da      	lsrs	r2, r3, #7
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	3a01      	subs	r2, #1
 8001bb4:	60fa      	str	r2, [r7, #12]
 8001bb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	701a      	strb	r2, [r3, #0]
 8001bc0:	e006      	b.n	8001bd0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001bd0:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <_SendPacket+0x1c8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <_SendPacket+0x1c4>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	e00b      	b.n	8001c02 <_SendPacket+0x11a>
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	1c59      	adds	r1, r3, #1
 8001bf2:	6279      	str	r1, [r7, #36]	; 0x24
 8001bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	09db      	lsrs	r3, r3, #7
 8001c00:	623b      	str	r3, [r7, #32]
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	2b7f      	cmp	r3, #127	; 0x7f
 8001c06:	d8f0      	bhi.n	8001bea <_SendPacket+0x102>
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	627a      	str	r2, [r7, #36]	; 0x24
 8001c0e:	6a3a      	ldr	r2, [r7, #32]
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8001c18:	4b24      	ldr	r3, [pc, #144]	; (8001cac <_SendPacket+0x1c4>)
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	68f9      	ldr	r1, [r7, #12]
 8001c28:	f7fe fada 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8001c30:	f7ff fbee 	bl	8001410 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <_SendPacket+0x1c4>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	60d3      	str	r3, [r2, #12]
 8001c40:	e00b      	b.n	8001c5a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <_SendPacket+0x1c4>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <_SendPacket+0x1c4>)
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e004      	b.n	8001c5a <_SendPacket+0x172>
    goto SendDone;
 8001c50:	bf00      	nop
 8001c52:	e002      	b.n	8001c5a <_SendPacket+0x172>
      goto SendDone;
 8001c54:	bf00      	nop
 8001c56:	e000      	b.n	8001c5a <_SendPacket+0x172>
      goto SendDone;
 8001c58:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <_SendPacket+0x1c4>)
 8001c5c:	7e1b      	ldrb	r3, [r3, #24]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_SendPacket+0x1cc>)
 8001c62:	460b      	mov	r3, r1
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	440b      	add	r3, r1
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	336c      	adds	r3, #108	; 0x6c
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <_SendPacket+0x1c4>)
 8001c72:	7e1b      	ldrb	r3, [r3, #24]
 8001c74:	4618      	mov	r0, r3
 8001c76:	490f      	ldr	r1, [pc, #60]	; (8001cb4 <_SendPacket+0x1cc>)
 8001c78:	4603      	mov	r3, r0
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4403      	add	r3, r0
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	440b      	add	r3, r1
 8001c82:	3370      	adds	r3, #112	; 0x70
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d00b      	beq.n	8001ca2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <_SendPacket+0x1c4>)
 8001c8c:	789b      	ldrb	r3, [r3, #2]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d107      	bne.n	8001ca2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <_SendPacket+0x1c4>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8001c98:	f7ff fe40 	bl	800191c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <_SendPacket+0x1c4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000750 	.word	0x20000750
 8001cb0:	e0001004 	.word	0xe0001004
 8001cb4:	20000298 	.word	0x20000298

08001cb8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001cc0:	f3ef 8311 	mrs	r3, BASEPRI
 8001cc4:	f04f 0120 	mov.w	r1, #32
 8001cc8:	f381 8811 	msr	BASEPRI, r1
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001cd0:	f7ff fe17 	bl	8001902 <_PreparePacket>
 8001cd4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	68b8      	ldr	r0, [r7, #8]
 8001cdc:	f7ff ff04 	bl	8001ae8 <_SendPacket>
  RECORD_END();
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f383 8811 	msr	BASEPRI, r3
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000780 	.word	0x20000780

08001cf4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8001d02:	f04f 0120 	mov.w	r1, #32
 8001d06:	f381 8811 	msr	BASEPRI, r1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	4816      	ldr	r0, [pc, #88]	; (8001d68 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001d0e:	f7ff fdf8 	bl	8001902 <_PreparePacket>
 8001d12:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	e00b      	b.n	8001d3a <SEGGER_SYSVIEW_RecordU32+0x46>
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	1c59      	adds	r1, r3, #1
 8001d2a:	61f9      	str	r1, [r7, #28]
 8001d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	09db      	lsrs	r3, r3, #7
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d3e:	d8f0      	bhi.n	8001d22 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	61fa      	str	r2, [r7, #28]
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	6938      	ldr	r0, [r7, #16]
 8001d56:	f7ff fec7 	bl	8001ae8 <_SendPacket>
  RECORD_END();
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f383 8811 	msr	BASEPRI, r3
}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000780 	.word	0x20000780

08001d6c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	; 0x30
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001d78:	f3ef 8311 	mrs	r3, BASEPRI
 8001d7c:	f04f 0120 	mov.w	r1, #32
 8001d80:	f381 8811 	msr	BASEPRI, r1
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	4825      	ldr	r0, [pc, #148]	; (8001e1c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001d88:	f7ff fdbb 	bl	8001902 <_PreparePacket>
 8001d8c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d9a:	e00b      	b.n	8001db4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	1c59      	adds	r1, r3, #1
 8001da4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	09db      	lsrs	r3, r3, #7
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db6:	2b7f      	cmp	r3, #127	; 0x7f
 8001db8:	d8f0      	bhi.n	8001d9c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	623b      	str	r3, [r7, #32]
 8001dd2:	e00b      	b.n	8001dec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	1c59      	adds	r1, r3, #1
 8001ddc:	6279      	str	r1, [r7, #36]	; 0x24
 8001dde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	09db      	lsrs	r3, r3, #7
 8001dea:	623b      	str	r3, [r7, #32]
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	2b7f      	cmp	r3, #127	; 0x7f
 8001df0:	d8f0      	bhi.n	8001dd4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	627a      	str	r2, [r7, #36]	; 0x24
 8001df8:	6a3a      	ldr	r2, [r7, #32]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	6979      	ldr	r1, [r7, #20]
 8001e06:	69b8      	ldr	r0, [r7, #24]
 8001e08:	f7ff fe6e 	bl	8001ae8 <_SendPacket>
  RECORD_END();
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f383 8811 	msr	BASEPRI, r3
}
 8001e12:	bf00      	nop
 8001e14:	3730      	adds	r7, #48	; 0x30
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000780 	.word	0x20000780

08001e20 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001e26:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <SEGGER_SYSVIEW_Start+0x16c>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001e2c:	f3ef 8311 	mrs	r3, BASEPRI
 8001e30:	f04f 0120 	mov.w	r1, #32
 8001e34:	f381 8811 	msr	BASEPRI, r1
 8001e38:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001e3a:	4b54      	ldr	r3, [pc, #336]	; (8001f8c <SEGGER_SYSVIEW_Start+0x16c>)
 8001e3c:	785b      	ldrb	r3, [r3, #1]
 8001e3e:	220a      	movs	r2, #10
 8001e40:	4953      	ldr	r1, [pc, #332]	; (8001f90 <SEGGER_SYSVIEW_Start+0x170>)
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe f9cc 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8001e4e:	f7ff fadf 	bl	8001410 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8001e52:	200a      	movs	r0, #10
 8001e54:	f7ff ff30 	bl	8001cb8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001e58:	f3ef 8311 	mrs	r3, BASEPRI
 8001e5c:	f04f 0120 	mov.w	r1, #32
 8001e60:	f381 8811 	msr	BASEPRI, r1
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	484b      	ldr	r0, [pc, #300]	; (8001f94 <SEGGER_SYSVIEW_Start+0x174>)
 8001e68:	f7ff fd4b 	bl	8001902 <_PreparePacket>
 8001e6c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e76:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <SEGGER_SYSVIEW_Start+0x16c>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e7c:	e00b      	b.n	8001e96 <SEGGER_SYSVIEW_Start+0x76>
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	1c59      	adds	r1, r3, #1
 8001e86:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	09db      	lsrs	r3, r3, #7
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e98:	2b7f      	cmp	r3, #127	; 0x7f
 8001e9a:	d8f0      	bhi.n	8001e7e <SEGGER_SYSVIEW_Start+0x5e>
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eaa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb0:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <SEGGER_SYSVIEW_Start+0x16c>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	623b      	str	r3, [r7, #32]
 8001eb6:	e00b      	b.n	8001ed0 <SEGGER_SYSVIEW_Start+0xb0>
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	1c59      	adds	r1, r3, #1
 8001ec0:	6279      	str	r1, [r7, #36]	; 0x24
 8001ec2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	09db      	lsrs	r3, r3, #7
 8001ece:	623b      	str	r3, [r7, #32]
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ed4:	d8f0      	bhi.n	8001eb8 <SEGGER_SYSVIEW_Start+0x98>
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	627a      	str	r2, [r7, #36]	; 0x24
 8001edc:	6a3a      	ldr	r2, [r7, #32]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <SEGGER_SYSVIEW_Start+0x16c>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	e00b      	b.n	8001f0a <SEGGER_SYSVIEW_Start+0xea>
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	1c59      	adds	r1, r3, #1
 8001efa:	61f9      	str	r1, [r7, #28]
 8001efc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	09db      	lsrs	r3, r3, #7
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f0e:	d8f0      	bhi.n	8001ef2 <SEGGER_SYSVIEW_Start+0xd2>
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	61fa      	str	r2, [r7, #28]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	e00b      	b.n	8001f42 <SEGGER_SYSVIEW_Start+0x122>
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	1c59      	adds	r1, r3, #1
 8001f32:	6179      	str	r1, [r7, #20]
 8001f34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	09db      	lsrs	r3, r3, #7
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b7f      	cmp	r3, #127	; 0x7f
 8001f46:	d8f0      	bhi.n	8001f2a <SEGGER_SYSVIEW_Start+0x10a>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	617a      	str	r2, [r7, #20]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001f58:	2218      	movs	r2, #24
 8001f5a:	6839      	ldr	r1, [r7, #0]
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff fdc3 	bl	8001ae8 <_SendPacket>
      RECORD_END();
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <SEGGER_SYSVIEW_Start+0x16c>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <SEGGER_SYSVIEW_Start+0x16c>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001f76:	f000 f8e3 	bl	8002140 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001f7a:	f000 f8cd 	bl	8002118 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001f7e:	f000 fac9 	bl	8002514 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8001f82:	bf00      	nop
 8001f84:	3730      	adds	r7, #48	; 0x30
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000750 	.word	0x20000750
 8001f90:	080073d8 	.word	0x080073d8
 8001f94:	20000780 	.word	0x20000780

08001f98 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8001fa2:	f04f 0120 	mov.w	r1, #32
 8001fa6:	f381 8811 	msr	BASEPRI, r1
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	480b      	ldr	r0, [pc, #44]	; (8001fdc <SEGGER_SYSVIEW_Stop+0x44>)
 8001fae:	f7ff fca8 	bl	8001902 <_PreparePacket>
 8001fb2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <SEGGER_SYSVIEW_Stop+0x48>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001fbc:	220b      	movs	r2, #11
 8001fbe:	6839      	ldr	r1, [r7, #0]
 8001fc0:	6838      	ldr	r0, [r7, #0]
 8001fc2:	f7ff fd91 	bl	8001ae8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <SEGGER_SYSVIEW_Stop+0x48>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f383 8811 	msr	BASEPRI, r3
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000780 	.word	0x20000780
 8001fe0:	20000750 	.word	0x20000750

08001fe4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	; 0x30
 8001fe8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001fea:	f3ef 8311 	mrs	r3, BASEPRI
 8001fee:	f04f 0120 	mov.w	r1, #32
 8001ff2:	f381 8811 	msr	BASEPRI, r1
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	4845      	ldr	r0, [pc, #276]	; (8002110 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001ffa:	f7ff fc82 	bl	8001902 <_PreparePacket>
 8001ffe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002008:	4b42      	ldr	r3, [pc, #264]	; (8002114 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
 800200e:	e00b      	b.n	8002028 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	b2da      	uxtb	r2, r3
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	1c59      	adds	r1, r3, #1
 8002018:	62f9      	str	r1, [r7, #44]	; 0x2c
 800201a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002024:	09db      	lsrs	r3, r3, #7
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
 8002028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202a:	2b7f      	cmp	r3, #127	; 0x7f
 800202c:	d8f0      	bhi.n	8002010 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
 8002042:	4b34      	ldr	r3, [pc, #208]	; (8002114 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	623b      	str	r3, [r7, #32]
 8002048:	e00b      	b.n	8002062 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	1c59      	adds	r1, r3, #1
 8002052:	6279      	str	r1, [r7, #36]	; 0x24
 8002054:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	09db      	lsrs	r3, r3, #7
 8002060:	623b      	str	r3, [r7, #32]
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	2b7f      	cmp	r3, #127	; 0x7f
 8002066:	d8f0      	bhi.n	800204a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	627a      	str	r2, [r7, #36]	; 0x24
 800206e:	6a3a      	ldr	r2, [r7, #32]
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	e00b      	b.n	800209c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	1c59      	adds	r1, r3, #1
 800208c:	61f9      	str	r1, [r7, #28]
 800208e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	09db      	lsrs	r3, r3, #7
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b7f      	cmp	r3, #127	; 0x7f
 80020a0:	d8f0      	bhi.n	8002084 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	61fa      	str	r2, [r7, #28]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e00b      	b.n	80020d4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	1c59      	adds	r1, r3, #1
 80020c4:	6179      	str	r1, [r7, #20]
 80020c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	09db      	lsrs	r3, r3, #7
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b7f      	cmp	r3, #127	; 0x7f
 80020d8:	d8f0      	bhi.n	80020bc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	617a      	str	r2, [r7, #20]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80020ea:	2218      	movs	r2, #24
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68b8      	ldr	r0, [r7, #8]
 80020f0:	f7ff fcfa 	bl	8001ae8 <_SendPacket>
  RECORD_END();
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	4798      	blx	r3
  }
}
 8002108:	bf00      	nop
 800210a:	3730      	adds	r7, #48	; 0x30
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000780 	.word	0x20000780
 8002114:	20000750 	.word	0x20000750

08002118 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800212e:	4b03      	ldr	r3, [pc, #12]	; (800213c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4798      	blx	r3
  }
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000750 	.word	0x20000750

08002140 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01a      	beq.n	8002184 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002158:	4b10      	ldr	r3, [pc, #64]	; (800219c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4798      	blx	r3
 8002160:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002164:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002166:	e9d7 0100 	ldrd	r0, r1, [r7]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	000a      	movs	r2, r1
 8002174:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002176:	4613      	mov	r3, r2
 8002178:	461a      	mov	r2, r3
 800217a:	4621      	mov	r1, r4
 800217c:	200d      	movs	r0, #13
 800217e:	f7ff fdf5 	bl	8001d6c <SEGGER_SYSVIEW_RecordU32x2>
 8002182:	e006      	b.n	8002192 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	200c      	movs	r0, #12
 800218c:	f7ff fdb2 	bl	8001cf4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bd90      	pop	{r4, r7, pc}
 800219a:	bf00      	nop
 800219c:	20000750 	.word	0x20000750
 80021a0:	e0001004 	.word	0xe0001004

080021a4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80021aa:	f3ef 8311 	mrs	r3, BASEPRI
 80021ae:	f04f 0120 	mov.w	r1, #32
 80021b2:	f381 8811 	msr	BASEPRI, r1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	4819      	ldr	r0, [pc, #100]	; (8002220 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80021ba:	f7ff fba2 	bl	8001902 <_PreparePacket>
 80021be:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021cc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	e00b      	b.n	80021f0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	1c59      	adds	r1, r3, #1
 80021e0:	6179      	str	r1, [r7, #20]
 80021e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	09db      	lsrs	r3, r3, #7
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b7f      	cmp	r3, #127	; 0x7f
 80021f4:	d8f0      	bhi.n	80021d8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	617a      	str	r2, [r7, #20]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002206:	2202      	movs	r2, #2
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	68b8      	ldr	r0, [r7, #8]
 800220c:	f7ff fc6c 	bl	8001ae8 <_SendPacket>
  RECORD_END();
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f383 8811 	msr	BASEPRI, r3
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000780 	.word	0x20000780
 8002224:	e000ed04 	.word	0xe000ed04

08002228 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800222e:	f3ef 8311 	mrs	r3, BASEPRI
 8002232:	f04f 0120 	mov.w	r1, #32
 8002236:	f381 8811 	msr	BASEPRI, r1
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	4807      	ldr	r0, [pc, #28]	; (800225c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800223e:	f7ff fb60 	bl	8001902 <_PreparePacket>
 8002242:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002244:	2203      	movs	r2, #3
 8002246:	6839      	ldr	r1, [r7, #0]
 8002248:	6838      	ldr	r0, [r7, #0]
 800224a:	f7ff fc4d 	bl	8001ae8 <_SendPacket>
  RECORD_END();
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f383 8811 	msr	BASEPRI, r3
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000780 	.word	0x20000780

08002260 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002266:	f3ef 8311 	mrs	r3, BASEPRI
 800226a:	f04f 0120 	mov.w	r1, #32
 800226e:	f381 8811 	msr	BASEPRI, r1
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	4807      	ldr	r0, [pc, #28]	; (8002294 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002276:	f7ff fb44 	bl	8001902 <_PreparePacket>
 800227a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800227c:	2212      	movs	r2, #18
 800227e:	6839      	ldr	r1, [r7, #0]
 8002280:	6838      	ldr	r0, [r7, #0]
 8002282:	f7ff fc31 	bl	8001ae8 <_SendPacket>
  RECORD_END();
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f383 8811 	msr	BASEPRI, r3
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000780 	.word	0x20000780

08002298 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800229e:	f3ef 8311 	mrs	r3, BASEPRI
 80022a2:	f04f 0120 	mov.w	r1, #32
 80022a6:	f381 8811 	msr	BASEPRI, r1
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	4807      	ldr	r0, [pc, #28]	; (80022cc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80022ae:	f7ff fb28 	bl	8001902 <_PreparePacket>
 80022b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80022b4:	2211      	movs	r2, #17
 80022b6:	6839      	ldr	r1, [r7, #0]
 80022b8:	6838      	ldr	r0, [r7, #0]
 80022ba:	f7ff fc15 	bl	8001ae8 <_SendPacket>
  RECORD_END();
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f383 8811 	msr	BASEPRI, r3
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000780 	.word	0x20000780

080022d0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80022d8:	f3ef 8311 	mrs	r3, BASEPRI
 80022dc:	f04f 0120 	mov.w	r1, #32
 80022e0:	f381 8811 	msr	BASEPRI, r1
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	4819      	ldr	r0, [pc, #100]	; (800234c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80022e8:	f7ff fb0b 	bl	8001902 <_PreparePacket>
 80022ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	e00b      	b.n	800231e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	1c59      	adds	r1, r3, #1
 800230e:	61f9      	str	r1, [r7, #28]
 8002310:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	701a      	strb	r2, [r3, #0]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	09db      	lsrs	r3, r3, #7
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b7f      	cmp	r3, #127	; 0x7f
 8002322:	d8f0      	bhi.n	8002306 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	61fa      	str	r2, [r7, #28]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002334:	2204      	movs	r2, #4
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	6938      	ldr	r0, [r7, #16]
 800233a:	f7ff fbd5 	bl	8001ae8 <_SendPacket>
  RECORD_END();
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f383 8811 	msr	BASEPRI, r3
}
 8002344:	bf00      	nop
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000780 	.word	0x20000780
 8002350:	20000750 	.word	0x20000750

08002354 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800235c:	f3ef 8311 	mrs	r3, BASEPRI
 8002360:	f04f 0120 	mov.w	r1, #32
 8002364:	f381 8811 	msr	BASEPRI, r1
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	4819      	ldr	r0, [pc, #100]	; (80023d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800236c:	f7ff fac9 	bl	8001902 <_PreparePacket>
 8002370:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	e00b      	b.n	80023a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	1c59      	adds	r1, r3, #1
 8002392:	61f9      	str	r1, [r7, #28]
 8002394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	09db      	lsrs	r3, r3, #7
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b7f      	cmp	r3, #127	; 0x7f
 80023a6:	d8f0      	bhi.n	800238a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	61fa      	str	r2, [r7, #28]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80023b8:	2206      	movs	r2, #6
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	6938      	ldr	r0, [r7, #16]
 80023be:	f7ff fb93 	bl	8001ae8 <_SendPacket>
  RECORD_END();
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f383 8811 	msr	BASEPRI, r3
}
 80023c8:	bf00      	nop
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000780 	.word	0x20000780
 80023d4:	20000750 	.word	0x20000750

080023d8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d06d      	beq.n	80024c6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80023f0:	2300      	movs	r3, #0
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f4:	e008      	b.n	8002408 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	3301      	adds	r3, #1
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800240c:	429a      	cmp	r2, r3
 800240e:	d3f2      	bcc.n	80023f6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8002410:	e000      	b.n	8002414 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8002412:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d055      	beq.n	80024c6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800241a:	f3ef 8311 	mrs	r3, BASEPRI
 800241e:	f04f 0120 	mov.w	r1, #32
 8002422:	f381 8811 	msr	BASEPRI, r1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	482a      	ldr	r0, [pc, #168]	; (80024d4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800242a:	f7ff fa6a 	bl	8001902 <_PreparePacket>
 800242e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	623b      	str	r3, [r7, #32]
 800243c:	e00b      	b.n	8002456 <SEGGER_SYSVIEW_SendModule+0x7e>
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	1c59      	adds	r1, r3, #1
 8002446:	6279      	str	r1, [r7, #36]	; 0x24
 8002448:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	09db      	lsrs	r3, r3, #7
 8002454:	623b      	str	r3, [r7, #32]
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	2b7f      	cmp	r3, #127	; 0x7f
 800245a:	d8f0      	bhi.n	800243e <SEGGER_SYSVIEW_SendModule+0x66>
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	627a      	str	r2, [r7, #36]	; 0x24
 8002462:	6a3a      	ldr	r2, [r7, #32]
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	e00b      	b.n	8002490 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	1c59      	adds	r1, r3, #1
 8002480:	61f9      	str	r1, [r7, #28]
 8002482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	09db      	lsrs	r3, r3, #7
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b7f      	cmp	r3, #127	; 0x7f
 8002494:	d8f0      	bhi.n	8002478 <SEGGER_SYSVIEW_SendModule+0xa0>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	61fa      	str	r2, [r7, #28]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	4619      	mov	r1, r3
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f7ff f9da 	bl	8001868 <_EncodeStr>
 80024b4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80024b6:	2216      	movs	r2, #22
 80024b8:	68f9      	ldr	r1, [r7, #12]
 80024ba:	6938      	ldr	r0, [r7, #16]
 80024bc:	f7ff fb14 	bl	8001ae8 <_SendPacket>
      RECORD_END();
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80024c6:	bf00      	nop
 80024c8:	3730      	adds	r7, #48	; 0x30
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000778 	.word	0x20000778
 80024d4:	20000780 	.word	0x20000780

080024d8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00f      	beq.n	8002506 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f2      	bne.n	80024ec <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000778 	.word	0x20000778

08002514 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800251a:	f3ef 8311 	mrs	r3, BASEPRI
 800251e:	f04f 0120 	mov.w	r1, #32
 8002522:	f381 8811 	msr	BASEPRI, r1
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	4817      	ldr	r0, [pc, #92]	; (8002588 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800252a:	f7ff f9ea 	bl	8001902 <_PreparePacket>
 800252e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	e00b      	b.n	8002558 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1c59      	adds	r1, r3, #1
 8002548:	6179      	str	r1, [r7, #20]
 800254a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	09db      	lsrs	r3, r3, #7
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2b7f      	cmp	r3, #127	; 0x7f
 800255c:	d8f0      	bhi.n	8002540 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	617a      	str	r2, [r7, #20]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800256e:	221b      	movs	r2, #27
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	68b8      	ldr	r0, [r7, #8]
 8002574:	f7ff fab8 	bl	8001ae8 <_SendPacket>
  RECORD_END();
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f383 8811 	msr	BASEPRI, r3
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000780 	.word	0x20000780
 800258c:	2000077c 	.word	0x2000077c

08002590 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7ff f93a 	bl	800181c <SEGGER_RTT_Write>
  return len;
 80025a8:	683b      	ldr	r3, [r7, #0]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <GPIO_Config>:
 * orden estricto para poder que el sistema permita configurar el periférico X.
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento específico (relacionado con el periférico RCC), a esto lo llamaremos
 * simplemente "activar el periférico o activar la señal de reloj del periférico"
 */
void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periférico
	// Verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a88      	ldr	r2, [pc, #544]	; (80027ec <GPIO_Config+0x238>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d106      	bne.n	80025dc <GPIO_Config+0x28>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 80025ce:	4b88      	ldr	r3, [pc, #544]	; (80027f0 <GPIO_Config+0x23c>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a87      	ldr	r2, [pc, #540]	; (80027f0 <GPIO_Config+0x23c>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	e03a      	b.n	8002652 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a84      	ldr	r2, [pc, #528]	; (80027f4 <GPIO_Config+0x240>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d106      	bne.n	80025f4 <GPIO_Config+0x40>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);
 80025e6:	4b82      	ldr	r3, [pc, #520]	; (80027f0 <GPIO_Config+0x23c>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a81      	ldr	r2, [pc, #516]	; (80027f0 <GPIO_Config+0x23c>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	e02e      	b.n	8002652 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a7f      	ldr	r2, [pc, #508]	; (80027f8 <GPIO_Config+0x244>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d106      	bne.n	800260c <GPIO_Config+0x58>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);
 80025fe:	4b7c      	ldr	r3, [pc, #496]	; (80027f0 <GPIO_Config+0x23c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a7b      	ldr	r2, [pc, #492]	; (80027f0 <GPIO_Config+0x23c>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	e022      	b.n	8002652 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a7a      	ldr	r2, [pc, #488]	; (80027fc <GPIO_Config+0x248>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d106      	bne.n	8002624 <GPIO_Config+0x70>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);
 8002616:	4b76      	ldr	r3, [pc, #472]	; (80027f0 <GPIO_Config+0x23c>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a75      	ldr	r2, [pc, #468]	; (80027f0 <GPIO_Config+0x23c>)
 800261c:	f043 0308 	orr.w	r3, r3, #8
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	e016      	b.n	8002652 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a75      	ldr	r2, [pc, #468]	; (8002800 <GPIO_Config+0x24c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d106      	bne.n	800263c <GPIO_Config+0x88>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);
 800262e:	4b70      	ldr	r3, [pc, #448]	; (80027f0 <GPIO_Config+0x23c>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a6f      	ldr	r2, [pc, #444]	; (80027f0 <GPIO_Config+0x23c>)
 8002634:	f043 0310 	orr.w	r3, r3, #16
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	e00a      	b.n	8002652 <GPIO_Config+0x9e>
	}
	// Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a70      	ldr	r2, [pc, #448]	; (8002804 <GPIO_Config+0x250>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d105      	bne.n	8002652 <GPIO_Config+0x9e>
		// Escribimos 1 (SET) en la posición correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);
 8002646:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <GPIO_Config+0x23c>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a69      	ldr	r2, [pc, #420]	; (80027f0 <GPIO_Config+0x23c>)
 800264c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
	// Después de activado, podemos comenzar a configurar.

	// 2) Configurando el registro GPIOx_MODER
	// Acá estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda ese valor (shift left)
	// y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	795b      	ldrb	r3, [r3, #5]
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	791b      	ldrb	r3, [r3, #4]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	60fb      	str	r3, [r7, #12]

	// Antes de cargar el nuevo valor, limpiamos los bits específicos de ese registro (debemos escribir 0b00)
	// para lo cual aplicamos una máscara y una operacion bitwise AND
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	791b      	ldrb	r3, [r3, #4]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2103      	movs	r1, #3
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	4619      	mov	r1, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	400a      	ands	r2, r1
 8002680:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6819      	ldr	r1, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]

	// 3) Configurando el registro GPIOx_OTYPER
	// De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7a1b      	ldrb	r3, [r3, #8]
 8002696:	461a      	mov	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	791b      	ldrb	r3, [r3, #4]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	791b      	ldrb	r3, [r3, #4]
 80026ac:	4619      	mov	r1, r3
 80026ae:	2301      	movs	r3, #1
 80026b0:	408b      	lsls	r3, r1
 80026b2:	43db      	mvns	r3, r3
 80026b4:	4619      	mov	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	400a      	ands	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);//Si no funciona, juntar la multiplicación
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	799b      	ldrb	r3, [r3, #6]
 80026d2:	461a      	mov	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	791b      	ldrb	r3, [r3, #4]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2103      	movs	r1, #3
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	400a      	ands	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6899      	ldr	r1, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	79db      	ldrb	r3, [r3, #7]
 8002712:	461a      	mov	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	791b      	ldrb	r3, [r3, #4]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	60fb      	str	r3, [r7, #12]

	// Limpiando la posición antes de cargar la nueva configuración
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	791b      	ldrb	r3, [r3, #4]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2103      	movs	r1, #3
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	4619      	mov	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	400a      	ands	r2, r1
 800273c:	60da      	str	r2, [r3, #12]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68d9      	ldr	r1, [r3, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	430a      	orrs	r2, r1
 800274c:	60da      	str	r2, [r3, #12]

	// Esta es la parte para la configuración de las funciones alternativas... se verá luego
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	795b      	ldrb	r3, [r3, #5]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d143      	bne.n	80027de <GPIO_Config+0x22a>

		// Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	791b      	ldrb	r3, [r3, #4]
 800275a:	2b07      	cmp	r3, #7
 800275c:	d81f      	bhi.n	800279e <GPIO_Config+0x1ea>
			// Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	791b      	ldrb	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	60bb      	str	r3, [r7, #8]

			// Limpiamos primero la posición del registro que deseamos escribir a continuación
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a1a      	ldr	r2, [r3, #32]
 800276c:	210f      	movs	r1, #15
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	400a      	ands	r2, r1
 800277e:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6a1a      	ldr	r2, [r3, #32]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7a5b      	ldrb	r3, [r3, #9]
 800278a:	4619      	mov	r1, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	4619      	mov	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	621a      	str	r2, [r3, #32]
			// Y escribimos el valor configurado en la posición seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
} // Fin del GPIO_config
 800279c:	e01f      	b.n	80027de <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	3b08      	subs	r3, #8
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ae:	210f      	movs	r1, #15
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	400a      	ands	r2, r1
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7a5b      	ldrb	r3, [r3, #9]
 80027cc:	4619      	mov	r1, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	4619      	mov	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24
} // Fin del GPIO_config
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021c00 	.word	0x40021c00

08002808 <GPIO_WritePin>:

/**
 * FUNCIÓN utilizada para cambiar de estado al pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
	// Limpiamos la posición que deseamos
	//pPinHandler->pGPIOx->DDR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNUmber);
	if(newState == SET){
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d10d      	bne.n	8002836 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	791b      	ldrb	r3, [r3, #4]
 8002824:	4619      	mov	r1, r3
 8002826:	2301      	movs	r3, #1
 8002828:	408b      	lsls	r3, r1
 800282a:	4619      	mov	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	619a      	str	r2, [r3, #24]
	}
	else{
		// Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8002834:	e00d      	b.n	8002852 <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	791b      	ldrb	r3, [r3, #4]
 8002840:	3310      	adds	r3, #16
 8002842:	2101      	movs	r1, #1
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	4619      	mov	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <configPLL>:
#include <stdint.h>
#include <PLLDriver.h>


/** Función de configuración del PLL según la frecuencia en MHz*/
void configPLL(uint8_t PLLFreqMHz){
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]

	// 0. Se verifica antes que todo que el HSI sea el oscilador usado por el PLL
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC);
 800286a:	4b84      	ldr	r3, [pc, #528]	; (8002a7c <configPLL+0x21c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a83      	ldr	r2, [pc, #524]	; (8002a7c <configPLL+0x21c>)
 8002870:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002874:	6053      	str	r3, [r2, #4]

	// 1. Seleccionamos el regulador para la frecuencia deseada
	if(PLLFreqMHz<=64){
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d806      	bhi.n	800288a <configPLL+0x2a>
		PWR->CR |= (0x1 << PWR_CR_VOS_Pos);
 800287c:	4b80      	ldr	r3, [pc, #512]	; (8002a80 <configPLL+0x220>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a7f      	ldr	r2, [pc, #508]	; (8002a80 <configPLL+0x220>)
 8002882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e018      	b.n	80028bc <configPLL+0x5c>
	}
	else if((64<PLLFreqMHz)&&(PLLFreqMHz<=84)){
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d909      	bls.n	80028a4 <configPLL+0x44>
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	2b54      	cmp	r3, #84	; 0x54
 8002894:	d806      	bhi.n	80028a4 <configPLL+0x44>
		PWR->CR |= (0x2 << PWR_CR_VOS_Pos);
 8002896:	4b7a      	ldr	r3, [pc, #488]	; (8002a80 <configPLL+0x220>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a79      	ldr	r2, [pc, #484]	; (8002a80 <configPLL+0x220>)
 800289c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e00b      	b.n	80028bc <configPLL+0x5c>
	}
	else if((84<PLLFreqMHz)&&(PLLFreqMHz<=100)){
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	2b54      	cmp	r3, #84	; 0x54
 80028a8:	d908      	bls.n	80028bc <configPLL+0x5c>
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	2b64      	cmp	r3, #100	; 0x64
 80028ae:	d805      	bhi.n	80028bc <configPLL+0x5c>
		PWR->CR |= (0x3 << PWR_CR_VOS_Pos);
 80028b0:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <configPLL+0x220>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a72      	ldr	r2, [pc, #456]	; (8002a80 <configPLL+0x220>)
 80028b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ba:	6013      	str	r3, [r2, #0]
	}

	/* 2. Cambiamos los registros necesarios para poder acceder a la memoria flash */

	// 2.1 Prefetch, Data e Instruction Cache adecuados
	FLASH->ACR |= FLASH_ACR_PRFTEN;
 80028bc:	4b71      	ldr	r3, [pc, #452]	; (8002a84 <configPLL+0x224>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a70      	ldr	r2, [pc, #448]	; (8002a84 <configPLL+0x224>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c6:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_ICEN;
 80028c8:	4b6e      	ldr	r3, [pc, #440]	; (8002a84 <configPLL+0x224>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6d      	ldr	r2, [pc, #436]	; (8002a84 <configPLL+0x224>)
 80028ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d2:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_DCEN;
 80028d4:	4b6b      	ldr	r3, [pc, #428]	; (8002a84 <configPLL+0x224>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6a      	ldr	r2, [pc, #424]	; (8002a84 <configPLL+0x224>)
 80028da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028de:	6013      	str	r3, [r2, #0]

	// 2.2 Configuramos la respectiva latencia para PLLFreqMHz con X Wait States para 2.7 a 3.6 Voltios
	FLASH->ACR &= ~ FLASH_ACR_LATENCY;
 80028e0:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <configPLL+0x224>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a67      	ldr	r2, [pc, #412]	; (8002a84 <configPLL+0x224>)
 80028e6:	f023 0307 	bic.w	r3, r3, #7
 80028ea:	6013      	str	r3, [r2, #0]
	if((0<PLLFreqMHz)&&(PLLFreqMHz<=30)){
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <configPLL+0xa2>
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	2b1e      	cmp	r3, #30
 80028f6:	d804      	bhi.n	8002902 <configPLL+0xa2>
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 80028f8:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <configPLL+0x224>)
 80028fa:	4a62      	ldr	r2, [pc, #392]	; (8002a84 <configPLL+0x224>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	e027      	b.n	8002952 <configPLL+0xf2>
	}
	else if((30<PLLFreqMHz)&&(PLLFreqMHz<=64)){
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	2b1e      	cmp	r3, #30
 8002906:	d909      	bls.n	800291c <configPLL+0xbc>
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b40      	cmp	r3, #64	; 0x40
 800290c:	d806      	bhi.n	800291c <configPLL+0xbc>
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 800290e:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <configPLL+0x224>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a5c      	ldr	r2, [pc, #368]	; (8002a84 <configPLL+0x224>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01a      	b.n	8002952 <configPLL+0xf2>
	}
	else if((64<PLLFreqMHz)&&(PLLFreqMHz<=90)){
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d909      	bls.n	8002936 <configPLL+0xd6>
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	2b5a      	cmp	r3, #90	; 0x5a
 8002926:	d806      	bhi.n	8002936 <configPLL+0xd6>
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8002928:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <configPLL+0x224>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a55      	ldr	r2, [pc, #340]	; (8002a84 <configPLL+0x224>)
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	e00d      	b.n	8002952 <configPLL+0xf2>
	}
	else if((90<PLLFreqMHz)&&(PLLFreqMHz<=100)){
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	2b5a      	cmp	r3, #90	; 0x5a
 800293a:	d909      	bls.n	8002950 <configPLL+0xf0>
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d806      	bhi.n	8002950 <configPLL+0xf0>
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8002942:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <configPLL+0x224>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a4f      	ldr	r2, [pc, #316]	; (8002a84 <configPLL+0x224>)
 8002948:	f043 0303 	orr.w	r3, r3, #3
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e000      	b.n	8002952 <configPLL+0xf2>
	}
	else{
		__NOP();
 8002950:	bf00      	nop
	}

	/* 3. Ahora escogemos los pre-escaler adecuados */

	// 3.2 Definimos cual va hacer el valor del PLLM, pre-escaler que divide la frecuencia que recibe el PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <configPLL+0x21c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4a49      	ldr	r2, [pc, #292]	; (8002a7c <configPLL+0x21c>)
 8002958:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800295c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos); // Escogemos 8 y al VCO le llegan 2MHz, 16/8=2
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <configPLL+0x21c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4a46      	ldr	r2, [pc, #280]	; (8002a7c <configPLL+0x21c>)
 8002964:	f043 0308 	orr.w	r3, r3, #8
 8002968:	6053      	str	r3, [r2, #4]

	// 3.3 Definimos cual va a ser el valor del PLLN, pre-escaler que multiplica lo que entra al VCO
	/* NOTA: Como dejamos el PLLM en 8, y el PLLP en 2, el valor del PLLN siempre será igual
	 * a la PLLFreqMHz deseada, limitando que no pasemos de 100 MHz*/
	if(PLLFreqMHz<=100){
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	2b64      	cmp	r3, #100	; 0x64
 800296e:	d810      	bhi.n	8002992 <configPLL+0x132>
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 8002970:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <configPLL+0x21c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a41      	ldr	r2, [pc, #260]	; (8002a7c <configPLL+0x21c>)
 8002976:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800297a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800297e:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (PLLFreqMHz <<  RCC_PLLCFGR_PLLN_Pos); // Con esto si usamos 80 del VCO salen 160 MHz
 8002980:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <configPLL+0x21c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	79fa      	ldrb	r2, [r7, #7]
 8002986:	0192      	lsls	r2, r2, #6
 8002988:	4611      	mov	r1, r2
 800298a:	4a3c      	ldr	r2, [pc, #240]	; (8002a7c <configPLL+0x21c>)
 800298c:	430b      	orrs	r3, r1
 800298e:	6053      	str	r3, [r2, #4]
 8002990:	e000      	b.n	8002994 <configPLL+0x134>
	}
	else{
		__NOP();
 8002992:	bf00      	nop
	}

	// 3.4 Definimos cual va a ser el valor del PLLP, pre-escaler que divide lo que sale del VCO y llega al SysClk
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 8002994:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <configPLL+0x21c>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a38      	ldr	r2, [pc, #224]	; (8002a7c <configPLL+0x21c>)
 800299a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800299e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b00 <<RCC_PLLCFGR_PLLP_Pos); 	// Con esto dividimos por 2 y obtenemos 80 MHz, 160/2=80
 80029a0:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <configPLL+0x21c>)
 80029a2:	4a36      	ldr	r2, [pc, #216]	; (8002a7c <configPLL+0x21c>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	6053      	str	r3, [r2, #4]

	// 3.5 Ahora configuramos para AHB
	RCC->CFGR &= ~RCC_CFGR_HPRE;
 80029a8:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <configPLL+0x21c>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a33      	ldr	r2, [pc, #204]	; (8002a7c <configPLL+0x21c>)
 80029ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029b2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // Con esto para el bus AHB dividimos por 1, queda en 80 MHz, o lo mismo del PLLFreqMHz
 80029b4:	4b31      	ldr	r3, [pc, #196]	; (8002a7c <configPLL+0x21c>)
 80029b6:	4a31      	ldr	r2, [pc, #196]	; (8002a7c <configPLL+0x21c>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	6093      	str	r3, [r2, #8]

	// 3.6 Para APB1
	if(PLLFreqMHz>50){
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b32      	cmp	r3, #50	; 0x32
 80029c0:	d90c      	bls.n	80029dc <configPLL+0x17c>
		RCC->CFGR &= ~RCC_CFGR_PPRE1;
 80029c2:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <configPLL+0x21c>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	4a2d      	ldr	r2, [pc, #180]	; (8002a7c <configPLL+0x21c>)
 80029c8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80029cc:	6093      	str	r3, [r2, #8]
		// Si escogemos que se divide por 2, dan 40 MHz, esto para no exceder el límite de 50MHz
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <configPLL+0x21c>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <configPLL+0x21c>)
 80029d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029d8:	6093      	str	r3, [r2, #8]
 80029da:	e00e      	b.n	80029fa <configPLL+0x19a>
	}
	else if(PLLFreqMHz<=50){
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	2b32      	cmp	r3, #50	; 0x32
 80029e0:	d80a      	bhi.n	80029f8 <configPLL+0x198>
		RCC->CFGR &= ~RCC_CFGR_PPRE1;
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <configPLL+0x21c>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4a25      	ldr	r2, [pc, #148]	; (8002a7c <configPLL+0x21c>)
 80029e8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80029ec:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <configPLL+0x21c>)
 80029f0:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <configPLL+0x21c>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	6093      	str	r3, [r2, #8]
 80029f6:	e000      	b.n	80029fa <configPLL+0x19a>
	}
	else{
		__NOP();
 80029f8:	bf00      	nop
	}

	// 3.7 Para APB2
	// No se divide para valores en el registro menores a 4(binario), se queda en PLLFreqMHz, ya que admite hasta 100 MHz
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <configPLL+0x21c>)
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <configPLL+0x21c>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	6093      	str	r3, [r2, #8]


	// 4. Ahora activamos el PLL
	RCC->CR |= RCC_CR_PLLON;
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <configPLL+0x21c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <configPLL+0x21c>)
 8002a08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	6013      	str	r3, [r2, #0]

	// 5. Esperamos hasta que el hardware indique que el PLL esta desbloqueado
	while( !(RCC->CR & RCC_CR_PLLRDY)){
 8002a0e:	e000      	b.n	8002a12 <configPLL+0x1b2>
		__NOP();
 8002a10:	bf00      	nop
	while( !(RCC->CR & RCC_CR_PLLRDY)){
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <configPLL+0x21c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f8      	beq.n	8002a10 <configPLL+0x1b0>
	}

	/* 6. Ahora convertimos nuestro PLL en nuestro System Clock, solo si la PLLFreqMHz no supera los 100MHz
	 * de lo contrario se queda con el HSI */
	if(PLLFreqMHz<=100){
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	2b64      	cmp	r3, #100	; 0x64
 8002a22:	d80c      	bhi.n	8002a3e <configPLL+0x1de>
		RCC->CFGR &= ~RCC_CFGR_SW;
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <configPLL+0x21c>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <configPLL+0x21c>)
 8002a2a:	f023 0303 	bic.w	r3, r3, #3
 8002a2e:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_SW_1;
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <configPLL+0x21c>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <configPLL+0x21c>)
 8002a36:	f043 0302 	orr.w	r3, r3, #2
 8002a3a:	6093      	str	r3, [r2, #8]
 8002a3c:	e000      	b.n	8002a40 <configPLL+0x1e0>
	}
	else{
		__NOP();
 8002a3e:	bf00      	nop
	}


	/* 7. Hacemos la calibración, por ahora solo está para 100MHz, hay que configurar un MCO para verificar */
	if(PLLFreqMHz == 100){
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d113      	bne.n	8002a6e <configPLL+0x20e>
		 * para el timer que controla el blinky, se llegó a una frecuencia real de 101044394,86532803052349080092 Hz
		 * según la bibliografía consultada, los bits HSITRIM[4:0] que son los del 3 al 7 del RCC_CR, están por
		 * defecto en un valor de 16, incrementar en 1 binario aumenta X% del HSI la frecuencia real, y decrementar
		 * en 1 binario, disminuye X% del HSI la frecuencia real.
		 * Haciendo pruebas se llego a que este es el valor con el que queda mejor calibrado */
		RCC->CR &= ~(RCC_CR_HSITRIM);					// Limpio
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <configPLL+0x21c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <configPLL+0x21c>)
 8002a4c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a50:	6013      	str	r3, [r2, #0]
		RCC->CR |= (13 << RCC_CR_HSITRIM_Pos);			// Escribo
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <configPLL+0x21c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <configPLL+0x21c>)
 8002a58:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8002a5c:	6013      	str	r3, [r2, #0]

		//Esperamos hasta que el HSI vuelva a ser estable
		while(!(RCC->CR & RCC_CR_HSIRDY)){
 8002a5e:	e000      	b.n	8002a62 <configPLL+0x202>
			__NOP();
 8002a60:	bf00      	nop
		while(!(RCC->CR & RCC_CR_HSIRDY)){
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <configPLL+0x21c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f8      	beq.n	8002a60 <configPLL+0x200>
		}
		// Fin de la calibración
	}

}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000
 8002a84:	40023c00 	.word	0x40023c00

08002a88 <__errno>:
 8002a88:	4b01      	ldr	r3, [pc, #4]	; (8002a90 <__errno+0x8>)
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000000 	.word	0x20000000

08002a94 <__libc_init_array>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	4d0d      	ldr	r5, [pc, #52]	; (8002acc <__libc_init_array+0x38>)
 8002a98:	4c0d      	ldr	r4, [pc, #52]	; (8002ad0 <__libc_init_array+0x3c>)
 8002a9a:	1b64      	subs	r4, r4, r5
 8002a9c:	10a4      	asrs	r4, r4, #2
 8002a9e:	2600      	movs	r6, #0
 8002aa0:	42a6      	cmp	r6, r4
 8002aa2:	d109      	bne.n	8002ab8 <__libc_init_array+0x24>
 8002aa4:	4d0b      	ldr	r5, [pc, #44]	; (8002ad4 <__libc_init_array+0x40>)
 8002aa6:	4c0c      	ldr	r4, [pc, #48]	; (8002ad8 <__libc_init_array+0x44>)
 8002aa8:	f004 fc7c 	bl	80073a4 <_init>
 8002aac:	1b64      	subs	r4, r4, r5
 8002aae:	10a4      	asrs	r4, r4, #2
 8002ab0:	2600      	movs	r6, #0
 8002ab2:	42a6      	cmp	r6, r4
 8002ab4:	d105      	bne.n	8002ac2 <__libc_init_array+0x2e>
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abc:	4798      	blx	r3
 8002abe:	3601      	adds	r6, #1
 8002ac0:	e7ee      	b.n	8002aa0 <__libc_init_array+0xc>
 8002ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac6:	4798      	blx	r3
 8002ac8:	3601      	adds	r6, #1
 8002aca:	e7f2      	b.n	8002ab2 <__libc_init_array+0x1e>
 8002acc:	0800788c 	.word	0x0800788c
 8002ad0:	0800788c 	.word	0x0800788c
 8002ad4:	0800788c 	.word	0x0800788c
 8002ad8:	08007890 	.word	0x08007890

08002adc <memcpy>:
 8002adc:	440a      	add	r2, r1
 8002ade:	4291      	cmp	r1, r2
 8002ae0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002ae4:	d100      	bne.n	8002ae8 <memcpy+0xc>
 8002ae6:	4770      	bx	lr
 8002ae8:	b510      	push	{r4, lr}
 8002aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002af2:	4291      	cmp	r1, r2
 8002af4:	d1f9      	bne.n	8002aea <memcpy+0xe>
 8002af6:	bd10      	pop	{r4, pc}

08002af8 <memset>:
 8002af8:	4402      	add	r2, r0
 8002afa:	4603      	mov	r3, r0
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d100      	bne.n	8002b02 <memset+0xa>
 8002b00:	4770      	bx	lr
 8002b02:	f803 1b01 	strb.w	r1, [r3], #1
 8002b06:	e7f9      	b.n	8002afc <memset+0x4>

08002b08 <__cvt>:
 8002b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b0c:	ec55 4b10 	vmov	r4, r5, d0
 8002b10:	2d00      	cmp	r5, #0
 8002b12:	460e      	mov	r6, r1
 8002b14:	4619      	mov	r1, r3
 8002b16:	462b      	mov	r3, r5
 8002b18:	bfbb      	ittet	lt
 8002b1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002b1e:	461d      	movlt	r5, r3
 8002b20:	2300      	movge	r3, #0
 8002b22:	232d      	movlt	r3, #45	; 0x2d
 8002b24:	700b      	strb	r3, [r1, #0]
 8002b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002b2c:	4691      	mov	r9, r2
 8002b2e:	f023 0820 	bic.w	r8, r3, #32
 8002b32:	bfbc      	itt	lt
 8002b34:	4622      	movlt	r2, r4
 8002b36:	4614      	movlt	r4, r2
 8002b38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b3c:	d005      	beq.n	8002b4a <__cvt+0x42>
 8002b3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002b42:	d100      	bne.n	8002b46 <__cvt+0x3e>
 8002b44:	3601      	adds	r6, #1
 8002b46:	2102      	movs	r1, #2
 8002b48:	e000      	b.n	8002b4c <__cvt+0x44>
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	ab03      	add	r3, sp, #12
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	ab02      	add	r3, sp, #8
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	ec45 4b10 	vmov	d0, r4, r5
 8002b58:	4653      	mov	r3, sl
 8002b5a:	4632      	mov	r2, r6
 8002b5c:	f001 fdac 	bl	80046b8 <_dtoa_r>
 8002b60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002b64:	4607      	mov	r7, r0
 8002b66:	d102      	bne.n	8002b6e <__cvt+0x66>
 8002b68:	f019 0f01 	tst.w	r9, #1
 8002b6c:	d022      	beq.n	8002bb4 <__cvt+0xac>
 8002b6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b72:	eb07 0906 	add.w	r9, r7, r6
 8002b76:	d110      	bne.n	8002b9a <__cvt+0x92>
 8002b78:	783b      	ldrb	r3, [r7, #0]
 8002b7a:	2b30      	cmp	r3, #48	; 0x30
 8002b7c:	d10a      	bne.n	8002b94 <__cvt+0x8c>
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2300      	movs	r3, #0
 8002b82:	4620      	mov	r0, r4
 8002b84:	4629      	mov	r1, r5
 8002b86:	f7fd fff7 	bl	8000b78 <__aeabi_dcmpeq>
 8002b8a:	b918      	cbnz	r0, 8002b94 <__cvt+0x8c>
 8002b8c:	f1c6 0601 	rsb	r6, r6, #1
 8002b90:	f8ca 6000 	str.w	r6, [sl]
 8002b94:	f8da 3000 	ldr.w	r3, [sl]
 8002b98:	4499      	add	r9, r3
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f7fd ffe9 	bl	8000b78 <__aeabi_dcmpeq>
 8002ba6:	b108      	cbz	r0, 8002bac <__cvt+0xa4>
 8002ba8:	f8cd 900c 	str.w	r9, [sp, #12]
 8002bac:	2230      	movs	r2, #48	; 0x30
 8002bae:	9b03      	ldr	r3, [sp, #12]
 8002bb0:	454b      	cmp	r3, r9
 8002bb2:	d307      	bcc.n	8002bc4 <__cvt+0xbc>
 8002bb4:	9b03      	ldr	r3, [sp, #12]
 8002bb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002bb8:	1bdb      	subs	r3, r3, r7
 8002bba:	4638      	mov	r0, r7
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	b004      	add	sp, #16
 8002bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bc4:	1c59      	adds	r1, r3, #1
 8002bc6:	9103      	str	r1, [sp, #12]
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e7f0      	b.n	8002bae <__cvt+0xa6>

08002bcc <__exponent>:
 8002bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	bfb8      	it	lt
 8002bd4:	4249      	neglt	r1, r1
 8002bd6:	f803 2b02 	strb.w	r2, [r3], #2
 8002bda:	bfb4      	ite	lt
 8002bdc:	222d      	movlt	r2, #45	; 0x2d
 8002bde:	222b      	movge	r2, #43	; 0x2b
 8002be0:	2909      	cmp	r1, #9
 8002be2:	7042      	strb	r2, [r0, #1]
 8002be4:	dd2a      	ble.n	8002c3c <__exponent+0x70>
 8002be6:	f10d 0407 	add.w	r4, sp, #7
 8002bea:	46a4      	mov	ip, r4
 8002bec:	270a      	movs	r7, #10
 8002bee:	46a6      	mov	lr, r4
 8002bf0:	460a      	mov	r2, r1
 8002bf2:	fb91 f6f7 	sdiv	r6, r1, r7
 8002bf6:	fb07 1516 	mls	r5, r7, r6, r1
 8002bfa:	3530      	adds	r5, #48	; 0x30
 8002bfc:	2a63      	cmp	r2, #99	; 0x63
 8002bfe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002c02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002c06:	4631      	mov	r1, r6
 8002c08:	dcf1      	bgt.n	8002bee <__exponent+0x22>
 8002c0a:	3130      	adds	r1, #48	; 0x30
 8002c0c:	f1ae 0502 	sub.w	r5, lr, #2
 8002c10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002c14:	1c44      	adds	r4, r0, #1
 8002c16:	4629      	mov	r1, r5
 8002c18:	4561      	cmp	r1, ip
 8002c1a:	d30a      	bcc.n	8002c32 <__exponent+0x66>
 8002c1c:	f10d 0209 	add.w	r2, sp, #9
 8002c20:	eba2 020e 	sub.w	r2, r2, lr
 8002c24:	4565      	cmp	r5, ip
 8002c26:	bf88      	it	hi
 8002c28:	2200      	movhi	r2, #0
 8002c2a:	4413      	add	r3, r2
 8002c2c:	1a18      	subs	r0, r3, r0
 8002c2e:	b003      	add	sp, #12
 8002c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002c3a:	e7ed      	b.n	8002c18 <__exponent+0x4c>
 8002c3c:	2330      	movs	r3, #48	; 0x30
 8002c3e:	3130      	adds	r1, #48	; 0x30
 8002c40:	7083      	strb	r3, [r0, #2]
 8002c42:	70c1      	strb	r1, [r0, #3]
 8002c44:	1d03      	adds	r3, r0, #4
 8002c46:	e7f1      	b.n	8002c2c <__exponent+0x60>

08002c48 <_printf_float>:
 8002c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c4c:	ed2d 8b02 	vpush	{d8}
 8002c50:	b08d      	sub	sp, #52	; 0x34
 8002c52:	460c      	mov	r4, r1
 8002c54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002c58:	4616      	mov	r6, r2
 8002c5a:	461f      	mov	r7, r3
 8002c5c:	4605      	mov	r5, r0
 8002c5e:	f002 fe89 	bl	8005974 <_localeconv_r>
 8002c62:	f8d0 a000 	ldr.w	sl, [r0]
 8002c66:	4650      	mov	r0, sl
 8002c68:	f7fd fb04 	bl	8000274 <strlen>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	9305      	str	r3, [sp, #20]
 8002c74:	f8d8 3000 	ldr.w	r3, [r8]
 8002c78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002c7c:	3307      	adds	r3, #7
 8002c7e:	f023 0307 	bic.w	r3, r3, #7
 8002c82:	f103 0208 	add.w	r2, r3, #8
 8002c86:	f8c8 2000 	str.w	r2, [r8]
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002c92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002c96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002c9a:	9307      	str	r3, [sp, #28]
 8002c9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8002ca0:	ee08 0a10 	vmov	s16, r0
 8002ca4:	4b9f      	ldr	r3, [pc, #636]	; (8002f24 <_printf_float+0x2dc>)
 8002ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cae:	f7fd ff95 	bl	8000bdc <__aeabi_dcmpun>
 8002cb2:	bb88      	cbnz	r0, 8002d18 <_printf_float+0xd0>
 8002cb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002cb8:	4b9a      	ldr	r3, [pc, #616]	; (8002f24 <_printf_float+0x2dc>)
 8002cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cbe:	f7fd ff6f 	bl	8000ba0 <__aeabi_dcmple>
 8002cc2:	bb48      	cbnz	r0, 8002d18 <_printf_float+0xd0>
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4640      	mov	r0, r8
 8002cca:	4649      	mov	r1, r9
 8002ccc:	f7fd ff5e 	bl	8000b8c <__aeabi_dcmplt>
 8002cd0:	b110      	cbz	r0, 8002cd8 <_printf_float+0x90>
 8002cd2:	232d      	movs	r3, #45	; 0x2d
 8002cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cd8:	4b93      	ldr	r3, [pc, #588]	; (8002f28 <_printf_float+0x2e0>)
 8002cda:	4894      	ldr	r0, [pc, #592]	; (8002f2c <_printf_float+0x2e4>)
 8002cdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002ce0:	bf94      	ite	ls
 8002ce2:	4698      	movls	r8, r3
 8002ce4:	4680      	movhi	r8, r0
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	6123      	str	r3, [r4, #16]
 8002cea:	9b05      	ldr	r3, [sp, #20]
 8002cec:	f023 0204 	bic.w	r2, r3, #4
 8002cf0:	6022      	str	r2, [r4, #0]
 8002cf2:	f04f 0900 	mov.w	r9, #0
 8002cf6:	9700      	str	r7, [sp, #0]
 8002cf8:	4633      	mov	r3, r6
 8002cfa:	aa0b      	add	r2, sp, #44	; 0x2c
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f000 f9d8 	bl	80030b4 <_printf_common>
 8002d04:	3001      	adds	r0, #1
 8002d06:	f040 8090 	bne.w	8002e2a <_printf_float+0x1e2>
 8002d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d0e:	b00d      	add	sp, #52	; 0x34
 8002d10:	ecbd 8b02 	vpop	{d8}
 8002d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d18:	4642      	mov	r2, r8
 8002d1a:	464b      	mov	r3, r9
 8002d1c:	4640      	mov	r0, r8
 8002d1e:	4649      	mov	r1, r9
 8002d20:	f7fd ff5c 	bl	8000bdc <__aeabi_dcmpun>
 8002d24:	b140      	cbz	r0, 8002d38 <_printf_float+0xf0>
 8002d26:	464b      	mov	r3, r9
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bfbc      	itt	lt
 8002d2c:	232d      	movlt	r3, #45	; 0x2d
 8002d2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002d32:	487f      	ldr	r0, [pc, #508]	; (8002f30 <_printf_float+0x2e8>)
 8002d34:	4b7f      	ldr	r3, [pc, #508]	; (8002f34 <_printf_float+0x2ec>)
 8002d36:	e7d1      	b.n	8002cdc <_printf_float+0x94>
 8002d38:	6863      	ldr	r3, [r4, #4]
 8002d3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002d3e:	9206      	str	r2, [sp, #24]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	d13f      	bne.n	8002dc4 <_printf_float+0x17c>
 8002d44:	2306      	movs	r3, #6
 8002d46:	6063      	str	r3, [r4, #4]
 8002d48:	9b05      	ldr	r3, [sp, #20]
 8002d4a:	6861      	ldr	r1, [r4, #4]
 8002d4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d50:	2300      	movs	r3, #0
 8002d52:	9303      	str	r3, [sp, #12]
 8002d54:	ab0a      	add	r3, sp, #40	; 0x28
 8002d56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002d5a:	ab09      	add	r3, sp, #36	; 0x24
 8002d5c:	ec49 8b10 	vmov	d0, r8, r9
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	6022      	str	r2, [r4, #0]
 8002d64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002d68:	4628      	mov	r0, r5
 8002d6a:	f7ff fecd 	bl	8002b08 <__cvt>
 8002d6e:	9b06      	ldr	r3, [sp, #24]
 8002d70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d72:	2b47      	cmp	r3, #71	; 0x47
 8002d74:	4680      	mov	r8, r0
 8002d76:	d108      	bne.n	8002d8a <_printf_float+0x142>
 8002d78:	1cc8      	adds	r0, r1, #3
 8002d7a:	db02      	blt.n	8002d82 <_printf_float+0x13a>
 8002d7c:	6863      	ldr	r3, [r4, #4]
 8002d7e:	4299      	cmp	r1, r3
 8002d80:	dd41      	ble.n	8002e06 <_printf_float+0x1be>
 8002d82:	f1ab 0b02 	sub.w	fp, fp, #2
 8002d86:	fa5f fb8b 	uxtb.w	fp, fp
 8002d8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002d8e:	d820      	bhi.n	8002dd2 <_printf_float+0x18a>
 8002d90:	3901      	subs	r1, #1
 8002d92:	465a      	mov	r2, fp
 8002d94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d98:	9109      	str	r1, [sp, #36]	; 0x24
 8002d9a:	f7ff ff17 	bl	8002bcc <__exponent>
 8002d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002da0:	1813      	adds	r3, r2, r0
 8002da2:	2a01      	cmp	r2, #1
 8002da4:	4681      	mov	r9, r0
 8002da6:	6123      	str	r3, [r4, #16]
 8002da8:	dc02      	bgt.n	8002db0 <_printf_float+0x168>
 8002daa:	6822      	ldr	r2, [r4, #0]
 8002dac:	07d2      	lsls	r2, r2, #31
 8002dae:	d501      	bpl.n	8002db4 <_printf_float+0x16c>
 8002db0:	3301      	adds	r3, #1
 8002db2:	6123      	str	r3, [r4, #16]
 8002db4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d09c      	beq.n	8002cf6 <_printf_float+0xae>
 8002dbc:	232d      	movs	r3, #45	; 0x2d
 8002dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dc2:	e798      	b.n	8002cf6 <_printf_float+0xae>
 8002dc4:	9a06      	ldr	r2, [sp, #24]
 8002dc6:	2a47      	cmp	r2, #71	; 0x47
 8002dc8:	d1be      	bne.n	8002d48 <_printf_float+0x100>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1bc      	bne.n	8002d48 <_printf_float+0x100>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e7b9      	b.n	8002d46 <_printf_float+0xfe>
 8002dd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002dd6:	d118      	bne.n	8002e0a <_printf_float+0x1c2>
 8002dd8:	2900      	cmp	r1, #0
 8002dda:	6863      	ldr	r3, [r4, #4]
 8002ddc:	dd0b      	ble.n	8002df6 <_printf_float+0x1ae>
 8002dde:	6121      	str	r1, [r4, #16]
 8002de0:	b913      	cbnz	r3, 8002de8 <_printf_float+0x1a0>
 8002de2:	6822      	ldr	r2, [r4, #0]
 8002de4:	07d0      	lsls	r0, r2, #31
 8002de6:	d502      	bpl.n	8002dee <_printf_float+0x1a6>
 8002de8:	3301      	adds	r3, #1
 8002dea:	440b      	add	r3, r1
 8002dec:	6123      	str	r3, [r4, #16]
 8002dee:	65a1      	str	r1, [r4, #88]	; 0x58
 8002df0:	f04f 0900 	mov.w	r9, #0
 8002df4:	e7de      	b.n	8002db4 <_printf_float+0x16c>
 8002df6:	b913      	cbnz	r3, 8002dfe <_printf_float+0x1b6>
 8002df8:	6822      	ldr	r2, [r4, #0]
 8002dfa:	07d2      	lsls	r2, r2, #31
 8002dfc:	d501      	bpl.n	8002e02 <_printf_float+0x1ba>
 8002dfe:	3302      	adds	r3, #2
 8002e00:	e7f4      	b.n	8002dec <_printf_float+0x1a4>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e7f2      	b.n	8002dec <_printf_float+0x1a4>
 8002e06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e0c:	4299      	cmp	r1, r3
 8002e0e:	db05      	blt.n	8002e1c <_printf_float+0x1d4>
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	6121      	str	r1, [r4, #16]
 8002e14:	07d8      	lsls	r0, r3, #31
 8002e16:	d5ea      	bpl.n	8002dee <_printf_float+0x1a6>
 8002e18:	1c4b      	adds	r3, r1, #1
 8002e1a:	e7e7      	b.n	8002dec <_printf_float+0x1a4>
 8002e1c:	2900      	cmp	r1, #0
 8002e1e:	bfd4      	ite	le
 8002e20:	f1c1 0202 	rsble	r2, r1, #2
 8002e24:	2201      	movgt	r2, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	e7e0      	b.n	8002dec <_printf_float+0x1a4>
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	055a      	lsls	r2, r3, #21
 8002e2e:	d407      	bmi.n	8002e40 <_printf_float+0x1f8>
 8002e30:	6923      	ldr	r3, [r4, #16]
 8002e32:	4642      	mov	r2, r8
 8002e34:	4631      	mov	r1, r6
 8002e36:	4628      	mov	r0, r5
 8002e38:	47b8      	blx	r7
 8002e3a:	3001      	adds	r0, #1
 8002e3c:	d12c      	bne.n	8002e98 <_printf_float+0x250>
 8002e3e:	e764      	b.n	8002d0a <_printf_float+0xc2>
 8002e40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002e44:	f240 80e0 	bls.w	8003008 <_printf_float+0x3c0>
 8002e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f7fd fe92 	bl	8000b78 <__aeabi_dcmpeq>
 8002e54:	2800      	cmp	r0, #0
 8002e56:	d034      	beq.n	8002ec2 <_printf_float+0x27a>
 8002e58:	4a37      	ldr	r2, [pc, #220]	; (8002f38 <_printf_float+0x2f0>)
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	4631      	mov	r1, r6
 8002e5e:	4628      	mov	r0, r5
 8002e60:	47b8      	blx	r7
 8002e62:	3001      	adds	r0, #1
 8002e64:	f43f af51 	beq.w	8002d0a <_printf_float+0xc2>
 8002e68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	db02      	blt.n	8002e76 <_printf_float+0x22e>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	07d8      	lsls	r0, r3, #31
 8002e74:	d510      	bpl.n	8002e98 <_printf_float+0x250>
 8002e76:	ee18 3a10 	vmov	r3, s16
 8002e7a:	4652      	mov	r2, sl
 8002e7c:	4631      	mov	r1, r6
 8002e7e:	4628      	mov	r0, r5
 8002e80:	47b8      	blx	r7
 8002e82:	3001      	adds	r0, #1
 8002e84:	f43f af41 	beq.w	8002d0a <_printf_float+0xc2>
 8002e88:	f04f 0800 	mov.w	r8, #0
 8002e8c:	f104 091a 	add.w	r9, r4, #26
 8002e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e92:	3b01      	subs	r3, #1
 8002e94:	4543      	cmp	r3, r8
 8002e96:	dc09      	bgt.n	8002eac <_printf_float+0x264>
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	079b      	lsls	r3, r3, #30
 8002e9c:	f100 8105 	bmi.w	80030aa <_printf_float+0x462>
 8002ea0:	68e0      	ldr	r0, [r4, #12]
 8002ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ea4:	4298      	cmp	r0, r3
 8002ea6:	bfb8      	it	lt
 8002ea8:	4618      	movlt	r0, r3
 8002eaa:	e730      	b.n	8002d0e <_printf_float+0xc6>
 8002eac:	2301      	movs	r3, #1
 8002eae:	464a      	mov	r2, r9
 8002eb0:	4631      	mov	r1, r6
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	47b8      	blx	r7
 8002eb6:	3001      	adds	r0, #1
 8002eb8:	f43f af27 	beq.w	8002d0a <_printf_float+0xc2>
 8002ebc:	f108 0801 	add.w	r8, r8, #1
 8002ec0:	e7e6      	b.n	8002e90 <_printf_float+0x248>
 8002ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	dc39      	bgt.n	8002f3c <_printf_float+0x2f4>
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <_printf_float+0x2f0>)
 8002eca:	2301      	movs	r3, #1
 8002ecc:	4631      	mov	r1, r6
 8002ece:	4628      	mov	r0, r5
 8002ed0:	47b8      	blx	r7
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	f43f af19 	beq.w	8002d0a <_printf_float+0xc2>
 8002ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002edc:	4313      	orrs	r3, r2
 8002ede:	d102      	bne.n	8002ee6 <_printf_float+0x29e>
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	07d9      	lsls	r1, r3, #31
 8002ee4:	d5d8      	bpl.n	8002e98 <_printf_float+0x250>
 8002ee6:	ee18 3a10 	vmov	r3, s16
 8002eea:	4652      	mov	r2, sl
 8002eec:	4631      	mov	r1, r6
 8002eee:	4628      	mov	r0, r5
 8002ef0:	47b8      	blx	r7
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	f43f af09 	beq.w	8002d0a <_printf_float+0xc2>
 8002ef8:	f04f 0900 	mov.w	r9, #0
 8002efc:	f104 0a1a 	add.w	sl, r4, #26
 8002f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f02:	425b      	negs	r3, r3
 8002f04:	454b      	cmp	r3, r9
 8002f06:	dc01      	bgt.n	8002f0c <_printf_float+0x2c4>
 8002f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f0a:	e792      	b.n	8002e32 <_printf_float+0x1ea>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4652      	mov	r2, sl
 8002f10:	4631      	mov	r1, r6
 8002f12:	4628      	mov	r0, r5
 8002f14:	47b8      	blx	r7
 8002f16:	3001      	adds	r0, #1
 8002f18:	f43f aef7 	beq.w	8002d0a <_printf_float+0xc2>
 8002f1c:	f109 0901 	add.w	r9, r9, #1
 8002f20:	e7ee      	b.n	8002f00 <_printf_float+0x2b8>
 8002f22:	bf00      	nop
 8002f24:	7fefffff 	.word	0x7fefffff
 8002f28:	080073e8 	.word	0x080073e8
 8002f2c:	080073ec 	.word	0x080073ec
 8002f30:	080073f4 	.word	0x080073f4
 8002f34:	080073f0 	.word	0x080073f0
 8002f38:	080073f8 	.word	0x080073f8
 8002f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f40:	429a      	cmp	r2, r3
 8002f42:	bfa8      	it	ge
 8002f44:	461a      	movge	r2, r3
 8002f46:	2a00      	cmp	r2, #0
 8002f48:	4691      	mov	r9, r2
 8002f4a:	dc37      	bgt.n	8002fbc <_printf_float+0x374>
 8002f4c:	f04f 0b00 	mov.w	fp, #0
 8002f50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f54:	f104 021a 	add.w	r2, r4, #26
 8002f58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f5a:	9305      	str	r3, [sp, #20]
 8002f5c:	eba3 0309 	sub.w	r3, r3, r9
 8002f60:	455b      	cmp	r3, fp
 8002f62:	dc33      	bgt.n	8002fcc <_printf_float+0x384>
 8002f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	db3b      	blt.n	8002fe4 <_printf_float+0x39c>
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	07da      	lsls	r2, r3, #31
 8002f70:	d438      	bmi.n	8002fe4 <_printf_float+0x39c>
 8002f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f74:	9a05      	ldr	r2, [sp, #20]
 8002f76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f78:	1a9a      	subs	r2, r3, r2
 8002f7a:	eba3 0901 	sub.w	r9, r3, r1
 8002f7e:	4591      	cmp	r9, r2
 8002f80:	bfa8      	it	ge
 8002f82:	4691      	movge	r9, r2
 8002f84:	f1b9 0f00 	cmp.w	r9, #0
 8002f88:	dc35      	bgt.n	8002ff6 <_printf_float+0x3ae>
 8002f8a:	f04f 0800 	mov.w	r8, #0
 8002f8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f92:	f104 0a1a 	add.w	sl, r4, #26
 8002f96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	eba3 0309 	sub.w	r3, r3, r9
 8002fa0:	4543      	cmp	r3, r8
 8002fa2:	f77f af79 	ble.w	8002e98 <_printf_float+0x250>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	4652      	mov	r2, sl
 8002faa:	4631      	mov	r1, r6
 8002fac:	4628      	mov	r0, r5
 8002fae:	47b8      	blx	r7
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	f43f aeaa 	beq.w	8002d0a <_printf_float+0xc2>
 8002fb6:	f108 0801 	add.w	r8, r8, #1
 8002fba:	e7ec      	b.n	8002f96 <_printf_float+0x34e>
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	4631      	mov	r1, r6
 8002fc0:	4642      	mov	r2, r8
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	47b8      	blx	r7
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	d1c0      	bne.n	8002f4c <_printf_float+0x304>
 8002fca:	e69e      	b.n	8002d0a <_printf_float+0xc2>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	4631      	mov	r1, r6
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	9205      	str	r2, [sp, #20]
 8002fd4:	47b8      	blx	r7
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	f43f ae97 	beq.w	8002d0a <_printf_float+0xc2>
 8002fdc:	9a05      	ldr	r2, [sp, #20]
 8002fde:	f10b 0b01 	add.w	fp, fp, #1
 8002fe2:	e7b9      	b.n	8002f58 <_printf_float+0x310>
 8002fe4:	ee18 3a10 	vmov	r3, s16
 8002fe8:	4652      	mov	r2, sl
 8002fea:	4631      	mov	r1, r6
 8002fec:	4628      	mov	r0, r5
 8002fee:	47b8      	blx	r7
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d1be      	bne.n	8002f72 <_printf_float+0x32a>
 8002ff4:	e689      	b.n	8002d0a <_printf_float+0xc2>
 8002ff6:	9a05      	ldr	r2, [sp, #20]
 8002ff8:	464b      	mov	r3, r9
 8002ffa:	4442      	add	r2, r8
 8002ffc:	4631      	mov	r1, r6
 8002ffe:	4628      	mov	r0, r5
 8003000:	47b8      	blx	r7
 8003002:	3001      	adds	r0, #1
 8003004:	d1c1      	bne.n	8002f8a <_printf_float+0x342>
 8003006:	e680      	b.n	8002d0a <_printf_float+0xc2>
 8003008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800300a:	2a01      	cmp	r2, #1
 800300c:	dc01      	bgt.n	8003012 <_printf_float+0x3ca>
 800300e:	07db      	lsls	r3, r3, #31
 8003010:	d538      	bpl.n	8003084 <_printf_float+0x43c>
 8003012:	2301      	movs	r3, #1
 8003014:	4642      	mov	r2, r8
 8003016:	4631      	mov	r1, r6
 8003018:	4628      	mov	r0, r5
 800301a:	47b8      	blx	r7
 800301c:	3001      	adds	r0, #1
 800301e:	f43f ae74 	beq.w	8002d0a <_printf_float+0xc2>
 8003022:	ee18 3a10 	vmov	r3, s16
 8003026:	4652      	mov	r2, sl
 8003028:	4631      	mov	r1, r6
 800302a:	4628      	mov	r0, r5
 800302c:	47b8      	blx	r7
 800302e:	3001      	adds	r0, #1
 8003030:	f43f ae6b 	beq.w	8002d0a <_printf_float+0xc2>
 8003034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003038:	2200      	movs	r2, #0
 800303a:	2300      	movs	r3, #0
 800303c:	f7fd fd9c 	bl	8000b78 <__aeabi_dcmpeq>
 8003040:	b9d8      	cbnz	r0, 800307a <_printf_float+0x432>
 8003042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003044:	f108 0201 	add.w	r2, r8, #1
 8003048:	3b01      	subs	r3, #1
 800304a:	4631      	mov	r1, r6
 800304c:	4628      	mov	r0, r5
 800304e:	47b8      	blx	r7
 8003050:	3001      	adds	r0, #1
 8003052:	d10e      	bne.n	8003072 <_printf_float+0x42a>
 8003054:	e659      	b.n	8002d0a <_printf_float+0xc2>
 8003056:	2301      	movs	r3, #1
 8003058:	4652      	mov	r2, sl
 800305a:	4631      	mov	r1, r6
 800305c:	4628      	mov	r0, r5
 800305e:	47b8      	blx	r7
 8003060:	3001      	adds	r0, #1
 8003062:	f43f ae52 	beq.w	8002d0a <_printf_float+0xc2>
 8003066:	f108 0801 	add.w	r8, r8, #1
 800306a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	4543      	cmp	r3, r8
 8003070:	dcf1      	bgt.n	8003056 <_printf_float+0x40e>
 8003072:	464b      	mov	r3, r9
 8003074:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003078:	e6dc      	b.n	8002e34 <_printf_float+0x1ec>
 800307a:	f04f 0800 	mov.w	r8, #0
 800307e:	f104 0a1a 	add.w	sl, r4, #26
 8003082:	e7f2      	b.n	800306a <_printf_float+0x422>
 8003084:	2301      	movs	r3, #1
 8003086:	4642      	mov	r2, r8
 8003088:	e7df      	b.n	800304a <_printf_float+0x402>
 800308a:	2301      	movs	r3, #1
 800308c:	464a      	mov	r2, r9
 800308e:	4631      	mov	r1, r6
 8003090:	4628      	mov	r0, r5
 8003092:	47b8      	blx	r7
 8003094:	3001      	adds	r0, #1
 8003096:	f43f ae38 	beq.w	8002d0a <_printf_float+0xc2>
 800309a:	f108 0801 	add.w	r8, r8, #1
 800309e:	68e3      	ldr	r3, [r4, #12]
 80030a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030a2:	1a5b      	subs	r3, r3, r1
 80030a4:	4543      	cmp	r3, r8
 80030a6:	dcf0      	bgt.n	800308a <_printf_float+0x442>
 80030a8:	e6fa      	b.n	8002ea0 <_printf_float+0x258>
 80030aa:	f04f 0800 	mov.w	r8, #0
 80030ae:	f104 0919 	add.w	r9, r4, #25
 80030b2:	e7f4      	b.n	800309e <_printf_float+0x456>

080030b4 <_printf_common>:
 80030b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b8:	4616      	mov	r6, r2
 80030ba:	4699      	mov	r9, r3
 80030bc:	688a      	ldr	r2, [r1, #8]
 80030be:	690b      	ldr	r3, [r1, #16]
 80030c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030c4:	4293      	cmp	r3, r2
 80030c6:	bfb8      	it	lt
 80030c8:	4613      	movlt	r3, r2
 80030ca:	6033      	str	r3, [r6, #0]
 80030cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030d0:	4607      	mov	r7, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	b10a      	cbz	r2, 80030da <_printf_common+0x26>
 80030d6:	3301      	adds	r3, #1
 80030d8:	6033      	str	r3, [r6, #0]
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	0699      	lsls	r1, r3, #26
 80030de:	bf42      	ittt	mi
 80030e0:	6833      	ldrmi	r3, [r6, #0]
 80030e2:	3302      	addmi	r3, #2
 80030e4:	6033      	strmi	r3, [r6, #0]
 80030e6:	6825      	ldr	r5, [r4, #0]
 80030e8:	f015 0506 	ands.w	r5, r5, #6
 80030ec:	d106      	bne.n	80030fc <_printf_common+0x48>
 80030ee:	f104 0a19 	add.w	sl, r4, #25
 80030f2:	68e3      	ldr	r3, [r4, #12]
 80030f4:	6832      	ldr	r2, [r6, #0]
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	42ab      	cmp	r3, r5
 80030fa:	dc26      	bgt.n	800314a <_printf_common+0x96>
 80030fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003100:	1e13      	subs	r3, r2, #0
 8003102:	6822      	ldr	r2, [r4, #0]
 8003104:	bf18      	it	ne
 8003106:	2301      	movne	r3, #1
 8003108:	0692      	lsls	r2, r2, #26
 800310a:	d42b      	bmi.n	8003164 <_printf_common+0xb0>
 800310c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003110:	4649      	mov	r1, r9
 8003112:	4638      	mov	r0, r7
 8003114:	47c0      	blx	r8
 8003116:	3001      	adds	r0, #1
 8003118:	d01e      	beq.n	8003158 <_printf_common+0xa4>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	68e5      	ldr	r5, [r4, #12]
 800311e:	6832      	ldr	r2, [r6, #0]
 8003120:	f003 0306 	and.w	r3, r3, #6
 8003124:	2b04      	cmp	r3, #4
 8003126:	bf08      	it	eq
 8003128:	1aad      	subeq	r5, r5, r2
 800312a:	68a3      	ldr	r3, [r4, #8]
 800312c:	6922      	ldr	r2, [r4, #16]
 800312e:	bf0c      	ite	eq
 8003130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003134:	2500      	movne	r5, #0
 8003136:	4293      	cmp	r3, r2
 8003138:	bfc4      	itt	gt
 800313a:	1a9b      	subgt	r3, r3, r2
 800313c:	18ed      	addgt	r5, r5, r3
 800313e:	2600      	movs	r6, #0
 8003140:	341a      	adds	r4, #26
 8003142:	42b5      	cmp	r5, r6
 8003144:	d11a      	bne.n	800317c <_printf_common+0xc8>
 8003146:	2000      	movs	r0, #0
 8003148:	e008      	b.n	800315c <_printf_common+0xa8>
 800314a:	2301      	movs	r3, #1
 800314c:	4652      	mov	r2, sl
 800314e:	4649      	mov	r1, r9
 8003150:	4638      	mov	r0, r7
 8003152:	47c0      	blx	r8
 8003154:	3001      	adds	r0, #1
 8003156:	d103      	bne.n	8003160 <_printf_common+0xac>
 8003158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800315c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003160:	3501      	adds	r5, #1
 8003162:	e7c6      	b.n	80030f2 <_printf_common+0x3e>
 8003164:	18e1      	adds	r1, r4, r3
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	2030      	movs	r0, #48	; 0x30
 800316a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800316e:	4422      	add	r2, r4
 8003170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003178:	3302      	adds	r3, #2
 800317a:	e7c7      	b.n	800310c <_printf_common+0x58>
 800317c:	2301      	movs	r3, #1
 800317e:	4622      	mov	r2, r4
 8003180:	4649      	mov	r1, r9
 8003182:	4638      	mov	r0, r7
 8003184:	47c0      	blx	r8
 8003186:	3001      	adds	r0, #1
 8003188:	d0e6      	beq.n	8003158 <_printf_common+0xa4>
 800318a:	3601      	adds	r6, #1
 800318c:	e7d9      	b.n	8003142 <_printf_common+0x8e>
	...

08003190 <_printf_i>:
 8003190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003194:	7e0f      	ldrb	r7, [r1, #24]
 8003196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003198:	2f78      	cmp	r7, #120	; 0x78
 800319a:	4691      	mov	r9, r2
 800319c:	4680      	mov	r8, r0
 800319e:	460c      	mov	r4, r1
 80031a0:	469a      	mov	sl, r3
 80031a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031a6:	d807      	bhi.n	80031b8 <_printf_i+0x28>
 80031a8:	2f62      	cmp	r7, #98	; 0x62
 80031aa:	d80a      	bhi.n	80031c2 <_printf_i+0x32>
 80031ac:	2f00      	cmp	r7, #0
 80031ae:	f000 80d8 	beq.w	8003362 <_printf_i+0x1d2>
 80031b2:	2f58      	cmp	r7, #88	; 0x58
 80031b4:	f000 80a3 	beq.w	80032fe <_printf_i+0x16e>
 80031b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031c0:	e03a      	b.n	8003238 <_printf_i+0xa8>
 80031c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031c6:	2b15      	cmp	r3, #21
 80031c8:	d8f6      	bhi.n	80031b8 <_printf_i+0x28>
 80031ca:	a101      	add	r1, pc, #4	; (adr r1, 80031d0 <_printf_i+0x40>)
 80031cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031d0:	08003229 	.word	0x08003229
 80031d4:	0800323d 	.word	0x0800323d
 80031d8:	080031b9 	.word	0x080031b9
 80031dc:	080031b9 	.word	0x080031b9
 80031e0:	080031b9 	.word	0x080031b9
 80031e4:	080031b9 	.word	0x080031b9
 80031e8:	0800323d 	.word	0x0800323d
 80031ec:	080031b9 	.word	0x080031b9
 80031f0:	080031b9 	.word	0x080031b9
 80031f4:	080031b9 	.word	0x080031b9
 80031f8:	080031b9 	.word	0x080031b9
 80031fc:	08003349 	.word	0x08003349
 8003200:	0800326d 	.word	0x0800326d
 8003204:	0800332b 	.word	0x0800332b
 8003208:	080031b9 	.word	0x080031b9
 800320c:	080031b9 	.word	0x080031b9
 8003210:	0800336b 	.word	0x0800336b
 8003214:	080031b9 	.word	0x080031b9
 8003218:	0800326d 	.word	0x0800326d
 800321c:	080031b9 	.word	0x080031b9
 8003220:	080031b9 	.word	0x080031b9
 8003224:	08003333 	.word	0x08003333
 8003228:	682b      	ldr	r3, [r5, #0]
 800322a:	1d1a      	adds	r2, r3, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	602a      	str	r2, [r5, #0]
 8003230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003238:	2301      	movs	r3, #1
 800323a:	e0a3      	b.n	8003384 <_printf_i+0x1f4>
 800323c:	6820      	ldr	r0, [r4, #0]
 800323e:	6829      	ldr	r1, [r5, #0]
 8003240:	0606      	lsls	r6, r0, #24
 8003242:	f101 0304 	add.w	r3, r1, #4
 8003246:	d50a      	bpl.n	800325e <_printf_i+0xce>
 8003248:	680e      	ldr	r6, [r1, #0]
 800324a:	602b      	str	r3, [r5, #0]
 800324c:	2e00      	cmp	r6, #0
 800324e:	da03      	bge.n	8003258 <_printf_i+0xc8>
 8003250:	232d      	movs	r3, #45	; 0x2d
 8003252:	4276      	negs	r6, r6
 8003254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003258:	485e      	ldr	r0, [pc, #376]	; (80033d4 <_printf_i+0x244>)
 800325a:	230a      	movs	r3, #10
 800325c:	e019      	b.n	8003292 <_printf_i+0x102>
 800325e:	680e      	ldr	r6, [r1, #0]
 8003260:	602b      	str	r3, [r5, #0]
 8003262:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003266:	bf18      	it	ne
 8003268:	b236      	sxthne	r6, r6
 800326a:	e7ef      	b.n	800324c <_printf_i+0xbc>
 800326c:	682b      	ldr	r3, [r5, #0]
 800326e:	6820      	ldr	r0, [r4, #0]
 8003270:	1d19      	adds	r1, r3, #4
 8003272:	6029      	str	r1, [r5, #0]
 8003274:	0601      	lsls	r1, r0, #24
 8003276:	d501      	bpl.n	800327c <_printf_i+0xec>
 8003278:	681e      	ldr	r6, [r3, #0]
 800327a:	e002      	b.n	8003282 <_printf_i+0xf2>
 800327c:	0646      	lsls	r6, r0, #25
 800327e:	d5fb      	bpl.n	8003278 <_printf_i+0xe8>
 8003280:	881e      	ldrh	r6, [r3, #0]
 8003282:	4854      	ldr	r0, [pc, #336]	; (80033d4 <_printf_i+0x244>)
 8003284:	2f6f      	cmp	r7, #111	; 0x6f
 8003286:	bf0c      	ite	eq
 8003288:	2308      	moveq	r3, #8
 800328a:	230a      	movne	r3, #10
 800328c:	2100      	movs	r1, #0
 800328e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003292:	6865      	ldr	r5, [r4, #4]
 8003294:	60a5      	str	r5, [r4, #8]
 8003296:	2d00      	cmp	r5, #0
 8003298:	bfa2      	ittt	ge
 800329a:	6821      	ldrge	r1, [r4, #0]
 800329c:	f021 0104 	bicge.w	r1, r1, #4
 80032a0:	6021      	strge	r1, [r4, #0]
 80032a2:	b90e      	cbnz	r6, 80032a8 <_printf_i+0x118>
 80032a4:	2d00      	cmp	r5, #0
 80032a6:	d04d      	beq.n	8003344 <_printf_i+0x1b4>
 80032a8:	4615      	mov	r5, r2
 80032aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80032ae:	fb03 6711 	mls	r7, r3, r1, r6
 80032b2:	5dc7      	ldrb	r7, [r0, r7]
 80032b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032b8:	4637      	mov	r7, r6
 80032ba:	42bb      	cmp	r3, r7
 80032bc:	460e      	mov	r6, r1
 80032be:	d9f4      	bls.n	80032aa <_printf_i+0x11a>
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d10b      	bne.n	80032dc <_printf_i+0x14c>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	07de      	lsls	r6, r3, #31
 80032c8:	d508      	bpl.n	80032dc <_printf_i+0x14c>
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	6861      	ldr	r1, [r4, #4]
 80032ce:	4299      	cmp	r1, r3
 80032d0:	bfde      	ittt	le
 80032d2:	2330      	movle	r3, #48	; 0x30
 80032d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80032dc:	1b52      	subs	r2, r2, r5
 80032de:	6122      	str	r2, [r4, #16]
 80032e0:	f8cd a000 	str.w	sl, [sp]
 80032e4:	464b      	mov	r3, r9
 80032e6:	aa03      	add	r2, sp, #12
 80032e8:	4621      	mov	r1, r4
 80032ea:	4640      	mov	r0, r8
 80032ec:	f7ff fee2 	bl	80030b4 <_printf_common>
 80032f0:	3001      	adds	r0, #1
 80032f2:	d14c      	bne.n	800338e <_printf_i+0x1fe>
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032f8:	b004      	add	sp, #16
 80032fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032fe:	4835      	ldr	r0, [pc, #212]	; (80033d4 <_printf_i+0x244>)
 8003300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003304:	6829      	ldr	r1, [r5, #0]
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	f851 6b04 	ldr.w	r6, [r1], #4
 800330c:	6029      	str	r1, [r5, #0]
 800330e:	061d      	lsls	r5, r3, #24
 8003310:	d514      	bpl.n	800333c <_printf_i+0x1ac>
 8003312:	07df      	lsls	r7, r3, #31
 8003314:	bf44      	itt	mi
 8003316:	f043 0320 	orrmi.w	r3, r3, #32
 800331a:	6023      	strmi	r3, [r4, #0]
 800331c:	b91e      	cbnz	r6, 8003326 <_printf_i+0x196>
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	f023 0320 	bic.w	r3, r3, #32
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	2310      	movs	r3, #16
 8003328:	e7b0      	b.n	800328c <_printf_i+0xfc>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	f043 0320 	orr.w	r3, r3, #32
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	2378      	movs	r3, #120	; 0x78
 8003334:	4828      	ldr	r0, [pc, #160]	; (80033d8 <_printf_i+0x248>)
 8003336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800333a:	e7e3      	b.n	8003304 <_printf_i+0x174>
 800333c:	0659      	lsls	r1, r3, #25
 800333e:	bf48      	it	mi
 8003340:	b2b6      	uxthmi	r6, r6
 8003342:	e7e6      	b.n	8003312 <_printf_i+0x182>
 8003344:	4615      	mov	r5, r2
 8003346:	e7bb      	b.n	80032c0 <_printf_i+0x130>
 8003348:	682b      	ldr	r3, [r5, #0]
 800334a:	6826      	ldr	r6, [r4, #0]
 800334c:	6961      	ldr	r1, [r4, #20]
 800334e:	1d18      	adds	r0, r3, #4
 8003350:	6028      	str	r0, [r5, #0]
 8003352:	0635      	lsls	r5, r6, #24
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	d501      	bpl.n	800335c <_printf_i+0x1cc>
 8003358:	6019      	str	r1, [r3, #0]
 800335a:	e002      	b.n	8003362 <_printf_i+0x1d2>
 800335c:	0670      	lsls	r0, r6, #25
 800335e:	d5fb      	bpl.n	8003358 <_printf_i+0x1c8>
 8003360:	8019      	strh	r1, [r3, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	6123      	str	r3, [r4, #16]
 8003366:	4615      	mov	r5, r2
 8003368:	e7ba      	b.n	80032e0 <_printf_i+0x150>
 800336a:	682b      	ldr	r3, [r5, #0]
 800336c:	1d1a      	adds	r2, r3, #4
 800336e:	602a      	str	r2, [r5, #0]
 8003370:	681d      	ldr	r5, [r3, #0]
 8003372:	6862      	ldr	r2, [r4, #4]
 8003374:	2100      	movs	r1, #0
 8003376:	4628      	mov	r0, r5
 8003378:	f7fc ff8a 	bl	8000290 <memchr>
 800337c:	b108      	cbz	r0, 8003382 <_printf_i+0x1f2>
 800337e:	1b40      	subs	r0, r0, r5
 8003380:	6060      	str	r0, [r4, #4]
 8003382:	6863      	ldr	r3, [r4, #4]
 8003384:	6123      	str	r3, [r4, #16]
 8003386:	2300      	movs	r3, #0
 8003388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800338c:	e7a8      	b.n	80032e0 <_printf_i+0x150>
 800338e:	6923      	ldr	r3, [r4, #16]
 8003390:	462a      	mov	r2, r5
 8003392:	4649      	mov	r1, r9
 8003394:	4640      	mov	r0, r8
 8003396:	47d0      	blx	sl
 8003398:	3001      	adds	r0, #1
 800339a:	d0ab      	beq.n	80032f4 <_printf_i+0x164>
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	079b      	lsls	r3, r3, #30
 80033a0:	d413      	bmi.n	80033ca <_printf_i+0x23a>
 80033a2:	68e0      	ldr	r0, [r4, #12]
 80033a4:	9b03      	ldr	r3, [sp, #12]
 80033a6:	4298      	cmp	r0, r3
 80033a8:	bfb8      	it	lt
 80033aa:	4618      	movlt	r0, r3
 80033ac:	e7a4      	b.n	80032f8 <_printf_i+0x168>
 80033ae:	2301      	movs	r3, #1
 80033b0:	4632      	mov	r2, r6
 80033b2:	4649      	mov	r1, r9
 80033b4:	4640      	mov	r0, r8
 80033b6:	47d0      	blx	sl
 80033b8:	3001      	adds	r0, #1
 80033ba:	d09b      	beq.n	80032f4 <_printf_i+0x164>
 80033bc:	3501      	adds	r5, #1
 80033be:	68e3      	ldr	r3, [r4, #12]
 80033c0:	9903      	ldr	r1, [sp, #12]
 80033c2:	1a5b      	subs	r3, r3, r1
 80033c4:	42ab      	cmp	r3, r5
 80033c6:	dcf2      	bgt.n	80033ae <_printf_i+0x21e>
 80033c8:	e7eb      	b.n	80033a2 <_printf_i+0x212>
 80033ca:	2500      	movs	r5, #0
 80033cc:	f104 0619 	add.w	r6, r4, #25
 80033d0:	e7f5      	b.n	80033be <_printf_i+0x22e>
 80033d2:	bf00      	nop
 80033d4:	080073fa 	.word	0x080073fa
 80033d8:	0800740b 	.word	0x0800740b

080033dc <_scanf_float>:
 80033dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e0:	b087      	sub	sp, #28
 80033e2:	4617      	mov	r7, r2
 80033e4:	9303      	str	r3, [sp, #12]
 80033e6:	688b      	ldr	r3, [r1, #8]
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80033ee:	bf83      	ittte	hi
 80033f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80033f4:	195b      	addhi	r3, r3, r5
 80033f6:	9302      	strhi	r3, [sp, #8]
 80033f8:	2300      	movls	r3, #0
 80033fa:	bf86      	itte	hi
 80033fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003400:	608b      	strhi	r3, [r1, #8]
 8003402:	9302      	strls	r3, [sp, #8]
 8003404:	680b      	ldr	r3, [r1, #0]
 8003406:	468b      	mov	fp, r1
 8003408:	2500      	movs	r5, #0
 800340a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800340e:	f84b 3b1c 	str.w	r3, [fp], #28
 8003412:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003416:	4680      	mov	r8, r0
 8003418:	460c      	mov	r4, r1
 800341a:	465e      	mov	r6, fp
 800341c:	46aa      	mov	sl, r5
 800341e:	46a9      	mov	r9, r5
 8003420:	9501      	str	r5, [sp, #4]
 8003422:	68a2      	ldr	r2, [r4, #8]
 8003424:	b152      	cbz	r2, 800343c <_scanf_float+0x60>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b4e      	cmp	r3, #78	; 0x4e
 800342c:	d864      	bhi.n	80034f8 <_scanf_float+0x11c>
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d83c      	bhi.n	80034ac <_scanf_float+0xd0>
 8003432:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003436:	b2c8      	uxtb	r0, r1
 8003438:	280e      	cmp	r0, #14
 800343a:	d93a      	bls.n	80034b2 <_scanf_float+0xd6>
 800343c:	f1b9 0f00 	cmp.w	r9, #0
 8003440:	d003      	beq.n	800344a <_scanf_float+0x6e>
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800344e:	f1ba 0f01 	cmp.w	sl, #1
 8003452:	f200 8113 	bhi.w	800367c <_scanf_float+0x2a0>
 8003456:	455e      	cmp	r6, fp
 8003458:	f200 8105 	bhi.w	8003666 <_scanf_float+0x28a>
 800345c:	2501      	movs	r5, #1
 800345e:	4628      	mov	r0, r5
 8003460:	b007      	add	sp, #28
 8003462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003466:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800346a:	2a0d      	cmp	r2, #13
 800346c:	d8e6      	bhi.n	800343c <_scanf_float+0x60>
 800346e:	a101      	add	r1, pc, #4	; (adr r1, 8003474 <_scanf_float+0x98>)
 8003470:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003474:	080035b3 	.word	0x080035b3
 8003478:	0800343d 	.word	0x0800343d
 800347c:	0800343d 	.word	0x0800343d
 8003480:	0800343d 	.word	0x0800343d
 8003484:	08003613 	.word	0x08003613
 8003488:	080035eb 	.word	0x080035eb
 800348c:	0800343d 	.word	0x0800343d
 8003490:	0800343d 	.word	0x0800343d
 8003494:	080035c1 	.word	0x080035c1
 8003498:	0800343d 	.word	0x0800343d
 800349c:	0800343d 	.word	0x0800343d
 80034a0:	0800343d 	.word	0x0800343d
 80034a4:	0800343d 	.word	0x0800343d
 80034a8:	08003579 	.word	0x08003579
 80034ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80034b0:	e7db      	b.n	800346a <_scanf_float+0x8e>
 80034b2:	290e      	cmp	r1, #14
 80034b4:	d8c2      	bhi.n	800343c <_scanf_float+0x60>
 80034b6:	a001      	add	r0, pc, #4	; (adr r0, 80034bc <_scanf_float+0xe0>)
 80034b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80034bc:	0800356b 	.word	0x0800356b
 80034c0:	0800343d 	.word	0x0800343d
 80034c4:	0800356b 	.word	0x0800356b
 80034c8:	080035ff 	.word	0x080035ff
 80034cc:	0800343d 	.word	0x0800343d
 80034d0:	08003519 	.word	0x08003519
 80034d4:	08003555 	.word	0x08003555
 80034d8:	08003555 	.word	0x08003555
 80034dc:	08003555 	.word	0x08003555
 80034e0:	08003555 	.word	0x08003555
 80034e4:	08003555 	.word	0x08003555
 80034e8:	08003555 	.word	0x08003555
 80034ec:	08003555 	.word	0x08003555
 80034f0:	08003555 	.word	0x08003555
 80034f4:	08003555 	.word	0x08003555
 80034f8:	2b6e      	cmp	r3, #110	; 0x6e
 80034fa:	d809      	bhi.n	8003510 <_scanf_float+0x134>
 80034fc:	2b60      	cmp	r3, #96	; 0x60
 80034fe:	d8b2      	bhi.n	8003466 <_scanf_float+0x8a>
 8003500:	2b54      	cmp	r3, #84	; 0x54
 8003502:	d077      	beq.n	80035f4 <_scanf_float+0x218>
 8003504:	2b59      	cmp	r3, #89	; 0x59
 8003506:	d199      	bne.n	800343c <_scanf_float+0x60>
 8003508:	2d07      	cmp	r5, #7
 800350a:	d197      	bne.n	800343c <_scanf_float+0x60>
 800350c:	2508      	movs	r5, #8
 800350e:	e029      	b.n	8003564 <_scanf_float+0x188>
 8003510:	2b74      	cmp	r3, #116	; 0x74
 8003512:	d06f      	beq.n	80035f4 <_scanf_float+0x218>
 8003514:	2b79      	cmp	r3, #121	; 0x79
 8003516:	e7f6      	b.n	8003506 <_scanf_float+0x12a>
 8003518:	6821      	ldr	r1, [r4, #0]
 800351a:	05c8      	lsls	r0, r1, #23
 800351c:	d51a      	bpl.n	8003554 <_scanf_float+0x178>
 800351e:	9b02      	ldr	r3, [sp, #8]
 8003520:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003524:	6021      	str	r1, [r4, #0]
 8003526:	f109 0901 	add.w	r9, r9, #1
 800352a:	b11b      	cbz	r3, 8003534 <_scanf_float+0x158>
 800352c:	3b01      	subs	r3, #1
 800352e:	3201      	adds	r2, #1
 8003530:	9302      	str	r3, [sp, #8]
 8003532:	60a2      	str	r2, [r4, #8]
 8003534:	68a3      	ldr	r3, [r4, #8]
 8003536:	3b01      	subs	r3, #1
 8003538:	60a3      	str	r3, [r4, #8]
 800353a:	6923      	ldr	r3, [r4, #16]
 800353c:	3301      	adds	r3, #1
 800353e:	6123      	str	r3, [r4, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	f340 8084 	ble.w	8003654 <_scanf_float+0x278>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	3301      	adds	r3, #1
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	e766      	b.n	8003422 <_scanf_float+0x46>
 8003554:	eb1a 0f05 	cmn.w	sl, r5
 8003558:	f47f af70 	bne.w	800343c <_scanf_float+0x60>
 800355c:	6822      	ldr	r2, [r4, #0]
 800355e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003562:	6022      	str	r2, [r4, #0]
 8003564:	f806 3b01 	strb.w	r3, [r6], #1
 8003568:	e7e4      	b.n	8003534 <_scanf_float+0x158>
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	0610      	lsls	r0, r2, #24
 800356e:	f57f af65 	bpl.w	800343c <_scanf_float+0x60>
 8003572:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003576:	e7f4      	b.n	8003562 <_scanf_float+0x186>
 8003578:	f1ba 0f00 	cmp.w	sl, #0
 800357c:	d10e      	bne.n	800359c <_scanf_float+0x1c0>
 800357e:	f1b9 0f00 	cmp.w	r9, #0
 8003582:	d10e      	bne.n	80035a2 <_scanf_float+0x1c6>
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800358a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800358e:	d108      	bne.n	80035a2 <_scanf_float+0x1c6>
 8003590:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003594:	6022      	str	r2, [r4, #0]
 8003596:	f04f 0a01 	mov.w	sl, #1
 800359a:	e7e3      	b.n	8003564 <_scanf_float+0x188>
 800359c:	f1ba 0f02 	cmp.w	sl, #2
 80035a0:	d055      	beq.n	800364e <_scanf_float+0x272>
 80035a2:	2d01      	cmp	r5, #1
 80035a4:	d002      	beq.n	80035ac <_scanf_float+0x1d0>
 80035a6:	2d04      	cmp	r5, #4
 80035a8:	f47f af48 	bne.w	800343c <_scanf_float+0x60>
 80035ac:	3501      	adds	r5, #1
 80035ae:	b2ed      	uxtb	r5, r5
 80035b0:	e7d8      	b.n	8003564 <_scanf_float+0x188>
 80035b2:	f1ba 0f01 	cmp.w	sl, #1
 80035b6:	f47f af41 	bne.w	800343c <_scanf_float+0x60>
 80035ba:	f04f 0a02 	mov.w	sl, #2
 80035be:	e7d1      	b.n	8003564 <_scanf_float+0x188>
 80035c0:	b97d      	cbnz	r5, 80035e2 <_scanf_float+0x206>
 80035c2:	f1b9 0f00 	cmp.w	r9, #0
 80035c6:	f47f af3c 	bne.w	8003442 <_scanf_float+0x66>
 80035ca:	6822      	ldr	r2, [r4, #0]
 80035cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80035d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80035d4:	f47f af39 	bne.w	800344a <_scanf_float+0x6e>
 80035d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80035dc:	6022      	str	r2, [r4, #0]
 80035de:	2501      	movs	r5, #1
 80035e0:	e7c0      	b.n	8003564 <_scanf_float+0x188>
 80035e2:	2d03      	cmp	r5, #3
 80035e4:	d0e2      	beq.n	80035ac <_scanf_float+0x1d0>
 80035e6:	2d05      	cmp	r5, #5
 80035e8:	e7de      	b.n	80035a8 <_scanf_float+0x1cc>
 80035ea:	2d02      	cmp	r5, #2
 80035ec:	f47f af26 	bne.w	800343c <_scanf_float+0x60>
 80035f0:	2503      	movs	r5, #3
 80035f2:	e7b7      	b.n	8003564 <_scanf_float+0x188>
 80035f4:	2d06      	cmp	r5, #6
 80035f6:	f47f af21 	bne.w	800343c <_scanf_float+0x60>
 80035fa:	2507      	movs	r5, #7
 80035fc:	e7b2      	b.n	8003564 <_scanf_float+0x188>
 80035fe:	6822      	ldr	r2, [r4, #0]
 8003600:	0591      	lsls	r1, r2, #22
 8003602:	f57f af1b 	bpl.w	800343c <_scanf_float+0x60>
 8003606:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800360a:	6022      	str	r2, [r4, #0]
 800360c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003610:	e7a8      	b.n	8003564 <_scanf_float+0x188>
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003618:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800361c:	d006      	beq.n	800362c <_scanf_float+0x250>
 800361e:	0550      	lsls	r0, r2, #21
 8003620:	f57f af0c 	bpl.w	800343c <_scanf_float+0x60>
 8003624:	f1b9 0f00 	cmp.w	r9, #0
 8003628:	f43f af0f 	beq.w	800344a <_scanf_float+0x6e>
 800362c:	0591      	lsls	r1, r2, #22
 800362e:	bf58      	it	pl
 8003630:	9901      	ldrpl	r1, [sp, #4]
 8003632:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003636:	bf58      	it	pl
 8003638:	eba9 0101 	subpl.w	r1, r9, r1
 800363c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003640:	bf58      	it	pl
 8003642:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003646:	6022      	str	r2, [r4, #0]
 8003648:	f04f 0900 	mov.w	r9, #0
 800364c:	e78a      	b.n	8003564 <_scanf_float+0x188>
 800364e:	f04f 0a03 	mov.w	sl, #3
 8003652:	e787      	b.n	8003564 <_scanf_float+0x188>
 8003654:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003658:	4639      	mov	r1, r7
 800365a:	4640      	mov	r0, r8
 800365c:	4798      	blx	r3
 800365e:	2800      	cmp	r0, #0
 8003660:	f43f aedf 	beq.w	8003422 <_scanf_float+0x46>
 8003664:	e6ea      	b.n	800343c <_scanf_float+0x60>
 8003666:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800366a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800366e:	463a      	mov	r2, r7
 8003670:	4640      	mov	r0, r8
 8003672:	4798      	blx	r3
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	3b01      	subs	r3, #1
 8003678:	6123      	str	r3, [r4, #16]
 800367a:	e6ec      	b.n	8003456 <_scanf_float+0x7a>
 800367c:	1e6b      	subs	r3, r5, #1
 800367e:	2b06      	cmp	r3, #6
 8003680:	d825      	bhi.n	80036ce <_scanf_float+0x2f2>
 8003682:	2d02      	cmp	r5, #2
 8003684:	d836      	bhi.n	80036f4 <_scanf_float+0x318>
 8003686:	455e      	cmp	r6, fp
 8003688:	f67f aee8 	bls.w	800345c <_scanf_float+0x80>
 800368c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003690:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003694:	463a      	mov	r2, r7
 8003696:	4640      	mov	r0, r8
 8003698:	4798      	blx	r3
 800369a:	6923      	ldr	r3, [r4, #16]
 800369c:	3b01      	subs	r3, #1
 800369e:	6123      	str	r3, [r4, #16]
 80036a0:	e7f1      	b.n	8003686 <_scanf_float+0x2aa>
 80036a2:	9802      	ldr	r0, [sp, #8]
 80036a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80036ac:	9002      	str	r0, [sp, #8]
 80036ae:	463a      	mov	r2, r7
 80036b0:	4640      	mov	r0, r8
 80036b2:	4798      	blx	r3
 80036b4:	6923      	ldr	r3, [r4, #16]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	6123      	str	r3, [r4, #16]
 80036ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80036be:	fa5f fa8a 	uxtb.w	sl, sl
 80036c2:	f1ba 0f02 	cmp.w	sl, #2
 80036c6:	d1ec      	bne.n	80036a2 <_scanf_float+0x2c6>
 80036c8:	3d03      	subs	r5, #3
 80036ca:	b2ed      	uxtb	r5, r5
 80036cc:	1b76      	subs	r6, r6, r5
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	05da      	lsls	r2, r3, #23
 80036d2:	d52f      	bpl.n	8003734 <_scanf_float+0x358>
 80036d4:	055b      	lsls	r3, r3, #21
 80036d6:	d510      	bpl.n	80036fa <_scanf_float+0x31e>
 80036d8:	455e      	cmp	r6, fp
 80036da:	f67f aebf 	bls.w	800345c <_scanf_float+0x80>
 80036de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80036e6:	463a      	mov	r2, r7
 80036e8:	4640      	mov	r0, r8
 80036ea:	4798      	blx	r3
 80036ec:	6923      	ldr	r3, [r4, #16]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	6123      	str	r3, [r4, #16]
 80036f2:	e7f1      	b.n	80036d8 <_scanf_float+0x2fc>
 80036f4:	46aa      	mov	sl, r5
 80036f6:	9602      	str	r6, [sp, #8]
 80036f8:	e7df      	b.n	80036ba <_scanf_float+0x2de>
 80036fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80036fe:	6923      	ldr	r3, [r4, #16]
 8003700:	2965      	cmp	r1, #101	; 0x65
 8003702:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003706:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	d00c      	beq.n	8003728 <_scanf_float+0x34c>
 800370e:	2945      	cmp	r1, #69	; 0x45
 8003710:	d00a      	beq.n	8003728 <_scanf_float+0x34c>
 8003712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003716:	463a      	mov	r2, r7
 8003718:	4640      	mov	r0, r8
 800371a:	4798      	blx	r3
 800371c:	6923      	ldr	r3, [r4, #16]
 800371e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003722:	3b01      	subs	r3, #1
 8003724:	1eb5      	subs	r5, r6, #2
 8003726:	6123      	str	r3, [r4, #16]
 8003728:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800372c:	463a      	mov	r2, r7
 800372e:	4640      	mov	r0, r8
 8003730:	4798      	blx	r3
 8003732:	462e      	mov	r6, r5
 8003734:	6825      	ldr	r5, [r4, #0]
 8003736:	f015 0510 	ands.w	r5, r5, #16
 800373a:	d159      	bne.n	80037f0 <_scanf_float+0x414>
 800373c:	7035      	strb	r5, [r6, #0]
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003748:	d11b      	bne.n	8003782 <_scanf_float+0x3a6>
 800374a:	9b01      	ldr	r3, [sp, #4]
 800374c:	454b      	cmp	r3, r9
 800374e:	eba3 0209 	sub.w	r2, r3, r9
 8003752:	d123      	bne.n	800379c <_scanf_float+0x3c0>
 8003754:	2200      	movs	r2, #0
 8003756:	4659      	mov	r1, fp
 8003758:	4640      	mov	r0, r8
 800375a:	f000 fe97 	bl	800448c <_strtod_r>
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	9b03      	ldr	r3, [sp, #12]
 8003762:	f012 0f02 	tst.w	r2, #2
 8003766:	ec57 6b10 	vmov	r6, r7, d0
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	d021      	beq.n	80037b2 <_scanf_float+0x3d6>
 800376e:	9903      	ldr	r1, [sp, #12]
 8003770:	1d1a      	adds	r2, r3, #4
 8003772:	600a      	str	r2, [r1, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	e9c3 6700 	strd	r6, r7, [r3]
 800377a:	68e3      	ldr	r3, [r4, #12]
 800377c:	3301      	adds	r3, #1
 800377e:	60e3      	str	r3, [r4, #12]
 8003780:	e66d      	b.n	800345e <_scanf_float+0x82>
 8003782:	9b04      	ldr	r3, [sp, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0e5      	beq.n	8003754 <_scanf_float+0x378>
 8003788:	9905      	ldr	r1, [sp, #20]
 800378a:	230a      	movs	r3, #10
 800378c:	462a      	mov	r2, r5
 800378e:	3101      	adds	r1, #1
 8003790:	4640      	mov	r0, r8
 8003792:	f000 ff03 	bl	800459c <_strtol_r>
 8003796:	9b04      	ldr	r3, [sp, #16]
 8003798:	9e05      	ldr	r6, [sp, #20]
 800379a:	1ac2      	subs	r2, r0, r3
 800379c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80037a0:	429e      	cmp	r6, r3
 80037a2:	bf28      	it	cs
 80037a4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80037a8:	4912      	ldr	r1, [pc, #72]	; (80037f4 <_scanf_float+0x418>)
 80037aa:	4630      	mov	r0, r6
 80037ac:	f000 f82c 	bl	8003808 <siprintf>
 80037b0:	e7d0      	b.n	8003754 <_scanf_float+0x378>
 80037b2:	9903      	ldr	r1, [sp, #12]
 80037b4:	f012 0f04 	tst.w	r2, #4
 80037b8:	f103 0204 	add.w	r2, r3, #4
 80037bc:	600a      	str	r2, [r1, #0]
 80037be:	d1d9      	bne.n	8003774 <_scanf_float+0x398>
 80037c0:	f8d3 8000 	ldr.w	r8, [r3]
 80037c4:	ee10 2a10 	vmov	r2, s0
 80037c8:	ee10 0a10 	vmov	r0, s0
 80037cc:	463b      	mov	r3, r7
 80037ce:	4639      	mov	r1, r7
 80037d0:	f7fd fa04 	bl	8000bdc <__aeabi_dcmpun>
 80037d4:	b128      	cbz	r0, 80037e2 <_scanf_float+0x406>
 80037d6:	4808      	ldr	r0, [pc, #32]	; (80037f8 <_scanf_float+0x41c>)
 80037d8:	f000 f810 	bl	80037fc <nanf>
 80037dc:	ed88 0a00 	vstr	s0, [r8]
 80037e0:	e7cb      	b.n	800377a <_scanf_float+0x39e>
 80037e2:	4630      	mov	r0, r6
 80037e4:	4639      	mov	r1, r7
 80037e6:	f7fd fa57 	bl	8000c98 <__aeabi_d2f>
 80037ea:	f8c8 0000 	str.w	r0, [r8]
 80037ee:	e7c4      	b.n	800377a <_scanf_float+0x39e>
 80037f0:	2500      	movs	r5, #0
 80037f2:	e634      	b.n	800345e <_scanf_float+0x82>
 80037f4:	0800741c 	.word	0x0800741c
 80037f8:	08007828 	.word	0x08007828

080037fc <nanf>:
 80037fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003804 <nanf+0x8>
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	7fc00000 	.word	0x7fc00000

08003808 <siprintf>:
 8003808:	b40e      	push	{r1, r2, r3}
 800380a:	b500      	push	{lr}
 800380c:	b09c      	sub	sp, #112	; 0x70
 800380e:	ab1d      	add	r3, sp, #116	; 0x74
 8003810:	9002      	str	r0, [sp, #8]
 8003812:	9006      	str	r0, [sp, #24]
 8003814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003818:	4809      	ldr	r0, [pc, #36]	; (8003840 <siprintf+0x38>)
 800381a:	9107      	str	r1, [sp, #28]
 800381c:	9104      	str	r1, [sp, #16]
 800381e:	4909      	ldr	r1, [pc, #36]	; (8003844 <siprintf+0x3c>)
 8003820:	f853 2b04 	ldr.w	r2, [r3], #4
 8003824:	9105      	str	r1, [sp, #20]
 8003826:	6800      	ldr	r0, [r0, #0]
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	a902      	add	r1, sp, #8
 800382c:	f002 fed4 	bl	80065d8 <_svfiprintf_r>
 8003830:	9b02      	ldr	r3, [sp, #8]
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	b01c      	add	sp, #112	; 0x70
 8003838:	f85d eb04 	ldr.w	lr, [sp], #4
 800383c:	b003      	add	sp, #12
 800383e:	4770      	bx	lr
 8003840:	20000000 	.word	0x20000000
 8003844:	ffff0208 	.word	0xffff0208

08003848 <sulp>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4604      	mov	r4, r0
 800384c:	460d      	mov	r5, r1
 800384e:	ec45 4b10 	vmov	d0, r4, r5
 8003852:	4616      	mov	r6, r2
 8003854:	f002 fc1e 	bl	8006094 <__ulp>
 8003858:	ec51 0b10 	vmov	r0, r1, d0
 800385c:	b17e      	cbz	r6, 800387e <sulp+0x36>
 800385e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003862:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003866:	2b00      	cmp	r3, #0
 8003868:	dd09      	ble.n	800387e <sulp+0x36>
 800386a:	051b      	lsls	r3, r3, #20
 800386c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003870:	2400      	movs	r4, #0
 8003872:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003876:	4622      	mov	r2, r4
 8003878:	462b      	mov	r3, r5
 800387a:	f7fc ff15 	bl	80006a8 <__aeabi_dmul>
 800387e:	bd70      	pop	{r4, r5, r6, pc}

08003880 <_strtod_l>:
 8003880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	ed2d 8b02 	vpush	{d8}
 8003888:	b09d      	sub	sp, #116	; 0x74
 800388a:	461f      	mov	r7, r3
 800388c:	2300      	movs	r3, #0
 800388e:	9318      	str	r3, [sp, #96]	; 0x60
 8003890:	4ba2      	ldr	r3, [pc, #648]	; (8003b1c <_strtod_l+0x29c>)
 8003892:	9213      	str	r2, [sp, #76]	; 0x4c
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	9305      	str	r3, [sp, #20]
 8003898:	4604      	mov	r4, r0
 800389a:	4618      	mov	r0, r3
 800389c:	4688      	mov	r8, r1
 800389e:	f7fc fce9 	bl	8000274 <strlen>
 80038a2:	f04f 0a00 	mov.w	sl, #0
 80038a6:	4605      	mov	r5, r0
 80038a8:	f04f 0b00 	mov.w	fp, #0
 80038ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80038b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80038b2:	781a      	ldrb	r2, [r3, #0]
 80038b4:	2a2b      	cmp	r2, #43	; 0x2b
 80038b6:	d04e      	beq.n	8003956 <_strtod_l+0xd6>
 80038b8:	d83b      	bhi.n	8003932 <_strtod_l+0xb2>
 80038ba:	2a0d      	cmp	r2, #13
 80038bc:	d834      	bhi.n	8003928 <_strtod_l+0xa8>
 80038be:	2a08      	cmp	r2, #8
 80038c0:	d834      	bhi.n	800392c <_strtod_l+0xac>
 80038c2:	2a00      	cmp	r2, #0
 80038c4:	d03e      	beq.n	8003944 <_strtod_l+0xc4>
 80038c6:	2300      	movs	r3, #0
 80038c8:	930a      	str	r3, [sp, #40]	; 0x28
 80038ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80038cc:	7833      	ldrb	r3, [r6, #0]
 80038ce:	2b30      	cmp	r3, #48	; 0x30
 80038d0:	f040 80b0 	bne.w	8003a34 <_strtod_l+0x1b4>
 80038d4:	7873      	ldrb	r3, [r6, #1]
 80038d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80038da:	2b58      	cmp	r3, #88	; 0x58
 80038dc:	d168      	bne.n	80039b0 <_strtod_l+0x130>
 80038de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	ab18      	add	r3, sp, #96	; 0x60
 80038e4:	9702      	str	r7, [sp, #8]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	4a8d      	ldr	r2, [pc, #564]	; (8003b20 <_strtod_l+0x2a0>)
 80038ea:	ab19      	add	r3, sp, #100	; 0x64
 80038ec:	a917      	add	r1, sp, #92	; 0x5c
 80038ee:	4620      	mov	r0, r4
 80038f0:	f001 fd38 	bl	8005364 <__gethex>
 80038f4:	f010 0707 	ands.w	r7, r0, #7
 80038f8:	4605      	mov	r5, r0
 80038fa:	d005      	beq.n	8003908 <_strtod_l+0x88>
 80038fc:	2f06      	cmp	r7, #6
 80038fe:	d12c      	bne.n	800395a <_strtod_l+0xda>
 8003900:	3601      	adds	r6, #1
 8003902:	2300      	movs	r3, #0
 8003904:	9617      	str	r6, [sp, #92]	; 0x5c
 8003906:	930a      	str	r3, [sp, #40]	; 0x28
 8003908:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 8590 	bne.w	8004430 <_strtod_l+0xbb0>
 8003910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003912:	b1eb      	cbz	r3, 8003950 <_strtod_l+0xd0>
 8003914:	4652      	mov	r2, sl
 8003916:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800391a:	ec43 2b10 	vmov	d0, r2, r3
 800391e:	b01d      	add	sp, #116	; 0x74
 8003920:	ecbd 8b02 	vpop	{d8}
 8003924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003928:	2a20      	cmp	r2, #32
 800392a:	d1cc      	bne.n	80038c6 <_strtod_l+0x46>
 800392c:	3301      	adds	r3, #1
 800392e:	9317      	str	r3, [sp, #92]	; 0x5c
 8003930:	e7be      	b.n	80038b0 <_strtod_l+0x30>
 8003932:	2a2d      	cmp	r2, #45	; 0x2d
 8003934:	d1c7      	bne.n	80038c6 <_strtod_l+0x46>
 8003936:	2201      	movs	r2, #1
 8003938:	920a      	str	r2, [sp, #40]	; 0x28
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	9217      	str	r2, [sp, #92]	; 0x5c
 800393e:	785b      	ldrb	r3, [r3, #1]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1c2      	bne.n	80038ca <_strtod_l+0x4a>
 8003944:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003946:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800394a:	2b00      	cmp	r3, #0
 800394c:	f040 856e 	bne.w	800442c <_strtod_l+0xbac>
 8003950:	4652      	mov	r2, sl
 8003952:	465b      	mov	r3, fp
 8003954:	e7e1      	b.n	800391a <_strtod_l+0x9a>
 8003956:	2200      	movs	r2, #0
 8003958:	e7ee      	b.n	8003938 <_strtod_l+0xb8>
 800395a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800395c:	b13a      	cbz	r2, 800396e <_strtod_l+0xee>
 800395e:	2135      	movs	r1, #53	; 0x35
 8003960:	a81a      	add	r0, sp, #104	; 0x68
 8003962:	f002 fca2 	bl	80062aa <__copybits>
 8003966:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003968:	4620      	mov	r0, r4
 800396a:	f002 f861 	bl	8005a30 <_Bfree>
 800396e:	3f01      	subs	r7, #1
 8003970:	2f04      	cmp	r7, #4
 8003972:	d806      	bhi.n	8003982 <_strtod_l+0x102>
 8003974:	e8df f007 	tbb	[pc, r7]
 8003978:	1714030a 	.word	0x1714030a
 800397c:	0a          	.byte	0x0a
 800397d:	00          	.byte	0x00
 800397e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8003982:	0728      	lsls	r0, r5, #28
 8003984:	d5c0      	bpl.n	8003908 <_strtod_l+0x88>
 8003986:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800398a:	e7bd      	b.n	8003908 <_strtod_l+0x88>
 800398c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8003990:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003992:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003996:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800399a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800399e:	e7f0      	b.n	8003982 <_strtod_l+0x102>
 80039a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8003b24 <_strtod_l+0x2a4>
 80039a4:	e7ed      	b.n	8003982 <_strtod_l+0x102>
 80039a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80039aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80039ae:	e7e8      	b.n	8003982 <_strtod_l+0x102>
 80039b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	2b30      	cmp	r3, #48	; 0x30
 80039ba:	d0f9      	beq.n	80039b0 <_strtod_l+0x130>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0a3      	beq.n	8003908 <_strtod_l+0x88>
 80039c0:	2301      	movs	r3, #1
 80039c2:	f04f 0900 	mov.w	r9, #0
 80039c6:	9304      	str	r3, [sp, #16]
 80039c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039ca:	9308      	str	r3, [sp, #32]
 80039cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80039d0:	464f      	mov	r7, r9
 80039d2:	220a      	movs	r2, #10
 80039d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80039d6:	7806      	ldrb	r6, [r0, #0]
 80039d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80039dc:	b2d9      	uxtb	r1, r3
 80039de:	2909      	cmp	r1, #9
 80039e0:	d92a      	bls.n	8003a38 <_strtod_l+0x1b8>
 80039e2:	9905      	ldr	r1, [sp, #20]
 80039e4:	462a      	mov	r2, r5
 80039e6:	f002 ff0f 	bl	8006808 <strncmp>
 80039ea:	b398      	cbz	r0, 8003a54 <_strtod_l+0x1d4>
 80039ec:	2000      	movs	r0, #0
 80039ee:	4632      	mov	r2, r6
 80039f0:	463d      	mov	r5, r7
 80039f2:	9005      	str	r0, [sp, #20]
 80039f4:	4603      	mov	r3, r0
 80039f6:	2a65      	cmp	r2, #101	; 0x65
 80039f8:	d001      	beq.n	80039fe <_strtod_l+0x17e>
 80039fa:	2a45      	cmp	r2, #69	; 0x45
 80039fc:	d118      	bne.n	8003a30 <_strtod_l+0x1b0>
 80039fe:	b91d      	cbnz	r5, 8003a08 <_strtod_l+0x188>
 8003a00:	9a04      	ldr	r2, [sp, #16]
 8003a02:	4302      	orrs	r2, r0
 8003a04:	d09e      	beq.n	8003944 <_strtod_l+0xc4>
 8003a06:	2500      	movs	r5, #0
 8003a08:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8003a0c:	f108 0201 	add.w	r2, r8, #1
 8003a10:	9217      	str	r2, [sp, #92]	; 0x5c
 8003a12:	f898 2001 	ldrb.w	r2, [r8, #1]
 8003a16:	2a2b      	cmp	r2, #43	; 0x2b
 8003a18:	d075      	beq.n	8003b06 <_strtod_l+0x286>
 8003a1a:	2a2d      	cmp	r2, #45	; 0x2d
 8003a1c:	d07b      	beq.n	8003b16 <_strtod_l+0x296>
 8003a1e:	f04f 0c00 	mov.w	ip, #0
 8003a22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003a26:	2909      	cmp	r1, #9
 8003a28:	f240 8082 	bls.w	8003b30 <_strtod_l+0x2b0>
 8003a2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003a30:	2600      	movs	r6, #0
 8003a32:	e09d      	b.n	8003b70 <_strtod_l+0x2f0>
 8003a34:	2300      	movs	r3, #0
 8003a36:	e7c4      	b.n	80039c2 <_strtod_l+0x142>
 8003a38:	2f08      	cmp	r7, #8
 8003a3a:	bfd8      	it	le
 8003a3c:	9907      	ldrle	r1, [sp, #28]
 8003a3e:	f100 0001 	add.w	r0, r0, #1
 8003a42:	bfda      	itte	le
 8003a44:	fb02 3301 	mlale	r3, r2, r1, r3
 8003a48:	9307      	strle	r3, [sp, #28]
 8003a4a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8003a4e:	3701      	adds	r7, #1
 8003a50:	9017      	str	r0, [sp, #92]	; 0x5c
 8003a52:	e7bf      	b.n	80039d4 <_strtod_l+0x154>
 8003a54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a56:	195a      	adds	r2, r3, r5
 8003a58:	9217      	str	r2, [sp, #92]	; 0x5c
 8003a5a:	5d5a      	ldrb	r2, [r3, r5]
 8003a5c:	2f00      	cmp	r7, #0
 8003a5e:	d037      	beq.n	8003ad0 <_strtod_l+0x250>
 8003a60:	9005      	str	r0, [sp, #20]
 8003a62:	463d      	mov	r5, r7
 8003a64:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003a68:	2b09      	cmp	r3, #9
 8003a6a:	d912      	bls.n	8003a92 <_strtod_l+0x212>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e7c2      	b.n	80039f6 <_strtod_l+0x176>
 8003a70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	9217      	str	r2, [sp, #92]	; 0x5c
 8003a76:	785a      	ldrb	r2, [r3, #1]
 8003a78:	3001      	adds	r0, #1
 8003a7a:	2a30      	cmp	r2, #48	; 0x30
 8003a7c:	d0f8      	beq.n	8003a70 <_strtod_l+0x1f0>
 8003a7e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	f200 84d9 	bhi.w	800443a <_strtod_l+0xbba>
 8003a88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a8a:	9005      	str	r0, [sp, #20]
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	9308      	str	r3, [sp, #32]
 8003a90:	4605      	mov	r5, r0
 8003a92:	3a30      	subs	r2, #48	; 0x30
 8003a94:	f100 0301 	add.w	r3, r0, #1
 8003a98:	d014      	beq.n	8003ac4 <_strtod_l+0x244>
 8003a9a:	9905      	ldr	r1, [sp, #20]
 8003a9c:	4419      	add	r1, r3
 8003a9e:	9105      	str	r1, [sp, #20]
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	eb00 0e05 	add.w	lr, r0, r5
 8003aa6:	210a      	movs	r1, #10
 8003aa8:	4573      	cmp	r3, lr
 8003aaa:	d113      	bne.n	8003ad4 <_strtod_l+0x254>
 8003aac:	182b      	adds	r3, r5, r0
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	f105 0501 	add.w	r5, r5, #1
 8003ab4:	4405      	add	r5, r0
 8003ab6:	dc1c      	bgt.n	8003af2 <_strtod_l+0x272>
 8003ab8:	9907      	ldr	r1, [sp, #28]
 8003aba:	230a      	movs	r3, #10
 8003abc:	fb03 2301 	mla	r3, r3, r1, r2
 8003ac0:	9307      	str	r3, [sp, #28]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003ac6:	1c51      	adds	r1, r2, #1
 8003ac8:	9117      	str	r1, [sp, #92]	; 0x5c
 8003aca:	7852      	ldrb	r2, [r2, #1]
 8003acc:	4618      	mov	r0, r3
 8003ace:	e7c9      	b.n	8003a64 <_strtod_l+0x1e4>
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	e7d2      	b.n	8003a7a <_strtod_l+0x1fa>
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	dc04      	bgt.n	8003ae2 <_strtod_l+0x262>
 8003ad8:	9e07      	ldr	r6, [sp, #28]
 8003ada:	434e      	muls	r6, r1
 8003adc:	9607      	str	r6, [sp, #28]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	e7e2      	b.n	8003aa8 <_strtod_l+0x228>
 8003ae2:	f103 0c01 	add.w	ip, r3, #1
 8003ae6:	f1bc 0f10 	cmp.w	ip, #16
 8003aea:	bfd8      	it	le
 8003aec:	fb01 f909 	mulle.w	r9, r1, r9
 8003af0:	e7f5      	b.n	8003ade <_strtod_l+0x25e>
 8003af2:	2d10      	cmp	r5, #16
 8003af4:	bfdc      	itt	le
 8003af6:	230a      	movle	r3, #10
 8003af8:	fb03 2909 	mlale	r9, r3, r9, r2
 8003afc:	e7e1      	b.n	8003ac2 <_strtod_l+0x242>
 8003afe:	2300      	movs	r3, #0
 8003b00:	9305      	str	r3, [sp, #20]
 8003b02:	2301      	movs	r3, #1
 8003b04:	e77c      	b.n	8003a00 <_strtod_l+0x180>
 8003b06:	f04f 0c00 	mov.w	ip, #0
 8003b0a:	f108 0202 	add.w	r2, r8, #2
 8003b0e:	9217      	str	r2, [sp, #92]	; 0x5c
 8003b10:	f898 2002 	ldrb.w	r2, [r8, #2]
 8003b14:	e785      	b.n	8003a22 <_strtod_l+0x1a2>
 8003b16:	f04f 0c01 	mov.w	ip, #1
 8003b1a:	e7f6      	b.n	8003b0a <_strtod_l+0x28a>
 8003b1c:	08007670 	.word	0x08007670
 8003b20:	08007424 	.word	0x08007424
 8003b24:	7ff00000 	.word	0x7ff00000
 8003b28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003b2a:	1c51      	adds	r1, r2, #1
 8003b2c:	9117      	str	r1, [sp, #92]	; 0x5c
 8003b2e:	7852      	ldrb	r2, [r2, #1]
 8003b30:	2a30      	cmp	r2, #48	; 0x30
 8003b32:	d0f9      	beq.n	8003b28 <_strtod_l+0x2a8>
 8003b34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003b38:	2908      	cmp	r1, #8
 8003b3a:	f63f af79 	bhi.w	8003a30 <_strtod_l+0x1b0>
 8003b3e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8003b42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003b44:	9206      	str	r2, [sp, #24]
 8003b46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003b48:	1c51      	adds	r1, r2, #1
 8003b4a:	9117      	str	r1, [sp, #92]	; 0x5c
 8003b4c:	7852      	ldrb	r2, [r2, #1]
 8003b4e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8003b52:	2e09      	cmp	r6, #9
 8003b54:	d937      	bls.n	8003bc6 <_strtod_l+0x346>
 8003b56:	9e06      	ldr	r6, [sp, #24]
 8003b58:	1b89      	subs	r1, r1, r6
 8003b5a:	2908      	cmp	r1, #8
 8003b5c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003b60:	dc02      	bgt.n	8003b68 <_strtod_l+0x2e8>
 8003b62:	4576      	cmp	r6, lr
 8003b64:	bfa8      	it	ge
 8003b66:	4676      	movge	r6, lr
 8003b68:	f1bc 0f00 	cmp.w	ip, #0
 8003b6c:	d000      	beq.n	8003b70 <_strtod_l+0x2f0>
 8003b6e:	4276      	negs	r6, r6
 8003b70:	2d00      	cmp	r5, #0
 8003b72:	d14d      	bne.n	8003c10 <_strtod_l+0x390>
 8003b74:	9904      	ldr	r1, [sp, #16]
 8003b76:	4301      	orrs	r1, r0
 8003b78:	f47f aec6 	bne.w	8003908 <_strtod_l+0x88>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f47f aee1 	bne.w	8003944 <_strtod_l+0xc4>
 8003b82:	2a69      	cmp	r2, #105	; 0x69
 8003b84:	d027      	beq.n	8003bd6 <_strtod_l+0x356>
 8003b86:	dc24      	bgt.n	8003bd2 <_strtod_l+0x352>
 8003b88:	2a49      	cmp	r2, #73	; 0x49
 8003b8a:	d024      	beq.n	8003bd6 <_strtod_l+0x356>
 8003b8c:	2a4e      	cmp	r2, #78	; 0x4e
 8003b8e:	f47f aed9 	bne.w	8003944 <_strtod_l+0xc4>
 8003b92:	499f      	ldr	r1, [pc, #636]	; (8003e10 <_strtod_l+0x590>)
 8003b94:	a817      	add	r0, sp, #92	; 0x5c
 8003b96:	f001 fe3d 	bl	8005814 <__match>
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	f43f aed2 	beq.w	8003944 <_strtod_l+0xc4>
 8003ba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b28      	cmp	r3, #40	; 0x28
 8003ba6:	d12d      	bne.n	8003c04 <_strtod_l+0x384>
 8003ba8:	499a      	ldr	r1, [pc, #616]	; (8003e14 <_strtod_l+0x594>)
 8003baa:	aa1a      	add	r2, sp, #104	; 0x68
 8003bac:	a817      	add	r0, sp, #92	; 0x5c
 8003bae:	f001 fe45 	bl	800583c <__hexnan>
 8003bb2:	2805      	cmp	r0, #5
 8003bb4:	d126      	bne.n	8003c04 <_strtod_l+0x384>
 8003bb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bb8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8003bbc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003bc0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003bc4:	e6a0      	b.n	8003908 <_strtod_l+0x88>
 8003bc6:	210a      	movs	r1, #10
 8003bc8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8003bcc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003bd0:	e7b9      	b.n	8003b46 <_strtod_l+0x2c6>
 8003bd2:	2a6e      	cmp	r2, #110	; 0x6e
 8003bd4:	e7db      	b.n	8003b8e <_strtod_l+0x30e>
 8003bd6:	4990      	ldr	r1, [pc, #576]	; (8003e18 <_strtod_l+0x598>)
 8003bd8:	a817      	add	r0, sp, #92	; 0x5c
 8003bda:	f001 fe1b 	bl	8005814 <__match>
 8003bde:	2800      	cmp	r0, #0
 8003be0:	f43f aeb0 	beq.w	8003944 <_strtod_l+0xc4>
 8003be4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003be6:	498d      	ldr	r1, [pc, #564]	; (8003e1c <_strtod_l+0x59c>)
 8003be8:	3b01      	subs	r3, #1
 8003bea:	a817      	add	r0, sp, #92	; 0x5c
 8003bec:	9317      	str	r3, [sp, #92]	; 0x5c
 8003bee:	f001 fe11 	bl	8005814 <__match>
 8003bf2:	b910      	cbnz	r0, 8003bfa <_strtod_l+0x37a>
 8003bf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	9317      	str	r3, [sp, #92]	; 0x5c
 8003bfa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8003e2c <_strtod_l+0x5ac>
 8003bfe:	f04f 0a00 	mov.w	sl, #0
 8003c02:	e681      	b.n	8003908 <_strtod_l+0x88>
 8003c04:	4886      	ldr	r0, [pc, #536]	; (8003e20 <_strtod_l+0x5a0>)
 8003c06:	f002 fde7 	bl	80067d8 <nan>
 8003c0a:	ec5b ab10 	vmov	sl, fp, d0
 8003c0e:	e67b      	b.n	8003908 <_strtod_l+0x88>
 8003c10:	9b05      	ldr	r3, [sp, #20]
 8003c12:	9807      	ldr	r0, [sp, #28]
 8003c14:	1af3      	subs	r3, r6, r3
 8003c16:	2f00      	cmp	r7, #0
 8003c18:	bf08      	it	eq
 8003c1a:	462f      	moveq	r7, r5
 8003c1c:	2d10      	cmp	r5, #16
 8003c1e:	9306      	str	r3, [sp, #24]
 8003c20:	46a8      	mov	r8, r5
 8003c22:	bfa8      	it	ge
 8003c24:	f04f 0810 	movge.w	r8, #16
 8003c28:	f7fc fcc4 	bl	80005b4 <__aeabi_ui2d>
 8003c2c:	2d09      	cmp	r5, #9
 8003c2e:	4682      	mov	sl, r0
 8003c30:	468b      	mov	fp, r1
 8003c32:	dd13      	ble.n	8003c5c <_strtod_l+0x3dc>
 8003c34:	4b7b      	ldr	r3, [pc, #492]	; (8003e24 <_strtod_l+0x5a4>)
 8003c36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003c3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003c3e:	f7fc fd33 	bl	80006a8 <__aeabi_dmul>
 8003c42:	4682      	mov	sl, r0
 8003c44:	4648      	mov	r0, r9
 8003c46:	468b      	mov	fp, r1
 8003c48:	f7fc fcb4 	bl	80005b4 <__aeabi_ui2d>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4650      	mov	r0, sl
 8003c52:	4659      	mov	r1, fp
 8003c54:	f7fc fb72 	bl	800033c <__adddf3>
 8003c58:	4682      	mov	sl, r0
 8003c5a:	468b      	mov	fp, r1
 8003c5c:	2d0f      	cmp	r5, #15
 8003c5e:	dc38      	bgt.n	8003cd2 <_strtod_l+0x452>
 8003c60:	9b06      	ldr	r3, [sp, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f43f ae50 	beq.w	8003908 <_strtod_l+0x88>
 8003c68:	dd24      	ble.n	8003cb4 <_strtod_l+0x434>
 8003c6a:	2b16      	cmp	r3, #22
 8003c6c:	dc0b      	bgt.n	8003c86 <_strtod_l+0x406>
 8003c6e:	496d      	ldr	r1, [pc, #436]	; (8003e24 <_strtod_l+0x5a4>)
 8003c70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c78:	4652      	mov	r2, sl
 8003c7a:	465b      	mov	r3, fp
 8003c7c:	f7fc fd14 	bl	80006a8 <__aeabi_dmul>
 8003c80:	4682      	mov	sl, r0
 8003c82:	468b      	mov	fp, r1
 8003c84:	e640      	b.n	8003908 <_strtod_l+0x88>
 8003c86:	9a06      	ldr	r2, [sp, #24]
 8003c88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	db20      	blt.n	8003cd2 <_strtod_l+0x452>
 8003c90:	4c64      	ldr	r4, [pc, #400]	; (8003e24 <_strtod_l+0x5a4>)
 8003c92:	f1c5 050f 	rsb	r5, r5, #15
 8003c96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003c9a:	4652      	mov	r2, sl
 8003c9c:	465b      	mov	r3, fp
 8003c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ca2:	f7fc fd01 	bl	80006a8 <__aeabi_dmul>
 8003ca6:	9b06      	ldr	r3, [sp, #24]
 8003ca8:	1b5d      	subs	r5, r3, r5
 8003caa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003cae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003cb2:	e7e3      	b.n	8003c7c <_strtod_l+0x3fc>
 8003cb4:	9b06      	ldr	r3, [sp, #24]
 8003cb6:	3316      	adds	r3, #22
 8003cb8:	db0b      	blt.n	8003cd2 <_strtod_l+0x452>
 8003cba:	9b05      	ldr	r3, [sp, #20]
 8003cbc:	1b9e      	subs	r6, r3, r6
 8003cbe:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <_strtod_l+0x5a4>)
 8003cc0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003cc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003cc8:	4650      	mov	r0, sl
 8003cca:	4659      	mov	r1, fp
 8003ccc:	f7fc fe16 	bl	80008fc <__aeabi_ddiv>
 8003cd0:	e7d6      	b.n	8003c80 <_strtod_l+0x400>
 8003cd2:	9b06      	ldr	r3, [sp, #24]
 8003cd4:	eba5 0808 	sub.w	r8, r5, r8
 8003cd8:	4498      	add	r8, r3
 8003cda:	f1b8 0f00 	cmp.w	r8, #0
 8003cde:	dd74      	ble.n	8003dca <_strtod_l+0x54a>
 8003ce0:	f018 030f 	ands.w	r3, r8, #15
 8003ce4:	d00a      	beq.n	8003cfc <_strtod_l+0x47c>
 8003ce6:	494f      	ldr	r1, [pc, #316]	; (8003e24 <_strtod_l+0x5a4>)
 8003ce8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003cec:	4652      	mov	r2, sl
 8003cee:	465b      	mov	r3, fp
 8003cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cf4:	f7fc fcd8 	bl	80006a8 <__aeabi_dmul>
 8003cf8:	4682      	mov	sl, r0
 8003cfa:	468b      	mov	fp, r1
 8003cfc:	f038 080f 	bics.w	r8, r8, #15
 8003d00:	d04f      	beq.n	8003da2 <_strtod_l+0x522>
 8003d02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003d06:	dd22      	ble.n	8003d4e <_strtod_l+0x4ce>
 8003d08:	2500      	movs	r5, #0
 8003d0a:	462e      	mov	r6, r5
 8003d0c:	9507      	str	r5, [sp, #28]
 8003d0e:	9505      	str	r5, [sp, #20]
 8003d10:	2322      	movs	r3, #34	; 0x22
 8003d12:	f8df b118 	ldr.w	fp, [pc, #280]	; 8003e2c <_strtod_l+0x5ac>
 8003d16:	6023      	str	r3, [r4, #0]
 8003d18:	f04f 0a00 	mov.w	sl, #0
 8003d1c:	9b07      	ldr	r3, [sp, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f43f adf2 	beq.w	8003908 <_strtod_l+0x88>
 8003d24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003d26:	4620      	mov	r0, r4
 8003d28:	f001 fe82 	bl	8005a30 <_Bfree>
 8003d2c:	9905      	ldr	r1, [sp, #20]
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f001 fe7e 	bl	8005a30 <_Bfree>
 8003d34:	4631      	mov	r1, r6
 8003d36:	4620      	mov	r0, r4
 8003d38:	f001 fe7a 	bl	8005a30 <_Bfree>
 8003d3c:	9907      	ldr	r1, [sp, #28]
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f001 fe76 	bl	8005a30 <_Bfree>
 8003d44:	4629      	mov	r1, r5
 8003d46:	4620      	mov	r0, r4
 8003d48:	f001 fe72 	bl	8005a30 <_Bfree>
 8003d4c:	e5dc      	b.n	8003908 <_strtod_l+0x88>
 8003d4e:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <_strtod_l+0x5a8>)
 8003d50:	9304      	str	r3, [sp, #16]
 8003d52:	2300      	movs	r3, #0
 8003d54:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003d58:	4650      	mov	r0, sl
 8003d5a:	4659      	mov	r1, fp
 8003d5c:	4699      	mov	r9, r3
 8003d5e:	f1b8 0f01 	cmp.w	r8, #1
 8003d62:	dc21      	bgt.n	8003da8 <_strtod_l+0x528>
 8003d64:	b10b      	cbz	r3, 8003d6a <_strtod_l+0x4ea>
 8003d66:	4682      	mov	sl, r0
 8003d68:	468b      	mov	fp, r1
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <_strtod_l+0x5a8>)
 8003d6c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003d70:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003d74:	4652      	mov	r2, sl
 8003d76:	465b      	mov	r3, fp
 8003d78:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003d7c:	f7fc fc94 	bl	80006a8 <__aeabi_dmul>
 8003d80:	4b2a      	ldr	r3, [pc, #168]	; (8003e2c <_strtod_l+0x5ac>)
 8003d82:	460a      	mov	r2, r1
 8003d84:	400b      	ands	r3, r1
 8003d86:	492a      	ldr	r1, [pc, #168]	; (8003e30 <_strtod_l+0x5b0>)
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	4682      	mov	sl, r0
 8003d8c:	d8bc      	bhi.n	8003d08 <_strtod_l+0x488>
 8003d8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003d92:	428b      	cmp	r3, r1
 8003d94:	bf86      	itte	hi
 8003d96:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8003e34 <_strtod_l+0x5b4>
 8003d9a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8003d9e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003da2:	2300      	movs	r3, #0
 8003da4:	9304      	str	r3, [sp, #16]
 8003da6:	e084      	b.n	8003eb2 <_strtod_l+0x632>
 8003da8:	f018 0f01 	tst.w	r8, #1
 8003dac:	d005      	beq.n	8003dba <_strtod_l+0x53a>
 8003dae:	9b04      	ldr	r3, [sp, #16]
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	f7fc fc78 	bl	80006a8 <__aeabi_dmul>
 8003db8:	2301      	movs	r3, #1
 8003dba:	9a04      	ldr	r2, [sp, #16]
 8003dbc:	3208      	adds	r2, #8
 8003dbe:	f109 0901 	add.w	r9, r9, #1
 8003dc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003dc6:	9204      	str	r2, [sp, #16]
 8003dc8:	e7c9      	b.n	8003d5e <_strtod_l+0x4de>
 8003dca:	d0ea      	beq.n	8003da2 <_strtod_l+0x522>
 8003dcc:	f1c8 0800 	rsb	r8, r8, #0
 8003dd0:	f018 020f 	ands.w	r2, r8, #15
 8003dd4:	d00a      	beq.n	8003dec <_strtod_l+0x56c>
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <_strtod_l+0x5a4>)
 8003dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ddc:	4650      	mov	r0, sl
 8003dde:	4659      	mov	r1, fp
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fd8a 	bl	80008fc <__aeabi_ddiv>
 8003de8:	4682      	mov	sl, r0
 8003dea:	468b      	mov	fp, r1
 8003dec:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003df0:	d0d7      	beq.n	8003da2 <_strtod_l+0x522>
 8003df2:	f1b8 0f1f 	cmp.w	r8, #31
 8003df6:	dd1f      	ble.n	8003e38 <_strtod_l+0x5b8>
 8003df8:	2500      	movs	r5, #0
 8003dfa:	462e      	mov	r6, r5
 8003dfc:	9507      	str	r5, [sp, #28]
 8003dfe:	9505      	str	r5, [sp, #20]
 8003e00:	2322      	movs	r3, #34	; 0x22
 8003e02:	f04f 0a00 	mov.w	sl, #0
 8003e06:	f04f 0b00 	mov.w	fp, #0
 8003e0a:	6023      	str	r3, [r4, #0]
 8003e0c:	e786      	b.n	8003d1c <_strtod_l+0x49c>
 8003e0e:	bf00      	nop
 8003e10:	080073f5 	.word	0x080073f5
 8003e14:	08007438 	.word	0x08007438
 8003e18:	080073ed 	.word	0x080073ed
 8003e1c:	0800757c 	.word	0x0800757c
 8003e20:	08007828 	.word	0x08007828
 8003e24:	08007708 	.word	0x08007708
 8003e28:	080076e0 	.word	0x080076e0
 8003e2c:	7ff00000 	.word	0x7ff00000
 8003e30:	7ca00000 	.word	0x7ca00000
 8003e34:	7fefffff 	.word	0x7fefffff
 8003e38:	f018 0310 	ands.w	r3, r8, #16
 8003e3c:	bf18      	it	ne
 8003e3e:	236a      	movne	r3, #106	; 0x6a
 8003e40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80041f0 <_strtod_l+0x970>
 8003e44:	9304      	str	r3, [sp, #16]
 8003e46:	4650      	mov	r0, sl
 8003e48:	4659      	mov	r1, fp
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f018 0f01 	tst.w	r8, #1
 8003e50:	d004      	beq.n	8003e5c <_strtod_l+0x5dc>
 8003e52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003e56:	f7fc fc27 	bl	80006a8 <__aeabi_dmul>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003e60:	f109 0908 	add.w	r9, r9, #8
 8003e64:	d1f2      	bne.n	8003e4c <_strtod_l+0x5cc>
 8003e66:	b10b      	cbz	r3, 8003e6c <_strtod_l+0x5ec>
 8003e68:	4682      	mov	sl, r0
 8003e6a:	468b      	mov	fp, r1
 8003e6c:	9b04      	ldr	r3, [sp, #16]
 8003e6e:	b1c3      	cbz	r3, 8003ea2 <_strtod_l+0x622>
 8003e70:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003e74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	4659      	mov	r1, fp
 8003e7c:	dd11      	ble.n	8003ea2 <_strtod_l+0x622>
 8003e7e:	2b1f      	cmp	r3, #31
 8003e80:	f340 8124 	ble.w	80040cc <_strtod_l+0x84c>
 8003e84:	2b34      	cmp	r3, #52	; 0x34
 8003e86:	bfde      	ittt	le
 8003e88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8003e8c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8003e90:	fa03 f202 	lslle.w	r2, r3, r2
 8003e94:	f04f 0a00 	mov.w	sl, #0
 8003e98:	bfcc      	ite	gt
 8003e9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003e9e:	ea02 0b01 	andle.w	fp, r2, r1
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	f7fc fe65 	bl	8000b78 <__aeabi_dcmpeq>
 8003eae:	2800      	cmp	r0, #0
 8003eb0:	d1a2      	bne.n	8003df8 <_strtod_l+0x578>
 8003eb2:	9b07      	ldr	r3, [sp, #28]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	9908      	ldr	r1, [sp, #32]
 8003eb8:	462b      	mov	r3, r5
 8003eba:	463a      	mov	r2, r7
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f001 fe1f 	bl	8005b00 <__s2b>
 8003ec2:	9007      	str	r0, [sp, #28]
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	f43f af1f 	beq.w	8003d08 <_strtod_l+0x488>
 8003eca:	9b05      	ldr	r3, [sp, #20]
 8003ecc:	1b9e      	subs	r6, r3, r6
 8003ece:	9b06      	ldr	r3, [sp, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bfb4      	ite	lt
 8003ed4:	4633      	movlt	r3, r6
 8003ed6:	2300      	movge	r3, #0
 8003ed8:	930c      	str	r3, [sp, #48]	; 0x30
 8003eda:	9b06      	ldr	r3, [sp, #24]
 8003edc:	2500      	movs	r5, #0
 8003ede:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003ee2:	9312      	str	r3, [sp, #72]	; 0x48
 8003ee4:	462e      	mov	r6, r5
 8003ee6:	9b07      	ldr	r3, [sp, #28]
 8003ee8:	4620      	mov	r0, r4
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	f001 fd60 	bl	80059b0 <_Balloc>
 8003ef0:	9005      	str	r0, [sp, #20]
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	f43f af0c 	beq.w	8003d10 <_strtod_l+0x490>
 8003ef8:	9b07      	ldr	r3, [sp, #28]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	3202      	adds	r2, #2
 8003efe:	f103 010c 	add.w	r1, r3, #12
 8003f02:	0092      	lsls	r2, r2, #2
 8003f04:	300c      	adds	r0, #12
 8003f06:	f7fe fde9 	bl	8002adc <memcpy>
 8003f0a:	ec4b ab10 	vmov	d0, sl, fp
 8003f0e:	aa1a      	add	r2, sp, #104	; 0x68
 8003f10:	a919      	add	r1, sp, #100	; 0x64
 8003f12:	4620      	mov	r0, r4
 8003f14:	f002 f93a 	bl	800618c <__d2b>
 8003f18:	ec4b ab18 	vmov	d8, sl, fp
 8003f1c:	9018      	str	r0, [sp, #96]	; 0x60
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f43f aef6 	beq.w	8003d10 <_strtod_l+0x490>
 8003f24:	2101      	movs	r1, #1
 8003f26:	4620      	mov	r0, r4
 8003f28:	f001 fe84 	bl	8005c34 <__i2b>
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	f43f aeee 	beq.w	8003d10 <_strtod_l+0x490>
 8003f34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f36:	9904      	ldr	r1, [sp, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bfab      	itete	ge
 8003f3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8003f3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8003f40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8003f42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8003f46:	bfac      	ite	ge
 8003f48:	eb03 0902 	addge.w	r9, r3, r2
 8003f4c:	1ad7      	sublt	r7, r2, r3
 8003f4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003f50:	eba3 0801 	sub.w	r8, r3, r1
 8003f54:	4490      	add	r8, r2
 8003f56:	4ba1      	ldr	r3, [pc, #644]	; (80041dc <_strtod_l+0x95c>)
 8003f58:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003f5c:	4598      	cmp	r8, r3
 8003f5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003f62:	f280 80c7 	bge.w	80040f4 <_strtod_l+0x874>
 8003f66:	eba3 0308 	sub.w	r3, r3, r8
 8003f6a:	2b1f      	cmp	r3, #31
 8003f6c:	eba2 0203 	sub.w	r2, r2, r3
 8003f70:	f04f 0101 	mov.w	r1, #1
 8003f74:	f300 80b1 	bgt.w	80040da <_strtod_l+0x85a>
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	930d      	str	r3, [sp, #52]	; 0x34
 8003f7e:	2300      	movs	r3, #0
 8003f80:	9308      	str	r3, [sp, #32]
 8003f82:	eb09 0802 	add.w	r8, r9, r2
 8003f86:	9b04      	ldr	r3, [sp, #16]
 8003f88:	45c1      	cmp	r9, r8
 8003f8a:	4417      	add	r7, r2
 8003f8c:	441f      	add	r7, r3
 8003f8e:	464b      	mov	r3, r9
 8003f90:	bfa8      	it	ge
 8003f92:	4643      	movge	r3, r8
 8003f94:	42bb      	cmp	r3, r7
 8003f96:	bfa8      	it	ge
 8003f98:	463b      	movge	r3, r7
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bfc2      	ittt	gt
 8003f9e:	eba8 0803 	subgt.w	r8, r8, r3
 8003fa2:	1aff      	subgt	r7, r7, r3
 8003fa4:	eba9 0903 	subgt.w	r9, r9, r3
 8003fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	dd17      	ble.n	8003fde <_strtod_l+0x75e>
 8003fae:	4631      	mov	r1, r6
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f001 fefe 	bl	8005db4 <__pow5mult>
 8003fb8:	4606      	mov	r6, r0
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	f43f aea8 	beq.w	8003d10 <_strtod_l+0x490>
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f001 fe4b 	bl	8005c60 <__multiply>
 8003fca:	900b      	str	r0, [sp, #44]	; 0x2c
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	f43f ae9f 	beq.w	8003d10 <_strtod_l+0x490>
 8003fd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f001 fd2b 	bl	8005a30 <_Bfree>
 8003fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fdc:	9318      	str	r3, [sp, #96]	; 0x60
 8003fde:	f1b8 0f00 	cmp.w	r8, #0
 8003fe2:	f300 808c 	bgt.w	80040fe <_strtod_l+0x87e>
 8003fe6:	9b06      	ldr	r3, [sp, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dd08      	ble.n	8003ffe <_strtod_l+0x77e>
 8003fec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003fee:	9905      	ldr	r1, [sp, #20]
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f001 fedf 	bl	8005db4 <__pow5mult>
 8003ff6:	9005      	str	r0, [sp, #20]
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	f43f ae89 	beq.w	8003d10 <_strtod_l+0x490>
 8003ffe:	2f00      	cmp	r7, #0
 8004000:	dd08      	ble.n	8004014 <_strtod_l+0x794>
 8004002:	9905      	ldr	r1, [sp, #20]
 8004004:	463a      	mov	r2, r7
 8004006:	4620      	mov	r0, r4
 8004008:	f001 ff2e 	bl	8005e68 <__lshift>
 800400c:	9005      	str	r0, [sp, #20]
 800400e:	2800      	cmp	r0, #0
 8004010:	f43f ae7e 	beq.w	8003d10 <_strtod_l+0x490>
 8004014:	f1b9 0f00 	cmp.w	r9, #0
 8004018:	dd08      	ble.n	800402c <_strtod_l+0x7ac>
 800401a:	4631      	mov	r1, r6
 800401c:	464a      	mov	r2, r9
 800401e:	4620      	mov	r0, r4
 8004020:	f001 ff22 	bl	8005e68 <__lshift>
 8004024:	4606      	mov	r6, r0
 8004026:	2800      	cmp	r0, #0
 8004028:	f43f ae72 	beq.w	8003d10 <_strtod_l+0x490>
 800402c:	9a05      	ldr	r2, [sp, #20]
 800402e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004030:	4620      	mov	r0, r4
 8004032:	f001 ffa5 	bl	8005f80 <__mdiff>
 8004036:	4605      	mov	r5, r0
 8004038:	2800      	cmp	r0, #0
 800403a:	f43f ae69 	beq.w	8003d10 <_strtod_l+0x490>
 800403e:	68c3      	ldr	r3, [r0, #12]
 8004040:	930b      	str	r3, [sp, #44]	; 0x2c
 8004042:	2300      	movs	r3, #0
 8004044:	60c3      	str	r3, [r0, #12]
 8004046:	4631      	mov	r1, r6
 8004048:	f001 ff7e 	bl	8005f48 <__mcmp>
 800404c:	2800      	cmp	r0, #0
 800404e:	da60      	bge.n	8004112 <_strtod_l+0x892>
 8004050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004052:	ea53 030a 	orrs.w	r3, r3, sl
 8004056:	f040 8082 	bne.w	800415e <_strtod_l+0x8de>
 800405a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800405e:	2b00      	cmp	r3, #0
 8004060:	d17d      	bne.n	800415e <_strtod_l+0x8de>
 8004062:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004066:	0d1b      	lsrs	r3, r3, #20
 8004068:	051b      	lsls	r3, r3, #20
 800406a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800406e:	d976      	bls.n	800415e <_strtod_l+0x8de>
 8004070:	696b      	ldr	r3, [r5, #20]
 8004072:	b913      	cbnz	r3, 800407a <_strtod_l+0x7fa>
 8004074:	692b      	ldr	r3, [r5, #16]
 8004076:	2b01      	cmp	r3, #1
 8004078:	dd71      	ble.n	800415e <_strtod_l+0x8de>
 800407a:	4629      	mov	r1, r5
 800407c:	2201      	movs	r2, #1
 800407e:	4620      	mov	r0, r4
 8004080:	f001 fef2 	bl	8005e68 <__lshift>
 8004084:	4631      	mov	r1, r6
 8004086:	4605      	mov	r5, r0
 8004088:	f001 ff5e 	bl	8005f48 <__mcmp>
 800408c:	2800      	cmp	r0, #0
 800408e:	dd66      	ble.n	800415e <_strtod_l+0x8de>
 8004090:	9904      	ldr	r1, [sp, #16]
 8004092:	4a53      	ldr	r2, [pc, #332]	; (80041e0 <_strtod_l+0x960>)
 8004094:	465b      	mov	r3, fp
 8004096:	2900      	cmp	r1, #0
 8004098:	f000 8081 	beq.w	800419e <_strtod_l+0x91e>
 800409c:	ea02 010b 	and.w	r1, r2, fp
 80040a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80040a4:	dc7b      	bgt.n	800419e <_strtod_l+0x91e>
 80040a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80040aa:	f77f aea9 	ble.w	8003e00 <_strtod_l+0x580>
 80040ae:	4b4d      	ldr	r3, [pc, #308]	; (80041e4 <_strtod_l+0x964>)
 80040b0:	4650      	mov	r0, sl
 80040b2:	4659      	mov	r1, fp
 80040b4:	2200      	movs	r2, #0
 80040b6:	f7fc faf7 	bl	80006a8 <__aeabi_dmul>
 80040ba:	460b      	mov	r3, r1
 80040bc:	4303      	orrs	r3, r0
 80040be:	bf08      	it	eq
 80040c0:	2322      	moveq	r3, #34	; 0x22
 80040c2:	4682      	mov	sl, r0
 80040c4:	468b      	mov	fp, r1
 80040c6:	bf08      	it	eq
 80040c8:	6023      	streq	r3, [r4, #0]
 80040ca:	e62b      	b.n	8003d24 <_strtod_l+0x4a4>
 80040cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	ea03 0a0a 	and.w	sl, r3, sl
 80040d8:	e6e3      	b.n	8003ea2 <_strtod_l+0x622>
 80040da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80040de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80040e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80040e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80040ea:	fa01 f308 	lsl.w	r3, r1, r8
 80040ee:	9308      	str	r3, [sp, #32]
 80040f0:	910d      	str	r1, [sp, #52]	; 0x34
 80040f2:	e746      	b.n	8003f82 <_strtod_l+0x702>
 80040f4:	2300      	movs	r3, #0
 80040f6:	9308      	str	r3, [sp, #32]
 80040f8:	2301      	movs	r3, #1
 80040fa:	930d      	str	r3, [sp, #52]	; 0x34
 80040fc:	e741      	b.n	8003f82 <_strtod_l+0x702>
 80040fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004100:	4642      	mov	r2, r8
 8004102:	4620      	mov	r0, r4
 8004104:	f001 feb0 	bl	8005e68 <__lshift>
 8004108:	9018      	str	r0, [sp, #96]	; 0x60
 800410a:	2800      	cmp	r0, #0
 800410c:	f47f af6b 	bne.w	8003fe6 <_strtod_l+0x766>
 8004110:	e5fe      	b.n	8003d10 <_strtod_l+0x490>
 8004112:	465f      	mov	r7, fp
 8004114:	d16e      	bne.n	80041f4 <_strtod_l+0x974>
 8004116:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004118:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800411c:	b342      	cbz	r2, 8004170 <_strtod_l+0x8f0>
 800411e:	4a32      	ldr	r2, [pc, #200]	; (80041e8 <_strtod_l+0x968>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d128      	bne.n	8004176 <_strtod_l+0x8f6>
 8004124:	9b04      	ldr	r3, [sp, #16]
 8004126:	4651      	mov	r1, sl
 8004128:	b1eb      	cbz	r3, 8004166 <_strtod_l+0x8e6>
 800412a:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <_strtod_l+0x960>)
 800412c:	403b      	ands	r3, r7
 800412e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004132:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004136:	d819      	bhi.n	800416c <_strtod_l+0x8ec>
 8004138:	0d1b      	lsrs	r3, r3, #20
 800413a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	4299      	cmp	r1, r3
 8004144:	d117      	bne.n	8004176 <_strtod_l+0x8f6>
 8004146:	4b29      	ldr	r3, [pc, #164]	; (80041ec <_strtod_l+0x96c>)
 8004148:	429f      	cmp	r7, r3
 800414a:	d102      	bne.n	8004152 <_strtod_l+0x8d2>
 800414c:	3101      	adds	r1, #1
 800414e:	f43f addf 	beq.w	8003d10 <_strtod_l+0x490>
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <_strtod_l+0x960>)
 8004154:	403b      	ands	r3, r7
 8004156:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800415a:	f04f 0a00 	mov.w	sl, #0
 800415e:	9b04      	ldr	r3, [sp, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1a4      	bne.n	80040ae <_strtod_l+0x82e>
 8004164:	e5de      	b.n	8003d24 <_strtod_l+0x4a4>
 8004166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800416a:	e7ea      	b.n	8004142 <_strtod_l+0x8c2>
 800416c:	4613      	mov	r3, r2
 800416e:	e7e8      	b.n	8004142 <_strtod_l+0x8c2>
 8004170:	ea53 030a 	orrs.w	r3, r3, sl
 8004174:	d08c      	beq.n	8004090 <_strtod_l+0x810>
 8004176:	9b08      	ldr	r3, [sp, #32]
 8004178:	b1db      	cbz	r3, 80041b2 <_strtod_l+0x932>
 800417a:	423b      	tst	r3, r7
 800417c:	d0ef      	beq.n	800415e <_strtod_l+0x8de>
 800417e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004180:	9a04      	ldr	r2, [sp, #16]
 8004182:	4650      	mov	r0, sl
 8004184:	4659      	mov	r1, fp
 8004186:	b1c3      	cbz	r3, 80041ba <_strtod_l+0x93a>
 8004188:	f7ff fb5e 	bl	8003848 <sulp>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	ec51 0b18 	vmov	r0, r1, d8
 8004194:	f7fc f8d2 	bl	800033c <__adddf3>
 8004198:	4682      	mov	sl, r0
 800419a:	468b      	mov	fp, r1
 800419c:	e7df      	b.n	800415e <_strtod_l+0x8de>
 800419e:	4013      	ands	r3, r2
 80041a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80041a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80041a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80041ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80041b0:	e7d5      	b.n	800415e <_strtod_l+0x8de>
 80041b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041b4:	ea13 0f0a 	tst.w	r3, sl
 80041b8:	e7e0      	b.n	800417c <_strtod_l+0x8fc>
 80041ba:	f7ff fb45 	bl	8003848 <sulp>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	ec51 0b18 	vmov	r0, r1, d8
 80041c6:	f7fc f8b7 	bl	8000338 <__aeabi_dsub>
 80041ca:	2200      	movs	r2, #0
 80041cc:	2300      	movs	r3, #0
 80041ce:	4682      	mov	sl, r0
 80041d0:	468b      	mov	fp, r1
 80041d2:	f7fc fcd1 	bl	8000b78 <__aeabi_dcmpeq>
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d0c1      	beq.n	800415e <_strtod_l+0x8de>
 80041da:	e611      	b.n	8003e00 <_strtod_l+0x580>
 80041dc:	fffffc02 	.word	0xfffffc02
 80041e0:	7ff00000 	.word	0x7ff00000
 80041e4:	39500000 	.word	0x39500000
 80041e8:	000fffff 	.word	0x000fffff
 80041ec:	7fefffff 	.word	0x7fefffff
 80041f0:	08007450 	.word	0x08007450
 80041f4:	4631      	mov	r1, r6
 80041f6:	4628      	mov	r0, r5
 80041f8:	f002 f824 	bl	8006244 <__ratio>
 80041fc:	ec59 8b10 	vmov	r8, r9, d0
 8004200:	ee10 0a10 	vmov	r0, s0
 8004204:	2200      	movs	r2, #0
 8004206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800420a:	4649      	mov	r1, r9
 800420c:	f7fc fcc8 	bl	8000ba0 <__aeabi_dcmple>
 8004210:	2800      	cmp	r0, #0
 8004212:	d07a      	beq.n	800430a <_strtod_l+0xa8a>
 8004214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d04a      	beq.n	80042b0 <_strtod_l+0xa30>
 800421a:	4b95      	ldr	r3, [pc, #596]	; (8004470 <_strtod_l+0xbf0>)
 800421c:	2200      	movs	r2, #0
 800421e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004222:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004470 <_strtod_l+0xbf0>
 8004226:	f04f 0800 	mov.w	r8, #0
 800422a:	4b92      	ldr	r3, [pc, #584]	; (8004474 <_strtod_l+0xbf4>)
 800422c:	403b      	ands	r3, r7
 800422e:	930d      	str	r3, [sp, #52]	; 0x34
 8004230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004232:	4b91      	ldr	r3, [pc, #580]	; (8004478 <_strtod_l+0xbf8>)
 8004234:	429a      	cmp	r2, r3
 8004236:	f040 80b0 	bne.w	800439a <_strtod_l+0xb1a>
 800423a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800423e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004242:	ec4b ab10 	vmov	d0, sl, fp
 8004246:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800424a:	f001 ff23 	bl	8006094 <__ulp>
 800424e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004252:	ec53 2b10 	vmov	r2, r3, d0
 8004256:	f7fc fa27 	bl	80006a8 <__aeabi_dmul>
 800425a:	4652      	mov	r2, sl
 800425c:	465b      	mov	r3, fp
 800425e:	f7fc f86d 	bl	800033c <__adddf3>
 8004262:	460b      	mov	r3, r1
 8004264:	4983      	ldr	r1, [pc, #524]	; (8004474 <_strtod_l+0xbf4>)
 8004266:	4a85      	ldr	r2, [pc, #532]	; (800447c <_strtod_l+0xbfc>)
 8004268:	4019      	ands	r1, r3
 800426a:	4291      	cmp	r1, r2
 800426c:	4682      	mov	sl, r0
 800426e:	d960      	bls.n	8004332 <_strtod_l+0xab2>
 8004270:	ee18 3a90 	vmov	r3, s17
 8004274:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004278:	4293      	cmp	r3, r2
 800427a:	d104      	bne.n	8004286 <_strtod_l+0xa06>
 800427c:	ee18 3a10 	vmov	r3, s16
 8004280:	3301      	adds	r3, #1
 8004282:	f43f ad45 	beq.w	8003d10 <_strtod_l+0x490>
 8004286:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004488 <_strtod_l+0xc08>
 800428a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800428e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004290:	4620      	mov	r0, r4
 8004292:	f001 fbcd 	bl	8005a30 <_Bfree>
 8004296:	9905      	ldr	r1, [sp, #20]
 8004298:	4620      	mov	r0, r4
 800429a:	f001 fbc9 	bl	8005a30 <_Bfree>
 800429e:	4631      	mov	r1, r6
 80042a0:	4620      	mov	r0, r4
 80042a2:	f001 fbc5 	bl	8005a30 <_Bfree>
 80042a6:	4629      	mov	r1, r5
 80042a8:	4620      	mov	r0, r4
 80042aa:	f001 fbc1 	bl	8005a30 <_Bfree>
 80042ae:	e61a      	b.n	8003ee6 <_strtod_l+0x666>
 80042b0:	f1ba 0f00 	cmp.w	sl, #0
 80042b4:	d11b      	bne.n	80042ee <_strtod_l+0xa6e>
 80042b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80042ba:	b9f3      	cbnz	r3, 80042fa <_strtod_l+0xa7a>
 80042bc:	4b6c      	ldr	r3, [pc, #432]	; (8004470 <_strtod_l+0xbf0>)
 80042be:	2200      	movs	r2, #0
 80042c0:	4640      	mov	r0, r8
 80042c2:	4649      	mov	r1, r9
 80042c4:	f7fc fc62 	bl	8000b8c <__aeabi_dcmplt>
 80042c8:	b9d0      	cbnz	r0, 8004300 <_strtod_l+0xa80>
 80042ca:	4640      	mov	r0, r8
 80042cc:	4649      	mov	r1, r9
 80042ce:	4b6c      	ldr	r3, [pc, #432]	; (8004480 <_strtod_l+0xc00>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	f7fc f9e9 	bl	80006a8 <__aeabi_dmul>
 80042d6:	4680      	mov	r8, r0
 80042d8:	4689      	mov	r9, r1
 80042da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80042de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80042e2:	9315      	str	r3, [sp, #84]	; 0x54
 80042e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80042e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80042ec:	e79d      	b.n	800422a <_strtod_l+0x9aa>
 80042ee:	f1ba 0f01 	cmp.w	sl, #1
 80042f2:	d102      	bne.n	80042fa <_strtod_l+0xa7a>
 80042f4:	2f00      	cmp	r7, #0
 80042f6:	f43f ad83 	beq.w	8003e00 <_strtod_l+0x580>
 80042fa:	4b62      	ldr	r3, [pc, #392]	; (8004484 <_strtod_l+0xc04>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	e78e      	b.n	800421e <_strtod_l+0x99e>
 8004300:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004480 <_strtod_l+0xc00>
 8004304:	f04f 0800 	mov.w	r8, #0
 8004308:	e7e7      	b.n	80042da <_strtod_l+0xa5a>
 800430a:	4b5d      	ldr	r3, [pc, #372]	; (8004480 <_strtod_l+0xc00>)
 800430c:	4640      	mov	r0, r8
 800430e:	4649      	mov	r1, r9
 8004310:	2200      	movs	r2, #0
 8004312:	f7fc f9c9 	bl	80006a8 <__aeabi_dmul>
 8004316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004318:	4680      	mov	r8, r0
 800431a:	4689      	mov	r9, r1
 800431c:	b933      	cbnz	r3, 800432c <_strtod_l+0xaac>
 800431e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004322:	900e      	str	r0, [sp, #56]	; 0x38
 8004324:	930f      	str	r3, [sp, #60]	; 0x3c
 8004326:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800432a:	e7dd      	b.n	80042e8 <_strtod_l+0xa68>
 800432c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004330:	e7f9      	b.n	8004326 <_strtod_l+0xaa6>
 8004332:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004336:	9b04      	ldr	r3, [sp, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1a8      	bne.n	800428e <_strtod_l+0xa0e>
 800433c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004342:	0d1b      	lsrs	r3, r3, #20
 8004344:	051b      	lsls	r3, r3, #20
 8004346:	429a      	cmp	r2, r3
 8004348:	d1a1      	bne.n	800428e <_strtod_l+0xa0e>
 800434a:	4640      	mov	r0, r8
 800434c:	4649      	mov	r1, r9
 800434e:	f7fc fcf3 	bl	8000d38 <__aeabi_d2lz>
 8004352:	f7fc f97b 	bl	800064c <__aeabi_l2d>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4640      	mov	r0, r8
 800435c:	4649      	mov	r1, r9
 800435e:	f7fb ffeb 	bl	8000338 <__aeabi_dsub>
 8004362:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004364:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004368:	ea43 030a 	orr.w	r3, r3, sl
 800436c:	4313      	orrs	r3, r2
 800436e:	4680      	mov	r8, r0
 8004370:	4689      	mov	r9, r1
 8004372:	d055      	beq.n	8004420 <_strtod_l+0xba0>
 8004374:	a336      	add	r3, pc, #216	; (adr r3, 8004450 <_strtod_l+0xbd0>)
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	f7fc fc07 	bl	8000b8c <__aeabi_dcmplt>
 800437e:	2800      	cmp	r0, #0
 8004380:	f47f acd0 	bne.w	8003d24 <_strtod_l+0x4a4>
 8004384:	a334      	add	r3, pc, #208	; (adr r3, 8004458 <_strtod_l+0xbd8>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	4640      	mov	r0, r8
 800438c:	4649      	mov	r1, r9
 800438e:	f7fc fc1b 	bl	8000bc8 <__aeabi_dcmpgt>
 8004392:	2800      	cmp	r0, #0
 8004394:	f43f af7b 	beq.w	800428e <_strtod_l+0xa0e>
 8004398:	e4c4      	b.n	8003d24 <_strtod_l+0x4a4>
 800439a:	9b04      	ldr	r3, [sp, #16]
 800439c:	b333      	cbz	r3, 80043ec <_strtod_l+0xb6c>
 800439e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80043a4:	d822      	bhi.n	80043ec <_strtod_l+0xb6c>
 80043a6:	a32e      	add	r3, pc, #184	; (adr r3, 8004460 <_strtod_l+0xbe0>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	4640      	mov	r0, r8
 80043ae:	4649      	mov	r1, r9
 80043b0:	f7fc fbf6 	bl	8000ba0 <__aeabi_dcmple>
 80043b4:	b1a0      	cbz	r0, 80043e0 <_strtod_l+0xb60>
 80043b6:	4649      	mov	r1, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	f7fc fc4d 	bl	8000c58 <__aeabi_d2uiz>
 80043be:	2801      	cmp	r0, #1
 80043c0:	bf38      	it	cc
 80043c2:	2001      	movcc	r0, #1
 80043c4:	f7fc f8f6 	bl	80005b4 <__aeabi_ui2d>
 80043c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043ca:	4680      	mov	r8, r0
 80043cc:	4689      	mov	r9, r1
 80043ce:	bb23      	cbnz	r3, 800441a <_strtod_l+0xb9a>
 80043d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043d4:	9010      	str	r0, [sp, #64]	; 0x40
 80043d6:	9311      	str	r3, [sp, #68]	; 0x44
 80043d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80043e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	9309      	str	r3, [sp, #36]	; 0x24
 80043ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80043f0:	eeb0 0a48 	vmov.f32	s0, s16
 80043f4:	eef0 0a68 	vmov.f32	s1, s17
 80043f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80043fc:	f001 fe4a 	bl	8006094 <__ulp>
 8004400:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004404:	ec53 2b10 	vmov	r2, r3, d0
 8004408:	f7fc f94e 	bl	80006a8 <__aeabi_dmul>
 800440c:	ec53 2b18 	vmov	r2, r3, d8
 8004410:	f7fb ff94 	bl	800033c <__adddf3>
 8004414:	4682      	mov	sl, r0
 8004416:	468b      	mov	fp, r1
 8004418:	e78d      	b.n	8004336 <_strtod_l+0xab6>
 800441a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800441e:	e7db      	b.n	80043d8 <_strtod_l+0xb58>
 8004420:	a311      	add	r3, pc, #68	; (adr r3, 8004468 <_strtod_l+0xbe8>)
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f7fc fbb1 	bl	8000b8c <__aeabi_dcmplt>
 800442a:	e7b2      	b.n	8004392 <_strtod_l+0xb12>
 800442c:	2300      	movs	r3, #0
 800442e:	930a      	str	r3, [sp, #40]	; 0x28
 8004430:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004432:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	f7ff ba6b 	b.w	8003910 <_strtod_l+0x90>
 800443a:	2a65      	cmp	r2, #101	; 0x65
 800443c:	f43f ab5f 	beq.w	8003afe <_strtod_l+0x27e>
 8004440:	2a45      	cmp	r2, #69	; 0x45
 8004442:	f43f ab5c 	beq.w	8003afe <_strtod_l+0x27e>
 8004446:	2301      	movs	r3, #1
 8004448:	f7ff bb94 	b.w	8003b74 <_strtod_l+0x2f4>
 800444c:	f3af 8000 	nop.w
 8004450:	94a03595 	.word	0x94a03595
 8004454:	3fdfffff 	.word	0x3fdfffff
 8004458:	35afe535 	.word	0x35afe535
 800445c:	3fe00000 	.word	0x3fe00000
 8004460:	ffc00000 	.word	0xffc00000
 8004464:	41dfffff 	.word	0x41dfffff
 8004468:	94a03595 	.word	0x94a03595
 800446c:	3fcfffff 	.word	0x3fcfffff
 8004470:	3ff00000 	.word	0x3ff00000
 8004474:	7ff00000 	.word	0x7ff00000
 8004478:	7fe00000 	.word	0x7fe00000
 800447c:	7c9fffff 	.word	0x7c9fffff
 8004480:	3fe00000 	.word	0x3fe00000
 8004484:	bff00000 	.word	0xbff00000
 8004488:	7fefffff 	.word	0x7fefffff

0800448c <_strtod_r>:
 800448c:	4b01      	ldr	r3, [pc, #4]	; (8004494 <_strtod_r+0x8>)
 800448e:	f7ff b9f7 	b.w	8003880 <_strtod_l>
 8004492:	bf00      	nop
 8004494:	20000068 	.word	0x20000068

08004498 <_strtol_l.constprop.0>:
 8004498:	2b01      	cmp	r3, #1
 800449a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800449e:	d001      	beq.n	80044a4 <_strtol_l.constprop.0+0xc>
 80044a0:	2b24      	cmp	r3, #36	; 0x24
 80044a2:	d906      	bls.n	80044b2 <_strtol_l.constprop.0+0x1a>
 80044a4:	f7fe faf0 	bl	8002a88 <__errno>
 80044a8:	2316      	movs	r3, #22
 80044aa:	6003      	str	r3, [r0, #0]
 80044ac:	2000      	movs	r0, #0
 80044ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004598 <_strtol_l.constprop.0+0x100>
 80044b6:	460d      	mov	r5, r1
 80044b8:	462e      	mov	r6, r5
 80044ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80044c2:	f017 0708 	ands.w	r7, r7, #8
 80044c6:	d1f7      	bne.n	80044b8 <_strtol_l.constprop.0+0x20>
 80044c8:	2c2d      	cmp	r4, #45	; 0x2d
 80044ca:	d132      	bne.n	8004532 <_strtol_l.constprop.0+0x9a>
 80044cc:	782c      	ldrb	r4, [r5, #0]
 80044ce:	2701      	movs	r7, #1
 80044d0:	1cb5      	adds	r5, r6, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d05b      	beq.n	800458e <_strtol_l.constprop.0+0xf6>
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d109      	bne.n	80044ee <_strtol_l.constprop.0+0x56>
 80044da:	2c30      	cmp	r4, #48	; 0x30
 80044dc:	d107      	bne.n	80044ee <_strtol_l.constprop.0+0x56>
 80044de:	782c      	ldrb	r4, [r5, #0]
 80044e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80044e4:	2c58      	cmp	r4, #88	; 0x58
 80044e6:	d14d      	bne.n	8004584 <_strtol_l.constprop.0+0xec>
 80044e8:	786c      	ldrb	r4, [r5, #1]
 80044ea:	2310      	movs	r3, #16
 80044ec:	3502      	adds	r5, #2
 80044ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80044f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80044f6:	f04f 0c00 	mov.w	ip, #0
 80044fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80044fe:	4666      	mov	r6, ip
 8004500:	fb03 8a19 	mls	sl, r3, r9, r8
 8004504:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004508:	f1be 0f09 	cmp.w	lr, #9
 800450c:	d816      	bhi.n	800453c <_strtol_l.constprop.0+0xa4>
 800450e:	4674      	mov	r4, lr
 8004510:	42a3      	cmp	r3, r4
 8004512:	dd24      	ble.n	800455e <_strtol_l.constprop.0+0xc6>
 8004514:	f1bc 0f00 	cmp.w	ip, #0
 8004518:	db1e      	blt.n	8004558 <_strtol_l.constprop.0+0xc0>
 800451a:	45b1      	cmp	r9, r6
 800451c:	d31c      	bcc.n	8004558 <_strtol_l.constprop.0+0xc0>
 800451e:	d101      	bne.n	8004524 <_strtol_l.constprop.0+0x8c>
 8004520:	45a2      	cmp	sl, r4
 8004522:	db19      	blt.n	8004558 <_strtol_l.constprop.0+0xc0>
 8004524:	fb06 4603 	mla	r6, r6, r3, r4
 8004528:	f04f 0c01 	mov.w	ip, #1
 800452c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004530:	e7e8      	b.n	8004504 <_strtol_l.constprop.0+0x6c>
 8004532:	2c2b      	cmp	r4, #43	; 0x2b
 8004534:	bf04      	itt	eq
 8004536:	782c      	ldrbeq	r4, [r5, #0]
 8004538:	1cb5      	addeq	r5, r6, #2
 800453a:	e7ca      	b.n	80044d2 <_strtol_l.constprop.0+0x3a>
 800453c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004540:	f1be 0f19 	cmp.w	lr, #25
 8004544:	d801      	bhi.n	800454a <_strtol_l.constprop.0+0xb2>
 8004546:	3c37      	subs	r4, #55	; 0x37
 8004548:	e7e2      	b.n	8004510 <_strtol_l.constprop.0+0x78>
 800454a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800454e:	f1be 0f19 	cmp.w	lr, #25
 8004552:	d804      	bhi.n	800455e <_strtol_l.constprop.0+0xc6>
 8004554:	3c57      	subs	r4, #87	; 0x57
 8004556:	e7db      	b.n	8004510 <_strtol_l.constprop.0+0x78>
 8004558:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800455c:	e7e6      	b.n	800452c <_strtol_l.constprop.0+0x94>
 800455e:	f1bc 0f00 	cmp.w	ip, #0
 8004562:	da05      	bge.n	8004570 <_strtol_l.constprop.0+0xd8>
 8004564:	2322      	movs	r3, #34	; 0x22
 8004566:	6003      	str	r3, [r0, #0]
 8004568:	4646      	mov	r6, r8
 800456a:	b942      	cbnz	r2, 800457e <_strtol_l.constprop.0+0xe6>
 800456c:	4630      	mov	r0, r6
 800456e:	e79e      	b.n	80044ae <_strtol_l.constprop.0+0x16>
 8004570:	b107      	cbz	r7, 8004574 <_strtol_l.constprop.0+0xdc>
 8004572:	4276      	negs	r6, r6
 8004574:	2a00      	cmp	r2, #0
 8004576:	d0f9      	beq.n	800456c <_strtol_l.constprop.0+0xd4>
 8004578:	f1bc 0f00 	cmp.w	ip, #0
 800457c:	d000      	beq.n	8004580 <_strtol_l.constprop.0+0xe8>
 800457e:	1e69      	subs	r1, r5, #1
 8004580:	6011      	str	r1, [r2, #0]
 8004582:	e7f3      	b.n	800456c <_strtol_l.constprop.0+0xd4>
 8004584:	2430      	movs	r4, #48	; 0x30
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1b1      	bne.n	80044ee <_strtol_l.constprop.0+0x56>
 800458a:	2308      	movs	r3, #8
 800458c:	e7af      	b.n	80044ee <_strtol_l.constprop.0+0x56>
 800458e:	2c30      	cmp	r4, #48	; 0x30
 8004590:	d0a5      	beq.n	80044de <_strtol_l.constprop.0+0x46>
 8004592:	230a      	movs	r3, #10
 8004594:	e7ab      	b.n	80044ee <_strtol_l.constprop.0+0x56>
 8004596:	bf00      	nop
 8004598:	08007479 	.word	0x08007479

0800459c <_strtol_r>:
 800459c:	f7ff bf7c 	b.w	8004498 <_strtol_l.constprop.0>

080045a0 <quorem>:
 80045a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	6903      	ldr	r3, [r0, #16]
 80045a6:	690c      	ldr	r4, [r1, #16]
 80045a8:	42a3      	cmp	r3, r4
 80045aa:	4607      	mov	r7, r0
 80045ac:	f2c0 8081 	blt.w	80046b2 <quorem+0x112>
 80045b0:	3c01      	subs	r4, #1
 80045b2:	f101 0814 	add.w	r8, r1, #20
 80045b6:	f100 0514 	add.w	r5, r0, #20
 80045ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80045c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045c8:	3301      	adds	r3, #1
 80045ca:	429a      	cmp	r2, r3
 80045cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80045d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80045d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80045d8:	d331      	bcc.n	800463e <quorem+0x9e>
 80045da:	f04f 0e00 	mov.w	lr, #0
 80045de:	4640      	mov	r0, r8
 80045e0:	46ac      	mov	ip, r5
 80045e2:	46f2      	mov	sl, lr
 80045e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80045e8:	b293      	uxth	r3, r2
 80045ea:	fb06 e303 	mla	r3, r6, r3, lr
 80045ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	ebaa 0303 	sub.w	r3, sl, r3
 80045f8:	f8dc a000 	ldr.w	sl, [ip]
 80045fc:	0c12      	lsrs	r2, r2, #16
 80045fe:	fa13 f38a 	uxtah	r3, r3, sl
 8004602:	fb06 e202 	mla	r2, r6, r2, lr
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	9b00      	ldr	r3, [sp, #0]
 800460a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800460e:	b292      	uxth	r2, r2
 8004610:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004614:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004618:	f8bd 3000 	ldrh.w	r3, [sp]
 800461c:	4581      	cmp	r9, r0
 800461e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004622:	f84c 3b04 	str.w	r3, [ip], #4
 8004626:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800462a:	d2db      	bcs.n	80045e4 <quorem+0x44>
 800462c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004630:	b92b      	cbnz	r3, 800463e <quorem+0x9e>
 8004632:	9b01      	ldr	r3, [sp, #4]
 8004634:	3b04      	subs	r3, #4
 8004636:	429d      	cmp	r5, r3
 8004638:	461a      	mov	r2, r3
 800463a:	d32e      	bcc.n	800469a <quorem+0xfa>
 800463c:	613c      	str	r4, [r7, #16]
 800463e:	4638      	mov	r0, r7
 8004640:	f001 fc82 	bl	8005f48 <__mcmp>
 8004644:	2800      	cmp	r0, #0
 8004646:	db24      	blt.n	8004692 <quorem+0xf2>
 8004648:	3601      	adds	r6, #1
 800464a:	4628      	mov	r0, r5
 800464c:	f04f 0c00 	mov.w	ip, #0
 8004650:	f858 2b04 	ldr.w	r2, [r8], #4
 8004654:	f8d0 e000 	ldr.w	lr, [r0]
 8004658:	b293      	uxth	r3, r2
 800465a:	ebac 0303 	sub.w	r3, ip, r3
 800465e:	0c12      	lsrs	r2, r2, #16
 8004660:	fa13 f38e 	uxtah	r3, r3, lr
 8004664:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004668:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800466c:	b29b      	uxth	r3, r3
 800466e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004672:	45c1      	cmp	r9, r8
 8004674:	f840 3b04 	str.w	r3, [r0], #4
 8004678:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800467c:	d2e8      	bcs.n	8004650 <quorem+0xb0>
 800467e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004686:	b922      	cbnz	r2, 8004692 <quorem+0xf2>
 8004688:	3b04      	subs	r3, #4
 800468a:	429d      	cmp	r5, r3
 800468c:	461a      	mov	r2, r3
 800468e:	d30a      	bcc.n	80046a6 <quorem+0x106>
 8004690:	613c      	str	r4, [r7, #16]
 8004692:	4630      	mov	r0, r6
 8004694:	b003      	add	sp, #12
 8004696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	3b04      	subs	r3, #4
 800469e:	2a00      	cmp	r2, #0
 80046a0:	d1cc      	bne.n	800463c <quorem+0x9c>
 80046a2:	3c01      	subs	r4, #1
 80046a4:	e7c7      	b.n	8004636 <quorem+0x96>
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	3b04      	subs	r3, #4
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	d1f0      	bne.n	8004690 <quorem+0xf0>
 80046ae:	3c01      	subs	r4, #1
 80046b0:	e7eb      	b.n	800468a <quorem+0xea>
 80046b2:	2000      	movs	r0, #0
 80046b4:	e7ee      	b.n	8004694 <quorem+0xf4>
	...

080046b8 <_dtoa_r>:
 80046b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	ed2d 8b04 	vpush	{d8-d9}
 80046c0:	ec57 6b10 	vmov	r6, r7, d0
 80046c4:	b093      	sub	sp, #76	; 0x4c
 80046c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80046c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80046cc:	9106      	str	r1, [sp, #24]
 80046ce:	ee10 aa10 	vmov	sl, s0
 80046d2:	4604      	mov	r4, r0
 80046d4:	9209      	str	r2, [sp, #36]	; 0x24
 80046d6:	930c      	str	r3, [sp, #48]	; 0x30
 80046d8:	46bb      	mov	fp, r7
 80046da:	b975      	cbnz	r5, 80046fa <_dtoa_r+0x42>
 80046dc:	2010      	movs	r0, #16
 80046de:	f001 f94d 	bl	800597c <malloc>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6260      	str	r0, [r4, #36]	; 0x24
 80046e6:	b920      	cbnz	r0, 80046f2 <_dtoa_r+0x3a>
 80046e8:	4ba7      	ldr	r3, [pc, #668]	; (8004988 <_dtoa_r+0x2d0>)
 80046ea:	21ea      	movs	r1, #234	; 0xea
 80046ec:	48a7      	ldr	r0, [pc, #668]	; (800498c <_dtoa_r+0x2d4>)
 80046ee:	f002 f8ad 	bl	800684c <__assert_func>
 80046f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80046f6:	6005      	str	r5, [r0, #0]
 80046f8:	60c5      	str	r5, [r0, #12]
 80046fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046fc:	6819      	ldr	r1, [r3, #0]
 80046fe:	b151      	cbz	r1, 8004716 <_dtoa_r+0x5e>
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	604a      	str	r2, [r1, #4]
 8004704:	2301      	movs	r3, #1
 8004706:	4093      	lsls	r3, r2
 8004708:	608b      	str	r3, [r1, #8]
 800470a:	4620      	mov	r0, r4
 800470c:	f001 f990 	bl	8005a30 <_Bfree>
 8004710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	1e3b      	subs	r3, r7, #0
 8004718:	bfaa      	itet	ge
 800471a:	2300      	movge	r3, #0
 800471c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004720:	f8c8 3000 	strge.w	r3, [r8]
 8004724:	4b9a      	ldr	r3, [pc, #616]	; (8004990 <_dtoa_r+0x2d8>)
 8004726:	bfbc      	itt	lt
 8004728:	2201      	movlt	r2, #1
 800472a:	f8c8 2000 	strlt.w	r2, [r8]
 800472e:	ea33 030b 	bics.w	r3, r3, fp
 8004732:	d11b      	bne.n	800476c <_dtoa_r+0xb4>
 8004734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004736:	f242 730f 	movw	r3, #9999	; 0x270f
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004740:	4333      	orrs	r3, r6
 8004742:	f000 8592 	beq.w	800526a <_dtoa_r+0xbb2>
 8004746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004748:	b963      	cbnz	r3, 8004764 <_dtoa_r+0xac>
 800474a:	4b92      	ldr	r3, [pc, #584]	; (8004994 <_dtoa_r+0x2dc>)
 800474c:	e022      	b.n	8004794 <_dtoa_r+0xdc>
 800474e:	4b92      	ldr	r3, [pc, #584]	; (8004998 <_dtoa_r+0x2e0>)
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	3308      	adds	r3, #8
 8004754:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	9801      	ldr	r0, [sp, #4]
 800475a:	b013      	add	sp, #76	; 0x4c
 800475c:	ecbd 8b04 	vpop	{d8-d9}
 8004760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004764:	4b8b      	ldr	r3, [pc, #556]	; (8004994 <_dtoa_r+0x2dc>)
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	3303      	adds	r3, #3
 800476a:	e7f3      	b.n	8004754 <_dtoa_r+0x9c>
 800476c:	2200      	movs	r2, #0
 800476e:	2300      	movs	r3, #0
 8004770:	4650      	mov	r0, sl
 8004772:	4659      	mov	r1, fp
 8004774:	f7fc fa00 	bl	8000b78 <__aeabi_dcmpeq>
 8004778:	ec4b ab19 	vmov	d9, sl, fp
 800477c:	4680      	mov	r8, r0
 800477e:	b158      	cbz	r0, 8004798 <_dtoa_r+0xe0>
 8004780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004782:	2301      	movs	r3, #1
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 856b 	beq.w	8005264 <_dtoa_r+0xbac>
 800478e:	4883      	ldr	r0, [pc, #524]	; (800499c <_dtoa_r+0x2e4>)
 8004790:	6018      	str	r0, [r3, #0]
 8004792:	1e43      	subs	r3, r0, #1
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	e7df      	b.n	8004758 <_dtoa_r+0xa0>
 8004798:	ec4b ab10 	vmov	d0, sl, fp
 800479c:	aa10      	add	r2, sp, #64	; 0x40
 800479e:	a911      	add	r1, sp, #68	; 0x44
 80047a0:	4620      	mov	r0, r4
 80047a2:	f001 fcf3 	bl	800618c <__d2b>
 80047a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80047aa:	ee08 0a10 	vmov	s16, r0
 80047ae:	2d00      	cmp	r5, #0
 80047b0:	f000 8084 	beq.w	80048bc <_dtoa_r+0x204>
 80047b4:	ee19 3a90 	vmov	r3, s19
 80047b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80047c0:	4656      	mov	r6, sl
 80047c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80047c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80047ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80047ce:	4b74      	ldr	r3, [pc, #464]	; (80049a0 <_dtoa_r+0x2e8>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	4630      	mov	r0, r6
 80047d4:	4639      	mov	r1, r7
 80047d6:	f7fb fdaf 	bl	8000338 <__aeabi_dsub>
 80047da:	a365      	add	r3, pc, #404	; (adr r3, 8004970 <_dtoa_r+0x2b8>)
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f7fb ff62 	bl	80006a8 <__aeabi_dmul>
 80047e4:	a364      	add	r3, pc, #400	; (adr r3, 8004978 <_dtoa_r+0x2c0>)
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	f7fb fda7 	bl	800033c <__adddf3>
 80047ee:	4606      	mov	r6, r0
 80047f0:	4628      	mov	r0, r5
 80047f2:	460f      	mov	r7, r1
 80047f4:	f7fb feee 	bl	80005d4 <__aeabi_i2d>
 80047f8:	a361      	add	r3, pc, #388	; (adr r3, 8004980 <_dtoa_r+0x2c8>)
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f7fb ff53 	bl	80006a8 <__aeabi_dmul>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4630      	mov	r0, r6
 8004808:	4639      	mov	r1, r7
 800480a:	f7fb fd97 	bl	800033c <__adddf3>
 800480e:	4606      	mov	r6, r0
 8004810:	460f      	mov	r7, r1
 8004812:	f7fc f9f9 	bl	8000c08 <__aeabi_d2iz>
 8004816:	2200      	movs	r2, #0
 8004818:	9000      	str	r0, [sp, #0]
 800481a:	2300      	movs	r3, #0
 800481c:	4630      	mov	r0, r6
 800481e:	4639      	mov	r1, r7
 8004820:	f7fc f9b4 	bl	8000b8c <__aeabi_dcmplt>
 8004824:	b150      	cbz	r0, 800483c <_dtoa_r+0x184>
 8004826:	9800      	ldr	r0, [sp, #0]
 8004828:	f7fb fed4 	bl	80005d4 <__aeabi_i2d>
 800482c:	4632      	mov	r2, r6
 800482e:	463b      	mov	r3, r7
 8004830:	f7fc f9a2 	bl	8000b78 <__aeabi_dcmpeq>
 8004834:	b910      	cbnz	r0, 800483c <_dtoa_r+0x184>
 8004836:	9b00      	ldr	r3, [sp, #0]
 8004838:	3b01      	subs	r3, #1
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	9b00      	ldr	r3, [sp, #0]
 800483e:	2b16      	cmp	r3, #22
 8004840:	d85a      	bhi.n	80048f8 <_dtoa_r+0x240>
 8004842:	9a00      	ldr	r2, [sp, #0]
 8004844:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <_dtoa_r+0x2ec>)
 8004846:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	ec51 0b19 	vmov	r0, r1, d9
 8004852:	f7fc f99b 	bl	8000b8c <__aeabi_dcmplt>
 8004856:	2800      	cmp	r0, #0
 8004858:	d050      	beq.n	80048fc <_dtoa_r+0x244>
 800485a:	9b00      	ldr	r3, [sp, #0]
 800485c:	3b01      	subs	r3, #1
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2300      	movs	r3, #0
 8004862:	930b      	str	r3, [sp, #44]	; 0x2c
 8004864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004866:	1b5d      	subs	r5, r3, r5
 8004868:	1e6b      	subs	r3, r5, #1
 800486a:	9305      	str	r3, [sp, #20]
 800486c:	bf45      	ittet	mi
 800486e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004872:	9304      	strmi	r3, [sp, #16]
 8004874:	2300      	movpl	r3, #0
 8004876:	2300      	movmi	r3, #0
 8004878:	bf4c      	ite	mi
 800487a:	9305      	strmi	r3, [sp, #20]
 800487c:	9304      	strpl	r3, [sp, #16]
 800487e:	9b00      	ldr	r3, [sp, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	db3d      	blt.n	8004900 <_dtoa_r+0x248>
 8004884:	9b05      	ldr	r3, [sp, #20]
 8004886:	9a00      	ldr	r2, [sp, #0]
 8004888:	920a      	str	r2, [sp, #40]	; 0x28
 800488a:	4413      	add	r3, r2
 800488c:	9305      	str	r3, [sp, #20]
 800488e:	2300      	movs	r3, #0
 8004890:	9307      	str	r3, [sp, #28]
 8004892:	9b06      	ldr	r3, [sp, #24]
 8004894:	2b09      	cmp	r3, #9
 8004896:	f200 8089 	bhi.w	80049ac <_dtoa_r+0x2f4>
 800489a:	2b05      	cmp	r3, #5
 800489c:	bfc4      	itt	gt
 800489e:	3b04      	subgt	r3, #4
 80048a0:	9306      	strgt	r3, [sp, #24]
 80048a2:	9b06      	ldr	r3, [sp, #24]
 80048a4:	f1a3 0302 	sub.w	r3, r3, #2
 80048a8:	bfcc      	ite	gt
 80048aa:	2500      	movgt	r5, #0
 80048ac:	2501      	movle	r5, #1
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	f200 8087 	bhi.w	80049c2 <_dtoa_r+0x30a>
 80048b4:	e8df f003 	tbb	[pc, r3]
 80048b8:	59383a2d 	.word	0x59383a2d
 80048bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80048c0:	441d      	add	r5, r3
 80048c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	bfc1      	itttt	gt
 80048ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80048ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80048d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80048d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80048da:	bfda      	itte	le
 80048dc:	f1c3 0320 	rsble	r3, r3, #32
 80048e0:	fa06 f003 	lslle.w	r0, r6, r3
 80048e4:	4318      	orrgt	r0, r3
 80048e6:	f7fb fe65 	bl	80005b4 <__aeabi_ui2d>
 80048ea:	2301      	movs	r3, #1
 80048ec:	4606      	mov	r6, r0
 80048ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80048f2:	3d01      	subs	r5, #1
 80048f4:	930e      	str	r3, [sp, #56]	; 0x38
 80048f6:	e76a      	b.n	80047ce <_dtoa_r+0x116>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e7b2      	b.n	8004862 <_dtoa_r+0x1aa>
 80048fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80048fe:	e7b1      	b.n	8004864 <_dtoa_r+0x1ac>
 8004900:	9b04      	ldr	r3, [sp, #16]
 8004902:	9a00      	ldr	r2, [sp, #0]
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	9304      	str	r3, [sp, #16]
 8004908:	4253      	negs	r3, r2
 800490a:	9307      	str	r3, [sp, #28]
 800490c:	2300      	movs	r3, #0
 800490e:	930a      	str	r3, [sp, #40]	; 0x28
 8004910:	e7bf      	b.n	8004892 <_dtoa_r+0x1da>
 8004912:	2300      	movs	r3, #0
 8004914:	9308      	str	r3, [sp, #32]
 8004916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004918:	2b00      	cmp	r3, #0
 800491a:	dc55      	bgt.n	80049c8 <_dtoa_r+0x310>
 800491c:	2301      	movs	r3, #1
 800491e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004922:	461a      	mov	r2, r3
 8004924:	9209      	str	r2, [sp, #36]	; 0x24
 8004926:	e00c      	b.n	8004942 <_dtoa_r+0x28a>
 8004928:	2301      	movs	r3, #1
 800492a:	e7f3      	b.n	8004914 <_dtoa_r+0x25c>
 800492c:	2300      	movs	r3, #0
 800492e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004930:	9308      	str	r3, [sp, #32]
 8004932:	9b00      	ldr	r3, [sp, #0]
 8004934:	4413      	add	r3, r2
 8004936:	9302      	str	r3, [sp, #8]
 8004938:	3301      	adds	r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	9303      	str	r3, [sp, #12]
 800493e:	bfb8      	it	lt
 8004940:	2301      	movlt	r3, #1
 8004942:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004944:	2200      	movs	r2, #0
 8004946:	6042      	str	r2, [r0, #4]
 8004948:	2204      	movs	r2, #4
 800494a:	f102 0614 	add.w	r6, r2, #20
 800494e:	429e      	cmp	r6, r3
 8004950:	6841      	ldr	r1, [r0, #4]
 8004952:	d93d      	bls.n	80049d0 <_dtoa_r+0x318>
 8004954:	4620      	mov	r0, r4
 8004956:	f001 f82b 	bl	80059b0 <_Balloc>
 800495a:	9001      	str	r0, [sp, #4]
 800495c:	2800      	cmp	r0, #0
 800495e:	d13b      	bne.n	80049d8 <_dtoa_r+0x320>
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <_dtoa_r+0x2f0>)
 8004962:	4602      	mov	r2, r0
 8004964:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004968:	e6c0      	b.n	80046ec <_dtoa_r+0x34>
 800496a:	2301      	movs	r3, #1
 800496c:	e7df      	b.n	800492e <_dtoa_r+0x276>
 800496e:	bf00      	nop
 8004970:	636f4361 	.word	0x636f4361
 8004974:	3fd287a7 	.word	0x3fd287a7
 8004978:	8b60c8b3 	.word	0x8b60c8b3
 800497c:	3fc68a28 	.word	0x3fc68a28
 8004980:	509f79fb 	.word	0x509f79fb
 8004984:	3fd34413 	.word	0x3fd34413
 8004988:	08007586 	.word	0x08007586
 800498c:	0800759d 	.word	0x0800759d
 8004990:	7ff00000 	.word	0x7ff00000
 8004994:	08007582 	.word	0x08007582
 8004998:	08007579 	.word	0x08007579
 800499c:	080073f9 	.word	0x080073f9
 80049a0:	3ff80000 	.word	0x3ff80000
 80049a4:	08007708 	.word	0x08007708
 80049a8:	080075f8 	.word	0x080075f8
 80049ac:	2501      	movs	r5, #1
 80049ae:	2300      	movs	r3, #0
 80049b0:	9306      	str	r3, [sp, #24]
 80049b2:	9508      	str	r5, [sp, #32]
 80049b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80049bc:	2200      	movs	r2, #0
 80049be:	2312      	movs	r3, #18
 80049c0:	e7b0      	b.n	8004924 <_dtoa_r+0x26c>
 80049c2:	2301      	movs	r3, #1
 80049c4:	9308      	str	r3, [sp, #32]
 80049c6:	e7f5      	b.n	80049b4 <_dtoa_r+0x2fc>
 80049c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80049ce:	e7b8      	b.n	8004942 <_dtoa_r+0x28a>
 80049d0:	3101      	adds	r1, #1
 80049d2:	6041      	str	r1, [r0, #4]
 80049d4:	0052      	lsls	r2, r2, #1
 80049d6:	e7b8      	b.n	800494a <_dtoa_r+0x292>
 80049d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049da:	9a01      	ldr	r2, [sp, #4]
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	2b0e      	cmp	r3, #14
 80049e2:	f200 809d 	bhi.w	8004b20 <_dtoa_r+0x468>
 80049e6:	2d00      	cmp	r5, #0
 80049e8:	f000 809a 	beq.w	8004b20 <_dtoa_r+0x468>
 80049ec:	9b00      	ldr	r3, [sp, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	dd32      	ble.n	8004a58 <_dtoa_r+0x3a0>
 80049f2:	4ab7      	ldr	r2, [pc, #732]	; (8004cd0 <_dtoa_r+0x618>)
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80049fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a00:	9b00      	ldr	r3, [sp, #0]
 8004a02:	05d8      	lsls	r0, r3, #23
 8004a04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004a08:	d516      	bpl.n	8004a38 <_dtoa_r+0x380>
 8004a0a:	4bb2      	ldr	r3, [pc, #712]	; (8004cd4 <_dtoa_r+0x61c>)
 8004a0c:	ec51 0b19 	vmov	r0, r1, d9
 8004a10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a14:	f7fb ff72 	bl	80008fc <__aeabi_ddiv>
 8004a18:	f007 070f 	and.w	r7, r7, #15
 8004a1c:	4682      	mov	sl, r0
 8004a1e:	468b      	mov	fp, r1
 8004a20:	2503      	movs	r5, #3
 8004a22:	4eac      	ldr	r6, [pc, #688]	; (8004cd4 <_dtoa_r+0x61c>)
 8004a24:	b957      	cbnz	r7, 8004a3c <_dtoa_r+0x384>
 8004a26:	4642      	mov	r2, r8
 8004a28:	464b      	mov	r3, r9
 8004a2a:	4650      	mov	r0, sl
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	f7fb ff65 	bl	80008fc <__aeabi_ddiv>
 8004a32:	4682      	mov	sl, r0
 8004a34:	468b      	mov	fp, r1
 8004a36:	e028      	b.n	8004a8a <_dtoa_r+0x3d2>
 8004a38:	2502      	movs	r5, #2
 8004a3a:	e7f2      	b.n	8004a22 <_dtoa_r+0x36a>
 8004a3c:	07f9      	lsls	r1, r7, #31
 8004a3e:	d508      	bpl.n	8004a52 <_dtoa_r+0x39a>
 8004a40:	4640      	mov	r0, r8
 8004a42:	4649      	mov	r1, r9
 8004a44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a48:	f7fb fe2e 	bl	80006a8 <__aeabi_dmul>
 8004a4c:	3501      	adds	r5, #1
 8004a4e:	4680      	mov	r8, r0
 8004a50:	4689      	mov	r9, r1
 8004a52:	107f      	asrs	r7, r7, #1
 8004a54:	3608      	adds	r6, #8
 8004a56:	e7e5      	b.n	8004a24 <_dtoa_r+0x36c>
 8004a58:	f000 809b 	beq.w	8004b92 <_dtoa_r+0x4da>
 8004a5c:	9b00      	ldr	r3, [sp, #0]
 8004a5e:	4f9d      	ldr	r7, [pc, #628]	; (8004cd4 <_dtoa_r+0x61c>)
 8004a60:	425e      	negs	r6, r3
 8004a62:	4b9b      	ldr	r3, [pc, #620]	; (8004cd0 <_dtoa_r+0x618>)
 8004a64:	f006 020f 	and.w	r2, r6, #15
 8004a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	ec51 0b19 	vmov	r0, r1, d9
 8004a74:	f7fb fe18 	bl	80006a8 <__aeabi_dmul>
 8004a78:	1136      	asrs	r6, r6, #4
 8004a7a:	4682      	mov	sl, r0
 8004a7c:	468b      	mov	fp, r1
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2502      	movs	r5, #2
 8004a82:	2e00      	cmp	r6, #0
 8004a84:	d17a      	bne.n	8004b7c <_dtoa_r+0x4c4>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1d3      	bne.n	8004a32 <_dtoa_r+0x37a>
 8004a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8082 	beq.w	8004b96 <_dtoa_r+0x4de>
 8004a92:	4b91      	ldr	r3, [pc, #580]	; (8004cd8 <_dtoa_r+0x620>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	4650      	mov	r0, sl
 8004a98:	4659      	mov	r1, fp
 8004a9a:	f7fc f877 	bl	8000b8c <__aeabi_dcmplt>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d079      	beq.n	8004b96 <_dtoa_r+0x4de>
 8004aa2:	9b03      	ldr	r3, [sp, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d076      	beq.n	8004b96 <_dtoa_r+0x4de>
 8004aa8:	9b02      	ldr	r3, [sp, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	dd36      	ble.n	8004b1c <_dtoa_r+0x464>
 8004aae:	9b00      	ldr	r3, [sp, #0]
 8004ab0:	4650      	mov	r0, sl
 8004ab2:	4659      	mov	r1, fp
 8004ab4:	1e5f      	subs	r7, r3, #1
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	4b88      	ldr	r3, [pc, #544]	; (8004cdc <_dtoa_r+0x624>)
 8004aba:	f7fb fdf5 	bl	80006a8 <__aeabi_dmul>
 8004abe:	9e02      	ldr	r6, [sp, #8]
 8004ac0:	4682      	mov	sl, r0
 8004ac2:	468b      	mov	fp, r1
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f7fb fd84 	bl	80005d4 <__aeabi_i2d>
 8004acc:	4652      	mov	r2, sl
 8004ace:	465b      	mov	r3, fp
 8004ad0:	f7fb fdea 	bl	80006a8 <__aeabi_dmul>
 8004ad4:	4b82      	ldr	r3, [pc, #520]	; (8004ce0 <_dtoa_r+0x628>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f7fb fc30 	bl	800033c <__adddf3>
 8004adc:	46d0      	mov	r8, sl
 8004ade:	46d9      	mov	r9, fp
 8004ae0:	4682      	mov	sl, r0
 8004ae2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004ae6:	2e00      	cmp	r6, #0
 8004ae8:	d158      	bne.n	8004b9c <_dtoa_r+0x4e4>
 8004aea:	4b7e      	ldr	r3, [pc, #504]	; (8004ce4 <_dtoa_r+0x62c>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	4640      	mov	r0, r8
 8004af0:	4649      	mov	r1, r9
 8004af2:	f7fb fc21 	bl	8000338 <__aeabi_dsub>
 8004af6:	4652      	mov	r2, sl
 8004af8:	465b      	mov	r3, fp
 8004afa:	4680      	mov	r8, r0
 8004afc:	4689      	mov	r9, r1
 8004afe:	f7fc f863 	bl	8000bc8 <__aeabi_dcmpgt>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	f040 8295 	bne.w	8005032 <_dtoa_r+0x97a>
 8004b08:	4652      	mov	r2, sl
 8004b0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004b0e:	4640      	mov	r0, r8
 8004b10:	4649      	mov	r1, r9
 8004b12:	f7fc f83b 	bl	8000b8c <__aeabi_dcmplt>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	f040 8289 	bne.w	800502e <_dtoa_r+0x976>
 8004b1c:	ec5b ab19 	vmov	sl, fp, d9
 8004b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f2c0 8148 	blt.w	8004db8 <_dtoa_r+0x700>
 8004b28:	9a00      	ldr	r2, [sp, #0]
 8004b2a:	2a0e      	cmp	r2, #14
 8004b2c:	f300 8144 	bgt.w	8004db8 <_dtoa_r+0x700>
 8004b30:	4b67      	ldr	r3, [pc, #412]	; (8004cd0 <_dtoa_r+0x618>)
 8004b32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f280 80d5 	bge.w	8004cec <_dtoa_r+0x634>
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f300 80d1 	bgt.w	8004cec <_dtoa_r+0x634>
 8004b4a:	f040 826f 	bne.w	800502c <_dtoa_r+0x974>
 8004b4e:	4b65      	ldr	r3, [pc, #404]	; (8004ce4 <_dtoa_r+0x62c>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	4640      	mov	r0, r8
 8004b54:	4649      	mov	r1, r9
 8004b56:	f7fb fda7 	bl	80006a8 <__aeabi_dmul>
 8004b5a:	4652      	mov	r2, sl
 8004b5c:	465b      	mov	r3, fp
 8004b5e:	f7fc f829 	bl	8000bb4 <__aeabi_dcmpge>
 8004b62:	9e03      	ldr	r6, [sp, #12]
 8004b64:	4637      	mov	r7, r6
 8004b66:	2800      	cmp	r0, #0
 8004b68:	f040 8245 	bne.w	8004ff6 <_dtoa_r+0x93e>
 8004b6c:	9d01      	ldr	r5, [sp, #4]
 8004b6e:	2331      	movs	r3, #49	; 0x31
 8004b70:	f805 3b01 	strb.w	r3, [r5], #1
 8004b74:	9b00      	ldr	r3, [sp, #0]
 8004b76:	3301      	adds	r3, #1
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	e240      	b.n	8004ffe <_dtoa_r+0x946>
 8004b7c:	07f2      	lsls	r2, r6, #31
 8004b7e:	d505      	bpl.n	8004b8c <_dtoa_r+0x4d4>
 8004b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b84:	f7fb fd90 	bl	80006a8 <__aeabi_dmul>
 8004b88:	3501      	adds	r5, #1
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	1076      	asrs	r6, r6, #1
 8004b8e:	3708      	adds	r7, #8
 8004b90:	e777      	b.n	8004a82 <_dtoa_r+0x3ca>
 8004b92:	2502      	movs	r5, #2
 8004b94:	e779      	b.n	8004a8a <_dtoa_r+0x3d2>
 8004b96:	9f00      	ldr	r7, [sp, #0]
 8004b98:	9e03      	ldr	r6, [sp, #12]
 8004b9a:	e794      	b.n	8004ac6 <_dtoa_r+0x40e>
 8004b9c:	9901      	ldr	r1, [sp, #4]
 8004b9e:	4b4c      	ldr	r3, [pc, #304]	; (8004cd0 <_dtoa_r+0x618>)
 8004ba0:	4431      	add	r1, r6
 8004ba2:	910d      	str	r1, [sp, #52]	; 0x34
 8004ba4:	9908      	ldr	r1, [sp, #32]
 8004ba6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004baa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004bae:	2900      	cmp	r1, #0
 8004bb0:	d043      	beq.n	8004c3a <_dtoa_r+0x582>
 8004bb2:	494d      	ldr	r1, [pc, #308]	; (8004ce8 <_dtoa_r+0x630>)
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	f7fb fea1 	bl	80008fc <__aeabi_ddiv>
 8004bba:	4652      	mov	r2, sl
 8004bbc:	465b      	mov	r3, fp
 8004bbe:	f7fb fbbb 	bl	8000338 <__aeabi_dsub>
 8004bc2:	9d01      	ldr	r5, [sp, #4]
 8004bc4:	4682      	mov	sl, r0
 8004bc6:	468b      	mov	fp, r1
 8004bc8:	4649      	mov	r1, r9
 8004bca:	4640      	mov	r0, r8
 8004bcc:	f7fc f81c 	bl	8000c08 <__aeabi_d2iz>
 8004bd0:	4606      	mov	r6, r0
 8004bd2:	f7fb fcff 	bl	80005d4 <__aeabi_i2d>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4640      	mov	r0, r8
 8004bdc:	4649      	mov	r1, r9
 8004bde:	f7fb fbab 	bl	8000338 <__aeabi_dsub>
 8004be2:	3630      	adds	r6, #48	; 0x30
 8004be4:	f805 6b01 	strb.w	r6, [r5], #1
 8004be8:	4652      	mov	r2, sl
 8004bea:	465b      	mov	r3, fp
 8004bec:	4680      	mov	r8, r0
 8004bee:	4689      	mov	r9, r1
 8004bf0:	f7fb ffcc 	bl	8000b8c <__aeabi_dcmplt>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d163      	bne.n	8004cc0 <_dtoa_r+0x608>
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	4936      	ldr	r1, [pc, #216]	; (8004cd8 <_dtoa_r+0x620>)
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f7fb fb9a 	bl	8000338 <__aeabi_dsub>
 8004c04:	4652      	mov	r2, sl
 8004c06:	465b      	mov	r3, fp
 8004c08:	f7fb ffc0 	bl	8000b8c <__aeabi_dcmplt>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	f040 80b5 	bne.w	8004d7c <_dtoa_r+0x6c4>
 8004c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c14:	429d      	cmp	r5, r3
 8004c16:	d081      	beq.n	8004b1c <_dtoa_r+0x464>
 8004c18:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <_dtoa_r+0x624>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	4650      	mov	r0, sl
 8004c1e:	4659      	mov	r1, fp
 8004c20:	f7fb fd42 	bl	80006a8 <__aeabi_dmul>
 8004c24:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <_dtoa_r+0x624>)
 8004c26:	4682      	mov	sl, r0
 8004c28:	468b      	mov	fp, r1
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f7fb fd3a 	bl	80006a8 <__aeabi_dmul>
 8004c34:	4680      	mov	r8, r0
 8004c36:	4689      	mov	r9, r1
 8004c38:	e7c6      	b.n	8004bc8 <_dtoa_r+0x510>
 8004c3a:	4650      	mov	r0, sl
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	f7fb fd33 	bl	80006a8 <__aeabi_dmul>
 8004c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c44:	9d01      	ldr	r5, [sp, #4]
 8004c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c48:	4682      	mov	sl, r0
 8004c4a:	468b      	mov	fp, r1
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	4640      	mov	r0, r8
 8004c50:	f7fb ffda 	bl	8000c08 <__aeabi_d2iz>
 8004c54:	4606      	mov	r6, r0
 8004c56:	f7fb fcbd 	bl	80005d4 <__aeabi_i2d>
 8004c5a:	3630      	adds	r6, #48	; 0x30
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4640      	mov	r0, r8
 8004c62:	4649      	mov	r1, r9
 8004c64:	f7fb fb68 	bl	8000338 <__aeabi_dsub>
 8004c68:	f805 6b01 	strb.w	r6, [r5], #1
 8004c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c6e:	429d      	cmp	r5, r3
 8004c70:	4680      	mov	r8, r0
 8004c72:	4689      	mov	r9, r1
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	d124      	bne.n	8004cc4 <_dtoa_r+0x60c>
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <_dtoa_r+0x630>)
 8004c7c:	4650      	mov	r0, sl
 8004c7e:	4659      	mov	r1, fp
 8004c80:	f7fb fb5c 	bl	800033c <__adddf3>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4640      	mov	r0, r8
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	f7fb ff9c 	bl	8000bc8 <__aeabi_dcmpgt>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d173      	bne.n	8004d7c <_dtoa_r+0x6c4>
 8004c94:	4652      	mov	r2, sl
 8004c96:	465b      	mov	r3, fp
 8004c98:	4913      	ldr	r1, [pc, #76]	; (8004ce8 <_dtoa_r+0x630>)
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f7fb fb4c 	bl	8000338 <__aeabi_dsub>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	f7fb ff70 	bl	8000b8c <__aeabi_dcmplt>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f43f af35 	beq.w	8004b1c <_dtoa_r+0x464>
 8004cb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004cb4:	1e6b      	subs	r3, r5, #1
 8004cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004cbc:	2b30      	cmp	r3, #48	; 0x30
 8004cbe:	d0f8      	beq.n	8004cb2 <_dtoa_r+0x5fa>
 8004cc0:	9700      	str	r7, [sp, #0]
 8004cc2:	e049      	b.n	8004d58 <_dtoa_r+0x6a0>
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <_dtoa_r+0x624>)
 8004cc6:	f7fb fcef 	bl	80006a8 <__aeabi_dmul>
 8004cca:	4680      	mov	r8, r0
 8004ccc:	4689      	mov	r9, r1
 8004cce:	e7bd      	b.n	8004c4c <_dtoa_r+0x594>
 8004cd0:	08007708 	.word	0x08007708
 8004cd4:	080076e0 	.word	0x080076e0
 8004cd8:	3ff00000 	.word	0x3ff00000
 8004cdc:	40240000 	.word	0x40240000
 8004ce0:	401c0000 	.word	0x401c0000
 8004ce4:	40140000 	.word	0x40140000
 8004ce8:	3fe00000 	.word	0x3fe00000
 8004cec:	9d01      	ldr	r5, [sp, #4]
 8004cee:	4656      	mov	r6, sl
 8004cf0:	465f      	mov	r7, fp
 8004cf2:	4642      	mov	r2, r8
 8004cf4:	464b      	mov	r3, r9
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	4639      	mov	r1, r7
 8004cfa:	f7fb fdff 	bl	80008fc <__aeabi_ddiv>
 8004cfe:	f7fb ff83 	bl	8000c08 <__aeabi_d2iz>
 8004d02:	4682      	mov	sl, r0
 8004d04:	f7fb fc66 	bl	80005d4 <__aeabi_i2d>
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	f7fb fccc 	bl	80006a8 <__aeabi_dmul>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4630      	mov	r0, r6
 8004d16:	4639      	mov	r1, r7
 8004d18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004d1c:	f7fb fb0c 	bl	8000338 <__aeabi_dsub>
 8004d20:	f805 6b01 	strb.w	r6, [r5], #1
 8004d24:	9e01      	ldr	r6, [sp, #4]
 8004d26:	9f03      	ldr	r7, [sp, #12]
 8004d28:	1bae      	subs	r6, r5, r6
 8004d2a:	42b7      	cmp	r7, r6
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	d135      	bne.n	8004d9e <_dtoa_r+0x6e6>
 8004d32:	f7fb fb03 	bl	800033c <__adddf3>
 8004d36:	4642      	mov	r2, r8
 8004d38:	464b      	mov	r3, r9
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	460f      	mov	r7, r1
 8004d3e:	f7fb ff43 	bl	8000bc8 <__aeabi_dcmpgt>
 8004d42:	b9d0      	cbnz	r0, 8004d7a <_dtoa_r+0x6c2>
 8004d44:	4642      	mov	r2, r8
 8004d46:	464b      	mov	r3, r9
 8004d48:	4630      	mov	r0, r6
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	f7fb ff14 	bl	8000b78 <__aeabi_dcmpeq>
 8004d50:	b110      	cbz	r0, 8004d58 <_dtoa_r+0x6a0>
 8004d52:	f01a 0f01 	tst.w	sl, #1
 8004d56:	d110      	bne.n	8004d7a <_dtoa_r+0x6c2>
 8004d58:	4620      	mov	r0, r4
 8004d5a:	ee18 1a10 	vmov	r1, s16
 8004d5e:	f000 fe67 	bl	8005a30 <_Bfree>
 8004d62:	2300      	movs	r3, #0
 8004d64:	9800      	ldr	r0, [sp, #0]
 8004d66:	702b      	strb	r3, [r5, #0]
 8004d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	6018      	str	r0, [r3, #0]
 8004d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f43f acf1 	beq.w	8004758 <_dtoa_r+0xa0>
 8004d76:	601d      	str	r5, [r3, #0]
 8004d78:	e4ee      	b.n	8004758 <_dtoa_r+0xa0>
 8004d7a:	9f00      	ldr	r7, [sp, #0]
 8004d7c:	462b      	mov	r3, r5
 8004d7e:	461d      	mov	r5, r3
 8004d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d84:	2a39      	cmp	r2, #57	; 0x39
 8004d86:	d106      	bne.n	8004d96 <_dtoa_r+0x6de>
 8004d88:	9a01      	ldr	r2, [sp, #4]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d1f7      	bne.n	8004d7e <_dtoa_r+0x6c6>
 8004d8e:	9901      	ldr	r1, [sp, #4]
 8004d90:	2230      	movs	r2, #48	; 0x30
 8004d92:	3701      	adds	r7, #1
 8004d94:	700a      	strb	r2, [r1, #0]
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	3201      	adds	r2, #1
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e790      	b.n	8004cc0 <_dtoa_r+0x608>
 8004d9e:	4ba6      	ldr	r3, [pc, #664]	; (8005038 <_dtoa_r+0x980>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	f7fb fc81 	bl	80006a8 <__aeabi_dmul>
 8004da6:	2200      	movs	r2, #0
 8004da8:	2300      	movs	r3, #0
 8004daa:	4606      	mov	r6, r0
 8004dac:	460f      	mov	r7, r1
 8004dae:	f7fb fee3 	bl	8000b78 <__aeabi_dcmpeq>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d09d      	beq.n	8004cf2 <_dtoa_r+0x63a>
 8004db6:	e7cf      	b.n	8004d58 <_dtoa_r+0x6a0>
 8004db8:	9a08      	ldr	r2, [sp, #32]
 8004dba:	2a00      	cmp	r2, #0
 8004dbc:	f000 80d7 	beq.w	8004f6e <_dtoa_r+0x8b6>
 8004dc0:	9a06      	ldr	r2, [sp, #24]
 8004dc2:	2a01      	cmp	r2, #1
 8004dc4:	f300 80ba 	bgt.w	8004f3c <_dtoa_r+0x884>
 8004dc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dca:	2a00      	cmp	r2, #0
 8004dcc:	f000 80b2 	beq.w	8004f34 <_dtoa_r+0x87c>
 8004dd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004dd4:	9e07      	ldr	r6, [sp, #28]
 8004dd6:	9d04      	ldr	r5, [sp, #16]
 8004dd8:	9a04      	ldr	r2, [sp, #16]
 8004dda:	441a      	add	r2, r3
 8004ddc:	9204      	str	r2, [sp, #16]
 8004dde:	9a05      	ldr	r2, [sp, #20]
 8004de0:	2101      	movs	r1, #1
 8004de2:	441a      	add	r2, r3
 8004de4:	4620      	mov	r0, r4
 8004de6:	9205      	str	r2, [sp, #20]
 8004de8:	f000 ff24 	bl	8005c34 <__i2b>
 8004dec:	4607      	mov	r7, r0
 8004dee:	2d00      	cmp	r5, #0
 8004df0:	dd0c      	ble.n	8004e0c <_dtoa_r+0x754>
 8004df2:	9b05      	ldr	r3, [sp, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	dd09      	ble.n	8004e0c <_dtoa_r+0x754>
 8004df8:	42ab      	cmp	r3, r5
 8004dfa:	9a04      	ldr	r2, [sp, #16]
 8004dfc:	bfa8      	it	ge
 8004dfe:	462b      	movge	r3, r5
 8004e00:	1ad2      	subs	r2, r2, r3
 8004e02:	9204      	str	r2, [sp, #16]
 8004e04:	9a05      	ldr	r2, [sp, #20]
 8004e06:	1aed      	subs	r5, r5, r3
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	9305      	str	r3, [sp, #20]
 8004e0c:	9b07      	ldr	r3, [sp, #28]
 8004e0e:	b31b      	cbz	r3, 8004e58 <_dtoa_r+0x7a0>
 8004e10:	9b08      	ldr	r3, [sp, #32]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80af 	beq.w	8004f76 <_dtoa_r+0x8be>
 8004e18:	2e00      	cmp	r6, #0
 8004e1a:	dd13      	ble.n	8004e44 <_dtoa_r+0x78c>
 8004e1c:	4639      	mov	r1, r7
 8004e1e:	4632      	mov	r2, r6
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 ffc7 	bl	8005db4 <__pow5mult>
 8004e26:	ee18 2a10 	vmov	r2, s16
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	4607      	mov	r7, r0
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f000 ff16 	bl	8005c60 <__multiply>
 8004e34:	ee18 1a10 	vmov	r1, s16
 8004e38:	4680      	mov	r8, r0
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f000 fdf8 	bl	8005a30 <_Bfree>
 8004e40:	ee08 8a10 	vmov	s16, r8
 8004e44:	9b07      	ldr	r3, [sp, #28]
 8004e46:	1b9a      	subs	r2, r3, r6
 8004e48:	d006      	beq.n	8004e58 <_dtoa_r+0x7a0>
 8004e4a:	ee18 1a10 	vmov	r1, s16
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f000 ffb0 	bl	8005db4 <__pow5mult>
 8004e54:	ee08 0a10 	vmov	s16, r0
 8004e58:	2101      	movs	r1, #1
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f000 feea 	bl	8005c34 <__i2b>
 8004e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	4606      	mov	r6, r0
 8004e66:	f340 8088 	ble.w	8004f7a <_dtoa_r+0x8c2>
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4601      	mov	r1, r0
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f000 ffa0 	bl	8005db4 <__pow5mult>
 8004e74:	9b06      	ldr	r3, [sp, #24]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	4606      	mov	r6, r0
 8004e7a:	f340 8081 	ble.w	8004f80 <_dtoa_r+0x8c8>
 8004e7e:	f04f 0800 	mov.w	r8, #0
 8004e82:	6933      	ldr	r3, [r6, #16]
 8004e84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004e88:	6918      	ldr	r0, [r3, #16]
 8004e8a:	f000 fe83 	bl	8005b94 <__hi0bits>
 8004e8e:	f1c0 0020 	rsb	r0, r0, #32
 8004e92:	9b05      	ldr	r3, [sp, #20]
 8004e94:	4418      	add	r0, r3
 8004e96:	f010 001f 	ands.w	r0, r0, #31
 8004e9a:	f000 8092 	beq.w	8004fc2 <_dtoa_r+0x90a>
 8004e9e:	f1c0 0320 	rsb	r3, r0, #32
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	f340 808a 	ble.w	8004fbc <_dtoa_r+0x904>
 8004ea8:	f1c0 001c 	rsb	r0, r0, #28
 8004eac:	9b04      	ldr	r3, [sp, #16]
 8004eae:	4403      	add	r3, r0
 8004eb0:	9304      	str	r3, [sp, #16]
 8004eb2:	9b05      	ldr	r3, [sp, #20]
 8004eb4:	4403      	add	r3, r0
 8004eb6:	4405      	add	r5, r0
 8004eb8:	9305      	str	r3, [sp, #20]
 8004eba:	9b04      	ldr	r3, [sp, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	dd07      	ble.n	8004ed0 <_dtoa_r+0x818>
 8004ec0:	ee18 1a10 	vmov	r1, s16
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f000 ffce 	bl	8005e68 <__lshift>
 8004ecc:	ee08 0a10 	vmov	s16, r0
 8004ed0:	9b05      	ldr	r3, [sp, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	dd05      	ble.n	8004ee2 <_dtoa_r+0x82a>
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4620      	mov	r0, r4
 8004edc:	f000 ffc4 	bl	8005e68 <__lshift>
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d06e      	beq.n	8004fc6 <_dtoa_r+0x90e>
 8004ee8:	ee18 0a10 	vmov	r0, s16
 8004eec:	4631      	mov	r1, r6
 8004eee:	f001 f82b 	bl	8005f48 <__mcmp>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	da67      	bge.n	8004fc6 <_dtoa_r+0x90e>
 8004ef6:	9b00      	ldr	r3, [sp, #0]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	ee18 1a10 	vmov	r1, s16
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	220a      	movs	r2, #10
 8004f02:	2300      	movs	r3, #0
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 fdb5 	bl	8005a74 <__multadd>
 8004f0a:	9b08      	ldr	r3, [sp, #32]
 8004f0c:	ee08 0a10 	vmov	s16, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 81b1 	beq.w	8005278 <_dtoa_r+0xbc0>
 8004f16:	2300      	movs	r3, #0
 8004f18:	4639      	mov	r1, r7
 8004f1a:	220a      	movs	r2, #10
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f000 fda9 	bl	8005a74 <__multadd>
 8004f22:	9b02      	ldr	r3, [sp, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	4607      	mov	r7, r0
 8004f28:	f300 808e 	bgt.w	8005048 <_dtoa_r+0x990>
 8004f2c:	9b06      	ldr	r3, [sp, #24]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	dc51      	bgt.n	8004fd6 <_dtoa_r+0x91e>
 8004f32:	e089      	b.n	8005048 <_dtoa_r+0x990>
 8004f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f3a:	e74b      	b.n	8004dd4 <_dtoa_r+0x71c>
 8004f3c:	9b03      	ldr	r3, [sp, #12]
 8004f3e:	1e5e      	subs	r6, r3, #1
 8004f40:	9b07      	ldr	r3, [sp, #28]
 8004f42:	42b3      	cmp	r3, r6
 8004f44:	bfbf      	itttt	lt
 8004f46:	9b07      	ldrlt	r3, [sp, #28]
 8004f48:	9607      	strlt	r6, [sp, #28]
 8004f4a:	1af2      	sublt	r2, r6, r3
 8004f4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004f4e:	bfb6      	itet	lt
 8004f50:	189b      	addlt	r3, r3, r2
 8004f52:	1b9e      	subge	r6, r3, r6
 8004f54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004f56:	9b03      	ldr	r3, [sp, #12]
 8004f58:	bfb8      	it	lt
 8004f5a:	2600      	movlt	r6, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bfb7      	itett	lt
 8004f60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004f64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004f68:	1a9d      	sublt	r5, r3, r2
 8004f6a:	2300      	movlt	r3, #0
 8004f6c:	e734      	b.n	8004dd8 <_dtoa_r+0x720>
 8004f6e:	9e07      	ldr	r6, [sp, #28]
 8004f70:	9d04      	ldr	r5, [sp, #16]
 8004f72:	9f08      	ldr	r7, [sp, #32]
 8004f74:	e73b      	b.n	8004dee <_dtoa_r+0x736>
 8004f76:	9a07      	ldr	r2, [sp, #28]
 8004f78:	e767      	b.n	8004e4a <_dtoa_r+0x792>
 8004f7a:	9b06      	ldr	r3, [sp, #24]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	dc18      	bgt.n	8004fb2 <_dtoa_r+0x8fa>
 8004f80:	f1ba 0f00 	cmp.w	sl, #0
 8004f84:	d115      	bne.n	8004fb2 <_dtoa_r+0x8fa>
 8004f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f8a:	b993      	cbnz	r3, 8004fb2 <_dtoa_r+0x8fa>
 8004f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004f90:	0d1b      	lsrs	r3, r3, #20
 8004f92:	051b      	lsls	r3, r3, #20
 8004f94:	b183      	cbz	r3, 8004fb8 <_dtoa_r+0x900>
 8004f96:	9b04      	ldr	r3, [sp, #16]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	9b05      	ldr	r3, [sp, #20]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	9305      	str	r3, [sp, #20]
 8004fa2:	f04f 0801 	mov.w	r8, #1
 8004fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f47f af6a 	bne.w	8004e82 <_dtoa_r+0x7ca>
 8004fae:	2001      	movs	r0, #1
 8004fb0:	e76f      	b.n	8004e92 <_dtoa_r+0x7da>
 8004fb2:	f04f 0800 	mov.w	r8, #0
 8004fb6:	e7f6      	b.n	8004fa6 <_dtoa_r+0x8ee>
 8004fb8:	4698      	mov	r8, r3
 8004fba:	e7f4      	b.n	8004fa6 <_dtoa_r+0x8ee>
 8004fbc:	f43f af7d 	beq.w	8004eba <_dtoa_r+0x802>
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	301c      	adds	r0, #28
 8004fc4:	e772      	b.n	8004eac <_dtoa_r+0x7f4>
 8004fc6:	9b03      	ldr	r3, [sp, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dc37      	bgt.n	800503c <_dtoa_r+0x984>
 8004fcc:	9b06      	ldr	r3, [sp, #24]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	dd34      	ble.n	800503c <_dtoa_r+0x984>
 8004fd2:	9b03      	ldr	r3, [sp, #12]
 8004fd4:	9302      	str	r3, [sp, #8]
 8004fd6:	9b02      	ldr	r3, [sp, #8]
 8004fd8:	b96b      	cbnz	r3, 8004ff6 <_dtoa_r+0x93e>
 8004fda:	4631      	mov	r1, r6
 8004fdc:	2205      	movs	r2, #5
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f000 fd48 	bl	8005a74 <__multadd>
 8004fe4:	4601      	mov	r1, r0
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	ee18 0a10 	vmov	r0, s16
 8004fec:	f000 ffac 	bl	8005f48 <__mcmp>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	f73f adbb 	bgt.w	8004b6c <_dtoa_r+0x4b4>
 8004ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff8:	9d01      	ldr	r5, [sp, #4]
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	f04f 0800 	mov.w	r8, #0
 8005002:	4631      	mov	r1, r6
 8005004:	4620      	mov	r0, r4
 8005006:	f000 fd13 	bl	8005a30 <_Bfree>
 800500a:	2f00      	cmp	r7, #0
 800500c:	f43f aea4 	beq.w	8004d58 <_dtoa_r+0x6a0>
 8005010:	f1b8 0f00 	cmp.w	r8, #0
 8005014:	d005      	beq.n	8005022 <_dtoa_r+0x96a>
 8005016:	45b8      	cmp	r8, r7
 8005018:	d003      	beq.n	8005022 <_dtoa_r+0x96a>
 800501a:	4641      	mov	r1, r8
 800501c:	4620      	mov	r0, r4
 800501e:	f000 fd07 	bl	8005a30 <_Bfree>
 8005022:	4639      	mov	r1, r7
 8005024:	4620      	mov	r0, r4
 8005026:	f000 fd03 	bl	8005a30 <_Bfree>
 800502a:	e695      	b.n	8004d58 <_dtoa_r+0x6a0>
 800502c:	2600      	movs	r6, #0
 800502e:	4637      	mov	r7, r6
 8005030:	e7e1      	b.n	8004ff6 <_dtoa_r+0x93e>
 8005032:	9700      	str	r7, [sp, #0]
 8005034:	4637      	mov	r7, r6
 8005036:	e599      	b.n	8004b6c <_dtoa_r+0x4b4>
 8005038:	40240000 	.word	0x40240000
 800503c:	9b08      	ldr	r3, [sp, #32]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80ca 	beq.w	80051d8 <_dtoa_r+0xb20>
 8005044:	9b03      	ldr	r3, [sp, #12]
 8005046:	9302      	str	r3, [sp, #8]
 8005048:	2d00      	cmp	r5, #0
 800504a:	dd05      	ble.n	8005058 <_dtoa_r+0x9a0>
 800504c:	4639      	mov	r1, r7
 800504e:	462a      	mov	r2, r5
 8005050:	4620      	mov	r0, r4
 8005052:	f000 ff09 	bl	8005e68 <__lshift>
 8005056:	4607      	mov	r7, r0
 8005058:	f1b8 0f00 	cmp.w	r8, #0
 800505c:	d05b      	beq.n	8005116 <_dtoa_r+0xa5e>
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4620      	mov	r0, r4
 8005062:	f000 fca5 	bl	80059b0 <_Balloc>
 8005066:	4605      	mov	r5, r0
 8005068:	b928      	cbnz	r0, 8005076 <_dtoa_r+0x9be>
 800506a:	4b87      	ldr	r3, [pc, #540]	; (8005288 <_dtoa_r+0xbd0>)
 800506c:	4602      	mov	r2, r0
 800506e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005072:	f7ff bb3b 	b.w	80046ec <_dtoa_r+0x34>
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	3202      	adds	r2, #2
 800507a:	0092      	lsls	r2, r2, #2
 800507c:	f107 010c 	add.w	r1, r7, #12
 8005080:	300c      	adds	r0, #12
 8005082:	f7fd fd2b 	bl	8002adc <memcpy>
 8005086:	2201      	movs	r2, #1
 8005088:	4629      	mov	r1, r5
 800508a:	4620      	mov	r0, r4
 800508c:	f000 feec 	bl	8005e68 <__lshift>
 8005090:	9b01      	ldr	r3, [sp, #4]
 8005092:	f103 0901 	add.w	r9, r3, #1
 8005096:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800509a:	4413      	add	r3, r2
 800509c:	9305      	str	r3, [sp, #20]
 800509e:	f00a 0301 	and.w	r3, sl, #1
 80050a2:	46b8      	mov	r8, r7
 80050a4:	9304      	str	r3, [sp, #16]
 80050a6:	4607      	mov	r7, r0
 80050a8:	4631      	mov	r1, r6
 80050aa:	ee18 0a10 	vmov	r0, s16
 80050ae:	f7ff fa77 	bl	80045a0 <quorem>
 80050b2:	4641      	mov	r1, r8
 80050b4:	9002      	str	r0, [sp, #8]
 80050b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80050ba:	ee18 0a10 	vmov	r0, s16
 80050be:	f000 ff43 	bl	8005f48 <__mcmp>
 80050c2:	463a      	mov	r2, r7
 80050c4:	9003      	str	r0, [sp, #12]
 80050c6:	4631      	mov	r1, r6
 80050c8:	4620      	mov	r0, r4
 80050ca:	f000 ff59 	bl	8005f80 <__mdiff>
 80050ce:	68c2      	ldr	r2, [r0, #12]
 80050d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80050d4:	4605      	mov	r5, r0
 80050d6:	bb02      	cbnz	r2, 800511a <_dtoa_r+0xa62>
 80050d8:	4601      	mov	r1, r0
 80050da:	ee18 0a10 	vmov	r0, s16
 80050de:	f000 ff33 	bl	8005f48 <__mcmp>
 80050e2:	4602      	mov	r2, r0
 80050e4:	4629      	mov	r1, r5
 80050e6:	4620      	mov	r0, r4
 80050e8:	9207      	str	r2, [sp, #28]
 80050ea:	f000 fca1 	bl	8005a30 <_Bfree>
 80050ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80050f2:	ea43 0102 	orr.w	r1, r3, r2
 80050f6:	9b04      	ldr	r3, [sp, #16]
 80050f8:	430b      	orrs	r3, r1
 80050fa:	464d      	mov	r5, r9
 80050fc:	d10f      	bne.n	800511e <_dtoa_r+0xa66>
 80050fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005102:	d02a      	beq.n	800515a <_dtoa_r+0xaa2>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	dd02      	ble.n	8005110 <_dtoa_r+0xa58>
 800510a:	9b02      	ldr	r3, [sp, #8]
 800510c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005110:	f88b a000 	strb.w	sl, [fp]
 8005114:	e775      	b.n	8005002 <_dtoa_r+0x94a>
 8005116:	4638      	mov	r0, r7
 8005118:	e7ba      	b.n	8005090 <_dtoa_r+0x9d8>
 800511a:	2201      	movs	r2, #1
 800511c:	e7e2      	b.n	80050e4 <_dtoa_r+0xa2c>
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	db04      	blt.n	800512e <_dtoa_r+0xa76>
 8005124:	9906      	ldr	r1, [sp, #24]
 8005126:	430b      	orrs	r3, r1
 8005128:	9904      	ldr	r1, [sp, #16]
 800512a:	430b      	orrs	r3, r1
 800512c:	d122      	bne.n	8005174 <_dtoa_r+0xabc>
 800512e:	2a00      	cmp	r2, #0
 8005130:	ddee      	ble.n	8005110 <_dtoa_r+0xa58>
 8005132:	ee18 1a10 	vmov	r1, s16
 8005136:	2201      	movs	r2, #1
 8005138:	4620      	mov	r0, r4
 800513a:	f000 fe95 	bl	8005e68 <__lshift>
 800513e:	4631      	mov	r1, r6
 8005140:	ee08 0a10 	vmov	s16, r0
 8005144:	f000 ff00 	bl	8005f48 <__mcmp>
 8005148:	2800      	cmp	r0, #0
 800514a:	dc03      	bgt.n	8005154 <_dtoa_r+0xa9c>
 800514c:	d1e0      	bne.n	8005110 <_dtoa_r+0xa58>
 800514e:	f01a 0f01 	tst.w	sl, #1
 8005152:	d0dd      	beq.n	8005110 <_dtoa_r+0xa58>
 8005154:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005158:	d1d7      	bne.n	800510a <_dtoa_r+0xa52>
 800515a:	2339      	movs	r3, #57	; 0x39
 800515c:	f88b 3000 	strb.w	r3, [fp]
 8005160:	462b      	mov	r3, r5
 8005162:	461d      	mov	r5, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800516a:	2a39      	cmp	r2, #57	; 0x39
 800516c:	d071      	beq.n	8005252 <_dtoa_r+0xb9a>
 800516e:	3201      	adds	r2, #1
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e746      	b.n	8005002 <_dtoa_r+0x94a>
 8005174:	2a00      	cmp	r2, #0
 8005176:	dd07      	ble.n	8005188 <_dtoa_r+0xad0>
 8005178:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800517c:	d0ed      	beq.n	800515a <_dtoa_r+0xaa2>
 800517e:	f10a 0301 	add.w	r3, sl, #1
 8005182:	f88b 3000 	strb.w	r3, [fp]
 8005186:	e73c      	b.n	8005002 <_dtoa_r+0x94a>
 8005188:	9b05      	ldr	r3, [sp, #20]
 800518a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800518e:	4599      	cmp	r9, r3
 8005190:	d047      	beq.n	8005222 <_dtoa_r+0xb6a>
 8005192:	ee18 1a10 	vmov	r1, s16
 8005196:	2300      	movs	r3, #0
 8005198:	220a      	movs	r2, #10
 800519a:	4620      	mov	r0, r4
 800519c:	f000 fc6a 	bl	8005a74 <__multadd>
 80051a0:	45b8      	cmp	r8, r7
 80051a2:	ee08 0a10 	vmov	s16, r0
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	f04f 020a 	mov.w	r2, #10
 80051ae:	4641      	mov	r1, r8
 80051b0:	4620      	mov	r0, r4
 80051b2:	d106      	bne.n	80051c2 <_dtoa_r+0xb0a>
 80051b4:	f000 fc5e 	bl	8005a74 <__multadd>
 80051b8:	4680      	mov	r8, r0
 80051ba:	4607      	mov	r7, r0
 80051bc:	f109 0901 	add.w	r9, r9, #1
 80051c0:	e772      	b.n	80050a8 <_dtoa_r+0x9f0>
 80051c2:	f000 fc57 	bl	8005a74 <__multadd>
 80051c6:	4639      	mov	r1, r7
 80051c8:	4680      	mov	r8, r0
 80051ca:	2300      	movs	r3, #0
 80051cc:	220a      	movs	r2, #10
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 fc50 	bl	8005a74 <__multadd>
 80051d4:	4607      	mov	r7, r0
 80051d6:	e7f1      	b.n	80051bc <_dtoa_r+0xb04>
 80051d8:	9b03      	ldr	r3, [sp, #12]
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	9d01      	ldr	r5, [sp, #4]
 80051de:	ee18 0a10 	vmov	r0, s16
 80051e2:	4631      	mov	r1, r6
 80051e4:	f7ff f9dc 	bl	80045a0 <quorem>
 80051e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80051ec:	9b01      	ldr	r3, [sp, #4]
 80051ee:	f805 ab01 	strb.w	sl, [r5], #1
 80051f2:	1aea      	subs	r2, r5, r3
 80051f4:	9b02      	ldr	r3, [sp, #8]
 80051f6:	4293      	cmp	r3, r2
 80051f8:	dd09      	ble.n	800520e <_dtoa_r+0xb56>
 80051fa:	ee18 1a10 	vmov	r1, s16
 80051fe:	2300      	movs	r3, #0
 8005200:	220a      	movs	r2, #10
 8005202:	4620      	mov	r0, r4
 8005204:	f000 fc36 	bl	8005a74 <__multadd>
 8005208:	ee08 0a10 	vmov	s16, r0
 800520c:	e7e7      	b.n	80051de <_dtoa_r+0xb26>
 800520e:	9b02      	ldr	r3, [sp, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	bfc8      	it	gt
 8005214:	461d      	movgt	r5, r3
 8005216:	9b01      	ldr	r3, [sp, #4]
 8005218:	bfd8      	it	le
 800521a:	2501      	movle	r5, #1
 800521c:	441d      	add	r5, r3
 800521e:	f04f 0800 	mov.w	r8, #0
 8005222:	ee18 1a10 	vmov	r1, s16
 8005226:	2201      	movs	r2, #1
 8005228:	4620      	mov	r0, r4
 800522a:	f000 fe1d 	bl	8005e68 <__lshift>
 800522e:	4631      	mov	r1, r6
 8005230:	ee08 0a10 	vmov	s16, r0
 8005234:	f000 fe88 	bl	8005f48 <__mcmp>
 8005238:	2800      	cmp	r0, #0
 800523a:	dc91      	bgt.n	8005160 <_dtoa_r+0xaa8>
 800523c:	d102      	bne.n	8005244 <_dtoa_r+0xb8c>
 800523e:	f01a 0f01 	tst.w	sl, #1
 8005242:	d18d      	bne.n	8005160 <_dtoa_r+0xaa8>
 8005244:	462b      	mov	r3, r5
 8005246:	461d      	mov	r5, r3
 8005248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800524c:	2a30      	cmp	r2, #48	; 0x30
 800524e:	d0fa      	beq.n	8005246 <_dtoa_r+0xb8e>
 8005250:	e6d7      	b.n	8005002 <_dtoa_r+0x94a>
 8005252:	9a01      	ldr	r2, [sp, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d184      	bne.n	8005162 <_dtoa_r+0xaaa>
 8005258:	9b00      	ldr	r3, [sp, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	2331      	movs	r3, #49	; 0x31
 8005260:	7013      	strb	r3, [r2, #0]
 8005262:	e6ce      	b.n	8005002 <_dtoa_r+0x94a>
 8005264:	4b09      	ldr	r3, [pc, #36]	; (800528c <_dtoa_r+0xbd4>)
 8005266:	f7ff ba95 	b.w	8004794 <_dtoa_r+0xdc>
 800526a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800526c:	2b00      	cmp	r3, #0
 800526e:	f47f aa6e 	bne.w	800474e <_dtoa_r+0x96>
 8005272:	4b07      	ldr	r3, [pc, #28]	; (8005290 <_dtoa_r+0xbd8>)
 8005274:	f7ff ba8e 	b.w	8004794 <_dtoa_r+0xdc>
 8005278:	9b02      	ldr	r3, [sp, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	dcae      	bgt.n	80051dc <_dtoa_r+0xb24>
 800527e:	9b06      	ldr	r3, [sp, #24]
 8005280:	2b02      	cmp	r3, #2
 8005282:	f73f aea8 	bgt.w	8004fd6 <_dtoa_r+0x91e>
 8005286:	e7a9      	b.n	80051dc <_dtoa_r+0xb24>
 8005288:	080075f8 	.word	0x080075f8
 800528c:	080073f8 	.word	0x080073f8
 8005290:	08007579 	.word	0x08007579

08005294 <rshift>:
 8005294:	6903      	ldr	r3, [r0, #16]
 8005296:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800529a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800529e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80052a2:	f100 0414 	add.w	r4, r0, #20
 80052a6:	dd45      	ble.n	8005334 <rshift+0xa0>
 80052a8:	f011 011f 	ands.w	r1, r1, #31
 80052ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80052b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80052b4:	d10c      	bne.n	80052d0 <rshift+0x3c>
 80052b6:	f100 0710 	add.w	r7, r0, #16
 80052ba:	4629      	mov	r1, r5
 80052bc:	42b1      	cmp	r1, r6
 80052be:	d334      	bcc.n	800532a <rshift+0x96>
 80052c0:	1a9b      	subs	r3, r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	1eea      	subs	r2, r5, #3
 80052c6:	4296      	cmp	r6, r2
 80052c8:	bf38      	it	cc
 80052ca:	2300      	movcc	r3, #0
 80052cc:	4423      	add	r3, r4
 80052ce:	e015      	b.n	80052fc <rshift+0x68>
 80052d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80052d4:	f1c1 0820 	rsb	r8, r1, #32
 80052d8:	40cf      	lsrs	r7, r1
 80052da:	f105 0e04 	add.w	lr, r5, #4
 80052de:	46a1      	mov	r9, r4
 80052e0:	4576      	cmp	r6, lr
 80052e2:	46f4      	mov	ip, lr
 80052e4:	d815      	bhi.n	8005312 <rshift+0x7e>
 80052e6:	1a9a      	subs	r2, r3, r2
 80052e8:	0092      	lsls	r2, r2, #2
 80052ea:	3a04      	subs	r2, #4
 80052ec:	3501      	adds	r5, #1
 80052ee:	42ae      	cmp	r6, r5
 80052f0:	bf38      	it	cc
 80052f2:	2200      	movcc	r2, #0
 80052f4:	18a3      	adds	r3, r4, r2
 80052f6:	50a7      	str	r7, [r4, r2]
 80052f8:	b107      	cbz	r7, 80052fc <rshift+0x68>
 80052fa:	3304      	adds	r3, #4
 80052fc:	1b1a      	subs	r2, r3, r4
 80052fe:	42a3      	cmp	r3, r4
 8005300:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005304:	bf08      	it	eq
 8005306:	2300      	moveq	r3, #0
 8005308:	6102      	str	r2, [r0, #16]
 800530a:	bf08      	it	eq
 800530c:	6143      	streq	r3, [r0, #20]
 800530e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005312:	f8dc c000 	ldr.w	ip, [ip]
 8005316:	fa0c fc08 	lsl.w	ip, ip, r8
 800531a:	ea4c 0707 	orr.w	r7, ip, r7
 800531e:	f849 7b04 	str.w	r7, [r9], #4
 8005322:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005326:	40cf      	lsrs	r7, r1
 8005328:	e7da      	b.n	80052e0 <rshift+0x4c>
 800532a:	f851 cb04 	ldr.w	ip, [r1], #4
 800532e:	f847 cf04 	str.w	ip, [r7, #4]!
 8005332:	e7c3      	b.n	80052bc <rshift+0x28>
 8005334:	4623      	mov	r3, r4
 8005336:	e7e1      	b.n	80052fc <rshift+0x68>

08005338 <__hexdig_fun>:
 8005338:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800533c:	2b09      	cmp	r3, #9
 800533e:	d802      	bhi.n	8005346 <__hexdig_fun+0xe>
 8005340:	3820      	subs	r0, #32
 8005342:	b2c0      	uxtb	r0, r0
 8005344:	4770      	bx	lr
 8005346:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800534a:	2b05      	cmp	r3, #5
 800534c:	d801      	bhi.n	8005352 <__hexdig_fun+0x1a>
 800534e:	3847      	subs	r0, #71	; 0x47
 8005350:	e7f7      	b.n	8005342 <__hexdig_fun+0xa>
 8005352:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005356:	2b05      	cmp	r3, #5
 8005358:	d801      	bhi.n	800535e <__hexdig_fun+0x26>
 800535a:	3827      	subs	r0, #39	; 0x27
 800535c:	e7f1      	b.n	8005342 <__hexdig_fun+0xa>
 800535e:	2000      	movs	r0, #0
 8005360:	4770      	bx	lr
	...

08005364 <__gethex>:
 8005364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	ed2d 8b02 	vpush	{d8}
 800536c:	b089      	sub	sp, #36	; 0x24
 800536e:	ee08 0a10 	vmov	s16, r0
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	4bb4      	ldr	r3, [pc, #720]	; (8005648 <__gethex+0x2e4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	4618      	mov	r0, r3
 800537c:	468b      	mov	fp, r1
 800537e:	4690      	mov	r8, r2
 8005380:	f7fa ff78 	bl	8000274 <strlen>
 8005384:	9b01      	ldr	r3, [sp, #4]
 8005386:	f8db 2000 	ldr.w	r2, [fp]
 800538a:	4403      	add	r3, r0
 800538c:	4682      	mov	sl, r0
 800538e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005392:	9305      	str	r3, [sp, #20]
 8005394:	1c93      	adds	r3, r2, #2
 8005396:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800539a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800539e:	32fe      	adds	r2, #254	; 0xfe
 80053a0:	18d1      	adds	r1, r2, r3
 80053a2:	461f      	mov	r7, r3
 80053a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80053a8:	9100      	str	r1, [sp, #0]
 80053aa:	2830      	cmp	r0, #48	; 0x30
 80053ac:	d0f8      	beq.n	80053a0 <__gethex+0x3c>
 80053ae:	f7ff ffc3 	bl	8005338 <__hexdig_fun>
 80053b2:	4604      	mov	r4, r0
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d13a      	bne.n	800542e <__gethex+0xca>
 80053b8:	9901      	ldr	r1, [sp, #4]
 80053ba:	4652      	mov	r2, sl
 80053bc:	4638      	mov	r0, r7
 80053be:	f001 fa23 	bl	8006808 <strncmp>
 80053c2:	4605      	mov	r5, r0
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d168      	bne.n	800549a <__gethex+0x136>
 80053c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80053cc:	eb07 060a 	add.w	r6, r7, sl
 80053d0:	f7ff ffb2 	bl	8005338 <__hexdig_fun>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d062      	beq.n	800549e <__gethex+0x13a>
 80053d8:	4633      	mov	r3, r6
 80053da:	7818      	ldrb	r0, [r3, #0]
 80053dc:	2830      	cmp	r0, #48	; 0x30
 80053de:	461f      	mov	r7, r3
 80053e0:	f103 0301 	add.w	r3, r3, #1
 80053e4:	d0f9      	beq.n	80053da <__gethex+0x76>
 80053e6:	f7ff ffa7 	bl	8005338 <__hexdig_fun>
 80053ea:	2301      	movs	r3, #1
 80053ec:	fab0 f480 	clz	r4, r0
 80053f0:	0964      	lsrs	r4, r4, #5
 80053f2:	4635      	mov	r5, r6
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	463a      	mov	r2, r7
 80053f8:	4616      	mov	r6, r2
 80053fa:	3201      	adds	r2, #1
 80053fc:	7830      	ldrb	r0, [r6, #0]
 80053fe:	f7ff ff9b 	bl	8005338 <__hexdig_fun>
 8005402:	2800      	cmp	r0, #0
 8005404:	d1f8      	bne.n	80053f8 <__gethex+0x94>
 8005406:	9901      	ldr	r1, [sp, #4]
 8005408:	4652      	mov	r2, sl
 800540a:	4630      	mov	r0, r6
 800540c:	f001 f9fc 	bl	8006808 <strncmp>
 8005410:	b980      	cbnz	r0, 8005434 <__gethex+0xd0>
 8005412:	b94d      	cbnz	r5, 8005428 <__gethex+0xc4>
 8005414:	eb06 050a 	add.w	r5, r6, sl
 8005418:	462a      	mov	r2, r5
 800541a:	4616      	mov	r6, r2
 800541c:	3201      	adds	r2, #1
 800541e:	7830      	ldrb	r0, [r6, #0]
 8005420:	f7ff ff8a 	bl	8005338 <__hexdig_fun>
 8005424:	2800      	cmp	r0, #0
 8005426:	d1f8      	bne.n	800541a <__gethex+0xb6>
 8005428:	1bad      	subs	r5, r5, r6
 800542a:	00ad      	lsls	r5, r5, #2
 800542c:	e004      	b.n	8005438 <__gethex+0xd4>
 800542e:	2400      	movs	r4, #0
 8005430:	4625      	mov	r5, r4
 8005432:	e7e0      	b.n	80053f6 <__gethex+0x92>
 8005434:	2d00      	cmp	r5, #0
 8005436:	d1f7      	bne.n	8005428 <__gethex+0xc4>
 8005438:	7833      	ldrb	r3, [r6, #0]
 800543a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800543e:	2b50      	cmp	r3, #80	; 0x50
 8005440:	d13b      	bne.n	80054ba <__gethex+0x156>
 8005442:	7873      	ldrb	r3, [r6, #1]
 8005444:	2b2b      	cmp	r3, #43	; 0x2b
 8005446:	d02c      	beq.n	80054a2 <__gethex+0x13e>
 8005448:	2b2d      	cmp	r3, #45	; 0x2d
 800544a:	d02e      	beq.n	80054aa <__gethex+0x146>
 800544c:	1c71      	adds	r1, r6, #1
 800544e:	f04f 0900 	mov.w	r9, #0
 8005452:	7808      	ldrb	r0, [r1, #0]
 8005454:	f7ff ff70 	bl	8005338 <__hexdig_fun>
 8005458:	1e43      	subs	r3, r0, #1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b18      	cmp	r3, #24
 800545e:	d82c      	bhi.n	80054ba <__gethex+0x156>
 8005460:	f1a0 0210 	sub.w	r2, r0, #16
 8005464:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005468:	f7ff ff66 	bl	8005338 <__hexdig_fun>
 800546c:	1e43      	subs	r3, r0, #1
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b18      	cmp	r3, #24
 8005472:	d91d      	bls.n	80054b0 <__gethex+0x14c>
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	d000      	beq.n	800547c <__gethex+0x118>
 800547a:	4252      	negs	r2, r2
 800547c:	4415      	add	r5, r2
 800547e:	f8cb 1000 	str.w	r1, [fp]
 8005482:	b1e4      	cbz	r4, 80054be <__gethex+0x15a>
 8005484:	9b00      	ldr	r3, [sp, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	bf14      	ite	ne
 800548a:	2700      	movne	r7, #0
 800548c:	2706      	moveq	r7, #6
 800548e:	4638      	mov	r0, r7
 8005490:	b009      	add	sp, #36	; 0x24
 8005492:	ecbd 8b02 	vpop	{d8}
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549a:	463e      	mov	r6, r7
 800549c:	4625      	mov	r5, r4
 800549e:	2401      	movs	r4, #1
 80054a0:	e7ca      	b.n	8005438 <__gethex+0xd4>
 80054a2:	f04f 0900 	mov.w	r9, #0
 80054a6:	1cb1      	adds	r1, r6, #2
 80054a8:	e7d3      	b.n	8005452 <__gethex+0xee>
 80054aa:	f04f 0901 	mov.w	r9, #1
 80054ae:	e7fa      	b.n	80054a6 <__gethex+0x142>
 80054b0:	230a      	movs	r3, #10
 80054b2:	fb03 0202 	mla	r2, r3, r2, r0
 80054b6:	3a10      	subs	r2, #16
 80054b8:	e7d4      	b.n	8005464 <__gethex+0x100>
 80054ba:	4631      	mov	r1, r6
 80054bc:	e7df      	b.n	800547e <__gethex+0x11a>
 80054be:	1bf3      	subs	r3, r6, r7
 80054c0:	3b01      	subs	r3, #1
 80054c2:	4621      	mov	r1, r4
 80054c4:	2b07      	cmp	r3, #7
 80054c6:	dc0b      	bgt.n	80054e0 <__gethex+0x17c>
 80054c8:	ee18 0a10 	vmov	r0, s16
 80054cc:	f000 fa70 	bl	80059b0 <_Balloc>
 80054d0:	4604      	mov	r4, r0
 80054d2:	b940      	cbnz	r0, 80054e6 <__gethex+0x182>
 80054d4:	4b5d      	ldr	r3, [pc, #372]	; (800564c <__gethex+0x2e8>)
 80054d6:	4602      	mov	r2, r0
 80054d8:	21de      	movs	r1, #222	; 0xde
 80054da:	485d      	ldr	r0, [pc, #372]	; (8005650 <__gethex+0x2ec>)
 80054dc:	f001 f9b6 	bl	800684c <__assert_func>
 80054e0:	3101      	adds	r1, #1
 80054e2:	105b      	asrs	r3, r3, #1
 80054e4:	e7ee      	b.n	80054c4 <__gethex+0x160>
 80054e6:	f100 0914 	add.w	r9, r0, #20
 80054ea:	f04f 0b00 	mov.w	fp, #0
 80054ee:	f1ca 0301 	rsb	r3, sl, #1
 80054f2:	f8cd 9008 	str.w	r9, [sp, #8]
 80054f6:	f8cd b000 	str.w	fp, [sp]
 80054fa:	9306      	str	r3, [sp, #24]
 80054fc:	42b7      	cmp	r7, r6
 80054fe:	d340      	bcc.n	8005582 <__gethex+0x21e>
 8005500:	9802      	ldr	r0, [sp, #8]
 8005502:	9b00      	ldr	r3, [sp, #0]
 8005504:	f840 3b04 	str.w	r3, [r0], #4
 8005508:	eba0 0009 	sub.w	r0, r0, r9
 800550c:	1080      	asrs	r0, r0, #2
 800550e:	0146      	lsls	r6, r0, #5
 8005510:	6120      	str	r0, [r4, #16]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fb3e 	bl	8005b94 <__hi0bits>
 8005518:	1a30      	subs	r0, r6, r0
 800551a:	f8d8 6000 	ldr.w	r6, [r8]
 800551e:	42b0      	cmp	r0, r6
 8005520:	dd63      	ble.n	80055ea <__gethex+0x286>
 8005522:	1b87      	subs	r7, r0, r6
 8005524:	4639      	mov	r1, r7
 8005526:	4620      	mov	r0, r4
 8005528:	f000 fee2 	bl	80062f0 <__any_on>
 800552c:	4682      	mov	sl, r0
 800552e:	b1a8      	cbz	r0, 800555c <__gethex+0x1f8>
 8005530:	1e7b      	subs	r3, r7, #1
 8005532:	1159      	asrs	r1, r3, #5
 8005534:	f003 021f 	and.w	r2, r3, #31
 8005538:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800553c:	f04f 0a01 	mov.w	sl, #1
 8005540:	fa0a f202 	lsl.w	r2, sl, r2
 8005544:	420a      	tst	r2, r1
 8005546:	d009      	beq.n	800555c <__gethex+0x1f8>
 8005548:	4553      	cmp	r3, sl
 800554a:	dd05      	ble.n	8005558 <__gethex+0x1f4>
 800554c:	1eb9      	subs	r1, r7, #2
 800554e:	4620      	mov	r0, r4
 8005550:	f000 fece 	bl	80062f0 <__any_on>
 8005554:	2800      	cmp	r0, #0
 8005556:	d145      	bne.n	80055e4 <__gethex+0x280>
 8005558:	f04f 0a02 	mov.w	sl, #2
 800555c:	4639      	mov	r1, r7
 800555e:	4620      	mov	r0, r4
 8005560:	f7ff fe98 	bl	8005294 <rshift>
 8005564:	443d      	add	r5, r7
 8005566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800556a:	42ab      	cmp	r3, r5
 800556c:	da4c      	bge.n	8005608 <__gethex+0x2a4>
 800556e:	ee18 0a10 	vmov	r0, s16
 8005572:	4621      	mov	r1, r4
 8005574:	f000 fa5c 	bl	8005a30 <_Bfree>
 8005578:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800557a:	2300      	movs	r3, #0
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	27a3      	movs	r7, #163	; 0xa3
 8005580:	e785      	b.n	800548e <__gethex+0x12a>
 8005582:	1e73      	subs	r3, r6, #1
 8005584:	9a05      	ldr	r2, [sp, #20]
 8005586:	9303      	str	r3, [sp, #12]
 8005588:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800558c:	4293      	cmp	r3, r2
 800558e:	d019      	beq.n	80055c4 <__gethex+0x260>
 8005590:	f1bb 0f20 	cmp.w	fp, #32
 8005594:	d107      	bne.n	80055a6 <__gethex+0x242>
 8005596:	9b02      	ldr	r3, [sp, #8]
 8005598:	9a00      	ldr	r2, [sp, #0]
 800559a:	f843 2b04 	str.w	r2, [r3], #4
 800559e:	9302      	str	r3, [sp, #8]
 80055a0:	2300      	movs	r3, #0
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	469b      	mov	fp, r3
 80055a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80055aa:	f7ff fec5 	bl	8005338 <__hexdig_fun>
 80055ae:	9b00      	ldr	r3, [sp, #0]
 80055b0:	f000 000f 	and.w	r0, r0, #15
 80055b4:	fa00 f00b 	lsl.w	r0, r0, fp
 80055b8:	4303      	orrs	r3, r0
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	f10b 0b04 	add.w	fp, fp, #4
 80055c0:	9b03      	ldr	r3, [sp, #12]
 80055c2:	e00d      	b.n	80055e0 <__gethex+0x27c>
 80055c4:	9b03      	ldr	r3, [sp, #12]
 80055c6:	9a06      	ldr	r2, [sp, #24]
 80055c8:	4413      	add	r3, r2
 80055ca:	42bb      	cmp	r3, r7
 80055cc:	d3e0      	bcc.n	8005590 <__gethex+0x22c>
 80055ce:	4618      	mov	r0, r3
 80055d0:	9901      	ldr	r1, [sp, #4]
 80055d2:	9307      	str	r3, [sp, #28]
 80055d4:	4652      	mov	r2, sl
 80055d6:	f001 f917 	bl	8006808 <strncmp>
 80055da:	9b07      	ldr	r3, [sp, #28]
 80055dc:	2800      	cmp	r0, #0
 80055de:	d1d7      	bne.n	8005590 <__gethex+0x22c>
 80055e0:	461e      	mov	r6, r3
 80055e2:	e78b      	b.n	80054fc <__gethex+0x198>
 80055e4:	f04f 0a03 	mov.w	sl, #3
 80055e8:	e7b8      	b.n	800555c <__gethex+0x1f8>
 80055ea:	da0a      	bge.n	8005602 <__gethex+0x29e>
 80055ec:	1a37      	subs	r7, r6, r0
 80055ee:	4621      	mov	r1, r4
 80055f0:	ee18 0a10 	vmov	r0, s16
 80055f4:	463a      	mov	r2, r7
 80055f6:	f000 fc37 	bl	8005e68 <__lshift>
 80055fa:	1bed      	subs	r5, r5, r7
 80055fc:	4604      	mov	r4, r0
 80055fe:	f100 0914 	add.w	r9, r0, #20
 8005602:	f04f 0a00 	mov.w	sl, #0
 8005606:	e7ae      	b.n	8005566 <__gethex+0x202>
 8005608:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800560c:	42a8      	cmp	r0, r5
 800560e:	dd72      	ble.n	80056f6 <__gethex+0x392>
 8005610:	1b45      	subs	r5, r0, r5
 8005612:	42ae      	cmp	r6, r5
 8005614:	dc36      	bgt.n	8005684 <__gethex+0x320>
 8005616:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d02a      	beq.n	8005674 <__gethex+0x310>
 800561e:	2b03      	cmp	r3, #3
 8005620:	d02c      	beq.n	800567c <__gethex+0x318>
 8005622:	2b01      	cmp	r3, #1
 8005624:	d11c      	bne.n	8005660 <__gethex+0x2fc>
 8005626:	42ae      	cmp	r6, r5
 8005628:	d11a      	bne.n	8005660 <__gethex+0x2fc>
 800562a:	2e01      	cmp	r6, #1
 800562c:	d112      	bne.n	8005654 <__gethex+0x2f0>
 800562e:	9a04      	ldr	r2, [sp, #16]
 8005630:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	2301      	movs	r3, #1
 8005638:	6123      	str	r3, [r4, #16]
 800563a:	f8c9 3000 	str.w	r3, [r9]
 800563e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005640:	2762      	movs	r7, #98	; 0x62
 8005642:	601c      	str	r4, [r3, #0]
 8005644:	e723      	b.n	800548e <__gethex+0x12a>
 8005646:	bf00      	nop
 8005648:	08007670 	.word	0x08007670
 800564c:	080075f8 	.word	0x080075f8
 8005650:	08007609 	.word	0x08007609
 8005654:	1e71      	subs	r1, r6, #1
 8005656:	4620      	mov	r0, r4
 8005658:	f000 fe4a 	bl	80062f0 <__any_on>
 800565c:	2800      	cmp	r0, #0
 800565e:	d1e6      	bne.n	800562e <__gethex+0x2ca>
 8005660:	ee18 0a10 	vmov	r0, s16
 8005664:	4621      	mov	r1, r4
 8005666:	f000 f9e3 	bl	8005a30 <_Bfree>
 800566a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800566c:	2300      	movs	r3, #0
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	2750      	movs	r7, #80	; 0x50
 8005672:	e70c      	b.n	800548e <__gethex+0x12a>
 8005674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f2      	bne.n	8005660 <__gethex+0x2fc>
 800567a:	e7d8      	b.n	800562e <__gethex+0x2ca>
 800567c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1d5      	bne.n	800562e <__gethex+0x2ca>
 8005682:	e7ed      	b.n	8005660 <__gethex+0x2fc>
 8005684:	1e6f      	subs	r7, r5, #1
 8005686:	f1ba 0f00 	cmp.w	sl, #0
 800568a:	d131      	bne.n	80056f0 <__gethex+0x38c>
 800568c:	b127      	cbz	r7, 8005698 <__gethex+0x334>
 800568e:	4639      	mov	r1, r7
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fe2d 	bl	80062f0 <__any_on>
 8005696:	4682      	mov	sl, r0
 8005698:	117b      	asrs	r3, r7, #5
 800569a:	2101      	movs	r1, #1
 800569c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80056a0:	f007 071f 	and.w	r7, r7, #31
 80056a4:	fa01 f707 	lsl.w	r7, r1, r7
 80056a8:	421f      	tst	r7, r3
 80056aa:	4629      	mov	r1, r5
 80056ac:	4620      	mov	r0, r4
 80056ae:	bf18      	it	ne
 80056b0:	f04a 0a02 	orrne.w	sl, sl, #2
 80056b4:	1b76      	subs	r6, r6, r5
 80056b6:	f7ff fded 	bl	8005294 <rshift>
 80056ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80056be:	2702      	movs	r7, #2
 80056c0:	f1ba 0f00 	cmp.w	sl, #0
 80056c4:	d048      	beq.n	8005758 <__gethex+0x3f4>
 80056c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d015      	beq.n	80056fa <__gethex+0x396>
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d017      	beq.n	8005702 <__gethex+0x39e>
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d109      	bne.n	80056ea <__gethex+0x386>
 80056d6:	f01a 0f02 	tst.w	sl, #2
 80056da:	d006      	beq.n	80056ea <__gethex+0x386>
 80056dc:	f8d9 0000 	ldr.w	r0, [r9]
 80056e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80056e4:	f01a 0f01 	tst.w	sl, #1
 80056e8:	d10e      	bne.n	8005708 <__gethex+0x3a4>
 80056ea:	f047 0710 	orr.w	r7, r7, #16
 80056ee:	e033      	b.n	8005758 <__gethex+0x3f4>
 80056f0:	f04f 0a01 	mov.w	sl, #1
 80056f4:	e7d0      	b.n	8005698 <__gethex+0x334>
 80056f6:	2701      	movs	r7, #1
 80056f8:	e7e2      	b.n	80056c0 <__gethex+0x35c>
 80056fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056fc:	f1c3 0301 	rsb	r3, r3, #1
 8005700:	9315      	str	r3, [sp, #84]	; 0x54
 8005702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <__gethex+0x386>
 8005708:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800570c:	f104 0314 	add.w	r3, r4, #20
 8005710:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005714:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005718:	f04f 0c00 	mov.w	ip, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005722:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005726:	d01c      	beq.n	8005762 <__gethex+0x3fe>
 8005728:	3201      	adds	r2, #1
 800572a:	6002      	str	r2, [r0, #0]
 800572c:	2f02      	cmp	r7, #2
 800572e:	f104 0314 	add.w	r3, r4, #20
 8005732:	d13f      	bne.n	80057b4 <__gethex+0x450>
 8005734:	f8d8 2000 	ldr.w	r2, [r8]
 8005738:	3a01      	subs	r2, #1
 800573a:	42b2      	cmp	r2, r6
 800573c:	d10a      	bne.n	8005754 <__gethex+0x3f0>
 800573e:	1171      	asrs	r1, r6, #5
 8005740:	2201      	movs	r2, #1
 8005742:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005746:	f006 061f 	and.w	r6, r6, #31
 800574a:	fa02 f606 	lsl.w	r6, r2, r6
 800574e:	421e      	tst	r6, r3
 8005750:	bf18      	it	ne
 8005752:	4617      	movne	r7, r2
 8005754:	f047 0720 	orr.w	r7, r7, #32
 8005758:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800575a:	601c      	str	r4, [r3, #0]
 800575c:	9b04      	ldr	r3, [sp, #16]
 800575e:	601d      	str	r5, [r3, #0]
 8005760:	e695      	b.n	800548e <__gethex+0x12a>
 8005762:	4299      	cmp	r1, r3
 8005764:	f843 cc04 	str.w	ip, [r3, #-4]
 8005768:	d8d8      	bhi.n	800571c <__gethex+0x3b8>
 800576a:	68a3      	ldr	r3, [r4, #8]
 800576c:	459b      	cmp	fp, r3
 800576e:	db19      	blt.n	80057a4 <__gethex+0x440>
 8005770:	6861      	ldr	r1, [r4, #4]
 8005772:	ee18 0a10 	vmov	r0, s16
 8005776:	3101      	adds	r1, #1
 8005778:	f000 f91a 	bl	80059b0 <_Balloc>
 800577c:	4681      	mov	r9, r0
 800577e:	b918      	cbnz	r0, 8005788 <__gethex+0x424>
 8005780:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <__gethex+0x488>)
 8005782:	4602      	mov	r2, r0
 8005784:	2184      	movs	r1, #132	; 0x84
 8005786:	e6a8      	b.n	80054da <__gethex+0x176>
 8005788:	6922      	ldr	r2, [r4, #16]
 800578a:	3202      	adds	r2, #2
 800578c:	f104 010c 	add.w	r1, r4, #12
 8005790:	0092      	lsls	r2, r2, #2
 8005792:	300c      	adds	r0, #12
 8005794:	f7fd f9a2 	bl	8002adc <memcpy>
 8005798:	4621      	mov	r1, r4
 800579a:	ee18 0a10 	vmov	r0, s16
 800579e:	f000 f947 	bl	8005a30 <_Bfree>
 80057a2:	464c      	mov	r4, r9
 80057a4:	6923      	ldr	r3, [r4, #16]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057ac:	6122      	str	r2, [r4, #16]
 80057ae:	2201      	movs	r2, #1
 80057b0:	615a      	str	r2, [r3, #20]
 80057b2:	e7bb      	b.n	800572c <__gethex+0x3c8>
 80057b4:	6922      	ldr	r2, [r4, #16]
 80057b6:	455a      	cmp	r2, fp
 80057b8:	dd0b      	ble.n	80057d2 <__gethex+0x46e>
 80057ba:	2101      	movs	r1, #1
 80057bc:	4620      	mov	r0, r4
 80057be:	f7ff fd69 	bl	8005294 <rshift>
 80057c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80057c6:	3501      	adds	r5, #1
 80057c8:	42ab      	cmp	r3, r5
 80057ca:	f6ff aed0 	blt.w	800556e <__gethex+0x20a>
 80057ce:	2701      	movs	r7, #1
 80057d0:	e7c0      	b.n	8005754 <__gethex+0x3f0>
 80057d2:	f016 061f 	ands.w	r6, r6, #31
 80057d6:	d0fa      	beq.n	80057ce <__gethex+0x46a>
 80057d8:	4453      	add	r3, sl
 80057da:	f1c6 0620 	rsb	r6, r6, #32
 80057de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80057e2:	f000 f9d7 	bl	8005b94 <__hi0bits>
 80057e6:	42b0      	cmp	r0, r6
 80057e8:	dbe7      	blt.n	80057ba <__gethex+0x456>
 80057ea:	e7f0      	b.n	80057ce <__gethex+0x46a>
 80057ec:	080075f8 	.word	0x080075f8

080057f0 <L_shift>:
 80057f0:	f1c2 0208 	rsb	r2, r2, #8
 80057f4:	0092      	lsls	r2, r2, #2
 80057f6:	b570      	push	{r4, r5, r6, lr}
 80057f8:	f1c2 0620 	rsb	r6, r2, #32
 80057fc:	6843      	ldr	r3, [r0, #4]
 80057fe:	6804      	ldr	r4, [r0, #0]
 8005800:	fa03 f506 	lsl.w	r5, r3, r6
 8005804:	432c      	orrs	r4, r5
 8005806:	40d3      	lsrs	r3, r2
 8005808:	6004      	str	r4, [r0, #0]
 800580a:	f840 3f04 	str.w	r3, [r0, #4]!
 800580e:	4288      	cmp	r0, r1
 8005810:	d3f4      	bcc.n	80057fc <L_shift+0xc>
 8005812:	bd70      	pop	{r4, r5, r6, pc}

08005814 <__match>:
 8005814:	b530      	push	{r4, r5, lr}
 8005816:	6803      	ldr	r3, [r0, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581e:	b914      	cbnz	r4, 8005826 <__match+0x12>
 8005820:	6003      	str	r3, [r0, #0]
 8005822:	2001      	movs	r0, #1
 8005824:	bd30      	pop	{r4, r5, pc}
 8005826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800582a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800582e:	2d19      	cmp	r5, #25
 8005830:	bf98      	it	ls
 8005832:	3220      	addls	r2, #32
 8005834:	42a2      	cmp	r2, r4
 8005836:	d0f0      	beq.n	800581a <__match+0x6>
 8005838:	2000      	movs	r0, #0
 800583a:	e7f3      	b.n	8005824 <__match+0x10>

0800583c <__hexnan>:
 800583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	680b      	ldr	r3, [r1, #0]
 8005842:	115e      	asrs	r6, r3, #5
 8005844:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005848:	f013 031f 	ands.w	r3, r3, #31
 800584c:	b087      	sub	sp, #28
 800584e:	bf18      	it	ne
 8005850:	3604      	addne	r6, #4
 8005852:	2500      	movs	r5, #0
 8005854:	1f37      	subs	r7, r6, #4
 8005856:	4690      	mov	r8, r2
 8005858:	6802      	ldr	r2, [r0, #0]
 800585a:	9301      	str	r3, [sp, #4]
 800585c:	4682      	mov	sl, r0
 800585e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005862:	46b9      	mov	r9, r7
 8005864:	463c      	mov	r4, r7
 8005866:	9502      	str	r5, [sp, #8]
 8005868:	46ab      	mov	fp, r5
 800586a:	7851      	ldrb	r1, [r2, #1]
 800586c:	1c53      	adds	r3, r2, #1
 800586e:	9303      	str	r3, [sp, #12]
 8005870:	b341      	cbz	r1, 80058c4 <__hexnan+0x88>
 8005872:	4608      	mov	r0, r1
 8005874:	9205      	str	r2, [sp, #20]
 8005876:	9104      	str	r1, [sp, #16]
 8005878:	f7ff fd5e 	bl	8005338 <__hexdig_fun>
 800587c:	2800      	cmp	r0, #0
 800587e:	d14f      	bne.n	8005920 <__hexnan+0xe4>
 8005880:	9904      	ldr	r1, [sp, #16]
 8005882:	9a05      	ldr	r2, [sp, #20]
 8005884:	2920      	cmp	r1, #32
 8005886:	d818      	bhi.n	80058ba <__hexnan+0x7e>
 8005888:	9b02      	ldr	r3, [sp, #8]
 800588a:	459b      	cmp	fp, r3
 800588c:	dd13      	ble.n	80058b6 <__hexnan+0x7a>
 800588e:	454c      	cmp	r4, r9
 8005890:	d206      	bcs.n	80058a0 <__hexnan+0x64>
 8005892:	2d07      	cmp	r5, #7
 8005894:	dc04      	bgt.n	80058a0 <__hexnan+0x64>
 8005896:	462a      	mov	r2, r5
 8005898:	4649      	mov	r1, r9
 800589a:	4620      	mov	r0, r4
 800589c:	f7ff ffa8 	bl	80057f0 <L_shift>
 80058a0:	4544      	cmp	r4, r8
 80058a2:	d950      	bls.n	8005946 <__hexnan+0x10a>
 80058a4:	2300      	movs	r3, #0
 80058a6:	f1a4 0904 	sub.w	r9, r4, #4
 80058aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80058ae:	f8cd b008 	str.w	fp, [sp, #8]
 80058b2:	464c      	mov	r4, r9
 80058b4:	461d      	mov	r5, r3
 80058b6:	9a03      	ldr	r2, [sp, #12]
 80058b8:	e7d7      	b.n	800586a <__hexnan+0x2e>
 80058ba:	2929      	cmp	r1, #41	; 0x29
 80058bc:	d156      	bne.n	800596c <__hexnan+0x130>
 80058be:	3202      	adds	r2, #2
 80058c0:	f8ca 2000 	str.w	r2, [sl]
 80058c4:	f1bb 0f00 	cmp.w	fp, #0
 80058c8:	d050      	beq.n	800596c <__hexnan+0x130>
 80058ca:	454c      	cmp	r4, r9
 80058cc:	d206      	bcs.n	80058dc <__hexnan+0xa0>
 80058ce:	2d07      	cmp	r5, #7
 80058d0:	dc04      	bgt.n	80058dc <__hexnan+0xa0>
 80058d2:	462a      	mov	r2, r5
 80058d4:	4649      	mov	r1, r9
 80058d6:	4620      	mov	r0, r4
 80058d8:	f7ff ff8a 	bl	80057f0 <L_shift>
 80058dc:	4544      	cmp	r4, r8
 80058de:	d934      	bls.n	800594a <__hexnan+0x10e>
 80058e0:	f1a8 0204 	sub.w	r2, r8, #4
 80058e4:	4623      	mov	r3, r4
 80058e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80058ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80058ee:	429f      	cmp	r7, r3
 80058f0:	d2f9      	bcs.n	80058e6 <__hexnan+0xaa>
 80058f2:	1b3b      	subs	r3, r7, r4
 80058f4:	f023 0303 	bic.w	r3, r3, #3
 80058f8:	3304      	adds	r3, #4
 80058fa:	3401      	adds	r4, #1
 80058fc:	3e03      	subs	r6, #3
 80058fe:	42b4      	cmp	r4, r6
 8005900:	bf88      	it	hi
 8005902:	2304      	movhi	r3, #4
 8005904:	4443      	add	r3, r8
 8005906:	2200      	movs	r2, #0
 8005908:	f843 2b04 	str.w	r2, [r3], #4
 800590c:	429f      	cmp	r7, r3
 800590e:	d2fb      	bcs.n	8005908 <__hexnan+0xcc>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	b91b      	cbnz	r3, 800591c <__hexnan+0xe0>
 8005914:	4547      	cmp	r7, r8
 8005916:	d127      	bne.n	8005968 <__hexnan+0x12c>
 8005918:	2301      	movs	r3, #1
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	2005      	movs	r0, #5
 800591e:	e026      	b.n	800596e <__hexnan+0x132>
 8005920:	3501      	adds	r5, #1
 8005922:	2d08      	cmp	r5, #8
 8005924:	f10b 0b01 	add.w	fp, fp, #1
 8005928:	dd06      	ble.n	8005938 <__hexnan+0xfc>
 800592a:	4544      	cmp	r4, r8
 800592c:	d9c3      	bls.n	80058b6 <__hexnan+0x7a>
 800592e:	2300      	movs	r3, #0
 8005930:	f844 3c04 	str.w	r3, [r4, #-4]
 8005934:	2501      	movs	r5, #1
 8005936:	3c04      	subs	r4, #4
 8005938:	6822      	ldr	r2, [r4, #0]
 800593a:	f000 000f 	and.w	r0, r0, #15
 800593e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005942:	6022      	str	r2, [r4, #0]
 8005944:	e7b7      	b.n	80058b6 <__hexnan+0x7a>
 8005946:	2508      	movs	r5, #8
 8005948:	e7b5      	b.n	80058b6 <__hexnan+0x7a>
 800594a:	9b01      	ldr	r3, [sp, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0df      	beq.n	8005910 <__hexnan+0xd4>
 8005950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005954:	f1c3 0320 	rsb	r3, r3, #32
 8005958:	fa22 f303 	lsr.w	r3, r2, r3
 800595c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005960:	401a      	ands	r2, r3
 8005962:	f846 2c04 	str.w	r2, [r6, #-4]
 8005966:	e7d3      	b.n	8005910 <__hexnan+0xd4>
 8005968:	3f04      	subs	r7, #4
 800596a:	e7d1      	b.n	8005910 <__hexnan+0xd4>
 800596c:	2004      	movs	r0, #4
 800596e:	b007      	add	sp, #28
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005974 <_localeconv_r>:
 8005974:	4800      	ldr	r0, [pc, #0]	; (8005978 <_localeconv_r+0x4>)
 8005976:	4770      	bx	lr
 8005978:	20000158 	.word	0x20000158

0800597c <malloc>:
 800597c:	4b02      	ldr	r3, [pc, #8]	; (8005988 <malloc+0xc>)
 800597e:	4601      	mov	r1, r0
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	f000 bd59 	b.w	8006438 <_malloc_r>
 8005986:	bf00      	nop
 8005988:	20000000 	.word	0x20000000

0800598c <__ascii_mbtowc>:
 800598c:	b082      	sub	sp, #8
 800598e:	b901      	cbnz	r1, 8005992 <__ascii_mbtowc+0x6>
 8005990:	a901      	add	r1, sp, #4
 8005992:	b142      	cbz	r2, 80059a6 <__ascii_mbtowc+0x1a>
 8005994:	b14b      	cbz	r3, 80059aa <__ascii_mbtowc+0x1e>
 8005996:	7813      	ldrb	r3, [r2, #0]
 8005998:	600b      	str	r3, [r1, #0]
 800599a:	7812      	ldrb	r2, [r2, #0]
 800599c:	1e10      	subs	r0, r2, #0
 800599e:	bf18      	it	ne
 80059a0:	2001      	movne	r0, #1
 80059a2:	b002      	add	sp, #8
 80059a4:	4770      	bx	lr
 80059a6:	4610      	mov	r0, r2
 80059a8:	e7fb      	b.n	80059a2 <__ascii_mbtowc+0x16>
 80059aa:	f06f 0001 	mvn.w	r0, #1
 80059ae:	e7f8      	b.n	80059a2 <__ascii_mbtowc+0x16>

080059b0 <_Balloc>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059b4:	4604      	mov	r4, r0
 80059b6:	460d      	mov	r5, r1
 80059b8:	b976      	cbnz	r6, 80059d8 <_Balloc+0x28>
 80059ba:	2010      	movs	r0, #16
 80059bc:	f7ff ffde 	bl	800597c <malloc>
 80059c0:	4602      	mov	r2, r0
 80059c2:	6260      	str	r0, [r4, #36]	; 0x24
 80059c4:	b920      	cbnz	r0, 80059d0 <_Balloc+0x20>
 80059c6:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <_Balloc+0x78>)
 80059c8:	4818      	ldr	r0, [pc, #96]	; (8005a2c <_Balloc+0x7c>)
 80059ca:	2166      	movs	r1, #102	; 0x66
 80059cc:	f000 ff3e 	bl	800684c <__assert_func>
 80059d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059d4:	6006      	str	r6, [r0, #0]
 80059d6:	60c6      	str	r6, [r0, #12]
 80059d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059da:	68f3      	ldr	r3, [r6, #12]
 80059dc:	b183      	cbz	r3, 8005a00 <_Balloc+0x50>
 80059de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059e6:	b9b8      	cbnz	r0, 8005a18 <_Balloc+0x68>
 80059e8:	2101      	movs	r1, #1
 80059ea:	fa01 f605 	lsl.w	r6, r1, r5
 80059ee:	1d72      	adds	r2, r6, #5
 80059f0:	0092      	lsls	r2, r2, #2
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fc9d 	bl	8006332 <_calloc_r>
 80059f8:	b160      	cbz	r0, 8005a14 <_Balloc+0x64>
 80059fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059fe:	e00e      	b.n	8005a1e <_Balloc+0x6e>
 8005a00:	2221      	movs	r2, #33	; 0x21
 8005a02:	2104      	movs	r1, #4
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 fc94 	bl	8006332 <_calloc_r>
 8005a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a0c:	60f0      	str	r0, [r6, #12]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e4      	bne.n	80059de <_Balloc+0x2e>
 8005a14:	2000      	movs	r0, #0
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	6802      	ldr	r2, [r0, #0]
 8005a1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a24:	e7f7      	b.n	8005a16 <_Balloc+0x66>
 8005a26:	bf00      	nop
 8005a28:	08007586 	.word	0x08007586
 8005a2c:	08007684 	.word	0x08007684

08005a30 <_Bfree>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a34:	4605      	mov	r5, r0
 8005a36:	460c      	mov	r4, r1
 8005a38:	b976      	cbnz	r6, 8005a58 <_Bfree+0x28>
 8005a3a:	2010      	movs	r0, #16
 8005a3c:	f7ff ff9e 	bl	800597c <malloc>
 8005a40:	4602      	mov	r2, r0
 8005a42:	6268      	str	r0, [r5, #36]	; 0x24
 8005a44:	b920      	cbnz	r0, 8005a50 <_Bfree+0x20>
 8005a46:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <_Bfree+0x3c>)
 8005a48:	4809      	ldr	r0, [pc, #36]	; (8005a70 <_Bfree+0x40>)
 8005a4a:	218a      	movs	r1, #138	; 0x8a
 8005a4c:	f000 fefe 	bl	800684c <__assert_func>
 8005a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a54:	6006      	str	r6, [r0, #0]
 8005a56:	60c6      	str	r6, [r0, #12]
 8005a58:	b13c      	cbz	r4, 8005a6a <_Bfree+0x3a>
 8005a5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a5c:	6862      	ldr	r2, [r4, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a64:	6021      	str	r1, [r4, #0]
 8005a66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	08007586 	.word	0x08007586
 8005a70:	08007684 	.word	0x08007684

08005a74 <__multadd>:
 8005a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a78:	690d      	ldr	r5, [r1, #16]
 8005a7a:	4607      	mov	r7, r0
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	461e      	mov	r6, r3
 8005a80:	f101 0c14 	add.w	ip, r1, #20
 8005a84:	2000      	movs	r0, #0
 8005a86:	f8dc 3000 	ldr.w	r3, [ip]
 8005a8a:	b299      	uxth	r1, r3
 8005a8c:	fb02 6101 	mla	r1, r2, r1, r6
 8005a90:	0c1e      	lsrs	r6, r3, #16
 8005a92:	0c0b      	lsrs	r3, r1, #16
 8005a94:	fb02 3306 	mla	r3, r2, r6, r3
 8005a98:	b289      	uxth	r1, r1
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005aa0:	4285      	cmp	r5, r0
 8005aa2:	f84c 1b04 	str.w	r1, [ip], #4
 8005aa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005aaa:	dcec      	bgt.n	8005a86 <__multadd+0x12>
 8005aac:	b30e      	cbz	r6, 8005af2 <__multadd+0x7e>
 8005aae:	68a3      	ldr	r3, [r4, #8]
 8005ab0:	42ab      	cmp	r3, r5
 8005ab2:	dc19      	bgt.n	8005ae8 <__multadd+0x74>
 8005ab4:	6861      	ldr	r1, [r4, #4]
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	3101      	adds	r1, #1
 8005aba:	f7ff ff79 	bl	80059b0 <_Balloc>
 8005abe:	4680      	mov	r8, r0
 8005ac0:	b928      	cbnz	r0, 8005ace <__multadd+0x5a>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <__multadd+0x84>)
 8005ac6:	480d      	ldr	r0, [pc, #52]	; (8005afc <__multadd+0x88>)
 8005ac8:	21b5      	movs	r1, #181	; 0xb5
 8005aca:	f000 febf 	bl	800684c <__assert_func>
 8005ace:	6922      	ldr	r2, [r4, #16]
 8005ad0:	3202      	adds	r2, #2
 8005ad2:	f104 010c 	add.w	r1, r4, #12
 8005ad6:	0092      	lsls	r2, r2, #2
 8005ad8:	300c      	adds	r0, #12
 8005ada:	f7fc ffff 	bl	8002adc <memcpy>
 8005ade:	4621      	mov	r1, r4
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	f7ff ffa5 	bl	8005a30 <_Bfree>
 8005ae6:	4644      	mov	r4, r8
 8005ae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005aec:	3501      	adds	r5, #1
 8005aee:	615e      	str	r6, [r3, #20]
 8005af0:	6125      	str	r5, [r4, #16]
 8005af2:	4620      	mov	r0, r4
 8005af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af8:	080075f8 	.word	0x080075f8
 8005afc:	08007684 	.word	0x08007684

08005b00 <__s2b>:
 8005b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b04:	460c      	mov	r4, r1
 8005b06:	4615      	mov	r5, r2
 8005b08:	461f      	mov	r7, r3
 8005b0a:	2209      	movs	r2, #9
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	4606      	mov	r6, r0
 8005b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b14:	2100      	movs	r1, #0
 8005b16:	2201      	movs	r2, #1
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	db09      	blt.n	8005b30 <__s2b+0x30>
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f7ff ff47 	bl	80059b0 <_Balloc>
 8005b22:	b940      	cbnz	r0, 8005b36 <__s2b+0x36>
 8005b24:	4602      	mov	r2, r0
 8005b26:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <__s2b+0x8c>)
 8005b28:	4819      	ldr	r0, [pc, #100]	; (8005b90 <__s2b+0x90>)
 8005b2a:	21ce      	movs	r1, #206	; 0xce
 8005b2c:	f000 fe8e 	bl	800684c <__assert_func>
 8005b30:	0052      	lsls	r2, r2, #1
 8005b32:	3101      	adds	r1, #1
 8005b34:	e7f0      	b.n	8005b18 <__s2b+0x18>
 8005b36:	9b08      	ldr	r3, [sp, #32]
 8005b38:	6143      	str	r3, [r0, #20]
 8005b3a:	2d09      	cmp	r5, #9
 8005b3c:	f04f 0301 	mov.w	r3, #1
 8005b40:	6103      	str	r3, [r0, #16]
 8005b42:	dd16      	ble.n	8005b72 <__s2b+0x72>
 8005b44:	f104 0909 	add.w	r9, r4, #9
 8005b48:	46c8      	mov	r8, r9
 8005b4a:	442c      	add	r4, r5
 8005b4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005b50:	4601      	mov	r1, r0
 8005b52:	3b30      	subs	r3, #48	; 0x30
 8005b54:	220a      	movs	r2, #10
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7ff ff8c 	bl	8005a74 <__multadd>
 8005b5c:	45a0      	cmp	r8, r4
 8005b5e:	d1f5      	bne.n	8005b4c <__s2b+0x4c>
 8005b60:	f1a5 0408 	sub.w	r4, r5, #8
 8005b64:	444c      	add	r4, r9
 8005b66:	1b2d      	subs	r5, r5, r4
 8005b68:	1963      	adds	r3, r4, r5
 8005b6a:	42bb      	cmp	r3, r7
 8005b6c:	db04      	blt.n	8005b78 <__s2b+0x78>
 8005b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b72:	340a      	adds	r4, #10
 8005b74:	2509      	movs	r5, #9
 8005b76:	e7f6      	b.n	8005b66 <__s2b+0x66>
 8005b78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b7c:	4601      	mov	r1, r0
 8005b7e:	3b30      	subs	r3, #48	; 0x30
 8005b80:	220a      	movs	r2, #10
 8005b82:	4630      	mov	r0, r6
 8005b84:	f7ff ff76 	bl	8005a74 <__multadd>
 8005b88:	e7ee      	b.n	8005b68 <__s2b+0x68>
 8005b8a:	bf00      	nop
 8005b8c:	080075f8 	.word	0x080075f8
 8005b90:	08007684 	.word	0x08007684

08005b94 <__hi0bits>:
 8005b94:	0c03      	lsrs	r3, r0, #16
 8005b96:	041b      	lsls	r3, r3, #16
 8005b98:	b9d3      	cbnz	r3, 8005bd0 <__hi0bits+0x3c>
 8005b9a:	0400      	lsls	r0, r0, #16
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005ba2:	bf04      	itt	eq
 8005ba4:	0200      	lsleq	r0, r0, #8
 8005ba6:	3308      	addeq	r3, #8
 8005ba8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005bac:	bf04      	itt	eq
 8005bae:	0100      	lsleq	r0, r0, #4
 8005bb0:	3304      	addeq	r3, #4
 8005bb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005bb6:	bf04      	itt	eq
 8005bb8:	0080      	lsleq	r0, r0, #2
 8005bba:	3302      	addeq	r3, #2
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	db05      	blt.n	8005bcc <__hi0bits+0x38>
 8005bc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005bc4:	f103 0301 	add.w	r3, r3, #1
 8005bc8:	bf08      	it	eq
 8005bca:	2320      	moveq	r3, #32
 8005bcc:	4618      	mov	r0, r3
 8005bce:	4770      	bx	lr
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e7e4      	b.n	8005b9e <__hi0bits+0xa>

08005bd4 <__lo0bits>:
 8005bd4:	6803      	ldr	r3, [r0, #0]
 8005bd6:	f013 0207 	ands.w	r2, r3, #7
 8005bda:	4601      	mov	r1, r0
 8005bdc:	d00b      	beq.n	8005bf6 <__lo0bits+0x22>
 8005bde:	07da      	lsls	r2, r3, #31
 8005be0:	d423      	bmi.n	8005c2a <__lo0bits+0x56>
 8005be2:	0798      	lsls	r0, r3, #30
 8005be4:	bf49      	itett	mi
 8005be6:	085b      	lsrmi	r3, r3, #1
 8005be8:	089b      	lsrpl	r3, r3, #2
 8005bea:	2001      	movmi	r0, #1
 8005bec:	600b      	strmi	r3, [r1, #0]
 8005bee:	bf5c      	itt	pl
 8005bf0:	600b      	strpl	r3, [r1, #0]
 8005bf2:	2002      	movpl	r0, #2
 8005bf4:	4770      	bx	lr
 8005bf6:	b298      	uxth	r0, r3
 8005bf8:	b9a8      	cbnz	r0, 8005c26 <__lo0bits+0x52>
 8005bfa:	0c1b      	lsrs	r3, r3, #16
 8005bfc:	2010      	movs	r0, #16
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	b90a      	cbnz	r2, 8005c06 <__lo0bits+0x32>
 8005c02:	3008      	adds	r0, #8
 8005c04:	0a1b      	lsrs	r3, r3, #8
 8005c06:	071a      	lsls	r2, r3, #28
 8005c08:	bf04      	itt	eq
 8005c0a:	091b      	lsreq	r3, r3, #4
 8005c0c:	3004      	addeq	r0, #4
 8005c0e:	079a      	lsls	r2, r3, #30
 8005c10:	bf04      	itt	eq
 8005c12:	089b      	lsreq	r3, r3, #2
 8005c14:	3002      	addeq	r0, #2
 8005c16:	07da      	lsls	r2, r3, #31
 8005c18:	d403      	bmi.n	8005c22 <__lo0bits+0x4e>
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	f100 0001 	add.w	r0, r0, #1
 8005c20:	d005      	beq.n	8005c2e <__lo0bits+0x5a>
 8005c22:	600b      	str	r3, [r1, #0]
 8005c24:	4770      	bx	lr
 8005c26:	4610      	mov	r0, r2
 8005c28:	e7e9      	b.n	8005bfe <__lo0bits+0x2a>
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	4770      	bx	lr
 8005c2e:	2020      	movs	r0, #32
 8005c30:	4770      	bx	lr
	...

08005c34 <__i2b>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	460c      	mov	r4, r1
 8005c38:	2101      	movs	r1, #1
 8005c3a:	f7ff feb9 	bl	80059b0 <_Balloc>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	b928      	cbnz	r0, 8005c4e <__i2b+0x1a>
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <__i2b+0x24>)
 8005c44:	4805      	ldr	r0, [pc, #20]	; (8005c5c <__i2b+0x28>)
 8005c46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c4a:	f000 fdff 	bl	800684c <__assert_func>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	6144      	str	r4, [r0, #20]
 8005c52:	6103      	str	r3, [r0, #16]
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	bf00      	nop
 8005c58:	080075f8 	.word	0x080075f8
 8005c5c:	08007684 	.word	0x08007684

08005c60 <__multiply>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	4691      	mov	r9, r2
 8005c66:	690a      	ldr	r2, [r1, #16]
 8005c68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	bfb8      	it	lt
 8005c70:	460b      	movlt	r3, r1
 8005c72:	460c      	mov	r4, r1
 8005c74:	bfbc      	itt	lt
 8005c76:	464c      	movlt	r4, r9
 8005c78:	4699      	movlt	r9, r3
 8005c7a:	6927      	ldr	r7, [r4, #16]
 8005c7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c80:	68a3      	ldr	r3, [r4, #8]
 8005c82:	6861      	ldr	r1, [r4, #4]
 8005c84:	eb07 060a 	add.w	r6, r7, sl
 8005c88:	42b3      	cmp	r3, r6
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	bfb8      	it	lt
 8005c8e:	3101      	addlt	r1, #1
 8005c90:	f7ff fe8e 	bl	80059b0 <_Balloc>
 8005c94:	b930      	cbnz	r0, 8005ca4 <__multiply+0x44>
 8005c96:	4602      	mov	r2, r0
 8005c98:	4b44      	ldr	r3, [pc, #272]	; (8005dac <__multiply+0x14c>)
 8005c9a:	4845      	ldr	r0, [pc, #276]	; (8005db0 <__multiply+0x150>)
 8005c9c:	f240 115d 	movw	r1, #349	; 0x15d
 8005ca0:	f000 fdd4 	bl	800684c <__assert_func>
 8005ca4:	f100 0514 	add.w	r5, r0, #20
 8005ca8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cac:	462b      	mov	r3, r5
 8005cae:	2200      	movs	r2, #0
 8005cb0:	4543      	cmp	r3, r8
 8005cb2:	d321      	bcc.n	8005cf8 <__multiply+0x98>
 8005cb4:	f104 0314 	add.w	r3, r4, #20
 8005cb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005cbc:	f109 0314 	add.w	r3, r9, #20
 8005cc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005cc4:	9202      	str	r2, [sp, #8]
 8005cc6:	1b3a      	subs	r2, r7, r4
 8005cc8:	3a15      	subs	r2, #21
 8005cca:	f022 0203 	bic.w	r2, r2, #3
 8005cce:	3204      	adds	r2, #4
 8005cd0:	f104 0115 	add.w	r1, r4, #21
 8005cd4:	428f      	cmp	r7, r1
 8005cd6:	bf38      	it	cc
 8005cd8:	2204      	movcc	r2, #4
 8005cda:	9201      	str	r2, [sp, #4]
 8005cdc:	9a02      	ldr	r2, [sp, #8]
 8005cde:	9303      	str	r3, [sp, #12]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d80c      	bhi.n	8005cfe <__multiply+0x9e>
 8005ce4:	2e00      	cmp	r6, #0
 8005ce6:	dd03      	ble.n	8005cf0 <__multiply+0x90>
 8005ce8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d05a      	beq.n	8005da6 <__multiply+0x146>
 8005cf0:	6106      	str	r6, [r0, #16]
 8005cf2:	b005      	add	sp, #20
 8005cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf8:	f843 2b04 	str.w	r2, [r3], #4
 8005cfc:	e7d8      	b.n	8005cb0 <__multiply+0x50>
 8005cfe:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d02:	f1ba 0f00 	cmp.w	sl, #0
 8005d06:	d024      	beq.n	8005d52 <__multiply+0xf2>
 8005d08:	f104 0e14 	add.w	lr, r4, #20
 8005d0c:	46a9      	mov	r9, r5
 8005d0e:	f04f 0c00 	mov.w	ip, #0
 8005d12:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d16:	f8d9 1000 	ldr.w	r1, [r9]
 8005d1a:	fa1f fb82 	uxth.w	fp, r2
 8005d1e:	b289      	uxth	r1, r1
 8005d20:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d28:	f8d9 2000 	ldr.w	r2, [r9]
 8005d2c:	4461      	add	r1, ip
 8005d2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d32:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d3a:	b289      	uxth	r1, r1
 8005d3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d40:	4577      	cmp	r7, lr
 8005d42:	f849 1b04 	str.w	r1, [r9], #4
 8005d46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d4a:	d8e2      	bhi.n	8005d12 <__multiply+0xb2>
 8005d4c:	9a01      	ldr	r2, [sp, #4]
 8005d4e:	f845 c002 	str.w	ip, [r5, r2]
 8005d52:	9a03      	ldr	r2, [sp, #12]
 8005d54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	f1b9 0f00 	cmp.w	r9, #0
 8005d5e:	d020      	beq.n	8005da2 <__multiply+0x142>
 8005d60:	6829      	ldr	r1, [r5, #0]
 8005d62:	f104 0c14 	add.w	ip, r4, #20
 8005d66:	46ae      	mov	lr, r5
 8005d68:	f04f 0a00 	mov.w	sl, #0
 8005d6c:	f8bc b000 	ldrh.w	fp, [ip]
 8005d70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d74:	fb09 220b 	mla	r2, r9, fp, r2
 8005d78:	4492      	add	sl, r2
 8005d7a:	b289      	uxth	r1, r1
 8005d7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005d80:	f84e 1b04 	str.w	r1, [lr], #4
 8005d84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005d88:	f8be 1000 	ldrh.w	r1, [lr]
 8005d8c:	0c12      	lsrs	r2, r2, #16
 8005d8e:	fb09 1102 	mla	r1, r9, r2, r1
 8005d92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d96:	4567      	cmp	r7, ip
 8005d98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d9c:	d8e6      	bhi.n	8005d6c <__multiply+0x10c>
 8005d9e:	9a01      	ldr	r2, [sp, #4]
 8005da0:	50a9      	str	r1, [r5, r2]
 8005da2:	3504      	adds	r5, #4
 8005da4:	e79a      	b.n	8005cdc <__multiply+0x7c>
 8005da6:	3e01      	subs	r6, #1
 8005da8:	e79c      	b.n	8005ce4 <__multiply+0x84>
 8005daa:	bf00      	nop
 8005dac:	080075f8 	.word	0x080075f8
 8005db0:	08007684 	.word	0x08007684

08005db4 <__pow5mult>:
 8005db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db8:	4615      	mov	r5, r2
 8005dba:	f012 0203 	ands.w	r2, r2, #3
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	460f      	mov	r7, r1
 8005dc2:	d007      	beq.n	8005dd4 <__pow5mult+0x20>
 8005dc4:	4c25      	ldr	r4, [pc, #148]	; (8005e5c <__pow5mult+0xa8>)
 8005dc6:	3a01      	subs	r2, #1
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dce:	f7ff fe51 	bl	8005a74 <__multadd>
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	10ad      	asrs	r5, r5, #2
 8005dd6:	d03d      	beq.n	8005e54 <__pow5mult+0xa0>
 8005dd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dda:	b97c      	cbnz	r4, 8005dfc <__pow5mult+0x48>
 8005ddc:	2010      	movs	r0, #16
 8005dde:	f7ff fdcd 	bl	800597c <malloc>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6270      	str	r0, [r6, #36]	; 0x24
 8005de6:	b928      	cbnz	r0, 8005df4 <__pow5mult+0x40>
 8005de8:	4b1d      	ldr	r3, [pc, #116]	; (8005e60 <__pow5mult+0xac>)
 8005dea:	481e      	ldr	r0, [pc, #120]	; (8005e64 <__pow5mult+0xb0>)
 8005dec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005df0:	f000 fd2c 	bl	800684c <__assert_func>
 8005df4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005df8:	6004      	str	r4, [r0, #0]
 8005dfa:	60c4      	str	r4, [r0, #12]
 8005dfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e04:	b94c      	cbnz	r4, 8005e1a <__pow5mult+0x66>
 8005e06:	f240 2171 	movw	r1, #625	; 0x271
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff ff12 	bl	8005c34 <__i2b>
 8005e10:	2300      	movs	r3, #0
 8005e12:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e16:	4604      	mov	r4, r0
 8005e18:	6003      	str	r3, [r0, #0]
 8005e1a:	f04f 0900 	mov.w	r9, #0
 8005e1e:	07eb      	lsls	r3, r5, #31
 8005e20:	d50a      	bpl.n	8005e38 <__pow5mult+0x84>
 8005e22:	4639      	mov	r1, r7
 8005e24:	4622      	mov	r2, r4
 8005e26:	4630      	mov	r0, r6
 8005e28:	f7ff ff1a 	bl	8005c60 <__multiply>
 8005e2c:	4639      	mov	r1, r7
 8005e2e:	4680      	mov	r8, r0
 8005e30:	4630      	mov	r0, r6
 8005e32:	f7ff fdfd 	bl	8005a30 <_Bfree>
 8005e36:	4647      	mov	r7, r8
 8005e38:	106d      	asrs	r5, r5, #1
 8005e3a:	d00b      	beq.n	8005e54 <__pow5mult+0xa0>
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	b938      	cbnz	r0, 8005e50 <__pow5mult+0x9c>
 8005e40:	4622      	mov	r2, r4
 8005e42:	4621      	mov	r1, r4
 8005e44:	4630      	mov	r0, r6
 8005e46:	f7ff ff0b 	bl	8005c60 <__multiply>
 8005e4a:	6020      	str	r0, [r4, #0]
 8005e4c:	f8c0 9000 	str.w	r9, [r0]
 8005e50:	4604      	mov	r4, r0
 8005e52:	e7e4      	b.n	8005e1e <__pow5mult+0x6a>
 8005e54:	4638      	mov	r0, r7
 8005e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e5a:	bf00      	nop
 8005e5c:	080077d0 	.word	0x080077d0
 8005e60:	08007586 	.word	0x08007586
 8005e64:	08007684 	.word	0x08007684

08005e68 <__lshift>:
 8005e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	6849      	ldr	r1, [r1, #4]
 8005e70:	6923      	ldr	r3, [r4, #16]
 8005e72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e76:	68a3      	ldr	r3, [r4, #8]
 8005e78:	4607      	mov	r7, r0
 8005e7a:	4691      	mov	r9, r2
 8005e7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e80:	f108 0601 	add.w	r6, r8, #1
 8005e84:	42b3      	cmp	r3, r6
 8005e86:	db0b      	blt.n	8005ea0 <__lshift+0x38>
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7ff fd91 	bl	80059b0 <_Balloc>
 8005e8e:	4605      	mov	r5, r0
 8005e90:	b948      	cbnz	r0, 8005ea6 <__lshift+0x3e>
 8005e92:	4602      	mov	r2, r0
 8005e94:	4b2a      	ldr	r3, [pc, #168]	; (8005f40 <__lshift+0xd8>)
 8005e96:	482b      	ldr	r0, [pc, #172]	; (8005f44 <__lshift+0xdc>)
 8005e98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e9c:	f000 fcd6 	bl	800684c <__assert_func>
 8005ea0:	3101      	adds	r1, #1
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	e7ee      	b.n	8005e84 <__lshift+0x1c>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f100 0114 	add.w	r1, r0, #20
 8005eac:	f100 0210 	add.w	r2, r0, #16
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	4553      	cmp	r3, sl
 8005eb4:	db37      	blt.n	8005f26 <__lshift+0xbe>
 8005eb6:	6920      	ldr	r0, [r4, #16]
 8005eb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ebc:	f104 0314 	add.w	r3, r4, #20
 8005ec0:	f019 091f 	ands.w	r9, r9, #31
 8005ec4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ec8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ecc:	d02f      	beq.n	8005f2e <__lshift+0xc6>
 8005ece:	f1c9 0e20 	rsb	lr, r9, #32
 8005ed2:	468a      	mov	sl, r1
 8005ed4:	f04f 0c00 	mov.w	ip, #0
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	fa02 f209 	lsl.w	r2, r2, r9
 8005ede:	ea42 020c 	orr.w	r2, r2, ip
 8005ee2:	f84a 2b04 	str.w	r2, [sl], #4
 8005ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eea:	4298      	cmp	r0, r3
 8005eec:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005ef0:	d8f2      	bhi.n	8005ed8 <__lshift+0x70>
 8005ef2:	1b03      	subs	r3, r0, r4
 8005ef4:	3b15      	subs	r3, #21
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	3304      	adds	r3, #4
 8005efc:	f104 0215 	add.w	r2, r4, #21
 8005f00:	4290      	cmp	r0, r2
 8005f02:	bf38      	it	cc
 8005f04:	2304      	movcc	r3, #4
 8005f06:	f841 c003 	str.w	ip, [r1, r3]
 8005f0a:	f1bc 0f00 	cmp.w	ip, #0
 8005f0e:	d001      	beq.n	8005f14 <__lshift+0xac>
 8005f10:	f108 0602 	add.w	r6, r8, #2
 8005f14:	3e01      	subs	r6, #1
 8005f16:	4638      	mov	r0, r7
 8005f18:	612e      	str	r6, [r5, #16]
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	f7ff fd88 	bl	8005a30 <_Bfree>
 8005f20:	4628      	mov	r0, r5
 8005f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f26:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	e7c1      	b.n	8005eb2 <__lshift+0x4a>
 8005f2e:	3904      	subs	r1, #4
 8005f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f34:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f38:	4298      	cmp	r0, r3
 8005f3a:	d8f9      	bhi.n	8005f30 <__lshift+0xc8>
 8005f3c:	e7ea      	b.n	8005f14 <__lshift+0xac>
 8005f3e:	bf00      	nop
 8005f40:	080075f8 	.word	0x080075f8
 8005f44:	08007684 	.word	0x08007684

08005f48 <__mcmp>:
 8005f48:	b530      	push	{r4, r5, lr}
 8005f4a:	6902      	ldr	r2, [r0, #16]
 8005f4c:	690c      	ldr	r4, [r1, #16]
 8005f4e:	1b12      	subs	r2, r2, r4
 8005f50:	d10e      	bne.n	8005f70 <__mcmp+0x28>
 8005f52:	f100 0314 	add.w	r3, r0, #20
 8005f56:	3114      	adds	r1, #20
 8005f58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f68:	42a5      	cmp	r5, r4
 8005f6a:	d003      	beq.n	8005f74 <__mcmp+0x2c>
 8005f6c:	d305      	bcc.n	8005f7a <__mcmp+0x32>
 8005f6e:	2201      	movs	r2, #1
 8005f70:	4610      	mov	r0, r2
 8005f72:	bd30      	pop	{r4, r5, pc}
 8005f74:	4283      	cmp	r3, r0
 8005f76:	d3f3      	bcc.n	8005f60 <__mcmp+0x18>
 8005f78:	e7fa      	b.n	8005f70 <__mcmp+0x28>
 8005f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f7e:	e7f7      	b.n	8005f70 <__mcmp+0x28>

08005f80 <__mdiff>:
 8005f80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	460c      	mov	r4, r1
 8005f86:	4606      	mov	r6, r0
 8005f88:	4611      	mov	r1, r2
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	4690      	mov	r8, r2
 8005f8e:	f7ff ffdb 	bl	8005f48 <__mcmp>
 8005f92:	1e05      	subs	r5, r0, #0
 8005f94:	d110      	bne.n	8005fb8 <__mdiff+0x38>
 8005f96:	4629      	mov	r1, r5
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f7ff fd09 	bl	80059b0 <_Balloc>
 8005f9e:	b930      	cbnz	r0, 8005fae <__mdiff+0x2e>
 8005fa0:	4b3a      	ldr	r3, [pc, #232]	; (800608c <__mdiff+0x10c>)
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	f240 2132 	movw	r1, #562	; 0x232
 8005fa8:	4839      	ldr	r0, [pc, #228]	; (8006090 <__mdiff+0x110>)
 8005faa:	f000 fc4f 	bl	800684c <__assert_func>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb8:	bfa4      	itt	ge
 8005fba:	4643      	movge	r3, r8
 8005fbc:	46a0      	movge	r8, r4
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005fc4:	bfa6      	itte	ge
 8005fc6:	461c      	movge	r4, r3
 8005fc8:	2500      	movge	r5, #0
 8005fca:	2501      	movlt	r5, #1
 8005fcc:	f7ff fcf0 	bl	80059b0 <_Balloc>
 8005fd0:	b920      	cbnz	r0, 8005fdc <__mdiff+0x5c>
 8005fd2:	4b2e      	ldr	r3, [pc, #184]	; (800608c <__mdiff+0x10c>)
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005fda:	e7e5      	b.n	8005fa8 <__mdiff+0x28>
 8005fdc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005fe0:	6926      	ldr	r6, [r4, #16]
 8005fe2:	60c5      	str	r5, [r0, #12]
 8005fe4:	f104 0914 	add.w	r9, r4, #20
 8005fe8:	f108 0514 	add.w	r5, r8, #20
 8005fec:	f100 0e14 	add.w	lr, r0, #20
 8005ff0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005ff4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ff8:	f108 0210 	add.w	r2, r8, #16
 8005ffc:	46f2      	mov	sl, lr
 8005ffe:	2100      	movs	r1, #0
 8006000:	f859 3b04 	ldr.w	r3, [r9], #4
 8006004:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006008:	fa1f f883 	uxth.w	r8, r3
 800600c:	fa11 f18b 	uxtah	r1, r1, fp
 8006010:	0c1b      	lsrs	r3, r3, #16
 8006012:	eba1 0808 	sub.w	r8, r1, r8
 8006016:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800601a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800601e:	fa1f f888 	uxth.w	r8, r8
 8006022:	1419      	asrs	r1, r3, #16
 8006024:	454e      	cmp	r6, r9
 8006026:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800602a:	f84a 3b04 	str.w	r3, [sl], #4
 800602e:	d8e7      	bhi.n	8006000 <__mdiff+0x80>
 8006030:	1b33      	subs	r3, r6, r4
 8006032:	3b15      	subs	r3, #21
 8006034:	f023 0303 	bic.w	r3, r3, #3
 8006038:	3304      	adds	r3, #4
 800603a:	3415      	adds	r4, #21
 800603c:	42a6      	cmp	r6, r4
 800603e:	bf38      	it	cc
 8006040:	2304      	movcc	r3, #4
 8006042:	441d      	add	r5, r3
 8006044:	4473      	add	r3, lr
 8006046:	469e      	mov	lr, r3
 8006048:	462e      	mov	r6, r5
 800604a:	4566      	cmp	r6, ip
 800604c:	d30e      	bcc.n	800606c <__mdiff+0xec>
 800604e:	f10c 0203 	add.w	r2, ip, #3
 8006052:	1b52      	subs	r2, r2, r5
 8006054:	f022 0203 	bic.w	r2, r2, #3
 8006058:	3d03      	subs	r5, #3
 800605a:	45ac      	cmp	ip, r5
 800605c:	bf38      	it	cc
 800605e:	2200      	movcc	r2, #0
 8006060:	441a      	add	r2, r3
 8006062:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006066:	b17b      	cbz	r3, 8006088 <__mdiff+0x108>
 8006068:	6107      	str	r7, [r0, #16]
 800606a:	e7a3      	b.n	8005fb4 <__mdiff+0x34>
 800606c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006070:	fa11 f288 	uxtah	r2, r1, r8
 8006074:	1414      	asrs	r4, r2, #16
 8006076:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800607a:	b292      	uxth	r2, r2
 800607c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006080:	f84e 2b04 	str.w	r2, [lr], #4
 8006084:	1421      	asrs	r1, r4, #16
 8006086:	e7e0      	b.n	800604a <__mdiff+0xca>
 8006088:	3f01      	subs	r7, #1
 800608a:	e7ea      	b.n	8006062 <__mdiff+0xe2>
 800608c:	080075f8 	.word	0x080075f8
 8006090:	08007684 	.word	0x08007684

08006094 <__ulp>:
 8006094:	b082      	sub	sp, #8
 8006096:	ed8d 0b00 	vstr	d0, [sp]
 800609a:	9b01      	ldr	r3, [sp, #4]
 800609c:	4912      	ldr	r1, [pc, #72]	; (80060e8 <__ulp+0x54>)
 800609e:	4019      	ands	r1, r3
 80060a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80060a4:	2900      	cmp	r1, #0
 80060a6:	dd05      	ble.n	80060b4 <__ulp+0x20>
 80060a8:	2200      	movs	r2, #0
 80060aa:	460b      	mov	r3, r1
 80060ac:	ec43 2b10 	vmov	d0, r2, r3
 80060b0:	b002      	add	sp, #8
 80060b2:	4770      	bx	lr
 80060b4:	4249      	negs	r1, r1
 80060b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80060ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	da04      	bge.n	80060d2 <__ulp+0x3e>
 80060c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80060cc:	fa41 f300 	asr.w	r3, r1, r0
 80060d0:	e7ec      	b.n	80060ac <__ulp+0x18>
 80060d2:	f1a0 0114 	sub.w	r1, r0, #20
 80060d6:	291e      	cmp	r1, #30
 80060d8:	bfda      	itte	le
 80060da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80060de:	fa20 f101 	lsrle.w	r1, r0, r1
 80060e2:	2101      	movgt	r1, #1
 80060e4:	460a      	mov	r2, r1
 80060e6:	e7e1      	b.n	80060ac <__ulp+0x18>
 80060e8:	7ff00000 	.word	0x7ff00000

080060ec <__b2d>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	6905      	ldr	r5, [r0, #16]
 80060f0:	f100 0714 	add.w	r7, r0, #20
 80060f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80060f8:	1f2e      	subs	r6, r5, #4
 80060fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff fd48 	bl	8005b94 <__hi0bits>
 8006104:	f1c0 0320 	rsb	r3, r0, #32
 8006108:	280a      	cmp	r0, #10
 800610a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006188 <__b2d+0x9c>
 800610e:	600b      	str	r3, [r1, #0]
 8006110:	dc14      	bgt.n	800613c <__b2d+0x50>
 8006112:	f1c0 0e0b 	rsb	lr, r0, #11
 8006116:	fa24 f10e 	lsr.w	r1, r4, lr
 800611a:	42b7      	cmp	r7, r6
 800611c:	ea41 030c 	orr.w	r3, r1, ip
 8006120:	bf34      	ite	cc
 8006122:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006126:	2100      	movcs	r1, #0
 8006128:	3015      	adds	r0, #21
 800612a:	fa04 f000 	lsl.w	r0, r4, r0
 800612e:	fa21 f10e 	lsr.w	r1, r1, lr
 8006132:	ea40 0201 	orr.w	r2, r0, r1
 8006136:	ec43 2b10 	vmov	d0, r2, r3
 800613a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800613c:	42b7      	cmp	r7, r6
 800613e:	bf3a      	itte	cc
 8006140:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006144:	f1a5 0608 	subcc.w	r6, r5, #8
 8006148:	2100      	movcs	r1, #0
 800614a:	380b      	subs	r0, #11
 800614c:	d017      	beq.n	800617e <__b2d+0x92>
 800614e:	f1c0 0c20 	rsb	ip, r0, #32
 8006152:	fa04 f500 	lsl.w	r5, r4, r0
 8006156:	42be      	cmp	r6, r7
 8006158:	fa21 f40c 	lsr.w	r4, r1, ip
 800615c:	ea45 0504 	orr.w	r5, r5, r4
 8006160:	bf8c      	ite	hi
 8006162:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006166:	2400      	movls	r4, #0
 8006168:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800616c:	fa01 f000 	lsl.w	r0, r1, r0
 8006170:	fa24 f40c 	lsr.w	r4, r4, ip
 8006174:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006178:	ea40 0204 	orr.w	r2, r0, r4
 800617c:	e7db      	b.n	8006136 <__b2d+0x4a>
 800617e:	ea44 030c 	orr.w	r3, r4, ip
 8006182:	460a      	mov	r2, r1
 8006184:	e7d7      	b.n	8006136 <__b2d+0x4a>
 8006186:	bf00      	nop
 8006188:	3ff00000 	.word	0x3ff00000

0800618c <__d2b>:
 800618c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006190:	4689      	mov	r9, r1
 8006192:	2101      	movs	r1, #1
 8006194:	ec57 6b10 	vmov	r6, r7, d0
 8006198:	4690      	mov	r8, r2
 800619a:	f7ff fc09 	bl	80059b0 <_Balloc>
 800619e:	4604      	mov	r4, r0
 80061a0:	b930      	cbnz	r0, 80061b0 <__d2b+0x24>
 80061a2:	4602      	mov	r2, r0
 80061a4:	4b25      	ldr	r3, [pc, #148]	; (800623c <__d2b+0xb0>)
 80061a6:	4826      	ldr	r0, [pc, #152]	; (8006240 <__d2b+0xb4>)
 80061a8:	f240 310a 	movw	r1, #778	; 0x30a
 80061ac:	f000 fb4e 	bl	800684c <__assert_func>
 80061b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80061b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061b8:	bb35      	cbnz	r5, 8006208 <__d2b+0x7c>
 80061ba:	2e00      	cmp	r6, #0
 80061bc:	9301      	str	r3, [sp, #4]
 80061be:	d028      	beq.n	8006212 <__d2b+0x86>
 80061c0:	4668      	mov	r0, sp
 80061c2:	9600      	str	r6, [sp, #0]
 80061c4:	f7ff fd06 	bl	8005bd4 <__lo0bits>
 80061c8:	9900      	ldr	r1, [sp, #0]
 80061ca:	b300      	cbz	r0, 800620e <__d2b+0x82>
 80061cc:	9a01      	ldr	r2, [sp, #4]
 80061ce:	f1c0 0320 	rsb	r3, r0, #32
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	430b      	orrs	r3, r1
 80061d8:	40c2      	lsrs	r2, r0
 80061da:	6163      	str	r3, [r4, #20]
 80061dc:	9201      	str	r2, [sp, #4]
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	61a3      	str	r3, [r4, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bf14      	ite	ne
 80061e6:	2202      	movne	r2, #2
 80061e8:	2201      	moveq	r2, #1
 80061ea:	6122      	str	r2, [r4, #16]
 80061ec:	b1d5      	cbz	r5, 8006224 <__d2b+0x98>
 80061ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061f2:	4405      	add	r5, r0
 80061f4:	f8c9 5000 	str.w	r5, [r9]
 80061f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061fc:	f8c8 0000 	str.w	r0, [r8]
 8006200:	4620      	mov	r0, r4
 8006202:	b003      	add	sp, #12
 8006204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800620c:	e7d5      	b.n	80061ba <__d2b+0x2e>
 800620e:	6161      	str	r1, [r4, #20]
 8006210:	e7e5      	b.n	80061de <__d2b+0x52>
 8006212:	a801      	add	r0, sp, #4
 8006214:	f7ff fcde 	bl	8005bd4 <__lo0bits>
 8006218:	9b01      	ldr	r3, [sp, #4]
 800621a:	6163      	str	r3, [r4, #20]
 800621c:	2201      	movs	r2, #1
 800621e:	6122      	str	r2, [r4, #16]
 8006220:	3020      	adds	r0, #32
 8006222:	e7e3      	b.n	80061ec <__d2b+0x60>
 8006224:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006228:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800622c:	f8c9 0000 	str.w	r0, [r9]
 8006230:	6918      	ldr	r0, [r3, #16]
 8006232:	f7ff fcaf 	bl	8005b94 <__hi0bits>
 8006236:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800623a:	e7df      	b.n	80061fc <__d2b+0x70>
 800623c:	080075f8 	.word	0x080075f8
 8006240:	08007684 	.word	0x08007684

08006244 <__ratio>:
 8006244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006248:	4688      	mov	r8, r1
 800624a:	4669      	mov	r1, sp
 800624c:	4681      	mov	r9, r0
 800624e:	f7ff ff4d 	bl	80060ec <__b2d>
 8006252:	a901      	add	r1, sp, #4
 8006254:	4640      	mov	r0, r8
 8006256:	ec55 4b10 	vmov	r4, r5, d0
 800625a:	f7ff ff47 	bl	80060ec <__b2d>
 800625e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006262:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006266:	eba3 0c02 	sub.w	ip, r3, r2
 800626a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006274:	ec51 0b10 	vmov	r0, r1, d0
 8006278:	2b00      	cmp	r3, #0
 800627a:	bfd6      	itet	le
 800627c:	460a      	movle	r2, r1
 800627e:	462a      	movgt	r2, r5
 8006280:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006284:	468b      	mov	fp, r1
 8006286:	462f      	mov	r7, r5
 8006288:	bfd4      	ite	le
 800628a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800628e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006292:	4620      	mov	r0, r4
 8006294:	ee10 2a10 	vmov	r2, s0
 8006298:	465b      	mov	r3, fp
 800629a:	4639      	mov	r1, r7
 800629c:	f7fa fb2e 	bl	80008fc <__aeabi_ddiv>
 80062a0:	ec41 0b10 	vmov	d0, r0, r1
 80062a4:	b003      	add	sp, #12
 80062a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080062aa <__copybits>:
 80062aa:	3901      	subs	r1, #1
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	1149      	asrs	r1, r1, #5
 80062b0:	6914      	ldr	r4, [r2, #16]
 80062b2:	3101      	adds	r1, #1
 80062b4:	f102 0314 	add.w	r3, r2, #20
 80062b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80062bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062c0:	1f05      	subs	r5, r0, #4
 80062c2:	42a3      	cmp	r3, r4
 80062c4:	d30c      	bcc.n	80062e0 <__copybits+0x36>
 80062c6:	1aa3      	subs	r3, r4, r2
 80062c8:	3b11      	subs	r3, #17
 80062ca:	f023 0303 	bic.w	r3, r3, #3
 80062ce:	3211      	adds	r2, #17
 80062d0:	42a2      	cmp	r2, r4
 80062d2:	bf88      	it	hi
 80062d4:	2300      	movhi	r3, #0
 80062d6:	4418      	add	r0, r3
 80062d8:	2300      	movs	r3, #0
 80062da:	4288      	cmp	r0, r1
 80062dc:	d305      	bcc.n	80062ea <__copybits+0x40>
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80062e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80062e8:	e7eb      	b.n	80062c2 <__copybits+0x18>
 80062ea:	f840 3b04 	str.w	r3, [r0], #4
 80062ee:	e7f4      	b.n	80062da <__copybits+0x30>

080062f0 <__any_on>:
 80062f0:	f100 0214 	add.w	r2, r0, #20
 80062f4:	6900      	ldr	r0, [r0, #16]
 80062f6:	114b      	asrs	r3, r1, #5
 80062f8:	4298      	cmp	r0, r3
 80062fa:	b510      	push	{r4, lr}
 80062fc:	db11      	blt.n	8006322 <__any_on+0x32>
 80062fe:	dd0a      	ble.n	8006316 <__any_on+0x26>
 8006300:	f011 011f 	ands.w	r1, r1, #31
 8006304:	d007      	beq.n	8006316 <__any_on+0x26>
 8006306:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800630a:	fa24 f001 	lsr.w	r0, r4, r1
 800630e:	fa00 f101 	lsl.w	r1, r0, r1
 8006312:	428c      	cmp	r4, r1
 8006314:	d10b      	bne.n	800632e <__any_on+0x3e>
 8006316:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800631a:	4293      	cmp	r3, r2
 800631c:	d803      	bhi.n	8006326 <__any_on+0x36>
 800631e:	2000      	movs	r0, #0
 8006320:	bd10      	pop	{r4, pc}
 8006322:	4603      	mov	r3, r0
 8006324:	e7f7      	b.n	8006316 <__any_on+0x26>
 8006326:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800632a:	2900      	cmp	r1, #0
 800632c:	d0f5      	beq.n	800631a <__any_on+0x2a>
 800632e:	2001      	movs	r0, #1
 8006330:	e7f6      	b.n	8006320 <__any_on+0x30>

08006332 <_calloc_r>:
 8006332:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006334:	fba1 2402 	umull	r2, r4, r1, r2
 8006338:	b94c      	cbnz	r4, 800634e <_calloc_r+0x1c>
 800633a:	4611      	mov	r1, r2
 800633c:	9201      	str	r2, [sp, #4]
 800633e:	f000 f87b 	bl	8006438 <_malloc_r>
 8006342:	9a01      	ldr	r2, [sp, #4]
 8006344:	4605      	mov	r5, r0
 8006346:	b930      	cbnz	r0, 8006356 <_calloc_r+0x24>
 8006348:	4628      	mov	r0, r5
 800634a:	b003      	add	sp, #12
 800634c:	bd30      	pop	{r4, r5, pc}
 800634e:	220c      	movs	r2, #12
 8006350:	6002      	str	r2, [r0, #0]
 8006352:	2500      	movs	r5, #0
 8006354:	e7f8      	b.n	8006348 <_calloc_r+0x16>
 8006356:	4621      	mov	r1, r4
 8006358:	f7fc fbce 	bl	8002af8 <memset>
 800635c:	e7f4      	b.n	8006348 <_calloc_r+0x16>
	...

08006360 <_free_r>:
 8006360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006362:	2900      	cmp	r1, #0
 8006364:	d044      	beq.n	80063f0 <_free_r+0x90>
 8006366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800636a:	9001      	str	r0, [sp, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f1a1 0404 	sub.w	r4, r1, #4
 8006372:	bfb8      	it	lt
 8006374:	18e4      	addlt	r4, r4, r3
 8006376:	f000 fab3 	bl	80068e0 <__malloc_lock>
 800637a:	4a1e      	ldr	r2, [pc, #120]	; (80063f4 <_free_r+0x94>)
 800637c:	9801      	ldr	r0, [sp, #4]
 800637e:	6813      	ldr	r3, [r2, #0]
 8006380:	b933      	cbnz	r3, 8006390 <_free_r+0x30>
 8006382:	6063      	str	r3, [r4, #4]
 8006384:	6014      	str	r4, [r2, #0]
 8006386:	b003      	add	sp, #12
 8006388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800638c:	f000 baae 	b.w	80068ec <__malloc_unlock>
 8006390:	42a3      	cmp	r3, r4
 8006392:	d908      	bls.n	80063a6 <_free_r+0x46>
 8006394:	6825      	ldr	r5, [r4, #0]
 8006396:	1961      	adds	r1, r4, r5
 8006398:	428b      	cmp	r3, r1
 800639a:	bf01      	itttt	eq
 800639c:	6819      	ldreq	r1, [r3, #0]
 800639e:	685b      	ldreq	r3, [r3, #4]
 80063a0:	1949      	addeq	r1, r1, r5
 80063a2:	6021      	streq	r1, [r4, #0]
 80063a4:	e7ed      	b.n	8006382 <_free_r+0x22>
 80063a6:	461a      	mov	r2, r3
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	b10b      	cbz	r3, 80063b0 <_free_r+0x50>
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	d9fa      	bls.n	80063a6 <_free_r+0x46>
 80063b0:	6811      	ldr	r1, [r2, #0]
 80063b2:	1855      	adds	r5, r2, r1
 80063b4:	42a5      	cmp	r5, r4
 80063b6:	d10b      	bne.n	80063d0 <_free_r+0x70>
 80063b8:	6824      	ldr	r4, [r4, #0]
 80063ba:	4421      	add	r1, r4
 80063bc:	1854      	adds	r4, r2, r1
 80063be:	42a3      	cmp	r3, r4
 80063c0:	6011      	str	r1, [r2, #0]
 80063c2:	d1e0      	bne.n	8006386 <_free_r+0x26>
 80063c4:	681c      	ldr	r4, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	6053      	str	r3, [r2, #4]
 80063ca:	4421      	add	r1, r4
 80063cc:	6011      	str	r1, [r2, #0]
 80063ce:	e7da      	b.n	8006386 <_free_r+0x26>
 80063d0:	d902      	bls.n	80063d8 <_free_r+0x78>
 80063d2:	230c      	movs	r3, #12
 80063d4:	6003      	str	r3, [r0, #0]
 80063d6:	e7d6      	b.n	8006386 <_free_r+0x26>
 80063d8:	6825      	ldr	r5, [r4, #0]
 80063da:	1961      	adds	r1, r4, r5
 80063dc:	428b      	cmp	r3, r1
 80063de:	bf04      	itt	eq
 80063e0:	6819      	ldreq	r1, [r3, #0]
 80063e2:	685b      	ldreq	r3, [r3, #4]
 80063e4:	6063      	str	r3, [r4, #4]
 80063e6:	bf04      	itt	eq
 80063e8:	1949      	addeq	r1, r1, r5
 80063ea:	6021      	streq	r1, [r4, #0]
 80063ec:	6054      	str	r4, [r2, #4]
 80063ee:	e7ca      	b.n	8006386 <_free_r+0x26>
 80063f0:	b003      	add	sp, #12
 80063f2:	bd30      	pop	{r4, r5, pc}
 80063f4:	20000864 	.word	0x20000864

080063f8 <sbrk_aligned>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	4e0e      	ldr	r6, [pc, #56]	; (8006434 <sbrk_aligned+0x3c>)
 80063fc:	460c      	mov	r4, r1
 80063fe:	6831      	ldr	r1, [r6, #0]
 8006400:	4605      	mov	r5, r0
 8006402:	b911      	cbnz	r1, 800640a <sbrk_aligned+0x12>
 8006404:	f000 f9f0 	bl	80067e8 <_sbrk_r>
 8006408:	6030      	str	r0, [r6, #0]
 800640a:	4621      	mov	r1, r4
 800640c:	4628      	mov	r0, r5
 800640e:	f000 f9eb 	bl	80067e8 <_sbrk_r>
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	d00a      	beq.n	800642c <sbrk_aligned+0x34>
 8006416:	1cc4      	adds	r4, r0, #3
 8006418:	f024 0403 	bic.w	r4, r4, #3
 800641c:	42a0      	cmp	r0, r4
 800641e:	d007      	beq.n	8006430 <sbrk_aligned+0x38>
 8006420:	1a21      	subs	r1, r4, r0
 8006422:	4628      	mov	r0, r5
 8006424:	f000 f9e0 	bl	80067e8 <_sbrk_r>
 8006428:	3001      	adds	r0, #1
 800642a:	d101      	bne.n	8006430 <sbrk_aligned+0x38>
 800642c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006430:	4620      	mov	r0, r4
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	20000868 	.word	0x20000868

08006438 <_malloc_r>:
 8006438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643c:	1ccd      	adds	r5, r1, #3
 800643e:	f025 0503 	bic.w	r5, r5, #3
 8006442:	3508      	adds	r5, #8
 8006444:	2d0c      	cmp	r5, #12
 8006446:	bf38      	it	cc
 8006448:	250c      	movcc	r5, #12
 800644a:	2d00      	cmp	r5, #0
 800644c:	4607      	mov	r7, r0
 800644e:	db01      	blt.n	8006454 <_malloc_r+0x1c>
 8006450:	42a9      	cmp	r1, r5
 8006452:	d905      	bls.n	8006460 <_malloc_r+0x28>
 8006454:	230c      	movs	r3, #12
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	2600      	movs	r6, #0
 800645a:	4630      	mov	r0, r6
 800645c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006460:	4e2e      	ldr	r6, [pc, #184]	; (800651c <_malloc_r+0xe4>)
 8006462:	f000 fa3d 	bl	80068e0 <__malloc_lock>
 8006466:	6833      	ldr	r3, [r6, #0]
 8006468:	461c      	mov	r4, r3
 800646a:	bb34      	cbnz	r4, 80064ba <_malloc_r+0x82>
 800646c:	4629      	mov	r1, r5
 800646e:	4638      	mov	r0, r7
 8006470:	f7ff ffc2 	bl	80063f8 <sbrk_aligned>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	4604      	mov	r4, r0
 8006478:	d14d      	bne.n	8006516 <_malloc_r+0xde>
 800647a:	6834      	ldr	r4, [r6, #0]
 800647c:	4626      	mov	r6, r4
 800647e:	2e00      	cmp	r6, #0
 8006480:	d140      	bne.n	8006504 <_malloc_r+0xcc>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	4631      	mov	r1, r6
 8006486:	4638      	mov	r0, r7
 8006488:	eb04 0803 	add.w	r8, r4, r3
 800648c:	f000 f9ac 	bl	80067e8 <_sbrk_r>
 8006490:	4580      	cmp	r8, r0
 8006492:	d13a      	bne.n	800650a <_malloc_r+0xd2>
 8006494:	6821      	ldr	r1, [r4, #0]
 8006496:	3503      	adds	r5, #3
 8006498:	1a6d      	subs	r5, r5, r1
 800649a:	f025 0503 	bic.w	r5, r5, #3
 800649e:	3508      	adds	r5, #8
 80064a0:	2d0c      	cmp	r5, #12
 80064a2:	bf38      	it	cc
 80064a4:	250c      	movcc	r5, #12
 80064a6:	4629      	mov	r1, r5
 80064a8:	4638      	mov	r0, r7
 80064aa:	f7ff ffa5 	bl	80063f8 <sbrk_aligned>
 80064ae:	3001      	adds	r0, #1
 80064b0:	d02b      	beq.n	800650a <_malloc_r+0xd2>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	442b      	add	r3, r5
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	e00e      	b.n	80064d8 <_malloc_r+0xa0>
 80064ba:	6822      	ldr	r2, [r4, #0]
 80064bc:	1b52      	subs	r2, r2, r5
 80064be:	d41e      	bmi.n	80064fe <_malloc_r+0xc6>
 80064c0:	2a0b      	cmp	r2, #11
 80064c2:	d916      	bls.n	80064f2 <_malloc_r+0xba>
 80064c4:	1961      	adds	r1, r4, r5
 80064c6:	42a3      	cmp	r3, r4
 80064c8:	6025      	str	r5, [r4, #0]
 80064ca:	bf18      	it	ne
 80064cc:	6059      	strne	r1, [r3, #4]
 80064ce:	6863      	ldr	r3, [r4, #4]
 80064d0:	bf08      	it	eq
 80064d2:	6031      	streq	r1, [r6, #0]
 80064d4:	5162      	str	r2, [r4, r5]
 80064d6:	604b      	str	r3, [r1, #4]
 80064d8:	4638      	mov	r0, r7
 80064da:	f104 060b 	add.w	r6, r4, #11
 80064de:	f000 fa05 	bl	80068ec <__malloc_unlock>
 80064e2:	f026 0607 	bic.w	r6, r6, #7
 80064e6:	1d23      	adds	r3, r4, #4
 80064e8:	1af2      	subs	r2, r6, r3
 80064ea:	d0b6      	beq.n	800645a <_malloc_r+0x22>
 80064ec:	1b9b      	subs	r3, r3, r6
 80064ee:	50a3      	str	r3, [r4, r2]
 80064f0:	e7b3      	b.n	800645a <_malloc_r+0x22>
 80064f2:	6862      	ldr	r2, [r4, #4]
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	bf0c      	ite	eq
 80064f8:	6032      	streq	r2, [r6, #0]
 80064fa:	605a      	strne	r2, [r3, #4]
 80064fc:	e7ec      	b.n	80064d8 <_malloc_r+0xa0>
 80064fe:	4623      	mov	r3, r4
 8006500:	6864      	ldr	r4, [r4, #4]
 8006502:	e7b2      	b.n	800646a <_malloc_r+0x32>
 8006504:	4634      	mov	r4, r6
 8006506:	6876      	ldr	r6, [r6, #4]
 8006508:	e7b9      	b.n	800647e <_malloc_r+0x46>
 800650a:	230c      	movs	r3, #12
 800650c:	603b      	str	r3, [r7, #0]
 800650e:	4638      	mov	r0, r7
 8006510:	f000 f9ec 	bl	80068ec <__malloc_unlock>
 8006514:	e7a1      	b.n	800645a <_malloc_r+0x22>
 8006516:	6025      	str	r5, [r4, #0]
 8006518:	e7de      	b.n	80064d8 <_malloc_r+0xa0>
 800651a:	bf00      	nop
 800651c:	20000864 	.word	0x20000864

08006520 <__ssputs_r>:
 8006520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006524:	688e      	ldr	r6, [r1, #8]
 8006526:	429e      	cmp	r6, r3
 8006528:	4682      	mov	sl, r0
 800652a:	460c      	mov	r4, r1
 800652c:	4690      	mov	r8, r2
 800652e:	461f      	mov	r7, r3
 8006530:	d838      	bhi.n	80065a4 <__ssputs_r+0x84>
 8006532:	898a      	ldrh	r2, [r1, #12]
 8006534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006538:	d032      	beq.n	80065a0 <__ssputs_r+0x80>
 800653a:	6825      	ldr	r5, [r4, #0]
 800653c:	6909      	ldr	r1, [r1, #16]
 800653e:	eba5 0901 	sub.w	r9, r5, r1
 8006542:	6965      	ldr	r5, [r4, #20]
 8006544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800654c:	3301      	adds	r3, #1
 800654e:	444b      	add	r3, r9
 8006550:	106d      	asrs	r5, r5, #1
 8006552:	429d      	cmp	r5, r3
 8006554:	bf38      	it	cc
 8006556:	461d      	movcc	r5, r3
 8006558:	0553      	lsls	r3, r2, #21
 800655a:	d531      	bpl.n	80065c0 <__ssputs_r+0xa0>
 800655c:	4629      	mov	r1, r5
 800655e:	f7ff ff6b 	bl	8006438 <_malloc_r>
 8006562:	4606      	mov	r6, r0
 8006564:	b950      	cbnz	r0, 800657c <__ssputs_r+0x5c>
 8006566:	230c      	movs	r3, #12
 8006568:	f8ca 3000 	str.w	r3, [sl]
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006572:	81a3      	strh	r3, [r4, #12]
 8006574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657c:	6921      	ldr	r1, [r4, #16]
 800657e:	464a      	mov	r2, r9
 8006580:	f7fc faac 	bl	8002adc <memcpy>
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800658a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	6126      	str	r6, [r4, #16]
 8006592:	6165      	str	r5, [r4, #20]
 8006594:	444e      	add	r6, r9
 8006596:	eba5 0509 	sub.w	r5, r5, r9
 800659a:	6026      	str	r6, [r4, #0]
 800659c:	60a5      	str	r5, [r4, #8]
 800659e:	463e      	mov	r6, r7
 80065a0:	42be      	cmp	r6, r7
 80065a2:	d900      	bls.n	80065a6 <__ssputs_r+0x86>
 80065a4:	463e      	mov	r6, r7
 80065a6:	6820      	ldr	r0, [r4, #0]
 80065a8:	4632      	mov	r2, r6
 80065aa:	4641      	mov	r1, r8
 80065ac:	f000 f97e 	bl	80068ac <memmove>
 80065b0:	68a3      	ldr	r3, [r4, #8]
 80065b2:	1b9b      	subs	r3, r3, r6
 80065b4:	60a3      	str	r3, [r4, #8]
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	4433      	add	r3, r6
 80065ba:	6023      	str	r3, [r4, #0]
 80065bc:	2000      	movs	r0, #0
 80065be:	e7db      	b.n	8006578 <__ssputs_r+0x58>
 80065c0:	462a      	mov	r2, r5
 80065c2:	f000 f999 	bl	80068f8 <_realloc_r>
 80065c6:	4606      	mov	r6, r0
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d1e1      	bne.n	8006590 <__ssputs_r+0x70>
 80065cc:	6921      	ldr	r1, [r4, #16]
 80065ce:	4650      	mov	r0, sl
 80065d0:	f7ff fec6 	bl	8006360 <_free_r>
 80065d4:	e7c7      	b.n	8006566 <__ssputs_r+0x46>
	...

080065d8 <_svfiprintf_r>:
 80065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	4698      	mov	r8, r3
 80065de:	898b      	ldrh	r3, [r1, #12]
 80065e0:	061b      	lsls	r3, r3, #24
 80065e2:	b09d      	sub	sp, #116	; 0x74
 80065e4:	4607      	mov	r7, r0
 80065e6:	460d      	mov	r5, r1
 80065e8:	4614      	mov	r4, r2
 80065ea:	d50e      	bpl.n	800660a <_svfiprintf_r+0x32>
 80065ec:	690b      	ldr	r3, [r1, #16]
 80065ee:	b963      	cbnz	r3, 800660a <_svfiprintf_r+0x32>
 80065f0:	2140      	movs	r1, #64	; 0x40
 80065f2:	f7ff ff21 	bl	8006438 <_malloc_r>
 80065f6:	6028      	str	r0, [r5, #0]
 80065f8:	6128      	str	r0, [r5, #16]
 80065fa:	b920      	cbnz	r0, 8006606 <_svfiprintf_r+0x2e>
 80065fc:	230c      	movs	r3, #12
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006604:	e0d1      	b.n	80067aa <_svfiprintf_r+0x1d2>
 8006606:	2340      	movs	r3, #64	; 0x40
 8006608:	616b      	str	r3, [r5, #20]
 800660a:	2300      	movs	r3, #0
 800660c:	9309      	str	r3, [sp, #36]	; 0x24
 800660e:	2320      	movs	r3, #32
 8006610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006614:	f8cd 800c 	str.w	r8, [sp, #12]
 8006618:	2330      	movs	r3, #48	; 0x30
 800661a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067c4 <_svfiprintf_r+0x1ec>
 800661e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006622:	f04f 0901 	mov.w	r9, #1
 8006626:	4623      	mov	r3, r4
 8006628:	469a      	mov	sl, r3
 800662a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800662e:	b10a      	cbz	r2, 8006634 <_svfiprintf_r+0x5c>
 8006630:	2a25      	cmp	r2, #37	; 0x25
 8006632:	d1f9      	bne.n	8006628 <_svfiprintf_r+0x50>
 8006634:	ebba 0b04 	subs.w	fp, sl, r4
 8006638:	d00b      	beq.n	8006652 <_svfiprintf_r+0x7a>
 800663a:	465b      	mov	r3, fp
 800663c:	4622      	mov	r2, r4
 800663e:	4629      	mov	r1, r5
 8006640:	4638      	mov	r0, r7
 8006642:	f7ff ff6d 	bl	8006520 <__ssputs_r>
 8006646:	3001      	adds	r0, #1
 8006648:	f000 80aa 	beq.w	80067a0 <_svfiprintf_r+0x1c8>
 800664c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800664e:	445a      	add	r2, fp
 8006650:	9209      	str	r2, [sp, #36]	; 0x24
 8006652:	f89a 3000 	ldrb.w	r3, [sl]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 80a2 	beq.w	80067a0 <_svfiprintf_r+0x1c8>
 800665c:	2300      	movs	r3, #0
 800665e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006666:	f10a 0a01 	add.w	sl, sl, #1
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	9307      	str	r3, [sp, #28]
 800666e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006672:	931a      	str	r3, [sp, #104]	; 0x68
 8006674:	4654      	mov	r4, sl
 8006676:	2205      	movs	r2, #5
 8006678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800667c:	4851      	ldr	r0, [pc, #324]	; (80067c4 <_svfiprintf_r+0x1ec>)
 800667e:	f7f9 fe07 	bl	8000290 <memchr>
 8006682:	9a04      	ldr	r2, [sp, #16]
 8006684:	b9d8      	cbnz	r0, 80066be <_svfiprintf_r+0xe6>
 8006686:	06d0      	lsls	r0, r2, #27
 8006688:	bf44      	itt	mi
 800668a:	2320      	movmi	r3, #32
 800668c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006690:	0711      	lsls	r1, r2, #28
 8006692:	bf44      	itt	mi
 8006694:	232b      	movmi	r3, #43	; 0x2b
 8006696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669a:	f89a 3000 	ldrb.w	r3, [sl]
 800669e:	2b2a      	cmp	r3, #42	; 0x2a
 80066a0:	d015      	beq.n	80066ce <_svfiprintf_r+0xf6>
 80066a2:	9a07      	ldr	r2, [sp, #28]
 80066a4:	4654      	mov	r4, sl
 80066a6:	2000      	movs	r0, #0
 80066a8:	f04f 0c0a 	mov.w	ip, #10
 80066ac:	4621      	mov	r1, r4
 80066ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066b2:	3b30      	subs	r3, #48	; 0x30
 80066b4:	2b09      	cmp	r3, #9
 80066b6:	d94e      	bls.n	8006756 <_svfiprintf_r+0x17e>
 80066b8:	b1b0      	cbz	r0, 80066e8 <_svfiprintf_r+0x110>
 80066ba:	9207      	str	r2, [sp, #28]
 80066bc:	e014      	b.n	80066e8 <_svfiprintf_r+0x110>
 80066be:	eba0 0308 	sub.w	r3, r0, r8
 80066c2:	fa09 f303 	lsl.w	r3, r9, r3
 80066c6:	4313      	orrs	r3, r2
 80066c8:	9304      	str	r3, [sp, #16]
 80066ca:	46a2      	mov	sl, r4
 80066cc:	e7d2      	b.n	8006674 <_svfiprintf_r+0x9c>
 80066ce:	9b03      	ldr	r3, [sp, #12]
 80066d0:	1d19      	adds	r1, r3, #4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	9103      	str	r1, [sp, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bfbb      	ittet	lt
 80066da:	425b      	neglt	r3, r3
 80066dc:	f042 0202 	orrlt.w	r2, r2, #2
 80066e0:	9307      	strge	r3, [sp, #28]
 80066e2:	9307      	strlt	r3, [sp, #28]
 80066e4:	bfb8      	it	lt
 80066e6:	9204      	strlt	r2, [sp, #16]
 80066e8:	7823      	ldrb	r3, [r4, #0]
 80066ea:	2b2e      	cmp	r3, #46	; 0x2e
 80066ec:	d10c      	bne.n	8006708 <_svfiprintf_r+0x130>
 80066ee:	7863      	ldrb	r3, [r4, #1]
 80066f0:	2b2a      	cmp	r3, #42	; 0x2a
 80066f2:	d135      	bne.n	8006760 <_svfiprintf_r+0x188>
 80066f4:	9b03      	ldr	r3, [sp, #12]
 80066f6:	1d1a      	adds	r2, r3, #4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	9203      	str	r2, [sp, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bfb8      	it	lt
 8006700:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006704:	3402      	adds	r4, #2
 8006706:	9305      	str	r3, [sp, #20]
 8006708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067d4 <_svfiprintf_r+0x1fc>
 800670c:	7821      	ldrb	r1, [r4, #0]
 800670e:	2203      	movs	r2, #3
 8006710:	4650      	mov	r0, sl
 8006712:	f7f9 fdbd 	bl	8000290 <memchr>
 8006716:	b140      	cbz	r0, 800672a <_svfiprintf_r+0x152>
 8006718:	2340      	movs	r3, #64	; 0x40
 800671a:	eba0 000a 	sub.w	r0, r0, sl
 800671e:	fa03 f000 	lsl.w	r0, r3, r0
 8006722:	9b04      	ldr	r3, [sp, #16]
 8006724:	4303      	orrs	r3, r0
 8006726:	3401      	adds	r4, #1
 8006728:	9304      	str	r3, [sp, #16]
 800672a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672e:	4826      	ldr	r0, [pc, #152]	; (80067c8 <_svfiprintf_r+0x1f0>)
 8006730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006734:	2206      	movs	r2, #6
 8006736:	f7f9 fdab 	bl	8000290 <memchr>
 800673a:	2800      	cmp	r0, #0
 800673c:	d038      	beq.n	80067b0 <_svfiprintf_r+0x1d8>
 800673e:	4b23      	ldr	r3, [pc, #140]	; (80067cc <_svfiprintf_r+0x1f4>)
 8006740:	bb1b      	cbnz	r3, 800678a <_svfiprintf_r+0x1b2>
 8006742:	9b03      	ldr	r3, [sp, #12]
 8006744:	3307      	adds	r3, #7
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	3308      	adds	r3, #8
 800674c:	9303      	str	r3, [sp, #12]
 800674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006750:	4433      	add	r3, r6
 8006752:	9309      	str	r3, [sp, #36]	; 0x24
 8006754:	e767      	b.n	8006626 <_svfiprintf_r+0x4e>
 8006756:	fb0c 3202 	mla	r2, ip, r2, r3
 800675a:	460c      	mov	r4, r1
 800675c:	2001      	movs	r0, #1
 800675e:	e7a5      	b.n	80066ac <_svfiprintf_r+0xd4>
 8006760:	2300      	movs	r3, #0
 8006762:	3401      	adds	r4, #1
 8006764:	9305      	str	r3, [sp, #20]
 8006766:	4619      	mov	r1, r3
 8006768:	f04f 0c0a 	mov.w	ip, #10
 800676c:	4620      	mov	r0, r4
 800676e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006772:	3a30      	subs	r2, #48	; 0x30
 8006774:	2a09      	cmp	r2, #9
 8006776:	d903      	bls.n	8006780 <_svfiprintf_r+0x1a8>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0c5      	beq.n	8006708 <_svfiprintf_r+0x130>
 800677c:	9105      	str	r1, [sp, #20]
 800677e:	e7c3      	b.n	8006708 <_svfiprintf_r+0x130>
 8006780:	fb0c 2101 	mla	r1, ip, r1, r2
 8006784:	4604      	mov	r4, r0
 8006786:	2301      	movs	r3, #1
 8006788:	e7f0      	b.n	800676c <_svfiprintf_r+0x194>
 800678a:	ab03      	add	r3, sp, #12
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	462a      	mov	r2, r5
 8006790:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <_svfiprintf_r+0x1f8>)
 8006792:	a904      	add	r1, sp, #16
 8006794:	4638      	mov	r0, r7
 8006796:	f7fc fa57 	bl	8002c48 <_printf_float>
 800679a:	1c42      	adds	r2, r0, #1
 800679c:	4606      	mov	r6, r0
 800679e:	d1d6      	bne.n	800674e <_svfiprintf_r+0x176>
 80067a0:	89ab      	ldrh	r3, [r5, #12]
 80067a2:	065b      	lsls	r3, r3, #25
 80067a4:	f53f af2c 	bmi.w	8006600 <_svfiprintf_r+0x28>
 80067a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067aa:	b01d      	add	sp, #116	; 0x74
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b0:	ab03      	add	r3, sp, #12
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	462a      	mov	r2, r5
 80067b6:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <_svfiprintf_r+0x1f8>)
 80067b8:	a904      	add	r1, sp, #16
 80067ba:	4638      	mov	r0, r7
 80067bc:	f7fc fce8 	bl	8003190 <_printf_i>
 80067c0:	e7eb      	b.n	800679a <_svfiprintf_r+0x1c2>
 80067c2:	bf00      	nop
 80067c4:	080077dc 	.word	0x080077dc
 80067c8:	080077e6 	.word	0x080077e6
 80067cc:	08002c49 	.word	0x08002c49
 80067d0:	08006521 	.word	0x08006521
 80067d4:	080077e2 	.word	0x080077e2

080067d8 <nan>:
 80067d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80067e0 <nan+0x8>
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	00000000 	.word	0x00000000
 80067e4:	7ff80000 	.word	0x7ff80000

080067e8 <_sbrk_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4d06      	ldr	r5, [pc, #24]	; (8006804 <_sbrk_r+0x1c>)
 80067ec:	2300      	movs	r3, #0
 80067ee:	4604      	mov	r4, r0
 80067f0:	4608      	mov	r0, r1
 80067f2:	602b      	str	r3, [r5, #0]
 80067f4:	f7fa fb78 	bl	8000ee8 <_sbrk>
 80067f8:	1c43      	adds	r3, r0, #1
 80067fa:	d102      	bne.n	8006802 <_sbrk_r+0x1a>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	b103      	cbz	r3, 8006802 <_sbrk_r+0x1a>
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	2000086c 	.word	0x2000086c

08006808 <strncmp>:
 8006808:	b510      	push	{r4, lr}
 800680a:	b17a      	cbz	r2, 800682c <strncmp+0x24>
 800680c:	4603      	mov	r3, r0
 800680e:	3901      	subs	r1, #1
 8006810:	1884      	adds	r4, r0, r2
 8006812:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006816:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800681a:	4290      	cmp	r0, r2
 800681c:	d101      	bne.n	8006822 <strncmp+0x1a>
 800681e:	42a3      	cmp	r3, r4
 8006820:	d101      	bne.n	8006826 <strncmp+0x1e>
 8006822:	1a80      	subs	r0, r0, r2
 8006824:	bd10      	pop	{r4, pc}
 8006826:	2800      	cmp	r0, #0
 8006828:	d1f3      	bne.n	8006812 <strncmp+0xa>
 800682a:	e7fa      	b.n	8006822 <strncmp+0x1a>
 800682c:	4610      	mov	r0, r2
 800682e:	e7f9      	b.n	8006824 <strncmp+0x1c>

08006830 <__ascii_wctomb>:
 8006830:	b149      	cbz	r1, 8006846 <__ascii_wctomb+0x16>
 8006832:	2aff      	cmp	r2, #255	; 0xff
 8006834:	bf85      	ittet	hi
 8006836:	238a      	movhi	r3, #138	; 0x8a
 8006838:	6003      	strhi	r3, [r0, #0]
 800683a:	700a      	strbls	r2, [r1, #0]
 800683c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006840:	bf98      	it	ls
 8006842:	2001      	movls	r0, #1
 8006844:	4770      	bx	lr
 8006846:	4608      	mov	r0, r1
 8006848:	4770      	bx	lr
	...

0800684c <__assert_func>:
 800684c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800684e:	4614      	mov	r4, r2
 8006850:	461a      	mov	r2, r3
 8006852:	4b09      	ldr	r3, [pc, #36]	; (8006878 <__assert_func+0x2c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4605      	mov	r5, r0
 8006858:	68d8      	ldr	r0, [r3, #12]
 800685a:	b14c      	cbz	r4, 8006870 <__assert_func+0x24>
 800685c:	4b07      	ldr	r3, [pc, #28]	; (800687c <__assert_func+0x30>)
 800685e:	9100      	str	r1, [sp, #0]
 8006860:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006864:	4906      	ldr	r1, [pc, #24]	; (8006880 <__assert_func+0x34>)
 8006866:	462b      	mov	r3, r5
 8006868:	f000 f80e 	bl	8006888 <fiprintf>
 800686c:	f000 fa8c 	bl	8006d88 <abort>
 8006870:	4b04      	ldr	r3, [pc, #16]	; (8006884 <__assert_func+0x38>)
 8006872:	461c      	mov	r4, r3
 8006874:	e7f3      	b.n	800685e <__assert_func+0x12>
 8006876:	bf00      	nop
 8006878:	20000000 	.word	0x20000000
 800687c:	080077ed 	.word	0x080077ed
 8006880:	080077fa 	.word	0x080077fa
 8006884:	08007828 	.word	0x08007828

08006888 <fiprintf>:
 8006888:	b40e      	push	{r1, r2, r3}
 800688a:	b503      	push	{r0, r1, lr}
 800688c:	4601      	mov	r1, r0
 800688e:	ab03      	add	r3, sp, #12
 8006890:	4805      	ldr	r0, [pc, #20]	; (80068a8 <fiprintf+0x20>)
 8006892:	f853 2b04 	ldr.w	r2, [r3], #4
 8006896:	6800      	ldr	r0, [r0, #0]
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	f000 f885 	bl	80069a8 <_vfiprintf_r>
 800689e:	b002      	add	sp, #8
 80068a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a4:	b003      	add	sp, #12
 80068a6:	4770      	bx	lr
 80068a8:	20000000 	.word	0x20000000

080068ac <memmove>:
 80068ac:	4288      	cmp	r0, r1
 80068ae:	b510      	push	{r4, lr}
 80068b0:	eb01 0402 	add.w	r4, r1, r2
 80068b4:	d902      	bls.n	80068bc <memmove+0x10>
 80068b6:	4284      	cmp	r4, r0
 80068b8:	4623      	mov	r3, r4
 80068ba:	d807      	bhi.n	80068cc <memmove+0x20>
 80068bc:	1e43      	subs	r3, r0, #1
 80068be:	42a1      	cmp	r1, r4
 80068c0:	d008      	beq.n	80068d4 <memmove+0x28>
 80068c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068ca:	e7f8      	b.n	80068be <memmove+0x12>
 80068cc:	4402      	add	r2, r0
 80068ce:	4601      	mov	r1, r0
 80068d0:	428a      	cmp	r2, r1
 80068d2:	d100      	bne.n	80068d6 <memmove+0x2a>
 80068d4:	bd10      	pop	{r4, pc}
 80068d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068de:	e7f7      	b.n	80068d0 <memmove+0x24>

080068e0 <__malloc_lock>:
 80068e0:	4801      	ldr	r0, [pc, #4]	; (80068e8 <__malloc_lock+0x8>)
 80068e2:	f000 bc11 	b.w	8007108 <__retarget_lock_acquire_recursive>
 80068e6:	bf00      	nop
 80068e8:	20000870 	.word	0x20000870

080068ec <__malloc_unlock>:
 80068ec:	4801      	ldr	r0, [pc, #4]	; (80068f4 <__malloc_unlock+0x8>)
 80068ee:	f000 bc0c 	b.w	800710a <__retarget_lock_release_recursive>
 80068f2:	bf00      	nop
 80068f4:	20000870 	.word	0x20000870

080068f8 <_realloc_r>:
 80068f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068fc:	4680      	mov	r8, r0
 80068fe:	4614      	mov	r4, r2
 8006900:	460e      	mov	r6, r1
 8006902:	b921      	cbnz	r1, 800690e <_realloc_r+0x16>
 8006904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006908:	4611      	mov	r1, r2
 800690a:	f7ff bd95 	b.w	8006438 <_malloc_r>
 800690e:	b92a      	cbnz	r2, 800691c <_realloc_r+0x24>
 8006910:	f7ff fd26 	bl	8006360 <_free_r>
 8006914:	4625      	mov	r5, r4
 8006916:	4628      	mov	r0, r5
 8006918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800691c:	f000 fc5c 	bl	80071d8 <_malloc_usable_size_r>
 8006920:	4284      	cmp	r4, r0
 8006922:	4607      	mov	r7, r0
 8006924:	d802      	bhi.n	800692c <_realloc_r+0x34>
 8006926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800692a:	d812      	bhi.n	8006952 <_realloc_r+0x5a>
 800692c:	4621      	mov	r1, r4
 800692e:	4640      	mov	r0, r8
 8006930:	f7ff fd82 	bl	8006438 <_malloc_r>
 8006934:	4605      	mov	r5, r0
 8006936:	2800      	cmp	r0, #0
 8006938:	d0ed      	beq.n	8006916 <_realloc_r+0x1e>
 800693a:	42bc      	cmp	r4, r7
 800693c:	4622      	mov	r2, r4
 800693e:	4631      	mov	r1, r6
 8006940:	bf28      	it	cs
 8006942:	463a      	movcs	r2, r7
 8006944:	f7fc f8ca 	bl	8002adc <memcpy>
 8006948:	4631      	mov	r1, r6
 800694a:	4640      	mov	r0, r8
 800694c:	f7ff fd08 	bl	8006360 <_free_r>
 8006950:	e7e1      	b.n	8006916 <_realloc_r+0x1e>
 8006952:	4635      	mov	r5, r6
 8006954:	e7df      	b.n	8006916 <_realloc_r+0x1e>

08006956 <__sfputc_r>:
 8006956:	6893      	ldr	r3, [r2, #8]
 8006958:	3b01      	subs	r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	b410      	push	{r4}
 800695e:	6093      	str	r3, [r2, #8]
 8006960:	da08      	bge.n	8006974 <__sfputc_r+0x1e>
 8006962:	6994      	ldr	r4, [r2, #24]
 8006964:	42a3      	cmp	r3, r4
 8006966:	db01      	blt.n	800696c <__sfputc_r+0x16>
 8006968:	290a      	cmp	r1, #10
 800696a:	d103      	bne.n	8006974 <__sfputc_r+0x1e>
 800696c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006970:	f000 b94a 	b.w	8006c08 <__swbuf_r>
 8006974:	6813      	ldr	r3, [r2, #0]
 8006976:	1c58      	adds	r0, r3, #1
 8006978:	6010      	str	r0, [r2, #0]
 800697a:	7019      	strb	r1, [r3, #0]
 800697c:	4608      	mov	r0, r1
 800697e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006982:	4770      	bx	lr

08006984 <__sfputs_r>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	4606      	mov	r6, r0
 8006988:	460f      	mov	r7, r1
 800698a:	4614      	mov	r4, r2
 800698c:	18d5      	adds	r5, r2, r3
 800698e:	42ac      	cmp	r4, r5
 8006990:	d101      	bne.n	8006996 <__sfputs_r+0x12>
 8006992:	2000      	movs	r0, #0
 8006994:	e007      	b.n	80069a6 <__sfputs_r+0x22>
 8006996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699a:	463a      	mov	r2, r7
 800699c:	4630      	mov	r0, r6
 800699e:	f7ff ffda 	bl	8006956 <__sfputc_r>
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	d1f3      	bne.n	800698e <__sfputs_r+0xa>
 80069a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080069a8 <_vfiprintf_r>:
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	460d      	mov	r5, r1
 80069ae:	b09d      	sub	sp, #116	; 0x74
 80069b0:	4614      	mov	r4, r2
 80069b2:	4698      	mov	r8, r3
 80069b4:	4606      	mov	r6, r0
 80069b6:	b118      	cbz	r0, 80069c0 <_vfiprintf_r+0x18>
 80069b8:	6983      	ldr	r3, [r0, #24]
 80069ba:	b90b      	cbnz	r3, 80069c0 <_vfiprintf_r+0x18>
 80069bc:	f000 fb06 	bl	8006fcc <__sinit>
 80069c0:	4b89      	ldr	r3, [pc, #548]	; (8006be8 <_vfiprintf_r+0x240>)
 80069c2:	429d      	cmp	r5, r3
 80069c4:	d11b      	bne.n	80069fe <_vfiprintf_r+0x56>
 80069c6:	6875      	ldr	r5, [r6, #4]
 80069c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ca:	07d9      	lsls	r1, r3, #31
 80069cc:	d405      	bmi.n	80069da <_vfiprintf_r+0x32>
 80069ce:	89ab      	ldrh	r3, [r5, #12]
 80069d0:	059a      	lsls	r2, r3, #22
 80069d2:	d402      	bmi.n	80069da <_vfiprintf_r+0x32>
 80069d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069d6:	f000 fb97 	bl	8007108 <__retarget_lock_acquire_recursive>
 80069da:	89ab      	ldrh	r3, [r5, #12]
 80069dc:	071b      	lsls	r3, r3, #28
 80069de:	d501      	bpl.n	80069e4 <_vfiprintf_r+0x3c>
 80069e0:	692b      	ldr	r3, [r5, #16]
 80069e2:	b9eb      	cbnz	r3, 8006a20 <_vfiprintf_r+0x78>
 80069e4:	4629      	mov	r1, r5
 80069e6:	4630      	mov	r0, r6
 80069e8:	f000 f960 	bl	8006cac <__swsetup_r>
 80069ec:	b1c0      	cbz	r0, 8006a20 <_vfiprintf_r+0x78>
 80069ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069f0:	07dc      	lsls	r4, r3, #31
 80069f2:	d50e      	bpl.n	8006a12 <_vfiprintf_r+0x6a>
 80069f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069f8:	b01d      	add	sp, #116	; 0x74
 80069fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fe:	4b7b      	ldr	r3, [pc, #492]	; (8006bec <_vfiprintf_r+0x244>)
 8006a00:	429d      	cmp	r5, r3
 8006a02:	d101      	bne.n	8006a08 <_vfiprintf_r+0x60>
 8006a04:	68b5      	ldr	r5, [r6, #8]
 8006a06:	e7df      	b.n	80069c8 <_vfiprintf_r+0x20>
 8006a08:	4b79      	ldr	r3, [pc, #484]	; (8006bf0 <_vfiprintf_r+0x248>)
 8006a0a:	429d      	cmp	r5, r3
 8006a0c:	bf08      	it	eq
 8006a0e:	68f5      	ldreq	r5, [r6, #12]
 8006a10:	e7da      	b.n	80069c8 <_vfiprintf_r+0x20>
 8006a12:	89ab      	ldrh	r3, [r5, #12]
 8006a14:	0598      	lsls	r0, r3, #22
 8006a16:	d4ed      	bmi.n	80069f4 <_vfiprintf_r+0x4c>
 8006a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1a:	f000 fb76 	bl	800710a <__retarget_lock_release_recursive>
 8006a1e:	e7e9      	b.n	80069f4 <_vfiprintf_r+0x4c>
 8006a20:	2300      	movs	r3, #0
 8006a22:	9309      	str	r3, [sp, #36]	; 0x24
 8006a24:	2320      	movs	r3, #32
 8006a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a2e:	2330      	movs	r3, #48	; 0x30
 8006a30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bf4 <_vfiprintf_r+0x24c>
 8006a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a38:	f04f 0901 	mov.w	r9, #1
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	469a      	mov	sl, r3
 8006a40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a44:	b10a      	cbz	r2, 8006a4a <_vfiprintf_r+0xa2>
 8006a46:	2a25      	cmp	r2, #37	; 0x25
 8006a48:	d1f9      	bne.n	8006a3e <_vfiprintf_r+0x96>
 8006a4a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a4e:	d00b      	beq.n	8006a68 <_vfiprintf_r+0xc0>
 8006a50:	465b      	mov	r3, fp
 8006a52:	4622      	mov	r2, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	4630      	mov	r0, r6
 8006a58:	f7ff ff94 	bl	8006984 <__sfputs_r>
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	f000 80aa 	beq.w	8006bb6 <_vfiprintf_r+0x20e>
 8006a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a64:	445a      	add	r2, fp
 8006a66:	9209      	str	r2, [sp, #36]	; 0x24
 8006a68:	f89a 3000 	ldrb.w	r3, [sl]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 80a2 	beq.w	8006bb6 <_vfiprintf_r+0x20e>
 8006a72:	2300      	movs	r3, #0
 8006a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a7c:	f10a 0a01 	add.w	sl, sl, #1
 8006a80:	9304      	str	r3, [sp, #16]
 8006a82:	9307      	str	r3, [sp, #28]
 8006a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a88:	931a      	str	r3, [sp, #104]	; 0x68
 8006a8a:	4654      	mov	r4, sl
 8006a8c:	2205      	movs	r2, #5
 8006a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a92:	4858      	ldr	r0, [pc, #352]	; (8006bf4 <_vfiprintf_r+0x24c>)
 8006a94:	f7f9 fbfc 	bl	8000290 <memchr>
 8006a98:	9a04      	ldr	r2, [sp, #16]
 8006a9a:	b9d8      	cbnz	r0, 8006ad4 <_vfiprintf_r+0x12c>
 8006a9c:	06d1      	lsls	r1, r2, #27
 8006a9e:	bf44      	itt	mi
 8006aa0:	2320      	movmi	r3, #32
 8006aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aa6:	0713      	lsls	r3, r2, #28
 8006aa8:	bf44      	itt	mi
 8006aaa:	232b      	movmi	r3, #43	; 0x2b
 8006aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ab6:	d015      	beq.n	8006ae4 <_vfiprintf_r+0x13c>
 8006ab8:	9a07      	ldr	r2, [sp, #28]
 8006aba:	4654      	mov	r4, sl
 8006abc:	2000      	movs	r0, #0
 8006abe:	f04f 0c0a 	mov.w	ip, #10
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ac8:	3b30      	subs	r3, #48	; 0x30
 8006aca:	2b09      	cmp	r3, #9
 8006acc:	d94e      	bls.n	8006b6c <_vfiprintf_r+0x1c4>
 8006ace:	b1b0      	cbz	r0, 8006afe <_vfiprintf_r+0x156>
 8006ad0:	9207      	str	r2, [sp, #28]
 8006ad2:	e014      	b.n	8006afe <_vfiprintf_r+0x156>
 8006ad4:	eba0 0308 	sub.w	r3, r0, r8
 8006ad8:	fa09 f303 	lsl.w	r3, r9, r3
 8006adc:	4313      	orrs	r3, r2
 8006ade:	9304      	str	r3, [sp, #16]
 8006ae0:	46a2      	mov	sl, r4
 8006ae2:	e7d2      	b.n	8006a8a <_vfiprintf_r+0xe2>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	1d19      	adds	r1, r3, #4
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	9103      	str	r1, [sp, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	bfbb      	ittet	lt
 8006af0:	425b      	neglt	r3, r3
 8006af2:	f042 0202 	orrlt.w	r2, r2, #2
 8006af6:	9307      	strge	r3, [sp, #28]
 8006af8:	9307      	strlt	r3, [sp, #28]
 8006afa:	bfb8      	it	lt
 8006afc:	9204      	strlt	r2, [sp, #16]
 8006afe:	7823      	ldrb	r3, [r4, #0]
 8006b00:	2b2e      	cmp	r3, #46	; 0x2e
 8006b02:	d10c      	bne.n	8006b1e <_vfiprintf_r+0x176>
 8006b04:	7863      	ldrb	r3, [r4, #1]
 8006b06:	2b2a      	cmp	r3, #42	; 0x2a
 8006b08:	d135      	bne.n	8006b76 <_vfiprintf_r+0x1ce>
 8006b0a:	9b03      	ldr	r3, [sp, #12]
 8006b0c:	1d1a      	adds	r2, r3, #4
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	9203      	str	r2, [sp, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bfb8      	it	lt
 8006b16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b1a:	3402      	adds	r4, #2
 8006b1c:	9305      	str	r3, [sp, #20]
 8006b1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c04 <_vfiprintf_r+0x25c>
 8006b22:	7821      	ldrb	r1, [r4, #0]
 8006b24:	2203      	movs	r2, #3
 8006b26:	4650      	mov	r0, sl
 8006b28:	f7f9 fbb2 	bl	8000290 <memchr>
 8006b2c:	b140      	cbz	r0, 8006b40 <_vfiprintf_r+0x198>
 8006b2e:	2340      	movs	r3, #64	; 0x40
 8006b30:	eba0 000a 	sub.w	r0, r0, sl
 8006b34:	fa03 f000 	lsl.w	r0, r3, r0
 8006b38:	9b04      	ldr	r3, [sp, #16]
 8006b3a:	4303      	orrs	r3, r0
 8006b3c:	3401      	adds	r4, #1
 8006b3e:	9304      	str	r3, [sp, #16]
 8006b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b44:	482c      	ldr	r0, [pc, #176]	; (8006bf8 <_vfiprintf_r+0x250>)
 8006b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b4a:	2206      	movs	r2, #6
 8006b4c:	f7f9 fba0 	bl	8000290 <memchr>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d03f      	beq.n	8006bd4 <_vfiprintf_r+0x22c>
 8006b54:	4b29      	ldr	r3, [pc, #164]	; (8006bfc <_vfiprintf_r+0x254>)
 8006b56:	bb1b      	cbnz	r3, 8006ba0 <_vfiprintf_r+0x1f8>
 8006b58:	9b03      	ldr	r3, [sp, #12]
 8006b5a:	3307      	adds	r3, #7
 8006b5c:	f023 0307 	bic.w	r3, r3, #7
 8006b60:	3308      	adds	r3, #8
 8006b62:	9303      	str	r3, [sp, #12]
 8006b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b66:	443b      	add	r3, r7
 8006b68:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6a:	e767      	b.n	8006a3c <_vfiprintf_r+0x94>
 8006b6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b70:	460c      	mov	r4, r1
 8006b72:	2001      	movs	r0, #1
 8006b74:	e7a5      	b.n	8006ac2 <_vfiprintf_r+0x11a>
 8006b76:	2300      	movs	r3, #0
 8006b78:	3401      	adds	r4, #1
 8006b7a:	9305      	str	r3, [sp, #20]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	f04f 0c0a 	mov.w	ip, #10
 8006b82:	4620      	mov	r0, r4
 8006b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b88:	3a30      	subs	r2, #48	; 0x30
 8006b8a:	2a09      	cmp	r2, #9
 8006b8c:	d903      	bls.n	8006b96 <_vfiprintf_r+0x1ee>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0c5      	beq.n	8006b1e <_vfiprintf_r+0x176>
 8006b92:	9105      	str	r1, [sp, #20]
 8006b94:	e7c3      	b.n	8006b1e <_vfiprintf_r+0x176>
 8006b96:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e7f0      	b.n	8006b82 <_vfiprintf_r+0x1da>
 8006ba0:	ab03      	add	r3, sp, #12
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	462a      	mov	r2, r5
 8006ba6:	4b16      	ldr	r3, [pc, #88]	; (8006c00 <_vfiprintf_r+0x258>)
 8006ba8:	a904      	add	r1, sp, #16
 8006baa:	4630      	mov	r0, r6
 8006bac:	f7fc f84c 	bl	8002c48 <_printf_float>
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	1c78      	adds	r0, r7, #1
 8006bb4:	d1d6      	bne.n	8006b64 <_vfiprintf_r+0x1bc>
 8006bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bb8:	07d9      	lsls	r1, r3, #31
 8006bba:	d405      	bmi.n	8006bc8 <_vfiprintf_r+0x220>
 8006bbc:	89ab      	ldrh	r3, [r5, #12]
 8006bbe:	059a      	lsls	r2, r3, #22
 8006bc0:	d402      	bmi.n	8006bc8 <_vfiprintf_r+0x220>
 8006bc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bc4:	f000 faa1 	bl	800710a <__retarget_lock_release_recursive>
 8006bc8:	89ab      	ldrh	r3, [r5, #12]
 8006bca:	065b      	lsls	r3, r3, #25
 8006bcc:	f53f af12 	bmi.w	80069f4 <_vfiprintf_r+0x4c>
 8006bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bd2:	e711      	b.n	80069f8 <_vfiprintf_r+0x50>
 8006bd4:	ab03      	add	r3, sp, #12
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	462a      	mov	r2, r5
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <_vfiprintf_r+0x258>)
 8006bdc:	a904      	add	r1, sp, #16
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7fc fad6 	bl	8003190 <_printf_i>
 8006be4:	e7e4      	b.n	8006bb0 <_vfiprintf_r+0x208>
 8006be6:	bf00      	nop
 8006be8:	0800784c 	.word	0x0800784c
 8006bec:	0800786c 	.word	0x0800786c
 8006bf0:	0800782c 	.word	0x0800782c
 8006bf4:	080077dc 	.word	0x080077dc
 8006bf8:	080077e6 	.word	0x080077e6
 8006bfc:	08002c49 	.word	0x08002c49
 8006c00:	08006985 	.word	0x08006985
 8006c04:	080077e2 	.word	0x080077e2

08006c08 <__swbuf_r>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	460e      	mov	r6, r1
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	4605      	mov	r5, r0
 8006c10:	b118      	cbz	r0, 8006c1a <__swbuf_r+0x12>
 8006c12:	6983      	ldr	r3, [r0, #24]
 8006c14:	b90b      	cbnz	r3, 8006c1a <__swbuf_r+0x12>
 8006c16:	f000 f9d9 	bl	8006fcc <__sinit>
 8006c1a:	4b21      	ldr	r3, [pc, #132]	; (8006ca0 <__swbuf_r+0x98>)
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	d12b      	bne.n	8006c78 <__swbuf_r+0x70>
 8006c20:	686c      	ldr	r4, [r5, #4]
 8006c22:	69a3      	ldr	r3, [r4, #24]
 8006c24:	60a3      	str	r3, [r4, #8]
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	071a      	lsls	r2, r3, #28
 8006c2a:	d52f      	bpl.n	8006c8c <__swbuf_r+0x84>
 8006c2c:	6923      	ldr	r3, [r4, #16]
 8006c2e:	b36b      	cbz	r3, 8006c8c <__swbuf_r+0x84>
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	6820      	ldr	r0, [r4, #0]
 8006c34:	1ac0      	subs	r0, r0, r3
 8006c36:	6963      	ldr	r3, [r4, #20]
 8006c38:	b2f6      	uxtb	r6, r6
 8006c3a:	4283      	cmp	r3, r0
 8006c3c:	4637      	mov	r7, r6
 8006c3e:	dc04      	bgt.n	8006c4a <__swbuf_r+0x42>
 8006c40:	4621      	mov	r1, r4
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 f92e 	bl	8006ea4 <_fflush_r>
 8006c48:	bb30      	cbnz	r0, 8006c98 <__swbuf_r+0x90>
 8006c4a:	68a3      	ldr	r3, [r4, #8]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	60a3      	str	r3, [r4, #8]
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	6022      	str	r2, [r4, #0]
 8006c56:	701e      	strb	r6, [r3, #0]
 8006c58:	6963      	ldr	r3, [r4, #20]
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	4283      	cmp	r3, r0
 8006c5e:	d004      	beq.n	8006c6a <__swbuf_r+0x62>
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	07db      	lsls	r3, r3, #31
 8006c64:	d506      	bpl.n	8006c74 <__swbuf_r+0x6c>
 8006c66:	2e0a      	cmp	r6, #10
 8006c68:	d104      	bne.n	8006c74 <__swbuf_r+0x6c>
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 f919 	bl	8006ea4 <_fflush_r>
 8006c72:	b988      	cbnz	r0, 8006c98 <__swbuf_r+0x90>
 8006c74:	4638      	mov	r0, r7
 8006c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <__swbuf_r+0x9c>)
 8006c7a:	429c      	cmp	r4, r3
 8006c7c:	d101      	bne.n	8006c82 <__swbuf_r+0x7a>
 8006c7e:	68ac      	ldr	r4, [r5, #8]
 8006c80:	e7cf      	b.n	8006c22 <__swbuf_r+0x1a>
 8006c82:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <__swbuf_r+0xa0>)
 8006c84:	429c      	cmp	r4, r3
 8006c86:	bf08      	it	eq
 8006c88:	68ec      	ldreq	r4, [r5, #12]
 8006c8a:	e7ca      	b.n	8006c22 <__swbuf_r+0x1a>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 f80c 	bl	8006cac <__swsetup_r>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d0cb      	beq.n	8006c30 <__swbuf_r+0x28>
 8006c98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006c9c:	e7ea      	b.n	8006c74 <__swbuf_r+0x6c>
 8006c9e:	bf00      	nop
 8006ca0:	0800784c 	.word	0x0800784c
 8006ca4:	0800786c 	.word	0x0800786c
 8006ca8:	0800782c 	.word	0x0800782c

08006cac <__swsetup_r>:
 8006cac:	4b32      	ldr	r3, [pc, #200]	; (8006d78 <__swsetup_r+0xcc>)
 8006cae:	b570      	push	{r4, r5, r6, lr}
 8006cb0:	681d      	ldr	r5, [r3, #0]
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	b125      	cbz	r5, 8006cc2 <__swsetup_r+0x16>
 8006cb8:	69ab      	ldr	r3, [r5, #24]
 8006cba:	b913      	cbnz	r3, 8006cc2 <__swsetup_r+0x16>
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 f985 	bl	8006fcc <__sinit>
 8006cc2:	4b2e      	ldr	r3, [pc, #184]	; (8006d7c <__swsetup_r+0xd0>)
 8006cc4:	429c      	cmp	r4, r3
 8006cc6:	d10f      	bne.n	8006ce8 <__swsetup_r+0x3c>
 8006cc8:	686c      	ldr	r4, [r5, #4]
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cd0:	0719      	lsls	r1, r3, #28
 8006cd2:	d42c      	bmi.n	8006d2e <__swsetup_r+0x82>
 8006cd4:	06dd      	lsls	r5, r3, #27
 8006cd6:	d411      	bmi.n	8006cfc <__swsetup_r+0x50>
 8006cd8:	2309      	movs	r3, #9
 8006cda:	6033      	str	r3, [r6, #0]
 8006cdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ce0:	81a3      	strh	r3, [r4, #12]
 8006ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ce6:	e03e      	b.n	8006d66 <__swsetup_r+0xba>
 8006ce8:	4b25      	ldr	r3, [pc, #148]	; (8006d80 <__swsetup_r+0xd4>)
 8006cea:	429c      	cmp	r4, r3
 8006cec:	d101      	bne.n	8006cf2 <__swsetup_r+0x46>
 8006cee:	68ac      	ldr	r4, [r5, #8]
 8006cf0:	e7eb      	b.n	8006cca <__swsetup_r+0x1e>
 8006cf2:	4b24      	ldr	r3, [pc, #144]	; (8006d84 <__swsetup_r+0xd8>)
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	bf08      	it	eq
 8006cf8:	68ec      	ldreq	r4, [r5, #12]
 8006cfa:	e7e6      	b.n	8006cca <__swsetup_r+0x1e>
 8006cfc:	0758      	lsls	r0, r3, #29
 8006cfe:	d512      	bpl.n	8006d26 <__swsetup_r+0x7a>
 8006d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d02:	b141      	cbz	r1, 8006d16 <__swsetup_r+0x6a>
 8006d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d08:	4299      	cmp	r1, r3
 8006d0a:	d002      	beq.n	8006d12 <__swsetup_r+0x66>
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f7ff fb27 	bl	8006360 <_free_r>
 8006d12:	2300      	movs	r3, #0
 8006d14:	6363      	str	r3, [r4, #52]	; 0x34
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d1c:	81a3      	strh	r3, [r4, #12]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6063      	str	r3, [r4, #4]
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	f043 0308 	orr.w	r3, r3, #8
 8006d2c:	81a3      	strh	r3, [r4, #12]
 8006d2e:	6923      	ldr	r3, [r4, #16]
 8006d30:	b94b      	cbnz	r3, 8006d46 <__swsetup_r+0x9a>
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d3c:	d003      	beq.n	8006d46 <__swsetup_r+0x9a>
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4630      	mov	r0, r6
 8006d42:	f000 fa09 	bl	8007158 <__smakebuf_r>
 8006d46:	89a0      	ldrh	r0, [r4, #12]
 8006d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d4c:	f010 0301 	ands.w	r3, r0, #1
 8006d50:	d00a      	beq.n	8006d68 <__swsetup_r+0xbc>
 8006d52:	2300      	movs	r3, #0
 8006d54:	60a3      	str	r3, [r4, #8]
 8006d56:	6963      	ldr	r3, [r4, #20]
 8006d58:	425b      	negs	r3, r3
 8006d5a:	61a3      	str	r3, [r4, #24]
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	b943      	cbnz	r3, 8006d72 <__swsetup_r+0xc6>
 8006d60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d64:	d1ba      	bne.n	8006cdc <__swsetup_r+0x30>
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	0781      	lsls	r1, r0, #30
 8006d6a:	bf58      	it	pl
 8006d6c:	6963      	ldrpl	r3, [r4, #20]
 8006d6e:	60a3      	str	r3, [r4, #8]
 8006d70:	e7f4      	b.n	8006d5c <__swsetup_r+0xb0>
 8006d72:	2000      	movs	r0, #0
 8006d74:	e7f7      	b.n	8006d66 <__swsetup_r+0xba>
 8006d76:	bf00      	nop
 8006d78:	20000000 	.word	0x20000000
 8006d7c:	0800784c 	.word	0x0800784c
 8006d80:	0800786c 	.word	0x0800786c
 8006d84:	0800782c 	.word	0x0800782c

08006d88 <abort>:
 8006d88:	b508      	push	{r3, lr}
 8006d8a:	2006      	movs	r0, #6
 8006d8c:	f000 fa54 	bl	8007238 <raise>
 8006d90:	2001      	movs	r0, #1
 8006d92:	f7fa f84d 	bl	8000e30 <_exit>
	...

08006d98 <__sflush_r>:
 8006d98:	898a      	ldrh	r2, [r1, #12]
 8006d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9e:	4605      	mov	r5, r0
 8006da0:	0710      	lsls	r0, r2, #28
 8006da2:	460c      	mov	r4, r1
 8006da4:	d458      	bmi.n	8006e58 <__sflush_r+0xc0>
 8006da6:	684b      	ldr	r3, [r1, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	dc05      	bgt.n	8006db8 <__sflush_r+0x20>
 8006dac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	dc02      	bgt.n	8006db8 <__sflush_r+0x20>
 8006db2:	2000      	movs	r0, #0
 8006db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dba:	2e00      	cmp	r6, #0
 8006dbc:	d0f9      	beq.n	8006db2 <__sflush_r+0x1a>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006dc4:	682f      	ldr	r7, [r5, #0]
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	d032      	beq.n	8006e30 <__sflush_r+0x98>
 8006dca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	075a      	lsls	r2, r3, #29
 8006dd0:	d505      	bpl.n	8006dde <__sflush_r+0x46>
 8006dd2:	6863      	ldr	r3, [r4, #4]
 8006dd4:	1ac0      	subs	r0, r0, r3
 8006dd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dd8:	b10b      	cbz	r3, 8006dde <__sflush_r+0x46>
 8006dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ddc:	1ac0      	subs	r0, r0, r3
 8006dde:	2300      	movs	r3, #0
 8006de0:	4602      	mov	r2, r0
 8006de2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006de4:	6a21      	ldr	r1, [r4, #32]
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b0      	blx	r6
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	d106      	bne.n	8006dfe <__sflush_r+0x66>
 8006df0:	6829      	ldr	r1, [r5, #0]
 8006df2:	291d      	cmp	r1, #29
 8006df4:	d82c      	bhi.n	8006e50 <__sflush_r+0xb8>
 8006df6:	4a2a      	ldr	r2, [pc, #168]	; (8006ea0 <__sflush_r+0x108>)
 8006df8:	40ca      	lsrs	r2, r1
 8006dfa:	07d6      	lsls	r6, r2, #31
 8006dfc:	d528      	bpl.n	8006e50 <__sflush_r+0xb8>
 8006dfe:	2200      	movs	r2, #0
 8006e00:	6062      	str	r2, [r4, #4]
 8006e02:	04d9      	lsls	r1, r3, #19
 8006e04:	6922      	ldr	r2, [r4, #16]
 8006e06:	6022      	str	r2, [r4, #0]
 8006e08:	d504      	bpl.n	8006e14 <__sflush_r+0x7c>
 8006e0a:	1c42      	adds	r2, r0, #1
 8006e0c:	d101      	bne.n	8006e12 <__sflush_r+0x7a>
 8006e0e:	682b      	ldr	r3, [r5, #0]
 8006e10:	b903      	cbnz	r3, 8006e14 <__sflush_r+0x7c>
 8006e12:	6560      	str	r0, [r4, #84]	; 0x54
 8006e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e16:	602f      	str	r7, [r5, #0]
 8006e18:	2900      	cmp	r1, #0
 8006e1a:	d0ca      	beq.n	8006db2 <__sflush_r+0x1a>
 8006e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e20:	4299      	cmp	r1, r3
 8006e22:	d002      	beq.n	8006e2a <__sflush_r+0x92>
 8006e24:	4628      	mov	r0, r5
 8006e26:	f7ff fa9b 	bl	8006360 <_free_r>
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	6360      	str	r0, [r4, #52]	; 0x34
 8006e2e:	e7c1      	b.n	8006db4 <__sflush_r+0x1c>
 8006e30:	6a21      	ldr	r1, [r4, #32]
 8006e32:	2301      	movs	r3, #1
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b0      	blx	r6
 8006e38:	1c41      	adds	r1, r0, #1
 8006e3a:	d1c7      	bne.n	8006dcc <__sflush_r+0x34>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0c4      	beq.n	8006dcc <__sflush_r+0x34>
 8006e42:	2b1d      	cmp	r3, #29
 8006e44:	d001      	beq.n	8006e4a <__sflush_r+0xb2>
 8006e46:	2b16      	cmp	r3, #22
 8006e48:	d101      	bne.n	8006e4e <__sflush_r+0xb6>
 8006e4a:	602f      	str	r7, [r5, #0]
 8006e4c:	e7b1      	b.n	8006db2 <__sflush_r+0x1a>
 8006e4e:	89a3      	ldrh	r3, [r4, #12]
 8006e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e54:	81a3      	strh	r3, [r4, #12]
 8006e56:	e7ad      	b.n	8006db4 <__sflush_r+0x1c>
 8006e58:	690f      	ldr	r7, [r1, #16]
 8006e5a:	2f00      	cmp	r7, #0
 8006e5c:	d0a9      	beq.n	8006db2 <__sflush_r+0x1a>
 8006e5e:	0793      	lsls	r3, r2, #30
 8006e60:	680e      	ldr	r6, [r1, #0]
 8006e62:	bf08      	it	eq
 8006e64:	694b      	ldreq	r3, [r1, #20]
 8006e66:	600f      	str	r7, [r1, #0]
 8006e68:	bf18      	it	ne
 8006e6a:	2300      	movne	r3, #0
 8006e6c:	eba6 0807 	sub.w	r8, r6, r7
 8006e70:	608b      	str	r3, [r1, #8]
 8006e72:	f1b8 0f00 	cmp.w	r8, #0
 8006e76:	dd9c      	ble.n	8006db2 <__sflush_r+0x1a>
 8006e78:	6a21      	ldr	r1, [r4, #32]
 8006e7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e7c:	4643      	mov	r3, r8
 8006e7e:	463a      	mov	r2, r7
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b0      	blx	r6
 8006e84:	2800      	cmp	r0, #0
 8006e86:	dc06      	bgt.n	8006e96 <__sflush_r+0xfe>
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e8e:	81a3      	strh	r3, [r4, #12]
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e94:	e78e      	b.n	8006db4 <__sflush_r+0x1c>
 8006e96:	4407      	add	r7, r0
 8006e98:	eba8 0800 	sub.w	r8, r8, r0
 8006e9c:	e7e9      	b.n	8006e72 <__sflush_r+0xda>
 8006e9e:	bf00      	nop
 8006ea0:	20400001 	.word	0x20400001

08006ea4 <_fflush_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	690b      	ldr	r3, [r1, #16]
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	460c      	mov	r4, r1
 8006eac:	b913      	cbnz	r3, 8006eb4 <_fflush_r+0x10>
 8006eae:	2500      	movs	r5, #0
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	b118      	cbz	r0, 8006ebe <_fflush_r+0x1a>
 8006eb6:	6983      	ldr	r3, [r0, #24]
 8006eb8:	b90b      	cbnz	r3, 8006ebe <_fflush_r+0x1a>
 8006eba:	f000 f887 	bl	8006fcc <__sinit>
 8006ebe:	4b14      	ldr	r3, [pc, #80]	; (8006f10 <_fflush_r+0x6c>)
 8006ec0:	429c      	cmp	r4, r3
 8006ec2:	d11b      	bne.n	8006efc <_fflush_r+0x58>
 8006ec4:	686c      	ldr	r4, [r5, #4]
 8006ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0ef      	beq.n	8006eae <_fflush_r+0xa>
 8006ece:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ed0:	07d0      	lsls	r0, r2, #31
 8006ed2:	d404      	bmi.n	8006ede <_fflush_r+0x3a>
 8006ed4:	0599      	lsls	r1, r3, #22
 8006ed6:	d402      	bmi.n	8006ede <_fflush_r+0x3a>
 8006ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eda:	f000 f915 	bl	8007108 <__retarget_lock_acquire_recursive>
 8006ede:	4628      	mov	r0, r5
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	f7ff ff59 	bl	8006d98 <__sflush_r>
 8006ee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ee8:	07da      	lsls	r2, r3, #31
 8006eea:	4605      	mov	r5, r0
 8006eec:	d4e0      	bmi.n	8006eb0 <_fflush_r+0xc>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	059b      	lsls	r3, r3, #22
 8006ef2:	d4dd      	bmi.n	8006eb0 <_fflush_r+0xc>
 8006ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ef6:	f000 f908 	bl	800710a <__retarget_lock_release_recursive>
 8006efa:	e7d9      	b.n	8006eb0 <_fflush_r+0xc>
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <_fflush_r+0x70>)
 8006efe:	429c      	cmp	r4, r3
 8006f00:	d101      	bne.n	8006f06 <_fflush_r+0x62>
 8006f02:	68ac      	ldr	r4, [r5, #8]
 8006f04:	e7df      	b.n	8006ec6 <_fflush_r+0x22>
 8006f06:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <_fflush_r+0x74>)
 8006f08:	429c      	cmp	r4, r3
 8006f0a:	bf08      	it	eq
 8006f0c:	68ec      	ldreq	r4, [r5, #12]
 8006f0e:	e7da      	b.n	8006ec6 <_fflush_r+0x22>
 8006f10:	0800784c 	.word	0x0800784c
 8006f14:	0800786c 	.word	0x0800786c
 8006f18:	0800782c 	.word	0x0800782c

08006f1c <std>:
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	b510      	push	{r4, lr}
 8006f20:	4604      	mov	r4, r0
 8006f22:	e9c0 3300 	strd	r3, r3, [r0]
 8006f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f2a:	6083      	str	r3, [r0, #8]
 8006f2c:	8181      	strh	r1, [r0, #12]
 8006f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f30:	81c2      	strh	r2, [r0, #14]
 8006f32:	6183      	str	r3, [r0, #24]
 8006f34:	4619      	mov	r1, r3
 8006f36:	2208      	movs	r2, #8
 8006f38:	305c      	adds	r0, #92	; 0x5c
 8006f3a:	f7fb fddd 	bl	8002af8 <memset>
 8006f3e:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <std+0x38>)
 8006f40:	6263      	str	r3, [r4, #36]	; 0x24
 8006f42:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <std+0x3c>)
 8006f44:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f46:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <std+0x40>)
 8006f48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f4a:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <std+0x44>)
 8006f4c:	6224      	str	r4, [r4, #32]
 8006f4e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	bf00      	nop
 8006f54:	08007271 	.word	0x08007271
 8006f58:	08007293 	.word	0x08007293
 8006f5c:	080072cb 	.word	0x080072cb
 8006f60:	080072ef 	.word	0x080072ef

08006f64 <_cleanup_r>:
 8006f64:	4901      	ldr	r1, [pc, #4]	; (8006f6c <_cleanup_r+0x8>)
 8006f66:	f000 b8af 	b.w	80070c8 <_fwalk_reent>
 8006f6a:	bf00      	nop
 8006f6c:	08006ea5 	.word	0x08006ea5

08006f70 <__sfmoreglue>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	2268      	movs	r2, #104	; 0x68
 8006f74:	1e4d      	subs	r5, r1, #1
 8006f76:	4355      	muls	r5, r2
 8006f78:	460e      	mov	r6, r1
 8006f7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f7e:	f7ff fa5b 	bl	8006438 <_malloc_r>
 8006f82:	4604      	mov	r4, r0
 8006f84:	b140      	cbz	r0, 8006f98 <__sfmoreglue+0x28>
 8006f86:	2100      	movs	r1, #0
 8006f88:	e9c0 1600 	strd	r1, r6, [r0]
 8006f8c:	300c      	adds	r0, #12
 8006f8e:	60a0      	str	r0, [r4, #8]
 8006f90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f94:	f7fb fdb0 	bl	8002af8 <memset>
 8006f98:	4620      	mov	r0, r4
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}

08006f9c <__sfp_lock_acquire>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <__sfp_lock_acquire+0x8>)
 8006f9e:	f000 b8b3 	b.w	8007108 <__retarget_lock_acquire_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	20000871 	.word	0x20000871

08006fa8 <__sfp_lock_release>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__sfp_lock_release+0x8>)
 8006faa:	f000 b8ae 	b.w	800710a <__retarget_lock_release_recursive>
 8006fae:	bf00      	nop
 8006fb0:	20000871 	.word	0x20000871

08006fb4 <__sinit_lock_acquire>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	; (8006fbc <__sinit_lock_acquire+0x8>)
 8006fb6:	f000 b8a7 	b.w	8007108 <__retarget_lock_acquire_recursive>
 8006fba:	bf00      	nop
 8006fbc:	20000872 	.word	0x20000872

08006fc0 <__sinit_lock_release>:
 8006fc0:	4801      	ldr	r0, [pc, #4]	; (8006fc8 <__sinit_lock_release+0x8>)
 8006fc2:	f000 b8a2 	b.w	800710a <__retarget_lock_release_recursive>
 8006fc6:	bf00      	nop
 8006fc8:	20000872 	.word	0x20000872

08006fcc <__sinit>:
 8006fcc:	b510      	push	{r4, lr}
 8006fce:	4604      	mov	r4, r0
 8006fd0:	f7ff fff0 	bl	8006fb4 <__sinit_lock_acquire>
 8006fd4:	69a3      	ldr	r3, [r4, #24]
 8006fd6:	b11b      	cbz	r3, 8006fe0 <__sinit+0x14>
 8006fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fdc:	f7ff bff0 	b.w	8006fc0 <__sinit_lock_release>
 8006fe0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fe4:	6523      	str	r3, [r4, #80]	; 0x50
 8006fe6:	4b13      	ldr	r3, [pc, #76]	; (8007034 <__sinit+0x68>)
 8006fe8:	4a13      	ldr	r2, [pc, #76]	; (8007038 <__sinit+0x6c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fee:	42a3      	cmp	r3, r4
 8006ff0:	bf04      	itt	eq
 8006ff2:	2301      	moveq	r3, #1
 8006ff4:	61a3      	streq	r3, [r4, #24]
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f000 f820 	bl	800703c <__sfp>
 8006ffc:	6060      	str	r0, [r4, #4]
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 f81c 	bl	800703c <__sfp>
 8007004:	60a0      	str	r0, [r4, #8]
 8007006:	4620      	mov	r0, r4
 8007008:	f000 f818 	bl	800703c <__sfp>
 800700c:	2200      	movs	r2, #0
 800700e:	60e0      	str	r0, [r4, #12]
 8007010:	2104      	movs	r1, #4
 8007012:	6860      	ldr	r0, [r4, #4]
 8007014:	f7ff ff82 	bl	8006f1c <std>
 8007018:	68a0      	ldr	r0, [r4, #8]
 800701a:	2201      	movs	r2, #1
 800701c:	2109      	movs	r1, #9
 800701e:	f7ff ff7d 	bl	8006f1c <std>
 8007022:	68e0      	ldr	r0, [r4, #12]
 8007024:	2202      	movs	r2, #2
 8007026:	2112      	movs	r1, #18
 8007028:	f7ff ff78 	bl	8006f1c <std>
 800702c:	2301      	movs	r3, #1
 800702e:	61a3      	str	r3, [r4, #24]
 8007030:	e7d2      	b.n	8006fd8 <__sinit+0xc>
 8007032:	bf00      	nop
 8007034:	080073e4 	.word	0x080073e4
 8007038:	08006f65 	.word	0x08006f65

0800703c <__sfp>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	4607      	mov	r7, r0
 8007040:	f7ff ffac 	bl	8006f9c <__sfp_lock_acquire>
 8007044:	4b1e      	ldr	r3, [pc, #120]	; (80070c0 <__sfp+0x84>)
 8007046:	681e      	ldr	r6, [r3, #0]
 8007048:	69b3      	ldr	r3, [r6, #24]
 800704a:	b913      	cbnz	r3, 8007052 <__sfp+0x16>
 800704c:	4630      	mov	r0, r6
 800704e:	f7ff ffbd 	bl	8006fcc <__sinit>
 8007052:	3648      	adds	r6, #72	; 0x48
 8007054:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007058:	3b01      	subs	r3, #1
 800705a:	d503      	bpl.n	8007064 <__sfp+0x28>
 800705c:	6833      	ldr	r3, [r6, #0]
 800705e:	b30b      	cbz	r3, 80070a4 <__sfp+0x68>
 8007060:	6836      	ldr	r6, [r6, #0]
 8007062:	e7f7      	b.n	8007054 <__sfp+0x18>
 8007064:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007068:	b9d5      	cbnz	r5, 80070a0 <__sfp+0x64>
 800706a:	4b16      	ldr	r3, [pc, #88]	; (80070c4 <__sfp+0x88>)
 800706c:	60e3      	str	r3, [r4, #12]
 800706e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007072:	6665      	str	r5, [r4, #100]	; 0x64
 8007074:	f000 f847 	bl	8007106 <__retarget_lock_init_recursive>
 8007078:	f7ff ff96 	bl	8006fa8 <__sfp_lock_release>
 800707c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007080:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007084:	6025      	str	r5, [r4, #0]
 8007086:	61a5      	str	r5, [r4, #24]
 8007088:	2208      	movs	r2, #8
 800708a:	4629      	mov	r1, r5
 800708c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007090:	f7fb fd32 	bl	8002af8 <memset>
 8007094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800709c:	4620      	mov	r0, r4
 800709e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a0:	3468      	adds	r4, #104	; 0x68
 80070a2:	e7d9      	b.n	8007058 <__sfp+0x1c>
 80070a4:	2104      	movs	r1, #4
 80070a6:	4638      	mov	r0, r7
 80070a8:	f7ff ff62 	bl	8006f70 <__sfmoreglue>
 80070ac:	4604      	mov	r4, r0
 80070ae:	6030      	str	r0, [r6, #0]
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d1d5      	bne.n	8007060 <__sfp+0x24>
 80070b4:	f7ff ff78 	bl	8006fa8 <__sfp_lock_release>
 80070b8:	230c      	movs	r3, #12
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	e7ee      	b.n	800709c <__sfp+0x60>
 80070be:	bf00      	nop
 80070c0:	080073e4 	.word	0x080073e4
 80070c4:	ffff0001 	.word	0xffff0001

080070c8 <_fwalk_reent>:
 80070c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070cc:	4606      	mov	r6, r0
 80070ce:	4688      	mov	r8, r1
 80070d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070d4:	2700      	movs	r7, #0
 80070d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070da:	f1b9 0901 	subs.w	r9, r9, #1
 80070de:	d505      	bpl.n	80070ec <_fwalk_reent+0x24>
 80070e0:	6824      	ldr	r4, [r4, #0]
 80070e2:	2c00      	cmp	r4, #0
 80070e4:	d1f7      	bne.n	80070d6 <_fwalk_reent+0xe>
 80070e6:	4638      	mov	r0, r7
 80070e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ec:	89ab      	ldrh	r3, [r5, #12]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d907      	bls.n	8007102 <_fwalk_reent+0x3a>
 80070f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070f6:	3301      	adds	r3, #1
 80070f8:	d003      	beq.n	8007102 <_fwalk_reent+0x3a>
 80070fa:	4629      	mov	r1, r5
 80070fc:	4630      	mov	r0, r6
 80070fe:	47c0      	blx	r8
 8007100:	4307      	orrs	r7, r0
 8007102:	3568      	adds	r5, #104	; 0x68
 8007104:	e7e9      	b.n	80070da <_fwalk_reent+0x12>

08007106 <__retarget_lock_init_recursive>:
 8007106:	4770      	bx	lr

08007108 <__retarget_lock_acquire_recursive>:
 8007108:	4770      	bx	lr

0800710a <__retarget_lock_release_recursive>:
 800710a:	4770      	bx	lr

0800710c <__swhatbuf_r>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	460e      	mov	r6, r1
 8007110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007114:	2900      	cmp	r1, #0
 8007116:	b096      	sub	sp, #88	; 0x58
 8007118:	4614      	mov	r4, r2
 800711a:	461d      	mov	r5, r3
 800711c:	da08      	bge.n	8007130 <__swhatbuf_r+0x24>
 800711e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	602a      	str	r2, [r5, #0]
 8007126:	061a      	lsls	r2, r3, #24
 8007128:	d410      	bmi.n	800714c <__swhatbuf_r+0x40>
 800712a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800712e:	e00e      	b.n	800714e <__swhatbuf_r+0x42>
 8007130:	466a      	mov	r2, sp
 8007132:	f000 f8f1 	bl	8007318 <_fstat_r>
 8007136:	2800      	cmp	r0, #0
 8007138:	dbf1      	blt.n	800711e <__swhatbuf_r+0x12>
 800713a:	9a01      	ldr	r2, [sp, #4]
 800713c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007140:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007144:	425a      	negs	r2, r3
 8007146:	415a      	adcs	r2, r3
 8007148:	602a      	str	r2, [r5, #0]
 800714a:	e7ee      	b.n	800712a <__swhatbuf_r+0x1e>
 800714c:	2340      	movs	r3, #64	; 0x40
 800714e:	2000      	movs	r0, #0
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	b016      	add	sp, #88	; 0x58
 8007154:	bd70      	pop	{r4, r5, r6, pc}
	...

08007158 <__smakebuf_r>:
 8007158:	898b      	ldrh	r3, [r1, #12]
 800715a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800715c:	079d      	lsls	r5, r3, #30
 800715e:	4606      	mov	r6, r0
 8007160:	460c      	mov	r4, r1
 8007162:	d507      	bpl.n	8007174 <__smakebuf_r+0x1c>
 8007164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	6123      	str	r3, [r4, #16]
 800716c:	2301      	movs	r3, #1
 800716e:	6163      	str	r3, [r4, #20]
 8007170:	b002      	add	sp, #8
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	ab01      	add	r3, sp, #4
 8007176:	466a      	mov	r2, sp
 8007178:	f7ff ffc8 	bl	800710c <__swhatbuf_r>
 800717c:	9900      	ldr	r1, [sp, #0]
 800717e:	4605      	mov	r5, r0
 8007180:	4630      	mov	r0, r6
 8007182:	f7ff f959 	bl	8006438 <_malloc_r>
 8007186:	b948      	cbnz	r0, 800719c <__smakebuf_r+0x44>
 8007188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800718c:	059a      	lsls	r2, r3, #22
 800718e:	d4ef      	bmi.n	8007170 <__smakebuf_r+0x18>
 8007190:	f023 0303 	bic.w	r3, r3, #3
 8007194:	f043 0302 	orr.w	r3, r3, #2
 8007198:	81a3      	strh	r3, [r4, #12]
 800719a:	e7e3      	b.n	8007164 <__smakebuf_r+0xc>
 800719c:	4b0d      	ldr	r3, [pc, #52]	; (80071d4 <__smakebuf_r+0x7c>)
 800719e:	62b3      	str	r3, [r6, #40]	; 0x28
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	6020      	str	r0, [r4, #0]
 80071a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a8:	81a3      	strh	r3, [r4, #12]
 80071aa:	9b00      	ldr	r3, [sp, #0]
 80071ac:	6163      	str	r3, [r4, #20]
 80071ae:	9b01      	ldr	r3, [sp, #4]
 80071b0:	6120      	str	r0, [r4, #16]
 80071b2:	b15b      	cbz	r3, 80071cc <__smakebuf_r+0x74>
 80071b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071b8:	4630      	mov	r0, r6
 80071ba:	f000 f8bf 	bl	800733c <_isatty_r>
 80071be:	b128      	cbz	r0, 80071cc <__smakebuf_r+0x74>
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	f023 0303 	bic.w	r3, r3, #3
 80071c6:	f043 0301 	orr.w	r3, r3, #1
 80071ca:	81a3      	strh	r3, [r4, #12]
 80071cc:	89a0      	ldrh	r0, [r4, #12]
 80071ce:	4305      	orrs	r5, r0
 80071d0:	81a5      	strh	r5, [r4, #12]
 80071d2:	e7cd      	b.n	8007170 <__smakebuf_r+0x18>
 80071d4:	08006f65 	.word	0x08006f65

080071d8 <_malloc_usable_size_r>:
 80071d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071dc:	1f18      	subs	r0, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bfbc      	itt	lt
 80071e2:	580b      	ldrlt	r3, [r1, r0]
 80071e4:	18c0      	addlt	r0, r0, r3
 80071e6:	4770      	bx	lr

080071e8 <_raise_r>:
 80071e8:	291f      	cmp	r1, #31
 80071ea:	b538      	push	{r3, r4, r5, lr}
 80071ec:	4604      	mov	r4, r0
 80071ee:	460d      	mov	r5, r1
 80071f0:	d904      	bls.n	80071fc <_raise_r+0x14>
 80071f2:	2316      	movs	r3, #22
 80071f4:	6003      	str	r3, [r0, #0]
 80071f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071fe:	b112      	cbz	r2, 8007206 <_raise_r+0x1e>
 8007200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007204:	b94b      	cbnz	r3, 800721a <_raise_r+0x32>
 8007206:	4620      	mov	r0, r4
 8007208:	f000 f830 	bl	800726c <_getpid_r>
 800720c:	462a      	mov	r2, r5
 800720e:	4601      	mov	r1, r0
 8007210:	4620      	mov	r0, r4
 8007212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007216:	f000 b817 	b.w	8007248 <_kill_r>
 800721a:	2b01      	cmp	r3, #1
 800721c:	d00a      	beq.n	8007234 <_raise_r+0x4c>
 800721e:	1c59      	adds	r1, r3, #1
 8007220:	d103      	bne.n	800722a <_raise_r+0x42>
 8007222:	2316      	movs	r3, #22
 8007224:	6003      	str	r3, [r0, #0]
 8007226:	2001      	movs	r0, #1
 8007228:	e7e7      	b.n	80071fa <_raise_r+0x12>
 800722a:	2400      	movs	r4, #0
 800722c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007230:	4628      	mov	r0, r5
 8007232:	4798      	blx	r3
 8007234:	2000      	movs	r0, #0
 8007236:	e7e0      	b.n	80071fa <_raise_r+0x12>

08007238 <raise>:
 8007238:	4b02      	ldr	r3, [pc, #8]	; (8007244 <raise+0xc>)
 800723a:	4601      	mov	r1, r0
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	f7ff bfd3 	b.w	80071e8 <_raise_r>
 8007242:	bf00      	nop
 8007244:	20000000 	.word	0x20000000

08007248 <_kill_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d07      	ldr	r5, [pc, #28]	; (8007268 <_kill_r+0x20>)
 800724c:	2300      	movs	r3, #0
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	f7f9 fddb 	bl	8000e10 <_kill>
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	d102      	bne.n	8007264 <_kill_r+0x1c>
 800725e:	682b      	ldr	r3, [r5, #0]
 8007260:	b103      	cbz	r3, 8007264 <_kill_r+0x1c>
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	bd38      	pop	{r3, r4, r5, pc}
 8007266:	bf00      	nop
 8007268:	2000086c 	.word	0x2000086c

0800726c <_getpid_r>:
 800726c:	f7f9 bdc8 	b.w	8000e00 <_getpid>

08007270 <__sread>:
 8007270:	b510      	push	{r4, lr}
 8007272:	460c      	mov	r4, r1
 8007274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007278:	f000 f882 	bl	8007380 <_read_r>
 800727c:	2800      	cmp	r0, #0
 800727e:	bfab      	itete	ge
 8007280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007282:	89a3      	ldrhlt	r3, [r4, #12]
 8007284:	181b      	addge	r3, r3, r0
 8007286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800728a:	bfac      	ite	ge
 800728c:	6563      	strge	r3, [r4, #84]	; 0x54
 800728e:	81a3      	strhlt	r3, [r4, #12]
 8007290:	bd10      	pop	{r4, pc}

08007292 <__swrite>:
 8007292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007296:	461f      	mov	r7, r3
 8007298:	898b      	ldrh	r3, [r1, #12]
 800729a:	05db      	lsls	r3, r3, #23
 800729c:	4605      	mov	r5, r0
 800729e:	460c      	mov	r4, r1
 80072a0:	4616      	mov	r6, r2
 80072a2:	d505      	bpl.n	80072b0 <__swrite+0x1e>
 80072a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a8:	2302      	movs	r3, #2
 80072aa:	2200      	movs	r2, #0
 80072ac:	f000 f856 	bl	800735c <_lseek_r>
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	4632      	mov	r2, r6
 80072be:	463b      	mov	r3, r7
 80072c0:	4628      	mov	r0, r5
 80072c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072c6:	f7fb b963 	b.w	8002590 <_write_r>

080072ca <__sseek>:
 80072ca:	b510      	push	{r4, lr}
 80072cc:	460c      	mov	r4, r1
 80072ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d2:	f000 f843 	bl	800735c <_lseek_r>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	bf15      	itete	ne
 80072dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80072de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072e6:	81a3      	strheq	r3, [r4, #12]
 80072e8:	bf18      	it	ne
 80072ea:	81a3      	strhne	r3, [r4, #12]
 80072ec:	bd10      	pop	{r4, pc}

080072ee <__sclose>:
 80072ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f2:	f000 b801 	b.w	80072f8 <_close_r>
	...

080072f8 <_close_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4d06      	ldr	r5, [pc, #24]	; (8007314 <_close_r+0x1c>)
 80072fc:	2300      	movs	r3, #0
 80072fe:	4604      	mov	r4, r0
 8007300:	4608      	mov	r0, r1
 8007302:	602b      	str	r3, [r5, #0]
 8007304:	f7f9 fdbb 	bl	8000e7e <_close>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_close_r+0x1a>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	b103      	cbz	r3, 8007312 <_close_r+0x1a>
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	2000086c 	.word	0x2000086c

08007318 <_fstat_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4d07      	ldr	r5, [pc, #28]	; (8007338 <_fstat_r+0x20>)
 800731c:	2300      	movs	r3, #0
 800731e:	4604      	mov	r4, r0
 8007320:	4608      	mov	r0, r1
 8007322:	4611      	mov	r1, r2
 8007324:	602b      	str	r3, [r5, #0]
 8007326:	f7f9 fdb6 	bl	8000e96 <_fstat>
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	d102      	bne.n	8007334 <_fstat_r+0x1c>
 800732e:	682b      	ldr	r3, [r5, #0]
 8007330:	b103      	cbz	r3, 8007334 <_fstat_r+0x1c>
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	bd38      	pop	{r3, r4, r5, pc}
 8007336:	bf00      	nop
 8007338:	2000086c 	.word	0x2000086c

0800733c <_isatty_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4d06      	ldr	r5, [pc, #24]	; (8007358 <_isatty_r+0x1c>)
 8007340:	2300      	movs	r3, #0
 8007342:	4604      	mov	r4, r0
 8007344:	4608      	mov	r0, r1
 8007346:	602b      	str	r3, [r5, #0]
 8007348:	f7f9 fdb5 	bl	8000eb6 <_isatty>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	d102      	bne.n	8007356 <_isatty_r+0x1a>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	b103      	cbz	r3, 8007356 <_isatty_r+0x1a>
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	bd38      	pop	{r3, r4, r5, pc}
 8007358:	2000086c 	.word	0x2000086c

0800735c <_lseek_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4d07      	ldr	r5, [pc, #28]	; (800737c <_lseek_r+0x20>)
 8007360:	4604      	mov	r4, r0
 8007362:	4608      	mov	r0, r1
 8007364:	4611      	mov	r1, r2
 8007366:	2200      	movs	r2, #0
 8007368:	602a      	str	r2, [r5, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	f7f9 fdae 	bl	8000ecc <_lseek>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_lseek_r+0x1e>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_lseek_r+0x1e>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	2000086c 	.word	0x2000086c

08007380 <_read_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d07      	ldr	r5, [pc, #28]	; (80073a0 <_read_r+0x20>)
 8007384:	4604      	mov	r4, r0
 8007386:	4608      	mov	r0, r1
 8007388:	4611      	mov	r1, r2
 800738a:	2200      	movs	r2, #0
 800738c:	602a      	str	r2, [r5, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	f7f9 fd58 	bl	8000e44 <_read>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d102      	bne.n	800739e <_read_r+0x1e>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	b103      	cbz	r3, 800739e <_read_r+0x1e>
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	2000086c 	.word	0x2000086c

080073a4 <_init>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr

080073b0 <_fini>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr
